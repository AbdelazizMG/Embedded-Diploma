
Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003212  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008a  00800060  00003212  000032a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  008000ea  008000ea  00003330  2**0
                  ALLOC
  3 .stab         000031c8  00000000  00000000  00003330  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000187c  00000000  00000000  000064f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008024  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009c6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ab58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b908  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ba68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bcf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c4c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 2d 0a 	jmp	0x145a	; 0x145a <__vector_3>
      10:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 94 09 	jmp	0x1328	; 0x1328 <__vector_6>
      1c:	0c 94 c7 09 	jmp	0x138e	; 0x138e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e1       	ldi	r30, 0x12	; 18
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3e       	cpi	r26, 0xEA	; 234
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa ee       	ldi	r26, 0xEA	; 234
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 30       	cpi	r26, 0x0B	; 11
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 39 18 	call	0x3072	; 0x3072 <main>
      8a:	0c 94 07 19 	jmp	0x320e	; 0x320e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8b 18 	jmp	0x3116	; 0x3116 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 ed       	ldi	r26, 0xD2	; 210
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a7 18 	jmp	0x314e	; 0x314e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 97 18 	jmp	0x312e	; 0x312e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b3 18 	jmp	0x3166	; 0x3166 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 97 18 	jmp	0x312e	; 0x312e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b3 18 	jmp	0x3166	; 0x3166 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8b 18 	jmp	0x3116	; 0x3116 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	82 ed       	ldi	r24, 0xD2	; 210
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a7 18 	jmp	0x314e	; 0x314e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 97 18 	jmp	0x312e	; 0x312e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b3 18 	jmp	0x3166	; 0x3166 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 97 18 	jmp	0x312e	; 0x312e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b3 18 	jmp	0x3166	; 0x3166 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 97 18 	jmp	0x312e	; 0x312e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b3 18 	jmp	0x3166	; 0x3166 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 9b 18 	jmp	0x3136	; 0x3136 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b7 18 	jmp	0x316e	; 0x316e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <BUZZER_init>:
* Return value:       None
* Description:        Define buzzer pin as output pin
*                     Saves port and pin in global variables defined above
********************************************************************************/
void BUZZER_init(uint8 port , uint8 pin)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <BUZZER_init+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	89 83       	std	Y+1, r24	; 0x01
     b52:	6a 83       	std	Y+2, r22	; 0x02
	/*User Error*/
    if( port > 3 || pin > 7 )
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	84 30       	cpi	r24, 0x04	; 4
     b58:	70 f4       	brcc	.+28     	; 0xb76 <BUZZER_init+0x30>
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	58 f4       	brcc	.+22     	; 0xb76 <BUZZER_init+0x30>

    }
    else
    {
       /*Setup Pin direction as output pin*/
       GPIO_setupPinDirection(port, pin, PIN_OUTPUT);
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	6a 81       	ldd	r22, Y+2	; 0x02
     b64:	41 e0       	ldi	r20, 0x01	; 1
     b66:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <GPIO_setupPinDirection>

       /*Saves the port and pin in global variables to be used in functions below*/
       g_buzzer_port = port;
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	80 93 ea 00 	sts	0x00EA, r24
       g_buzzer_pin = pin;
     b70:	8a 81       	ldd	r24, Y+2	; 0x02
     b72:	80 93 eb 00 	sts	0x00EB, r24
    }
}
     b76:	0f 90       	pop	r0
     b78:	0f 90       	pop	r0
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <BUZZER_ON>:
* Parameters (out):   None
* Return value:       None
* Description:        Make The Buzzer Beebs
********************************************************************************/
void BUZZER_ON(void)
{
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
   /*Make the Buzzer Beebs*/
   GPIO_writePin(g_buzzer_port, g_buzzer_pin, LOGIC_HIGH);
     b88:	80 91 ea 00 	lds	r24, 0x00EA
     b8c:	90 91 eb 00 	lds	r25, 0x00EB
     b90:	69 2f       	mov	r22, r25
     b92:	41 e0       	ldi	r20, 0x01	; 1
     b94:	0e 94 43 10 	call	0x2086	; 0x2086 <GPIO_writePin>
}
     b98:	cf 91       	pop	r28
     b9a:	df 91       	pop	r29
     b9c:	08 95       	ret

00000b9e <BUZZER_OFF>:
* Parameters (out):   None
* Return value:       None
* Description:        Make The Buzzer Stop
********************************************************************************/
void BUZZER_OFF(void)
{
     b9e:	df 93       	push	r29
     ba0:	cf 93       	push	r28
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
	/*Make the Buzzer Stops*/
	 GPIO_writePin(g_buzzer_port, g_buzzer_pin, LOGIC_LOW);
     ba6:	80 91 ea 00 	lds	r24, 0x00EA
     baa:	90 91 eb 00 	lds	r25, 0x00EB
     bae:	69 2f       	mov	r22, r25
     bb0:	40 e0       	ldi	r20, 0x00	; 0
     bb2:	0e 94 43 10 	call	0x2086	; 0x2086 <GPIO_writePin>
}
     bb6:	cf 91       	pop	r28
     bb8:	df 91       	pop	r29
     bba:	08 95       	ret

00000bbc <OPERATION_EnterPassword>:
* Parameters (out):   None
* Return value:       None
* Description:        Ask user to enter the password
********************************************************************************/
void OPERATION_EnterPassword(void)
{
     bbc:	df 93       	push	r29
     bbe:	cf 93       	push	r28
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
     bc4:	60 97       	sbiw	r28, 0x10	; 16
     bc6:	0f b6       	in	r0, 0x3f	; 63
     bc8:	f8 94       	cli
     bca:	de bf       	out	0x3e, r29	; 62
     bcc:	0f be       	out	0x3f, r0	; 63
     bce:	cd bf       	out	0x3d, r28	; 61
	/*Clear Screen from prvious operation*/
	LCD_clearScreen();
     bd0:	0e 94 2f 18 	call	0x305e	; 0x305e <LCD_clearScreen>

   /*Variable to hold keypadd press*/
	uint8 key1;

   /*counter for while loop*/
    uint8 counter = 0;
     bd4:	1f 86       	std	Y+15, r1	; 0x0f

   /*Actual Operation*/
   LCD_displayString("Enter Password:");
     bd6:	80 e6       	ldi	r24, 0x60	; 96
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	0e 94 88 17 	call	0x2f10	; 0x2f10 <LCD_displayString>
   LCD_moveCursor(1, 0);
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	60 e0       	ldi	r22, 0x00	; 0
     be2:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <LCD_moveCursor>
     be6:	85 c0       	rjmp	.+266    	; 0xcf2 <OPERATION_EnterPassword+0x136>

   while ( counter < 5)
   {
	   /*Get Keypress from the user*/
	   key1 = KEYPAD_getPressedKey();
     be8:	0e 94 84 12 	call	0x2508	; 0x2508 <KEYPAD_getPressedKey>
     bec:	88 8b       	std	Y+16, r24	; 0x10

	   /*Store keypress in the array*/
	   g_Password_Entry1[counter]=key1;
     bee:	8f 85       	ldd	r24, Y+15	; 0x0f
     bf0:	88 2f       	mov	r24, r24
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	fc 01       	movw	r30, r24
     bf6:	ef 5f       	subi	r30, 0xFF	; 255
     bf8:	fe 4f       	sbci	r31, 0xFE	; 254
     bfa:	88 89       	ldd	r24, Y+16	; 0x10
     bfc:	80 83       	st	Z, r24

	   /*Display Key Press on LCD */
	   LCD_intgerToString(key1);
     bfe:	88 89       	ldd	r24, Y+16	; 0x10
     c00:	88 2f       	mov	r24, r24
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	0e 94 0c 18 	call	0x3018	; 0x3018 <LCD_intgerToString>
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	a8 e4       	ldi	r26, 0x48	; 72
     c0e:	b4 e4       	ldi	r27, 0x44	; 68
     c10:	8b 87       	std	Y+11, r24	; 0x0b
     c12:	9c 87       	std	Y+12, r25	; 0x0c
     c14:	ad 87       	std	Y+13, r26	; 0x0d
     c16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c18:	6b 85       	ldd	r22, Y+11	; 0x0b
     c1a:	7c 85       	ldd	r23, Y+12	; 0x0c
     c1c:	8d 85       	ldd	r24, Y+13	; 0x0d
     c1e:	9e 85       	ldd	r25, Y+14	; 0x0e
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	4a ef       	ldi	r20, 0xFA	; 250
     c26:	54 e4       	ldi	r21, 0x44	; 68
     c28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c2c:	dc 01       	movw	r26, r24
     c2e:	cb 01       	movw	r24, r22
     c30:	8f 83       	std	Y+7, r24	; 0x07
     c32:	98 87       	std	Y+8, r25	; 0x08
     c34:	a9 87       	std	Y+9, r26	; 0x09
     c36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c38:	6f 81       	ldd	r22, Y+7	; 0x07
     c3a:	78 85       	ldd	r23, Y+8	; 0x08
     c3c:	89 85       	ldd	r24, Y+9	; 0x09
     c3e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c40:	20 e0       	ldi	r18, 0x00	; 0
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	40 e8       	ldi	r20, 0x80	; 128
     c46:	5f e3       	ldi	r21, 0x3F	; 63
     c48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c4c:	88 23       	and	r24, r24
     c4e:	2c f4       	brge	.+10     	; 0xc5a <OPERATION_EnterPassword+0x9e>
		__ticks = 1;
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	9e 83       	std	Y+6, r25	; 0x06
     c56:	8d 83       	std	Y+5, r24	; 0x05
     c58:	3f c0       	rjmp	.+126    	; 0xcd8 <OPERATION_EnterPassword+0x11c>
	else if (__tmp > 65535)
     c5a:	6f 81       	ldd	r22, Y+7	; 0x07
     c5c:	78 85       	ldd	r23, Y+8	; 0x08
     c5e:	89 85       	ldd	r24, Y+9	; 0x09
     c60:	9a 85       	ldd	r25, Y+10	; 0x0a
     c62:	20 e0       	ldi	r18, 0x00	; 0
     c64:	3f ef       	ldi	r19, 0xFF	; 255
     c66:	4f e7       	ldi	r20, 0x7F	; 127
     c68:	57 e4       	ldi	r21, 0x47	; 71
     c6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c6e:	18 16       	cp	r1, r24
     c70:	4c f5       	brge	.+82     	; 0xcc4 <OPERATION_EnterPassword+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c72:	6b 85       	ldd	r22, Y+11	; 0x0b
     c74:	7c 85       	ldd	r23, Y+12	; 0x0c
     c76:	8d 85       	ldd	r24, Y+13	; 0x0d
     c78:	9e 85       	ldd	r25, Y+14	; 0x0e
     c7a:	20 e0       	ldi	r18, 0x00	; 0
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	40 e2       	ldi	r20, 0x20	; 32
     c80:	51 e4       	ldi	r21, 0x41	; 65
     c82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c86:	dc 01       	movw	r26, r24
     c88:	cb 01       	movw	r24, r22
     c8a:	bc 01       	movw	r22, r24
     c8c:	cd 01       	movw	r24, r26
     c8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c92:	dc 01       	movw	r26, r24
     c94:	cb 01       	movw	r24, r22
     c96:	9e 83       	std	Y+6, r25	; 0x06
     c98:	8d 83       	std	Y+5, r24	; 0x05
     c9a:	0f c0       	rjmp	.+30     	; 0xcba <OPERATION_EnterPassword+0xfe>
     c9c:	88 ec       	ldi	r24, 0xC8	; 200
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	9c 83       	std	Y+4, r25	; 0x04
     ca2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ca4:	8b 81       	ldd	r24, Y+3	; 0x03
     ca6:	9c 81       	ldd	r25, Y+4	; 0x04
     ca8:	01 97       	sbiw	r24, 0x01	; 1
     caa:	f1 f7       	brne	.-4      	; 0xca8 <OPERATION_EnterPassword+0xec>
     cac:	9c 83       	std	Y+4, r25	; 0x04
     cae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cb0:	8d 81       	ldd	r24, Y+5	; 0x05
     cb2:	9e 81       	ldd	r25, Y+6	; 0x06
     cb4:	01 97       	sbiw	r24, 0x01	; 1
     cb6:	9e 83       	std	Y+6, r25	; 0x06
     cb8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cba:	8d 81       	ldd	r24, Y+5	; 0x05
     cbc:	9e 81       	ldd	r25, Y+6	; 0x06
     cbe:	00 97       	sbiw	r24, 0x00	; 0
     cc0:	69 f7       	brne	.-38     	; 0xc9c <OPERATION_EnterPassword+0xe0>
     cc2:	14 c0       	rjmp	.+40     	; 0xcec <OPERATION_EnterPassword+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cc4:	6f 81       	ldd	r22, Y+7	; 0x07
     cc6:	78 85       	ldd	r23, Y+8	; 0x08
     cc8:	89 85       	ldd	r24, Y+9	; 0x09
     cca:	9a 85       	ldd	r25, Y+10	; 0x0a
     ccc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cd0:	dc 01       	movw	r26, r24
     cd2:	cb 01       	movw	r24, r22
     cd4:	9e 83       	std	Y+6, r25	; 0x06
     cd6:	8d 83       	std	Y+5, r24	; 0x05
     cd8:	8d 81       	ldd	r24, Y+5	; 0x05
     cda:	9e 81       	ldd	r25, Y+6	; 0x06
     cdc:	9a 83       	std	Y+2, r25	; 0x02
     cde:	89 83       	std	Y+1, r24	; 0x01
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	9a 81       	ldd	r25, Y+2	; 0x02
     ce4:	01 97       	sbiw	r24, 0x01	; 1
     ce6:	f1 f7       	brne	.-4      	; 0xce4 <OPERATION_EnterPassword+0x128>
     ce8:	9a 83       	std	Y+2, r25	; 0x02
     cea:	89 83       	std	Y+1, r24	; 0x01

	  // LCD_displayCharacter('*');
	   _delay_ms(800);

	   /*Increament counter*/
	   counter ++;
     cec:	8f 85       	ldd	r24, Y+15	; 0x0f
     cee:	8f 5f       	subi	r24, 0xFF	; 255
     cf0:	8f 87       	std	Y+15, r24	; 0x0f

   /*Actual Operation*/
   LCD_displayString("Enter Password:");
   LCD_moveCursor(1, 0);

   while ( counter < 5)
     cf2:	8f 85       	ldd	r24, Y+15	; 0x0f
     cf4:	85 30       	cpi	r24, 0x05	; 5
     cf6:	08 f4       	brcc	.+2      	; 0xcfa <OPERATION_EnterPassword+0x13e>
     cf8:	77 cf       	rjmp	.-274    	; 0xbe8 <OPERATION_EnterPassword+0x2c>
	   /*Increament counter*/
	   counter ++;
   }


}
     cfa:	60 96       	adiw	r28, 0x10	; 16
     cfc:	0f b6       	in	r0, 0x3f	; 63
     cfe:	f8 94       	cli
     d00:	de bf       	out	0x3e, r29	; 62
     d02:	0f be       	out	0x3f, r0	; 63
     d04:	cd bf       	out	0x3d, r28	; 61
     d06:	cf 91       	pop	r28
     d08:	df 91       	pop	r29
     d0a:	08 95       	ret

00000d0c <OPERATION_reEnterPassword>:
* Parameters (out):   None
* Return value:       None
* Description:        Ask useer to re-enter the password
********************************************************************************/
void OPERATION_reEnterPassword(void)
{
     d0c:	df 93       	push	r29
     d0e:	cf 93       	push	r28
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
     d14:	60 97       	sbiw	r28, 0x10	; 16
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	f8 94       	cli
     d1a:	de bf       	out	0x3e, r29	; 62
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	cd bf       	out	0x3d, r28	; 61
    /*Clear screen from previous operation*/
	LCD_clearScreen();
     d20:	0e 94 2f 18 	call	0x305e	; 0x305e <LCD_clearScreen>

   /*Variable to hold keypad press*/
	uint8 key;

   /*counter for while loop*/
    uint8 counter = 0;
     d24:	1f 86       	std	Y+15, r1	; 0x0f

   /*Actual Operation*/
   LCD_displayString("Re Enter Pass:");
     d26:	80 e7       	ldi	r24, 0x70	; 112
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	0e 94 88 17 	call	0x2f10	; 0x2f10 <LCD_displayString>
   LCD_moveCursor(1, 0);
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	60 e0       	ldi	r22, 0x00	; 0
     d32:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <LCD_moveCursor>
     d36:	85 c0       	rjmp	.+266    	; 0xe42 <OPERATION_reEnterPassword+0x136>

   /*Take 5 digits from the user*/
   while ( counter < 5)
   {
	   /*Get Key press from the user*/
	   key = KEYPAD_getPressedKey();
     d38:	0e 94 84 12 	call	0x2508	; 0x2508 <KEYPAD_getPressedKey>
     d3c:	88 8b       	std	Y+16, r24	; 0x10

	   /*Save the key press in the array*/
	   g_Password_Entry2[counter]=key;
     d3e:	8f 85       	ldd	r24, Y+15	; 0x0f
     d40:	88 2f       	mov	r24, r24
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	fc 01       	movw	r30, r24
     d46:	e4 50       	subi	r30, 0x04	; 4
     d48:	ff 4f       	sbci	r31, 0xFF	; 255
     d4a:	88 89       	ldd	r24, Y+16	; 0x10
     d4c:	80 83       	st	Z, r24

	   /*Display Key Press on LCD*/
	   LCD_intgerToString(key);
     d4e:	88 89       	ldd	r24, Y+16	; 0x10
     d50:	88 2f       	mov	r24, r24
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	0e 94 0c 18 	call	0x3018	; 0x3018 <LCD_intgerToString>
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	a8 e4       	ldi	r26, 0x48	; 72
     d5e:	b4 e4       	ldi	r27, 0x44	; 68
     d60:	8b 87       	std	Y+11, r24	; 0x0b
     d62:	9c 87       	std	Y+12, r25	; 0x0c
     d64:	ad 87       	std	Y+13, r26	; 0x0d
     d66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d68:	6b 85       	ldd	r22, Y+11	; 0x0b
     d6a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d6c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d6e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	4a ef       	ldi	r20, 0xFA	; 250
     d76:	54 e4       	ldi	r21, 0x44	; 68
     d78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d7c:	dc 01       	movw	r26, r24
     d7e:	cb 01       	movw	r24, r22
     d80:	8f 83       	std	Y+7, r24	; 0x07
     d82:	98 87       	std	Y+8, r25	; 0x08
     d84:	a9 87       	std	Y+9, r26	; 0x09
     d86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d88:	6f 81       	ldd	r22, Y+7	; 0x07
     d8a:	78 85       	ldd	r23, Y+8	; 0x08
     d8c:	89 85       	ldd	r24, Y+9	; 0x09
     d8e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d90:	20 e0       	ldi	r18, 0x00	; 0
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	40 e8       	ldi	r20, 0x80	; 128
     d96:	5f e3       	ldi	r21, 0x3F	; 63
     d98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d9c:	88 23       	and	r24, r24
     d9e:	2c f4       	brge	.+10     	; 0xdaa <OPERATION_reEnterPassword+0x9e>
		__ticks = 1;
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	9e 83       	std	Y+6, r25	; 0x06
     da6:	8d 83       	std	Y+5, r24	; 0x05
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <OPERATION_reEnterPassword+0x11c>
	else if (__tmp > 65535)
     daa:	6f 81       	ldd	r22, Y+7	; 0x07
     dac:	78 85       	ldd	r23, Y+8	; 0x08
     dae:	89 85       	ldd	r24, Y+9	; 0x09
     db0:	9a 85       	ldd	r25, Y+10	; 0x0a
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	3f ef       	ldi	r19, 0xFF	; 255
     db6:	4f e7       	ldi	r20, 0x7F	; 127
     db8:	57 e4       	ldi	r21, 0x47	; 71
     dba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dbe:	18 16       	cp	r1, r24
     dc0:	4c f5       	brge	.+82     	; 0xe14 <OPERATION_reEnterPassword+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dc2:	6b 85       	ldd	r22, Y+11	; 0x0b
     dc4:	7c 85       	ldd	r23, Y+12	; 0x0c
     dc6:	8d 85       	ldd	r24, Y+13	; 0x0d
     dc8:	9e 85       	ldd	r25, Y+14	; 0x0e
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	40 e2       	ldi	r20, 0x20	; 32
     dd0:	51 e4       	ldi	r21, 0x41	; 65
     dd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dd6:	dc 01       	movw	r26, r24
     dd8:	cb 01       	movw	r24, r22
     dda:	bc 01       	movw	r22, r24
     ddc:	cd 01       	movw	r24, r26
     dde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     de2:	dc 01       	movw	r26, r24
     de4:	cb 01       	movw	r24, r22
     de6:	9e 83       	std	Y+6, r25	; 0x06
     de8:	8d 83       	std	Y+5, r24	; 0x05
     dea:	0f c0       	rjmp	.+30     	; 0xe0a <OPERATION_reEnterPassword+0xfe>
     dec:	88 ec       	ldi	r24, 0xC8	; 200
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	9c 83       	std	Y+4, r25	; 0x04
     df2:	8b 83       	std	Y+3, r24	; 0x03
     df4:	8b 81       	ldd	r24, Y+3	; 0x03
     df6:	9c 81       	ldd	r25, Y+4	; 0x04
     df8:	01 97       	sbiw	r24, 0x01	; 1
     dfa:	f1 f7       	brne	.-4      	; 0xdf8 <OPERATION_reEnterPassword+0xec>
     dfc:	9c 83       	std	Y+4, r25	; 0x04
     dfe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e00:	8d 81       	ldd	r24, Y+5	; 0x05
     e02:	9e 81       	ldd	r25, Y+6	; 0x06
     e04:	01 97       	sbiw	r24, 0x01	; 1
     e06:	9e 83       	std	Y+6, r25	; 0x06
     e08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e0a:	8d 81       	ldd	r24, Y+5	; 0x05
     e0c:	9e 81       	ldd	r25, Y+6	; 0x06
     e0e:	00 97       	sbiw	r24, 0x00	; 0
     e10:	69 f7       	brne	.-38     	; 0xdec <OPERATION_reEnterPassword+0xe0>
     e12:	14 c0       	rjmp	.+40     	; 0xe3c <OPERATION_reEnterPassword+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e14:	6f 81       	ldd	r22, Y+7	; 0x07
     e16:	78 85       	ldd	r23, Y+8	; 0x08
     e18:	89 85       	ldd	r24, Y+9	; 0x09
     e1a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e20:	dc 01       	movw	r26, r24
     e22:	cb 01       	movw	r24, r22
     e24:	9e 83       	std	Y+6, r25	; 0x06
     e26:	8d 83       	std	Y+5, r24	; 0x05
     e28:	8d 81       	ldd	r24, Y+5	; 0x05
     e2a:	9e 81       	ldd	r25, Y+6	; 0x06
     e2c:	9a 83       	std	Y+2, r25	; 0x02
     e2e:	89 83       	std	Y+1, r24	; 0x01
     e30:	89 81       	ldd	r24, Y+1	; 0x01
     e32:	9a 81       	ldd	r25, Y+2	; 0x02
     e34:	01 97       	sbiw	r24, 0x01	; 1
     e36:	f1 f7       	brne	.-4      	; 0xe34 <OPERATION_reEnterPassword+0x128>
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01

	  // LCD_displayCharacter('*');
	   _delay_ms(800);

	   /*Increament counter*/
	   counter ++;
     e3c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e3e:	8f 5f       	subi	r24, 0xFF	; 255
     e40:	8f 87       	std	Y+15, r24	; 0x0f
   /*Actual Operation*/
   LCD_displayString("Re Enter Pass:");
   LCD_moveCursor(1, 0);

   /*Take 5 digits from the user*/
   while ( counter < 5)
     e42:	8f 85       	ldd	r24, Y+15	; 0x0f
     e44:	85 30       	cpi	r24, 0x05	; 5
     e46:	08 f4       	brcc	.+2      	; 0xe4a <OPERATION_reEnterPassword+0x13e>
     e48:	77 cf       	rjmp	.-274    	; 0xd38 <OPERATION_reEnterPassword+0x2c>
	   /*Increament counter*/
	   counter ++;
   }


}
     e4a:	60 96       	adiw	r28, 0x10	; 16
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	f8 94       	cli
     e50:	de bf       	out	0x3e, r29	; 62
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	cd bf       	out	0x3d, r28	; 61
     e56:	cf 91       	pop	r28
     e58:	df 91       	pop	r29
     e5a:	08 95       	ret

00000e5c <OPERATION_checkPasswordMatch>:
* Parameters (out):   None
* Return value:       None
* Description:        Check Password Match between different entries
********************************************************************************/
void OPERATION_checkPasswordMatch(void)
{
     e5c:	df 93       	push	r29
     e5e:	cf 93       	push	r28
     e60:	00 d0       	rcall	.+0      	; 0xe62 <OPERATION_checkPasswordMatch+0x6>
     e62:	00 d0       	rcall	.+0      	; 0xe64 <OPERATION_checkPasswordMatch+0x8>
     e64:	cd b7       	in	r28, 0x3d	; 61
     e66:	de b7       	in	r29, 0x3e	; 62
   /*counter for while loop*/
   uint8 counter = 0;
     e68:	1a 82       	std	Y+2, r1	; 0x02

   /*flag for matching detection - initially matched*/
   uint8 flag = 1 ;
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	89 83       	std	Y+1, r24	; 0x01
     e6e:	14 c0       	rjmp	.+40     	; 0xe98 <OPERATION_checkPasswordMatch+0x3c>
   static uint8 missmatch_counter = 0;

   /*Check Each Element in the Array*/
   while (counter < 5 )
   {
       if ( g_Password_Entry1[counter] != g_Password_Entry2[counter])
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
     e72:	88 2f       	mov	r24, r24
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	fc 01       	movw	r30, r24
     e78:	ef 5f       	subi	r30, 0xFF	; 255
     e7a:	fe 4f       	sbci	r31, 0xFE	; 254
     e7c:	20 81       	ld	r18, Z
     e7e:	8a 81       	ldd	r24, Y+2	; 0x02
     e80:	88 2f       	mov	r24, r24
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	fc 01       	movw	r30, r24
     e86:	e4 50       	subi	r30, 0x04	; 4
     e88:	ff 4f       	sbci	r31, 0xFF	; 255
     e8a:	80 81       	ld	r24, Z
     e8c:	28 17       	cp	r18, r24
     e8e:	09 f0       	breq	.+2      	; 0xe92 <OPERATION_checkPasswordMatch+0x36>
       {
    	   flag = 0 ;
     e90:	19 82       	std	Y+1, r1	; 0x01
       }
       counter ++ ;
     e92:	8a 81       	ldd	r24, Y+2	; 0x02
     e94:	8f 5f       	subi	r24, 0xFF	; 255
     e96:	8a 83       	std	Y+2, r24	; 0x02

   /*Variable to hold number of miss matches*/
   static uint8 missmatch_counter = 0;

   /*Check Each Element in the Array*/
   while (counter < 5 )
     e98:	8a 81       	ldd	r24, Y+2	; 0x02
     e9a:	85 30       	cpi	r24, 0x05	; 5
     e9c:	48 f3       	brcs	.-46     	; 0xe70 <OPERATION_checkPasswordMatch+0x14>
       }
       counter ++ ;
   }

  /*Reset Counter*/      /*To be deleted when writting EEPROM*/
   counter=0;
     e9e:	1a 82       	std	Y+2, r1	; 0x02

   switch (flag)
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	28 2f       	mov	r18, r24
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	3c 83       	std	Y+4, r19	; 0x04
     ea8:	2b 83       	std	Y+3, r18	; 0x03
     eaa:	8b 81       	ldd	r24, Y+3	; 0x03
     eac:	9c 81       	ldd	r25, Y+4	; 0x04
     eae:	00 97       	sbiw	r24, 0x00	; 0
     eb0:	31 f0       	breq	.+12     	; 0xebe <OPERATION_checkPasswordMatch+0x62>
     eb2:	2b 81       	ldd	r18, Y+3	; 0x03
     eb4:	3c 81       	ldd	r19, Y+4	; 0x04
     eb6:	21 30       	cpi	r18, 0x01	; 1
     eb8:	31 05       	cpc	r19, r1
     eba:	71 f1       	breq	.+92     	; 0xf18 <OPERATION_checkPasswordMatch+0xbc>
     ebc:	32 c0       	rjmp	.+100    	; 0xf22 <OPERATION_checkPasswordMatch+0xc6>
   {
      /*Missmatched Case*/
      /*Repeat Step 1 */
      case 0 :  missmatch_counter++;
     ebe:	80 91 ee 00 	lds	r24, 0x00EE
     ec2:	8f 5f       	subi	r24, 0xFF	; 255
     ec4:	80 93 ee 00 	sts	0x00EE, r24
                if(missmatch_counter== 3)
     ec8:	80 91 ee 00 	lds	r24, 0x00EE
     ecc:	83 30       	cpi	r24, 0x03	; 3
     ece:	61 f4       	brne	.+24     	; 0xee8 <OPERATION_checkPasswordMatch+0x8c>
                {

                	LCD_clearScreen();
     ed0:	0e 94 2f 18 	call	0x305e	; 0x305e <LCD_clearScreen>
                	LCD_displayString("Error");
     ed4:	8f e7       	ldi	r24, 0x7F	; 127
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	0e 94 88 17 	call	0x2f10	; 0x2f10 <LCD_displayString>

                	/* Send 'a' by UART to Second MCU to detect an error
                	 * Turn ON BUZZER for 1-minute
                	 */
                	UART_sendByte('a');
     edc:	81 e6       	ldi	r24, 0x61	; 97
     ede:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <UART_sendByte>
                	missmatch_counter = 0;
     ee2:	10 92 ee 00 	sts	0x00EE, r1
     ee6:	1d c0       	rjmp	.+58     	; 0xf22 <OPERATION_checkPasswordMatch+0xc6>
                }
                else
                {
                	OPERATION_EnterPassword();
     ee8:	0e 94 de 05 	call	0xbbc	; 0xbbc <OPERATION_EnterPassword>
                	OPERATION_reEnterPassword();
     eec:	0e 94 86 06 	call	0xd0c	; 0xd0c <OPERATION_reEnterPassword>
                	OPERATION_checkPasswordMatch();
     ef0:	0e 94 2e 07 	call	0xe5c	; 0xe5c <OPERATION_checkPasswordMatch>
     ef4:	16 c0       	rjmp	.+44     	; 0xf22 <OPERATION_checkPasswordMatch+0xc6>

    	  /*To Be deleted when writting EEPROM*/
    	  /*Save Passowrd in EEPROM*/
    	  while (counter < 5 )
    	  {
    		  g_EEPROM_ARRAY[counter]= g_Password_Entry1[counter];
     ef6:	8a 81       	ldd	r24, Y+2	; 0x02
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	8a 81       	ldd	r24, Y+2	; 0x02
     efe:	88 2f       	mov	r24, r24
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	fc 01       	movw	r30, r24
     f04:	ef 5f       	subi	r30, 0xFF	; 255
     f06:	fe 4f       	sbci	r31, 0xFE	; 254
     f08:	80 81       	ld	r24, Z
     f0a:	f9 01       	movw	r30, r18
     f0c:	ea 5f       	subi	r30, 0xFA	; 250
     f0e:	fe 4f       	sbci	r31, 0xFE	; 254
     f10:	80 83       	st	Z, r24
    		  counter ++ ;
     f12:	8a 81       	ldd	r24, Y+2	; 0x02
     f14:	8f 5f       	subi	r24, 0xFF	; 255
     f16:	8a 83       	std	Y+2, r24	; 0x02
      /*Save Password in EEPROM and Go to Main Options*/
      case 1 :

    	  /*To Be deleted when writting EEPROM*/
    	  /*Save Passowrd in EEPROM*/
    	  while (counter < 5 )
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	85 30       	cpi	r24, 0x05	; 5
     f1c:	60 f3       	brcs	.-40     	; 0xef6 <OPERATION_checkPasswordMatch+0x9a>
    	  {
    		  g_EEPROM_ARRAY[counter]= g_Password_Entry1[counter];
    		  counter ++ ;
    	  }
    	        /*Go to Main Options*/
    	        OPERATION_MainOptions();
     f1e:	0e 94 be 07 	call	0xf7c	; 0xf7c <OPERATION_MainOptions>
    	        break;
   }
}
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	0f 90       	pop	r0
     f28:	0f 90       	pop	r0
     f2a:	cf 91       	pop	r28
     f2c:	df 91       	pop	r29
     f2e:	08 95       	ret

00000f30 <OPERATION_checkEEPROMMatch>:
* Parameters (out):   None
* Return value:       None
* Description:        Check Password Match EEPROM and Entry
********************************************************************************/
uint8 OPERATION_checkEEPROMMatch(void)
{
     f30:	df 93       	push	r29
     f32:	cf 93       	push	r28
     f34:	00 d0       	rcall	.+0      	; 0xf36 <OPERATION_checkEEPROMMatch+0x6>
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
	   /*counter for while loop*/
	   uint8 counter = 0;
     f3a:	1a 82       	std	Y+2, r1	; 0x02

	   /*flag for matching detection - initially matched*/
	   uint8 flag = 1 ;
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	89 83       	std	Y+1, r24	; 0x01
     f40:	14 c0       	rjmp	.+40     	; 0xf6a <OPERATION_checkEEPROMMatch+0x3a>



	   while (counter < 5 )
	   {
		   if(g_EEPROM_ARRAY[counter] != g_Password_Entry1[counter])
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	88 2f       	mov	r24, r24
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	fc 01       	movw	r30, r24
     f4a:	ea 5f       	subi	r30, 0xFA	; 250
     f4c:	fe 4f       	sbci	r31, 0xFE	; 254
     f4e:	20 81       	ld	r18, Z
     f50:	8a 81       	ldd	r24, Y+2	; 0x02
     f52:	88 2f       	mov	r24, r24
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	fc 01       	movw	r30, r24
     f58:	ef 5f       	subi	r30, 0xFF	; 255
     f5a:	fe 4f       	sbci	r31, 0xFE	; 254
     f5c:	80 81       	ld	r24, Z
     f5e:	28 17       	cp	r18, r24
     f60:	09 f0       	breq	.+2      	; 0xf64 <OPERATION_checkEEPROMMatch+0x34>
		   {
			   flag = 0;
     f62:	19 82       	std	Y+1, r1	; 0x01
		   }
		   counter ++ ;
     f64:	8a 81       	ldd	r24, Y+2	; 0x02
     f66:	8f 5f       	subi	r24, 0xFF	; 255
     f68:	8a 83       	std	Y+2, r24	; 0x02
	   /*flag for matching detection - initially matched*/
	   uint8 flag = 1 ;



	   while (counter < 5 )
     f6a:	8a 81       	ldd	r24, Y+2	; 0x02
     f6c:	85 30       	cpi	r24, 0x05	; 5
     f6e:	48 f3       	brcs	.-46     	; 0xf42 <OPERATION_checkEEPROMMatch+0x12>
			   flag = 0;
		   }
		   counter ++ ;
	   }

	   return flag;
     f70:	89 81       	ldd	r24, Y+1	; 0x01


}
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <OPERATION_MainOptions>:
* Parameters (out):   None
* Return value:       None
* Description:        Display Main Options for user
********************************************************************************/
void OPERATION_MainOptions(void)
{
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
     f84:	62 97       	sbiw	r28, 0x12	; 18
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	f8 94       	cli
     f8a:	de bf       	out	0x3e, r29	; 62
     f8c:	0f be       	out	0x3f, r0	; 63
     f8e:	cd bf       	out	0x3d, r28	; 61
    /*Clear screen from previous operation*/
	LCD_clearScreen();
     f90:	0e 94 2f 18 	call	0x305e	; 0x305e <LCD_clearScreen>

	/*variable to hold keypad press*/
	uint8 key;

	/*Variable to check Driving Motor*/
	uint8 Motor_Drive_Check = 0;
     f94:	1f 86       	std	Y+15, r1	; 0x0f

	/*Variable to hold number of miss matches*/
	 static uint8 missmatch_counter = 0;

	/*Actual Operation*/
	LCD_displayString("+: Open Door");
     f96:	85 e8       	ldi	r24, 0x85	; 133
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	0e 94 88 17 	call	0x2f10	; 0x2f10 <LCD_displayString>
	LCD_moveCursor(1, 0);
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	60 e0       	ldi	r22, 0x00	; 0
     fa2:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <LCD_moveCursor>
	LCD_displayString("-: Change Pass");
     fa6:	82 e9       	ldi	r24, 0x92	; 146
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	0e 94 88 17 	call	0x2f10	; 0x2f10 <LCD_displayString>

	/*Get Key Press */
	key = KEYPAD_getPressedKey();
     fae:	0e 94 84 12 	call	0x2508	; 0x2508 <KEYPAD_getPressedKey>
     fb2:	88 8b       	std	Y+16, r24	; 0x10
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	a8 e4       	ldi	r26, 0x48	; 72
     fba:	b4 e4       	ldi	r27, 0x44	; 68
     fbc:	8b 87       	std	Y+11, r24	; 0x0b
     fbe:	9c 87       	std	Y+12, r25	; 0x0c
     fc0:	ad 87       	std	Y+13, r26	; 0x0d
     fc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fc4:	6b 85       	ldd	r22, Y+11	; 0x0b
     fc6:	7c 85       	ldd	r23, Y+12	; 0x0c
     fc8:	8d 85       	ldd	r24, Y+13	; 0x0d
     fca:	9e 85       	ldd	r25, Y+14	; 0x0e
     fcc:	20 e0       	ldi	r18, 0x00	; 0
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	4a ef       	ldi	r20, 0xFA	; 250
     fd2:	54 e4       	ldi	r21, 0x44	; 68
     fd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fd8:	dc 01       	movw	r26, r24
     fda:	cb 01       	movw	r24, r22
     fdc:	8f 83       	std	Y+7, r24	; 0x07
     fde:	98 87       	std	Y+8, r25	; 0x08
     fe0:	a9 87       	std	Y+9, r26	; 0x09
     fe2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fe4:	6f 81       	ldd	r22, Y+7	; 0x07
     fe6:	78 85       	ldd	r23, Y+8	; 0x08
     fe8:	89 85       	ldd	r24, Y+9	; 0x09
     fea:	9a 85       	ldd	r25, Y+10	; 0x0a
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	40 e8       	ldi	r20, 0x80	; 128
     ff2:	5f e3       	ldi	r21, 0x3F	; 63
     ff4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ff8:	88 23       	and	r24, r24
     ffa:	2c f4       	brge	.+10     	; 0x1006 <OPERATION_MainOptions+0x8a>
		__ticks = 1;
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	9e 83       	std	Y+6, r25	; 0x06
    1002:	8d 83       	std	Y+5, r24	; 0x05
    1004:	3f c0       	rjmp	.+126    	; 0x1084 <OPERATION_MainOptions+0x108>
	else if (__tmp > 65535)
    1006:	6f 81       	ldd	r22, Y+7	; 0x07
    1008:	78 85       	ldd	r23, Y+8	; 0x08
    100a:	89 85       	ldd	r24, Y+9	; 0x09
    100c:	9a 85       	ldd	r25, Y+10	; 0x0a
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	3f ef       	ldi	r19, 0xFF	; 255
    1012:	4f e7       	ldi	r20, 0x7F	; 127
    1014:	57 e4       	ldi	r21, 0x47	; 71
    1016:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    101a:	18 16       	cp	r1, r24
    101c:	4c f5       	brge	.+82     	; 0x1070 <OPERATION_MainOptions+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    101e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1020:	7c 85       	ldd	r23, Y+12	; 0x0c
    1022:	8d 85       	ldd	r24, Y+13	; 0x0d
    1024:	9e 85       	ldd	r25, Y+14	; 0x0e
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	40 e2       	ldi	r20, 0x20	; 32
    102c:	51 e4       	ldi	r21, 0x41	; 65
    102e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1032:	dc 01       	movw	r26, r24
    1034:	cb 01       	movw	r24, r22
    1036:	bc 01       	movw	r22, r24
    1038:	cd 01       	movw	r24, r26
    103a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    103e:	dc 01       	movw	r26, r24
    1040:	cb 01       	movw	r24, r22
    1042:	9e 83       	std	Y+6, r25	; 0x06
    1044:	8d 83       	std	Y+5, r24	; 0x05
    1046:	0f c0       	rjmp	.+30     	; 0x1066 <OPERATION_MainOptions+0xea>
    1048:	88 ec       	ldi	r24, 0xC8	; 200
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	9c 83       	std	Y+4, r25	; 0x04
    104e:	8b 83       	std	Y+3, r24	; 0x03
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	9c 81       	ldd	r25, Y+4	; 0x04
    1054:	01 97       	sbiw	r24, 0x01	; 1
    1056:	f1 f7       	brne	.-4      	; 0x1054 <OPERATION_MainOptions+0xd8>
    1058:	9c 83       	std	Y+4, r25	; 0x04
    105a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    105c:	8d 81       	ldd	r24, Y+5	; 0x05
    105e:	9e 81       	ldd	r25, Y+6	; 0x06
    1060:	01 97       	sbiw	r24, 0x01	; 1
    1062:	9e 83       	std	Y+6, r25	; 0x06
    1064:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1066:	8d 81       	ldd	r24, Y+5	; 0x05
    1068:	9e 81       	ldd	r25, Y+6	; 0x06
    106a:	00 97       	sbiw	r24, 0x00	; 0
    106c:	69 f7       	brne	.-38     	; 0x1048 <OPERATION_MainOptions+0xcc>
    106e:	14 c0       	rjmp	.+40     	; 0x1098 <OPERATION_MainOptions+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1070:	6f 81       	ldd	r22, Y+7	; 0x07
    1072:	78 85       	ldd	r23, Y+8	; 0x08
    1074:	89 85       	ldd	r24, Y+9	; 0x09
    1076:	9a 85       	ldd	r25, Y+10	; 0x0a
    1078:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    107c:	dc 01       	movw	r26, r24
    107e:	cb 01       	movw	r24, r22
    1080:	9e 83       	std	Y+6, r25	; 0x06
    1082:	8d 83       	std	Y+5, r24	; 0x05
    1084:	8d 81       	ldd	r24, Y+5	; 0x05
    1086:	9e 81       	ldd	r25, Y+6	; 0x06
    1088:	9a 83       	std	Y+2, r25	; 0x02
    108a:	89 83       	std	Y+1, r24	; 0x01
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	9a 81       	ldd	r25, Y+2	; 0x02
    1090:	01 97       	sbiw	r24, 0x01	; 1
    1092:	f1 f7       	brne	.-4      	; 0x1090 <OPERATION_MainOptions+0x114>
    1094:	9a 83       	std	Y+2, r25	; 0x02
    1096:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(800);

	switch (key)
    1098:	88 89       	ldd	r24, Y+16	; 0x10
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	3a 8b       	std	Y+18, r19	; 0x12
    10a0:	29 8b       	std	Y+17, r18	; 0x11
    10a2:	89 89       	ldd	r24, Y+17	; 0x11
    10a4:	9a 89       	ldd	r25, Y+18	; 0x12
    10a6:	8b 32       	cpi	r24, 0x2B	; 43
    10a8:	91 05       	cpc	r25, r1
    10aa:	39 f0       	breq	.+14     	; 0x10ba <OPERATION_MainOptions+0x13e>
    10ac:	29 89       	ldd	r18, Y+17	; 0x11
    10ae:	3a 89       	ldd	r19, Y+18	; 0x12
    10b0:	2d 32       	cpi	r18, 0x2D	; 45
    10b2:	31 05       	cpc	r19, r1
    10b4:	09 f4       	brne	.+2      	; 0x10b8 <OPERATION_MainOptions+0x13c>
    10b6:	46 c0       	rjmp	.+140    	; 0x1144 <OPERATION_MainOptions+0x1c8>
    10b8:	4b c0       	rjmp	.+150    	; 0x1150 <OPERATION_MainOptions+0x1d4>
	{
	  /*Motor Drive Case*/
	  case '+' :  /*Enter Password*/
		          OPERATION_EnterPassword();
    10ba:	0e 94 de 05 	call	0xbbc	; 0xbbc <OPERATION_EnterPassword>

	             /*IF matched with password saved in EEPROM - Drive Motor*/
	             Motor_Drive_Check = OPERATION_checkEEPROMMatch();
    10be:	0e 94 98 07 	call	0xf30	; 0xf30 <OPERATION_checkEEPROMMatch>
    10c2:	8f 87       	std	Y+15, r24	; 0x0f

	             /*Matched Case*/
	             if(Motor_Drive_Check == 1)
    10c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    10c6:	81 30       	cpi	r24, 0x01	; 1
    10c8:	c9 f5       	brne	.+114    	; 0x113c <OPERATION_MainOptions+0x1c0>
	            	 /*Send By UART something to drive Motor*
	            	 *
	            	 *
	            	 */

	            	 UART_sendByte('b');
    10ca:	82 e6       	ldi	r24, 0x62	; 98
    10cc:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <UART_sendByte>

	            	 /*Init Timer*/
	            	 Timer_init(&Config_Struct);
    10d0:	8a ed       	ldi	r24, 0xDA	; 218
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <Timer_init>

	            	 /*I-Bit*/
	            	 SET_BIT(SREG,7);
    10d8:	af e5       	ldi	r26, 0x5F	; 95
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	ef e5       	ldi	r30, 0x5F	; 95
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	80 68       	ori	r24, 0x80	; 128
    10e4:	8c 93       	st	X, r24

	            	 LCD_clearScreen();
    10e6:	0e 94 2f 18 	call	0x305e	; 0x305e <LCD_clearScreen>
	            	 LCD_displayString("Opening Door");
    10ea:	81 ea       	ldi	r24, 0xA1	; 161
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	0e 94 88 17 	call	0x2f10	; 0x2f10 <LCD_displayString>

	            	 /*Setting Time for 15 seconds*/
	            	 g_Interrupt_Number=461;
    10f2:	8d ec       	ldi	r24, 0xCD	; 205
    10f4:	91 e0       	ldi	r25, 0x01	; 1
    10f6:	90 93 ed 00 	sts	0x00ED, r25
    10fa:	80 93 ec 00 	sts	0x00EC, r24

	            	 /*Start Taking ACTION in ISR*/
	           	     Timer0_setCallBack(OPERATION_LCD_Control);
    10fe:	81 eb       	ldi	r24, 0xB1	; 177
    1100:	98 e0       	ldi	r25, 0x08	; 8
    1102:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <Timer0_setCallBack>
    1106:	24 c0       	rjmp	.+72     	; 0x1150 <OPERATION_MainOptions+0x1d4>
	             /*Miss Matched Case*/
	             else
	             {
	            	 while ( Motor_Drive_Check != 1 )
	            	 {
	            		 missmatch_counter++;
    1108:	80 91 ef 00 	lds	r24, 0x00EF
    110c:	8f 5f       	subi	r24, 0xFF	; 255
    110e:	80 93 ef 00 	sts	0x00EF, r24
		            	 if(missmatch_counter == 3)
    1112:	80 91 ef 00 	lds	r24, 0x00EF
    1116:	83 30       	cpi	r24, 0x03	; 3
    1118:	61 f4       	brne	.+24     	; 0x1132 <OPERATION_MainOptions+0x1b6>
		            	 {
		                 	LCD_clearScreen();
    111a:	0e 94 2f 18 	call	0x305e	; 0x305e <LCD_clearScreen>
		                 	LCD_displayString("Error");
    111e:	8f e7       	ldi	r24, 0x7F	; 127
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	0e 94 88 17 	call	0x2f10	; 0x2f10 <LCD_displayString>

		                 	/* Send 'a' by UART to Second MCU to detect an error
		                 	 * Turn ON BUZZER for 1-minute
		                 	 */
		                 	UART_sendByte('a');
    1126:	81 e6       	ldi	r24, 0x61	; 97
    1128:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <UART_sendByte>
		                 	missmatch_counter = 0;
    112c:	10 92 ef 00 	sts	0x00EF, r1
    1130:	0f c0       	rjmp	.+30     	; 0x1150 <OPERATION_MainOptions+0x1d4>

		                 	break;
		            	 }

	            		 /*Enter Password*/
	            		 OPERATION_EnterPassword();
    1132:	0e 94 de 05 	call	0xbbc	; 0xbbc <OPERATION_EnterPassword>
	            		 Motor_Drive_Check = OPERATION_checkEEPROMMatch();
    1136:	0e 94 98 07 	call	0xf30	; 0xf30 <OPERATION_checkEEPROMMatch>
    113a:	8f 87       	std	Y+15, r24	; 0x0f

	             }
	             /*Miss Matched Case*/
	             else
	             {
	            	 while ( Motor_Drive_Check != 1 )
    113c:	8f 85       	ldd	r24, Y+15	; 0x0f
    113e:	81 30       	cpi	r24, 0x01	; 1
    1140:	19 f7       	brne	.-58     	; 0x1108 <OPERATION_MainOptions+0x18c>
    1142:	06 c0       	rjmp	.+12     	; 0x1150 <OPERATION_MainOptions+0x1d4>
	             break;

	 /*Change Password Case*/
	  case '-' :
		         /*repeat step 1*/
    	         OPERATION_EnterPassword();
    1144:	0e 94 de 05 	call	0xbbc	; 0xbbc <OPERATION_EnterPassword>
    	         OPERATION_reEnterPassword();
    1148:	0e 94 86 06 	call	0xd0c	; 0xd0c <OPERATION_reEnterPassword>
    	         OPERATION_checkPasswordMatch();
    114c:	0e 94 2e 07 	call	0xe5c	; 0xe5c <OPERATION_checkPasswordMatch>

	             break;
	  default:
		         break;
	}
}
    1150:	62 96       	adiw	r28, 0x12	; 18
    1152:	0f b6       	in	r0, 0x3f	; 63
    1154:	f8 94       	cli
    1156:	de bf       	out	0x3e, r29	; 62
    1158:	0f be       	out	0x3f, r0	; 63
    115a:	cd bf       	out	0x3d, r28	; 61
    115c:	cf 91       	pop	r28
    115e:	df 91       	pop	r29
    1160:	08 95       	ret

00001162 <OPERATION_LCD_Control>:
* Parameters (out):   None
* Return value:       uint8
* Description:        Function to be called when ISR happens
********************************************************************************/
void OPERATION_LCD_Control(void)
{
    1162:	df 93       	push	r29
    1164:	cf 93       	push	r28
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
	 * 0 indicated CW , 1 indicates CCW
	 */

	static uint8 flag = 0;

	counter ++ ;
    116a:	80 91 f1 00 	lds	r24, 0x00F1
    116e:	90 91 f2 00 	lds	r25, 0x00F2
    1172:	01 96       	adiw	r24, 0x01	; 1
    1174:	90 93 f2 00 	sts	0x00F2, r25
    1178:	80 93 f1 00 	sts	0x00F1, r24

	/*Holdind Motor for three seconds perparing for second rotation*/
	if(counter ==  g_Interrupt_Number && g_Interrupt_Number == 461 && flag ==0)
    117c:	20 91 f1 00 	lds	r18, 0x00F1
    1180:	30 91 f2 00 	lds	r19, 0x00F2
    1184:	80 91 ec 00 	lds	r24, 0x00EC
    1188:	90 91 ed 00 	lds	r25, 0x00ED
    118c:	28 17       	cp	r18, r24
    118e:	39 07       	cpc	r19, r25
    1190:	01 f5       	brne	.+64     	; 0x11d2 <OPERATION_LCD_Control+0x70>
    1192:	80 91 ec 00 	lds	r24, 0x00EC
    1196:	90 91 ed 00 	lds	r25, 0x00ED
    119a:	21 e0       	ldi	r18, 0x01	; 1
    119c:	8d 3c       	cpi	r24, 0xCD	; 205
    119e:	92 07       	cpc	r25, r18
    11a0:	c1 f4       	brne	.+48     	; 0x11d2 <OPERATION_LCD_Control+0x70>
    11a2:	80 91 f0 00 	lds	r24, 0x00F0
    11a6:	88 23       	and	r24, r24
    11a8:	a1 f4       	brne	.+40     	; 0x11d2 <OPERATION_LCD_Control+0x70>
	{
		LCD_clearScreen();
    11aa:	0e 94 2f 18 	call	0x305e	; 0x305e <LCD_clearScreen>
		LCD_displayString("Holding Motor");
    11ae:	8e ea       	ldi	r24, 0xAE	; 174
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	0e 94 88 17 	call	0x2f10	; 0x2f10 <LCD_displayString>
   	    g_Interrupt_Number=92;
    11b6:	8c e5       	ldi	r24, 0x5C	; 92
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	90 93 ed 00 	sts	0x00ED, r25
    11be:	80 93 ec 00 	sts	0x00EC, r24
		counter=0;
    11c2:	10 92 f2 00 	sts	0x00F2, r1
    11c6:	10 92 f1 00 	sts	0x00F1, r1
		flag = 1;
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	80 93 f0 00 	sts	0x00F0, r24
    11d0:	42 c0       	rjmp	.+132    	; 0x1256 <OPERATION_LCD_Control+0xf4>
	}
	/*Rotating Motor in CCW Direction*/
	else if (counter ==  g_Interrupt_Number && g_Interrupt_Number == 92)
    11d2:	20 91 f1 00 	lds	r18, 0x00F1
    11d6:	30 91 f2 00 	lds	r19, 0x00F2
    11da:	80 91 ec 00 	lds	r24, 0x00EC
    11de:	90 91 ed 00 	lds	r25, 0x00ED
    11e2:	28 17       	cp	r18, r24
    11e4:	39 07       	cpc	r19, r25
    11e6:	c1 f4       	brne	.+48     	; 0x1218 <OPERATION_LCD_Control+0xb6>
    11e8:	80 91 ec 00 	lds	r24, 0x00EC
    11ec:	90 91 ed 00 	lds	r25, 0x00ED
    11f0:	8c 35       	cpi	r24, 0x5C	; 92
    11f2:	91 05       	cpc	r25, r1
    11f4:	89 f4       	brne	.+34     	; 0x1218 <OPERATION_LCD_Control+0xb6>
	{
   	      LCD_clearScreen();
    11f6:	0e 94 2f 18 	call	0x305e	; 0x305e <LCD_clearScreen>
   	      LCD_displayString("Closing Door");
    11fa:	8c eb       	ldi	r24, 0xBC	; 188
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	0e 94 88 17 	call	0x2f10	; 0x2f10 <LCD_displayString>
   	      g_Interrupt_Number=215;
    1202:	87 ed       	ldi	r24, 0xD7	; 215
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	90 93 ed 00 	sts	0x00ED, r25
    120a:	80 93 ec 00 	sts	0x00EC, r24
   	      counter = 0;
    120e:	10 92 f2 00 	sts	0x00F2, r1
    1212:	10 92 f1 00 	sts	0x00F1, r1
    1216:	1f c0       	rjmp	.+62     	; 0x1256 <OPERATION_LCD_Control+0xf4>
	}
	/*after 5 seconds stop the timer*/
	else if(counter ==  g_Interrupt_Number && g_Interrupt_Number == 215 && flag ==1)
    1218:	20 91 f1 00 	lds	r18, 0x00F1
    121c:	30 91 f2 00 	lds	r19, 0x00F2
    1220:	80 91 ec 00 	lds	r24, 0x00EC
    1224:	90 91 ed 00 	lds	r25, 0x00ED
    1228:	28 17       	cp	r18, r24
    122a:	39 07       	cpc	r19, r25
    122c:	a1 f4       	brne	.+40     	; 0x1256 <OPERATION_LCD_Control+0xf4>
    122e:	80 91 ec 00 	lds	r24, 0x00EC
    1232:	90 91 ed 00 	lds	r25, 0x00ED
    1236:	87 3d       	cpi	r24, 0xD7	; 215
    1238:	91 05       	cpc	r25, r1
    123a:	69 f4       	brne	.+26     	; 0x1256 <OPERATION_LCD_Control+0xf4>
    123c:	80 91 f0 00 	lds	r24, 0x00F0
    1240:	81 30       	cpi	r24, 0x01	; 1
    1242:	49 f4       	brne	.+18     	; 0x1256 <OPERATION_LCD_Control+0xf4>
	{
 	    LCD_clearScreen();
    1244:	0e 94 2f 18 	call	0x305e	; 0x305e <LCD_clearScreen>
 	    LCD_displayString("Finished");
    1248:	89 ec       	ldi	r24, 0xC9	; 201
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	0e 94 88 17 	call	0x2f10	; 0x2f10 <LCD_displayString>
		Timer_Deinit(0);
    1250:	80 e0       	ldi	r24, 0x00	; 0
    1252:	0e 94 ef 0b 	call	0x17de	; 0x17de <Timer_Deinit>
	}

}
    1256:	cf 91       	pop	r28
    1258:	df 91       	pop	r29
    125a:	08 95       	ret

0000125c <__vector_9>:
*                                                                              *
*                              Interrupt Service Routines                      *
*                                                                              *
********************************************************************************/
ISR(TIMER0_OVF_vect)
{
    125c:	1f 92       	push	r1
    125e:	0f 92       	push	r0
    1260:	0f b6       	in	r0, 0x3f	; 63
    1262:	0f 92       	push	r0
    1264:	11 24       	eor	r1, r1
    1266:	2f 93       	push	r18
    1268:	3f 93       	push	r19
    126a:	4f 93       	push	r20
    126c:	5f 93       	push	r21
    126e:	6f 93       	push	r22
    1270:	7f 93       	push	r23
    1272:	8f 93       	push	r24
    1274:	9f 93       	push	r25
    1276:	af 93       	push	r26
    1278:	bf 93       	push	r27
    127a:	ef 93       	push	r30
    127c:	ff 93       	push	r31
    127e:	df 93       	push	r29
    1280:	cf 93       	push	r28
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
    if ( g_Timer0_callBackPtr != NULL_PTR)
    1286:	80 91 f3 00 	lds	r24, 0x00F3
    128a:	90 91 f4 00 	lds	r25, 0x00F4
    128e:	00 97       	sbiw	r24, 0x00	; 0
    1290:	29 f0       	breq	.+10     	; 0x129c <__vector_9+0x40>
    {
    	(*g_Timer0_callBackPtr)();
    1292:	e0 91 f3 00 	lds	r30, 0x00F3
    1296:	f0 91 f4 00 	lds	r31, 0x00F4
    129a:	09 95       	icall
    }
}
    129c:	cf 91       	pop	r28
    129e:	df 91       	pop	r29
    12a0:	ff 91       	pop	r31
    12a2:	ef 91       	pop	r30
    12a4:	bf 91       	pop	r27
    12a6:	af 91       	pop	r26
    12a8:	9f 91       	pop	r25
    12aa:	8f 91       	pop	r24
    12ac:	7f 91       	pop	r23
    12ae:	6f 91       	pop	r22
    12b0:	5f 91       	pop	r21
    12b2:	4f 91       	pop	r20
    12b4:	3f 91       	pop	r19
    12b6:	2f 91       	pop	r18
    12b8:	0f 90       	pop	r0
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	0f 90       	pop	r0
    12be:	1f 90       	pop	r1
    12c0:	18 95       	reti

000012c2 <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    12c2:	1f 92       	push	r1
    12c4:	0f 92       	push	r0
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	0f 92       	push	r0
    12ca:	11 24       	eor	r1, r1
    12cc:	2f 93       	push	r18
    12ce:	3f 93       	push	r19
    12d0:	4f 93       	push	r20
    12d2:	5f 93       	push	r21
    12d4:	6f 93       	push	r22
    12d6:	7f 93       	push	r23
    12d8:	8f 93       	push	r24
    12da:	9f 93       	push	r25
    12dc:	af 93       	push	r26
    12de:	bf 93       	push	r27
    12e0:	ef 93       	push	r30
    12e2:	ff 93       	push	r31
    12e4:	df 93       	push	r29
    12e6:	cf 93       	push	r28
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
    if ( g_Timer0_callBackPtr != NULL_PTR)
    12ec:	80 91 f3 00 	lds	r24, 0x00F3
    12f0:	90 91 f4 00 	lds	r25, 0x00F4
    12f4:	00 97       	sbiw	r24, 0x00	; 0
    12f6:	29 f0       	breq	.+10     	; 0x1302 <__vector_19+0x40>
    {
    	(*g_Timer0_callBackPtr)();
    12f8:	e0 91 f3 00 	lds	r30, 0x00F3
    12fc:	f0 91 f4 00 	lds	r31, 0x00F4
    1300:	09 95       	icall
    }
}
    1302:	cf 91       	pop	r28
    1304:	df 91       	pop	r29
    1306:	ff 91       	pop	r31
    1308:	ef 91       	pop	r30
    130a:	bf 91       	pop	r27
    130c:	af 91       	pop	r26
    130e:	9f 91       	pop	r25
    1310:	8f 91       	pop	r24
    1312:	7f 91       	pop	r23
    1314:	6f 91       	pop	r22
    1316:	5f 91       	pop	r21
    1318:	4f 91       	pop	r20
    131a:	3f 91       	pop	r19
    131c:	2f 91       	pop	r18
    131e:	0f 90       	pop	r0
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	0f 90       	pop	r0
    1324:	1f 90       	pop	r1
    1326:	18 95       	reti

00001328 <__vector_6>:
ISR(TIMER1_COMPA_vect)
{
    1328:	1f 92       	push	r1
    132a:	0f 92       	push	r0
    132c:	0f b6       	in	r0, 0x3f	; 63
    132e:	0f 92       	push	r0
    1330:	11 24       	eor	r1, r1
    1332:	2f 93       	push	r18
    1334:	3f 93       	push	r19
    1336:	4f 93       	push	r20
    1338:	5f 93       	push	r21
    133a:	6f 93       	push	r22
    133c:	7f 93       	push	r23
    133e:	8f 93       	push	r24
    1340:	9f 93       	push	r25
    1342:	af 93       	push	r26
    1344:	bf 93       	push	r27
    1346:	ef 93       	push	r30
    1348:	ff 93       	push	r31
    134a:	df 93       	push	r29
    134c:	cf 93       	push	r28
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
    if ( g_Timer1_callBackPtr != NULL_PTR)
    1352:	80 91 f5 00 	lds	r24, 0x00F5
    1356:	90 91 f6 00 	lds	r25, 0x00F6
    135a:	00 97       	sbiw	r24, 0x00	; 0
    135c:	29 f0       	breq	.+10     	; 0x1368 <__vector_6+0x40>
    {
    	(*g_Timer1_callBackPtr)();
    135e:	e0 91 f5 00 	lds	r30, 0x00F5
    1362:	f0 91 f6 00 	lds	r31, 0x00F6
    1366:	09 95       	icall
    }
}
    1368:	cf 91       	pop	r28
    136a:	df 91       	pop	r29
    136c:	ff 91       	pop	r31
    136e:	ef 91       	pop	r30
    1370:	bf 91       	pop	r27
    1372:	af 91       	pop	r26
    1374:	9f 91       	pop	r25
    1376:	8f 91       	pop	r24
    1378:	7f 91       	pop	r23
    137a:	6f 91       	pop	r22
    137c:	5f 91       	pop	r21
    137e:	4f 91       	pop	r20
    1380:	3f 91       	pop	r19
    1382:	2f 91       	pop	r18
    1384:	0f 90       	pop	r0
    1386:	0f be       	out	0x3f, r0	; 63
    1388:	0f 90       	pop	r0
    138a:	1f 90       	pop	r1
    138c:	18 95       	reti

0000138e <__vector_7>:
ISR(TIMER1_COMPB_vect)
{
    138e:	1f 92       	push	r1
    1390:	0f 92       	push	r0
    1392:	0f b6       	in	r0, 0x3f	; 63
    1394:	0f 92       	push	r0
    1396:	11 24       	eor	r1, r1
    1398:	2f 93       	push	r18
    139a:	3f 93       	push	r19
    139c:	4f 93       	push	r20
    139e:	5f 93       	push	r21
    13a0:	6f 93       	push	r22
    13a2:	7f 93       	push	r23
    13a4:	8f 93       	push	r24
    13a6:	9f 93       	push	r25
    13a8:	af 93       	push	r26
    13aa:	bf 93       	push	r27
    13ac:	ef 93       	push	r30
    13ae:	ff 93       	push	r31
    13b0:	df 93       	push	r29
    13b2:	cf 93       	push	r28
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    if ( g_Timer1_callBackPtr != NULL_PTR)
    13b8:	80 91 f5 00 	lds	r24, 0x00F5
    13bc:	90 91 f6 00 	lds	r25, 0x00F6
    13c0:	00 97       	sbiw	r24, 0x00	; 0
    13c2:	29 f0       	breq	.+10     	; 0x13ce <__vector_7+0x40>
    {
    	(*g_Timer1_callBackPtr)();
    13c4:	e0 91 f5 00 	lds	r30, 0x00F5
    13c8:	f0 91 f6 00 	lds	r31, 0x00F6
    13cc:	09 95       	icall
    }
}
    13ce:	cf 91       	pop	r28
    13d0:	df 91       	pop	r29
    13d2:	ff 91       	pop	r31
    13d4:	ef 91       	pop	r30
    13d6:	bf 91       	pop	r27
    13d8:	af 91       	pop	r26
    13da:	9f 91       	pop	r25
    13dc:	8f 91       	pop	r24
    13de:	7f 91       	pop	r23
    13e0:	6f 91       	pop	r22
    13e2:	5f 91       	pop	r21
    13e4:	4f 91       	pop	r20
    13e6:	3f 91       	pop	r19
    13e8:	2f 91       	pop	r18
    13ea:	0f 90       	pop	r0
    13ec:	0f be       	out	0x3f, r0	; 63
    13ee:	0f 90       	pop	r0
    13f0:	1f 90       	pop	r1
    13f2:	18 95       	reti

000013f4 <__vector_4>:
ISR(TIMER2_OVF_vect)
{
    13f4:	1f 92       	push	r1
    13f6:	0f 92       	push	r0
    13f8:	0f b6       	in	r0, 0x3f	; 63
    13fa:	0f 92       	push	r0
    13fc:	11 24       	eor	r1, r1
    13fe:	2f 93       	push	r18
    1400:	3f 93       	push	r19
    1402:	4f 93       	push	r20
    1404:	5f 93       	push	r21
    1406:	6f 93       	push	r22
    1408:	7f 93       	push	r23
    140a:	8f 93       	push	r24
    140c:	9f 93       	push	r25
    140e:	af 93       	push	r26
    1410:	bf 93       	push	r27
    1412:	ef 93       	push	r30
    1414:	ff 93       	push	r31
    1416:	df 93       	push	r29
    1418:	cf 93       	push	r28
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    if ( g_Timer2_callBackPtr != NULL_PTR)
    141e:	80 91 f7 00 	lds	r24, 0x00F7
    1422:	90 91 f8 00 	lds	r25, 0x00F8
    1426:	00 97       	sbiw	r24, 0x00	; 0
    1428:	29 f0       	breq	.+10     	; 0x1434 <__vector_4+0x40>
    {
    	(*g_Timer2_callBackPtr)();
    142a:	e0 91 f7 00 	lds	r30, 0x00F7
    142e:	f0 91 f8 00 	lds	r31, 0x00F8
    1432:	09 95       	icall
    }
}
    1434:	cf 91       	pop	r28
    1436:	df 91       	pop	r29
    1438:	ff 91       	pop	r31
    143a:	ef 91       	pop	r30
    143c:	bf 91       	pop	r27
    143e:	af 91       	pop	r26
    1440:	9f 91       	pop	r25
    1442:	8f 91       	pop	r24
    1444:	7f 91       	pop	r23
    1446:	6f 91       	pop	r22
    1448:	5f 91       	pop	r21
    144a:	4f 91       	pop	r20
    144c:	3f 91       	pop	r19
    144e:	2f 91       	pop	r18
    1450:	0f 90       	pop	r0
    1452:	0f be       	out	0x3f, r0	; 63
    1454:	0f 90       	pop	r0
    1456:	1f 90       	pop	r1
    1458:	18 95       	reti

0000145a <__vector_3>:
ISR(TIMER2_COMP_vect)
{
    145a:	1f 92       	push	r1
    145c:	0f 92       	push	r0
    145e:	0f b6       	in	r0, 0x3f	; 63
    1460:	0f 92       	push	r0
    1462:	11 24       	eor	r1, r1
    1464:	2f 93       	push	r18
    1466:	3f 93       	push	r19
    1468:	4f 93       	push	r20
    146a:	5f 93       	push	r21
    146c:	6f 93       	push	r22
    146e:	7f 93       	push	r23
    1470:	8f 93       	push	r24
    1472:	9f 93       	push	r25
    1474:	af 93       	push	r26
    1476:	bf 93       	push	r27
    1478:	ef 93       	push	r30
    147a:	ff 93       	push	r31
    147c:	df 93       	push	r29
    147e:	cf 93       	push	r28
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
    if ( g_Timer2_callBackPtr != NULL_PTR)
    1484:	80 91 f7 00 	lds	r24, 0x00F7
    1488:	90 91 f8 00 	lds	r25, 0x00F8
    148c:	00 97       	sbiw	r24, 0x00	; 0
    148e:	29 f0       	breq	.+10     	; 0x149a <__vector_3+0x40>
    {
    	(*g_Timer2_callBackPtr)();
    1490:	e0 91 f7 00 	lds	r30, 0x00F7
    1494:	f0 91 f8 00 	lds	r31, 0x00F8
    1498:	09 95       	icall
    }
}
    149a:	cf 91       	pop	r28
    149c:	df 91       	pop	r29
    149e:	ff 91       	pop	r31
    14a0:	ef 91       	pop	r30
    14a2:	bf 91       	pop	r27
    14a4:	af 91       	pop	r26
    14a6:	9f 91       	pop	r25
    14a8:	8f 91       	pop	r24
    14aa:	7f 91       	pop	r23
    14ac:	6f 91       	pop	r22
    14ae:	5f 91       	pop	r21
    14b0:	4f 91       	pop	r20
    14b2:	3f 91       	pop	r19
    14b4:	2f 91       	pop	r18
    14b6:	0f 90       	pop	r0
    14b8:	0f be       	out	0x3f, r0	; 63
    14ba:	0f 90       	pop	r0
    14bc:	1f 90       	pop	r1
    14be:	18 95       	reti

000014c0 <Timer_init>:
* Parameters (out):   None
* Return value:       None
* Description:        Initialize the Selected Timer module.
********************************************************************************/
void Timer_init(const TIMER_ConfigType * Config_Ptr )
{
    14c0:	df 93       	push	r29
    14c2:	cf 93       	push	r28
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
    14c8:	28 97       	sbiw	r28, 0x08	; 8
    14ca:	0f b6       	in	r0, 0x3f	; 63
    14cc:	f8 94       	cli
    14ce:	de bf       	out	0x3e, r29	; 62
    14d0:	0f be       	out	0x3f, r0	; 63
    14d2:	cd bf       	out	0x3d, r28	; 61
    14d4:	9a 83       	std	Y+2, r25	; 0x02
    14d6:	89 83       	std	Y+1, r24	; 0x01
	/*Check Timer Number*/
    switch(Config_Ptr->timer_number)
    14d8:	e9 81       	ldd	r30, Y+1	; 0x01
    14da:	fa 81       	ldd	r31, Y+2	; 0x02
    14dc:	80 81       	ld	r24, Z
    14de:	28 2f       	mov	r18, r24
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	38 87       	std	Y+8, r19	; 0x08
    14e4:	2f 83       	std	Y+7, r18	; 0x07
    14e6:	8f 81       	ldd	r24, Y+7	; 0x07
    14e8:	98 85       	ldd	r25, Y+8	; 0x08
    14ea:	81 30       	cpi	r24, 0x01	; 1
    14ec:	91 05       	cpc	r25, r1
    14ee:	09 f4       	brne	.+2      	; 0x14f2 <Timer_init+0x32>
    14f0:	6d c1       	rjmp	.+730    	; 0x17cc <Timer_init+0x30c>
    14f2:	2f 81       	ldd	r18, Y+7	; 0x07
    14f4:	38 85       	ldd	r19, Y+8	; 0x08
    14f6:	22 30       	cpi	r18, 0x02	; 2
    14f8:	31 05       	cpc	r19, r1
    14fa:	09 f4       	brne	.+2      	; 0x14fe <Timer_init+0x3e>
    14fc:	b5 c0       	rjmp	.+362    	; 0x1668 <Timer_init+0x1a8>
    14fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1500:	98 85       	ldd	r25, Y+8	; 0x08
    1502:	00 97       	sbiw	r24, 0x00	; 0
    1504:	09 f0       	breq	.+2      	; 0x1508 <Timer_init+0x48>
    1506:	62 c1       	rjmp	.+708    	; 0x17cc <Timer_init+0x30c>
    {
        case Timer_0:
        	           /*Check Timer Mode*/
        	          switch(Config_Ptr->timer_mode)
    1508:	e9 81       	ldd	r30, Y+1	; 0x01
    150a:	fa 81       	ldd	r31, Y+2	; 0x02
    150c:	81 81       	ldd	r24, Z+1	; 0x01
    150e:	28 2f       	mov	r18, r24
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	3e 83       	std	Y+6, r19	; 0x06
    1514:	2d 83       	std	Y+5, r18	; 0x05
    1516:	8d 81       	ldd	r24, Y+5	; 0x05
    1518:	9e 81       	ldd	r25, Y+6	; 0x06
    151a:	81 30       	cpi	r24, 0x01	; 1
    151c:	91 05       	cpc	r25, r1
    151e:	59 f1       	breq	.+86     	; 0x1576 <Timer_init+0xb6>
    1520:	2d 81       	ldd	r18, Y+5	; 0x05
    1522:	3e 81       	ldd	r19, Y+6	; 0x06
    1524:	22 30       	cpi	r18, 0x02	; 2
    1526:	31 05       	cpc	r19, r1
    1528:	2c f4       	brge	.+10     	; 0x1534 <Timer_init+0x74>
    152a:	8d 81       	ldd	r24, Y+5	; 0x05
    152c:	9e 81       	ldd	r25, Y+6	; 0x06
    152e:	00 97       	sbiw	r24, 0x00	; 0
    1530:	61 f0       	breq	.+24     	; 0x154a <Timer_init+0x8a>
    1532:	54 c0       	rjmp	.+168    	; 0x15dc <Timer_init+0x11c>
    1534:	2d 81       	ldd	r18, Y+5	; 0x05
    1536:	3e 81       	ldd	r19, Y+6	; 0x06
    1538:	22 30       	cpi	r18, 0x02	; 2
    153a:	31 05       	cpc	r19, r1
    153c:	59 f1       	breq	.+86     	; 0x1594 <Timer_init+0xd4>
    153e:	8d 81       	ldd	r24, Y+5	; 0x05
    1540:	9e 81       	ldd	r25, Y+6	; 0x06
    1542:	83 30       	cpi	r24, 0x03	; 3
    1544:	91 05       	cpc	r25, r1
    1546:	e1 f1       	breq	.+120    	; 0x15c0 <Timer_init+0x100>
    1548:	49 c0       	rjmp	.+146    	; 0x15dc <Timer_init+0x11c>
        	           {
        	                case Normal:           CLEAR_BIT(TCCR0,WGM00);
    154a:	a3 e5       	ldi	r26, 0x53	; 83
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	e3 e5       	ldi	r30, 0x53	; 83
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	8f 7b       	andi	r24, 0xBF	; 191
    1556:	8c 93       	st	X, r24
        	                                       CLEAR_BIT(TCCR0,WGM01);
    1558:	a3 e5       	ldi	r26, 0x53	; 83
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	e3 e5       	ldi	r30, 0x53	; 83
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	87 7f       	andi	r24, 0xF7	; 247
    1564:	8c 93       	st	X, r24
                                                   /*Non-PWM Mode*/
                                                   SET_BIT(TCCR0,FOC0);
    1566:	a3 e5       	ldi	r26, 0x53	; 83
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e3 e5       	ldi	r30, 0x53	; 83
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	80 68       	ori	r24, 0x80	; 128
    1572:	8c 93       	st	X, r24
    1574:	33 c0       	rjmp	.+102    	; 0x15dc <Timer_init+0x11c>
        	                	                   break;

        	                case PWM_PhaseCorrect: SET_BIT(TCCR0,WGM00);
    1576:	a3 e5       	ldi	r26, 0x53	; 83
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	e3 e5       	ldi	r30, 0x53	; 83
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	80 64       	ori	r24, 0x40	; 64
    1582:	8c 93       	st	X, r24
                                                   CLEAR_BIT(TCCR0,WGM01);
    1584:	a3 e5       	ldi	r26, 0x53	; 83
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	e3 e5       	ldi	r30, 0x53	; 83
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	87 7f       	andi	r24, 0xF7	; 247
    1590:	8c 93       	st	X, r24
    1592:	24 c0       	rjmp	.+72     	; 0x15dc <Timer_init+0x11c>
        	                	                   break;

        	                case CTC:              CLEAR_BIT(TCCR0,WGM00);
    1594:	a3 e5       	ldi	r26, 0x53	; 83
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	e3 e5       	ldi	r30, 0x53	; 83
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	8f 7b       	andi	r24, 0xBF	; 191
    15a0:	8c 93       	st	X, r24
                                                   SET_BIT(TCCR0,WGM01);
    15a2:	a3 e5       	ldi	r26, 0x53	; 83
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e3 e5       	ldi	r30, 0x53	; 83
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	88 60       	ori	r24, 0x08	; 8
    15ae:	8c 93       	st	X, r24
                                                   /*Non-PWM Mode*/
                                                   SET_BIT(TCCR0,FOC0);
    15b0:	a3 e5       	ldi	r26, 0x53	; 83
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	e3 e5       	ldi	r30, 0x53	; 83
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	80 68       	ori	r24, 0x80	; 128
    15bc:	8c 93       	st	X, r24
    15be:	0e c0       	rjmp	.+28     	; 0x15dc <Timer_init+0x11c>
        	                	                   break;

        	                case PWM_Fast:         SET_BIT(TCCR0,WGM00);
    15c0:	a3 e5       	ldi	r26, 0x53	; 83
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	e3 e5       	ldi	r30, 0x53	; 83
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	80 64       	ori	r24, 0x40	; 64
    15cc:	8c 93       	st	X, r24
                                                   SET_BIT(TCCR0,WGM01);
    15ce:	a3 e5       	ldi	r26, 0x53	; 83
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	e3 e5       	ldi	r30, 0x53	; 83
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	88 60       	ori	r24, 0x08	; 8
    15da:	8c 93       	st	X, r24
        	                	                   break;
        	           }

        	           /*Check OC Pin Mode*/
        	           TCCR0 = (TCCR0 & 0xCF ) | (Config_Ptr->timer_OCPin_mode << 4 ) ;
    15dc:	a3 e5       	ldi	r26, 0x53	; 83
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	e3 e5       	ldi	r30, 0x53	; 83
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	28 2f       	mov	r18, r24
    15e8:	2f 7c       	andi	r18, 0xCF	; 207
    15ea:	e9 81       	ldd	r30, Y+1	; 0x01
    15ec:	fa 81       	ldd	r31, Y+2	; 0x02
    15ee:	85 81       	ldd	r24, Z+5	; 0x05
    15f0:	88 2f       	mov	r24, r24
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	82 95       	swap	r24
    15f6:	92 95       	swap	r25
    15f8:	90 7f       	andi	r25, 0xF0	; 240
    15fa:	98 27       	eor	r25, r24
    15fc:	80 7f       	andi	r24, 0xF0	; 240
    15fe:	98 27       	eor	r25, r24
    1600:	82 2b       	or	r24, r18
    1602:	8c 93       	st	X, r24

                       /*Check Prescaler*/
                       TCCR0 = (TCCR0 & 0xF8)  | (Config_Ptr->timer_prescaler );
    1604:	a3 e5       	ldi	r26, 0x53	; 83
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	e3 e5       	ldi	r30, 0x53	; 83
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	98 2f       	mov	r25, r24
    1610:	98 7f       	andi	r25, 0xF8	; 248
    1612:	e9 81       	ldd	r30, Y+1	; 0x01
    1614:	fa 81       	ldd	r31, Y+2	; 0x02
    1616:	82 81       	ldd	r24, Z+2	; 0x02
    1618:	89 2b       	or	r24, r25
    161a:	8c 93       	st	X, r24

                       /*TCNT inital Value*/
                       TCNT0 = Config_Ptr->TCNT_value;
    161c:	a2 e5       	ldi	r26, 0x52	; 82
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	e9 81       	ldd	r30, Y+1	; 0x01
    1622:	fa 81       	ldd	r31, Y+2	; 0x02
    1624:	86 81       	ldd	r24, Z+6	; 0x06
    1626:	97 81       	ldd	r25, Z+7	; 0x07
    1628:	8c 93       	st	X, r24

                       /*OCR Value*/
                       OCR0 = Config_Ptr->OCR_Value;
    162a:	ac e5       	ldi	r26, 0x5C	; 92
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	e9 81       	ldd	r30, Y+1	; 0x01
    1630:	fa 81       	ldd	r31, Y+2	; 0x02
    1632:	80 85       	ldd	r24, Z+8	; 0x08
    1634:	8c 93       	st	X, r24

                       /*Over Flow interrupt*/
                       TIMSK = (TIMSK & 0xFE) | Config_Ptr->timer_overflowinterrupt;
    1636:	a9 e5       	ldi	r26, 0x59	; 89
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	e9 e5       	ldi	r30, 0x59	; 89
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	98 2f       	mov	r25, r24
    1642:	9e 7f       	andi	r25, 0xFE	; 254
    1644:	e9 81       	ldd	r30, Y+1	; 0x01
    1646:	fa 81       	ldd	r31, Y+2	; 0x02
    1648:	83 81       	ldd	r24, Z+3	; 0x03
    164a:	89 2b       	or	r24, r25
    164c:	8c 93       	st	X, r24

                       /*Output compare  interrupt*/
                       TIMSK = (TIMSK & 0xFD) | Config_Ptr->timer_OTCInterrupt;
    164e:	a9 e5       	ldi	r26, 0x59	; 89
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	e9 e5       	ldi	r30, 0x59	; 89
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	98 2f       	mov	r25, r24
    165a:	9d 7f       	andi	r25, 0xFD	; 253
    165c:	e9 81       	ldd	r30, Y+1	; 0x01
    165e:	fa 81       	ldd	r31, Y+2	; 0x02
    1660:	84 81       	ldd	r24, Z+4	; 0x04
    1662:	89 2b       	or	r24, r25
    1664:	8c 93       	st	X, r24
    1666:	b2 c0       	rjmp	.+356    	; 0x17cc <Timer_init+0x30c>
        	           break;


        case Timer_2:
        	          /*Check Timer Mode*/
	                  switch(Config_Ptr->timer_mode)
    1668:	e9 81       	ldd	r30, Y+1	; 0x01
    166a:	fa 81       	ldd	r31, Y+2	; 0x02
    166c:	81 81       	ldd	r24, Z+1	; 0x01
    166e:	28 2f       	mov	r18, r24
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	3c 83       	std	Y+4, r19	; 0x04
    1674:	2b 83       	std	Y+3, r18	; 0x03
    1676:	8b 81       	ldd	r24, Y+3	; 0x03
    1678:	9c 81       	ldd	r25, Y+4	; 0x04
    167a:	81 30       	cpi	r24, 0x01	; 1
    167c:	91 05       	cpc	r25, r1
    167e:	99 f1       	breq	.+102    	; 0x16e6 <Timer_init+0x226>
    1680:	2b 81       	ldd	r18, Y+3	; 0x03
    1682:	3c 81       	ldd	r19, Y+4	; 0x04
    1684:	22 30       	cpi	r18, 0x02	; 2
    1686:	31 05       	cpc	r19, r1
    1688:	2c f4       	brge	.+10     	; 0x1694 <Timer_init+0x1d4>
    168a:	8b 81       	ldd	r24, Y+3	; 0x03
    168c:	9c 81       	ldd	r25, Y+4	; 0x04
    168e:	00 97       	sbiw	r24, 0x00	; 0
    1690:	69 f0       	breq	.+26     	; 0x16ac <Timer_init+0x1ec>
    1692:	63 c0       	rjmp	.+198    	; 0x175a <Timer_init+0x29a>
    1694:	2b 81       	ldd	r18, Y+3	; 0x03
    1696:	3c 81       	ldd	r19, Y+4	; 0x04
    1698:	22 30       	cpi	r18, 0x02	; 2
    169a:	31 05       	cpc	r19, r1
    169c:	99 f1       	breq	.+102    	; 0x1704 <Timer_init+0x244>
    169e:	8b 81       	ldd	r24, Y+3	; 0x03
    16a0:	9c 81       	ldd	r25, Y+4	; 0x04
    16a2:	83 30       	cpi	r24, 0x03	; 3
    16a4:	91 05       	cpc	r25, r1
    16a6:	09 f4       	brne	.+2      	; 0x16aa <Timer_init+0x1ea>
    16a8:	4a c0       	rjmp	.+148    	; 0x173e <Timer_init+0x27e>
    16aa:	57 c0       	rjmp	.+174    	; 0x175a <Timer_init+0x29a>
	                  {
	                         case Normal:           CLEAR_BIT(TCCR2,WGM20);
    16ac:	a5 e4       	ldi	r26, 0x45	; 69
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	e5 e4       	ldi	r30, 0x45	; 69
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	8f 7b       	andi	r24, 0xBF	; 191
    16b8:	8c 93       	st	X, r24
	                                                CLEAR_BIT(TCCR2,WGM21);
    16ba:	a5 e4       	ldi	r26, 0x45	; 69
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	e5 e4       	ldi	r30, 0x45	; 69
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	87 7f       	andi	r24, 0xF7	; 247
    16c6:	8c 93       	st	X, r24
	                                                /*Non-PWM Mode*/
	                                                SET_BIT(TCCR2,FOC2);
    16c8:	a5 e4       	ldi	r26, 0x45	; 69
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e5 e4       	ldi	r30, 0x45	; 69
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	80 68       	ori	r24, 0x80	; 128
    16d4:	8c 93       	st	X, r24
	                                                /*Interrupt Enable*/
	                                                CLEAR_BIT(TIMSK,OCIE2);
    16d6:	a9 e5       	ldi	r26, 0x59	; 89
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e9 e5       	ldi	r30, 0x59	; 89
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	8f 77       	andi	r24, 0x7F	; 127
    16e2:	8c 93       	st	X, r24
    16e4:	3a c0       	rjmp	.+116    	; 0x175a <Timer_init+0x29a>
	                	                            break;
	                         case PWM_PhaseCorrect: SET_BIT(TCCR2,WGM20);
    16e6:	a5 e4       	ldi	r26, 0x45	; 69
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	e5 e4       	ldi	r30, 0x45	; 69
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	80 64       	ori	r24, 0x40	; 64
    16f2:	8c 93       	st	X, r24
                                                    CLEAR_BIT(TCCR2,WGM21);
    16f4:	a5 e4       	ldi	r26, 0x45	; 69
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	e5 e4       	ldi	r30, 0x45	; 69
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	87 7f       	andi	r24, 0xF7	; 247
    1700:	8c 93       	st	X, r24
    1702:	2b c0       	rjmp	.+86     	; 0x175a <Timer_init+0x29a>
	                	                            break;
	                         case CTC:              CLEAR_BIT(TCCR2,WGM20);
    1704:	a5 e4       	ldi	r26, 0x45	; 69
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	e5 e4       	ldi	r30, 0x45	; 69
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	8f 7b       	andi	r24, 0xBF	; 191
    1710:	8c 93       	st	X, r24
                                                    SET_BIT(TCCR2,WGM21);
    1712:	a5 e4       	ldi	r26, 0x45	; 69
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	e5 e4       	ldi	r30, 0x45	; 69
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	88 60       	ori	r24, 0x08	; 8
    171e:	8c 93       	st	X, r24
                                                    /*Non-PWM Mode*/
                                                    SET_BIT(TCCR2,FOC2);
    1720:	a5 e4       	ldi	r26, 0x45	; 69
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	e5 e4       	ldi	r30, 0x45	; 69
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	80 68       	ori	r24, 0x80	; 128
    172c:	8c 93       	st	X, r24
                                                    /*Interrupt Enable*/
                                                    SET_BIT(TIMSK,OCIE2);
    172e:	a9 e5       	ldi	r26, 0x59	; 89
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	e9 e5       	ldi	r30, 0x59	; 89
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	80 68       	ori	r24, 0x80	; 128
    173a:	8c 93       	st	X, r24
    173c:	0e c0       	rjmp	.+28     	; 0x175a <Timer_init+0x29a>
	                	                            break;
	                         case PWM_Fast:         SET_BIT(TCCR2,WGM20);
    173e:	a5 e4       	ldi	r26, 0x45	; 69
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	e5 e4       	ldi	r30, 0x45	; 69
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	80 64       	ori	r24, 0x40	; 64
    174a:	8c 93       	st	X, r24
                                                    SET_BIT(TCCR2,WGM21);
    174c:	a5 e4       	ldi	r26, 0x45	; 69
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	e5 e4       	ldi	r30, 0x45	; 69
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	88 60       	ori	r24, 0x08	; 8
    1758:	8c 93       	st	X, r24
	                	                            break;
	                 }
       	              /*Check OC Pin Mode*/
       	              TCCR2 = (TCCR2 & 0xCF ) | (Config_Ptr->timer_OCPin_mode << 4 ) ;
    175a:	a5 e4       	ldi	r26, 0x45	; 69
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	e5 e4       	ldi	r30, 0x45	; 69
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	28 2f       	mov	r18, r24
    1766:	2f 7c       	andi	r18, 0xCF	; 207
    1768:	e9 81       	ldd	r30, Y+1	; 0x01
    176a:	fa 81       	ldd	r31, Y+2	; 0x02
    176c:	85 81       	ldd	r24, Z+5	; 0x05
    176e:	88 2f       	mov	r24, r24
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	82 95       	swap	r24
    1774:	92 95       	swap	r25
    1776:	90 7f       	andi	r25, 0xF0	; 240
    1778:	98 27       	eor	r25, r24
    177a:	80 7f       	andi	r24, 0xF0	; 240
    177c:	98 27       	eor	r25, r24
    177e:	82 2b       	or	r24, r18
    1780:	8c 93       	st	X, r24

                      /*Check Prescaler*/
                      TCCR2 = (TCCR2 & 0xF8) | Config_Ptr->timer_prescaler ;
    1782:	a5 e4       	ldi	r26, 0x45	; 69
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	e5 e4       	ldi	r30, 0x45	; 69
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	98 2f       	mov	r25, r24
    178e:	98 7f       	andi	r25, 0xF8	; 248
    1790:	e9 81       	ldd	r30, Y+1	; 0x01
    1792:	fa 81       	ldd	r31, Y+2	; 0x02
    1794:	82 81       	ldd	r24, Z+2	; 0x02
    1796:	89 2b       	or	r24, r25
    1798:	8c 93       	st	X, r24

                      /*TCNT inital Value*/
                      TCNT2 = Config_Ptr->TCNT_value;
    179a:	a4 e4       	ldi	r26, 0x44	; 68
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	e9 81       	ldd	r30, Y+1	; 0x01
    17a0:	fa 81       	ldd	r31, Y+2	; 0x02
    17a2:	86 81       	ldd	r24, Z+6	; 0x06
    17a4:	97 81       	ldd	r25, Z+7	; 0x07
    17a6:	8c 93       	st	X, r24

                      /*OCR Value*/
                      OCR2 = Config_Ptr->OCR_Value;
    17a8:	a3 e4       	ldi	r26, 0x43	; 67
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e9 81       	ldd	r30, Y+1	; 0x01
    17ae:	fa 81       	ldd	r31, Y+2	; 0x02
    17b0:	80 85       	ldd	r24, Z+8	; 0x08
    17b2:	8c 93       	st	X, r24

                      /*Over Flow interrupt*/
                      TIMSK = (TIMSK & 0xBF) | Config_Ptr->timer_overflowinterrupt;
    17b4:	a9 e5       	ldi	r26, 0x59	; 89
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	e9 e5       	ldi	r30, 0x59	; 89
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	98 2f       	mov	r25, r24
    17c0:	9f 7b       	andi	r25, 0xBF	; 191
    17c2:	e9 81       	ldd	r30, Y+1	; 0x01
    17c4:	fa 81       	ldd	r31, Y+2	; 0x02
    17c6:	83 81       	ldd	r24, Z+3	; 0x03
    17c8:	89 2b       	or	r24, r25
    17ca:	8c 93       	st	X, r24

    	             break;
    }
}
    17cc:	28 96       	adiw	r28, 0x08	; 8
    17ce:	0f b6       	in	r0, 0x3f	; 63
    17d0:	f8 94       	cli
    17d2:	de bf       	out	0x3e, r29	; 62
    17d4:	0f be       	out	0x3f, r0	; 63
    17d6:	cd bf       	out	0x3d, r28	; 61
    17d8:	cf 91       	pop	r28
    17da:	df 91       	pop	r29
    17dc:	08 95       	ret

000017de <Timer_Deinit>:
* Parameters (out):   None
* Return value:       None
* Description:        Disable the Selected Timer module.
********************************************************************************/
void Timer_Deinit(uint8 Timer_Number)
{
    17de:	df 93       	push	r29
    17e0:	cf 93       	push	r28
    17e2:	00 d0       	rcall	.+0      	; 0x17e4 <Timer_Deinit+0x6>
    17e4:	0f 92       	push	r0
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
    17ea:	89 83       	std	Y+1, r24	; 0x01
	/*Check Timer Number, Then we disable the clock of prescaler*/
	switch (Timer_Number)
    17ec:	89 81       	ldd	r24, Y+1	; 0x01
    17ee:	28 2f       	mov	r18, r24
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	3b 83       	std	Y+3, r19	; 0x03
    17f4:	2a 83       	std	Y+2, r18	; 0x02
    17f6:	8a 81       	ldd	r24, Y+2	; 0x02
    17f8:	9b 81       	ldd	r25, Y+3	; 0x03
    17fa:	81 30       	cpi	r24, 0x01	; 1
    17fc:	91 05       	cpc	r25, r1
    17fe:	01 f1       	breq	.+64     	; 0x1840 <Timer_Deinit+0x62>
    1800:	2a 81       	ldd	r18, Y+2	; 0x02
    1802:	3b 81       	ldd	r19, Y+3	; 0x03
    1804:	22 30       	cpi	r18, 0x02	; 2
    1806:	31 05       	cpc	r19, r1
    1808:	89 f1       	breq	.+98     	; 0x186c <Timer_Deinit+0x8e>
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	9b 81       	ldd	r25, Y+3	; 0x03
    180e:	00 97       	sbiw	r24, 0x00	; 0
    1810:	09 f0       	breq	.+2      	; 0x1814 <Timer_Deinit+0x36>
    1812:	41 c0       	rjmp	.+130    	; 0x1896 <Timer_Deinit+0xb8>
	{
	   case Timer_0:   CLEAR_BIT(TCCR0,CS00);
    1814:	a3 e5       	ldi	r26, 0x53	; 83
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	e3 e5       	ldi	r30, 0x53	; 83
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	8e 7f       	andi	r24, 0xFE	; 254
    1820:	8c 93       	st	X, r24
	                   CLEAR_BIT(TCCR0,CS01);
    1822:	a3 e5       	ldi	r26, 0x53	; 83
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e3 e5       	ldi	r30, 0x53	; 83
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	8d 7f       	andi	r24, 0xFD	; 253
    182e:	8c 93       	st	X, r24
	                   CLEAR_BIT(TCCR0,CS02);
    1830:	a3 e5       	ldi	r26, 0x53	; 83
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	e3 e5       	ldi	r30, 0x53	; 83
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	8b 7f       	andi	r24, 0xFB	; 251
    183c:	8c 93       	st	X, r24
    183e:	2b c0       	rjmp	.+86     	; 0x1896 <Timer_Deinit+0xb8>
		               break;
	   case Timer_1:   CLEAR_BIT(TCCR1B,CS10);
    1840:	ae e4       	ldi	r26, 0x4E	; 78
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	ee e4       	ldi	r30, 0x4E	; 78
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	8e 7f       	andi	r24, 0xFE	; 254
    184c:	8c 93       	st	X, r24
                       CLEAR_BIT(TCCR1B,CS11);
    184e:	ae e4       	ldi	r26, 0x4E	; 78
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	ee e4       	ldi	r30, 0x4E	; 78
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	8d 7f       	andi	r24, 0xFD	; 253
    185a:	8c 93       	st	X, r24
                       CLEAR_BIT(TCCR1B,CS12);
    185c:	ae e4       	ldi	r26, 0x4E	; 78
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	ee e4       	ldi	r30, 0x4E	; 78
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	8b 7f       	andi	r24, 0xFB	; 251
    1868:	8c 93       	st	X, r24
    186a:	15 c0       	rjmp	.+42     	; 0x1896 <Timer_Deinit+0xb8>
		               break;
	   case Timer_2:   CLEAR_BIT(TCCR2,CS20);
    186c:	a5 e4       	ldi	r26, 0x45	; 69
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	e5 e4       	ldi	r30, 0x45	; 69
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	8e 7f       	andi	r24, 0xFE	; 254
    1878:	8c 93       	st	X, r24
                       CLEAR_BIT(TCCR2,CS21);
    187a:	a5 e4       	ldi	r26, 0x45	; 69
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	e5 e4       	ldi	r30, 0x45	; 69
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	8d 7f       	andi	r24, 0xFD	; 253
    1886:	8c 93       	st	X, r24
                       CLEAR_BIT(TCCR2,CS22);
    1888:	a5 e4       	ldi	r26, 0x45	; 69
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	e5 e4       	ldi	r30, 0x45	; 69
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
    1892:	8b 7f       	andi	r24, 0xFB	; 251
    1894:	8c 93       	st	X, r24
		               break;
	}
}
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	0f 90       	pop	r0
    189c:	cf 91       	pop	r28
    189e:	df 91       	pop	r29
    18a0:	08 95       	ret

000018a2 <Timer0_setCallBack>:
* Parameters (out):   None
* Return value:       None
* Description:        Call Back TIMER0 Function.
********************************************************************************/
void Timer0_setCallBack(void(*a_ptr)(void))
{
    18a2:	df 93       	push	r29
    18a4:	cf 93       	push	r28
    18a6:	00 d0       	rcall	.+0      	; 0x18a8 <Timer0_setCallBack+0x6>
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
    18ac:	9a 83       	std	Y+2, r25	; 0x02
    18ae:	89 83       	std	Y+1, r24	; 0x01
   g_Timer0_callBackPtr = a_ptr;
    18b0:	89 81       	ldd	r24, Y+1	; 0x01
    18b2:	9a 81       	ldd	r25, Y+2	; 0x02
    18b4:	90 93 f4 00 	sts	0x00F4, r25
    18b8:	80 93 f3 00 	sts	0x00F3, r24
}
    18bc:	0f 90       	pop	r0
    18be:	0f 90       	pop	r0
    18c0:	cf 91       	pop	r28
    18c2:	df 91       	pop	r29
    18c4:	08 95       	ret

000018c6 <Timer1_setCallBack>:
* Parameters (out):   None
* Return value:       None
* Description:        Call Back TIMER1 Function.
********************************************************************************/
void Timer1_setCallBack(void(*a_ptr)(void))
{
    18c6:	df 93       	push	r29
    18c8:	cf 93       	push	r28
    18ca:	00 d0       	rcall	.+0      	; 0x18cc <Timer1_setCallBack+0x6>
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
    18d0:	9a 83       	std	Y+2, r25	; 0x02
    18d2:	89 83       	std	Y+1, r24	; 0x01
	g_Timer1_callBackPtr = a_ptr;
    18d4:	89 81       	ldd	r24, Y+1	; 0x01
    18d6:	9a 81       	ldd	r25, Y+2	; 0x02
    18d8:	90 93 f6 00 	sts	0x00F6, r25
    18dc:	80 93 f5 00 	sts	0x00F5, r24
}
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	cf 91       	pop	r28
    18e6:	df 91       	pop	r29
    18e8:	08 95       	ret

000018ea <Timer2_setCallBack>:
* Parameters (out):   None
* Return value:       None
* Description:        Call Back TIMER2 Function.
********************************************************************************/
void Timer2_setCallBack(void(*a_ptr)(void))
{
    18ea:	df 93       	push	r29
    18ec:	cf 93       	push	r28
    18ee:	00 d0       	rcall	.+0      	; 0x18f0 <Timer2_setCallBack+0x6>
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
    18f4:	9a 83       	std	Y+2, r25	; 0x02
    18f6:	89 83       	std	Y+1, r24	; 0x01
	g_Timer2_callBackPtr = a_ptr;
    18f8:	89 81       	ldd	r24, Y+1	; 0x01
    18fa:	9a 81       	ldd	r25, Y+2	; 0x02
    18fc:	90 93 f8 00 	sts	0x00F8, r25
    1900:	80 93 f7 00 	sts	0x00F7, r24
}
    1904:	0f 90       	pop	r0
    1906:	0f 90       	pop	r0
    1908:	cf 91       	pop	r28
    190a:	df 91       	pop	r29
    190c:	08 95       	ret

0000190e <UART_Init>:
* Parameters (out):   None
* Return value:       None
* Description:        Initialize the UART module.
********************************************************************************/
void UART_Init(const UART_ConfigType * Config_Ptr)
{
    190e:	df 93       	push	r29
    1910:	cf 93       	push	r28
    1912:	cd b7       	in	r28, 0x3d	; 61
    1914:	de b7       	in	r29, 0x3e	; 62
    1916:	60 97       	sbiw	r28, 0x10	; 16
    1918:	0f b6       	in	r0, 0x3f	; 63
    191a:	f8 94       	cli
    191c:	de bf       	out	0x3e, r29	; 62
    191e:	0f be       	out	0x3f, r0	; 63
    1920:	cd bf       	out	0x3d, r28	; 61
    1922:	9a 83       	std	Y+2, r25	; 0x02
    1924:	89 83       	std	Y+1, r24	; 0x01
	/*Config Operation Mode*/
    switch( Config_Ptr ->operation_mode)
    1926:	e9 81       	ldd	r30, Y+1	; 0x01
    1928:	fa 81       	ldd	r31, Y+2	; 0x02
    192a:	80 81       	ld	r24, Z
    192c:	28 2f       	mov	r18, r24
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	38 8b       	std	Y+16, r19	; 0x10
    1932:	2f 87       	std	Y+15, r18	; 0x0f
    1934:	4f 85       	ldd	r20, Y+15	; 0x0f
    1936:	58 89       	ldd	r21, Y+16	; 0x10
    1938:	41 30       	cpi	r20, 0x01	; 1
    193a:	51 05       	cpc	r21, r1
    193c:	91 f0       	breq	.+36     	; 0x1962 <UART_Init+0x54>
    193e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1940:	98 89       	ldd	r25, Y+16	; 0x10
    1942:	82 30       	cpi	r24, 0x02	; 2
    1944:	91 05       	cpc	r25, r1
    1946:	a9 f0       	breq	.+42     	; 0x1972 <UART_Init+0x64>
    1948:	2f 85       	ldd	r18, Y+15	; 0x0f
    194a:	38 89       	ldd	r19, Y+16	; 0x10
    194c:	21 15       	cp	r18, r1
    194e:	31 05       	cpc	r19, r1
    1950:	f1 f4       	brne	.+60     	; 0x198e <UART_Init+0x80>
    {
      case Receiver:                SET_BIT(UCSRB,RXEN);
    1952:	aa e2       	ldi	r26, 0x2A	; 42
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	ea e2       	ldi	r30, 0x2A	; 42
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	80 61       	ori	r24, 0x10	; 16
    195e:	8c 93       	st	X, r24
    1960:	16 c0       	rjmp	.+44     	; 0x198e <UART_Init+0x80>
    	                            break;
      case Transmitter:             SET_BIT(UCSRB,TXEN);
    1962:	aa e2       	ldi	r26, 0x2A	; 42
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	ea e2       	ldi	r30, 0x2A	; 42
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	88 60       	ori	r24, 0x08	; 8
    196e:	8c 93       	st	X, r24
    1970:	0e c0       	rjmp	.+28     	; 0x198e <UART_Init+0x80>
    	                            break;
      case Transmitter_Receiver:    SET_BIT(UCSRB,RXEN);
    1972:	aa e2       	ldi	r26, 0x2A	; 42
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	ea e2       	ldi	r30, 0x2A	; 42
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	80 61       	ori	r24, 0x10	; 16
    197e:	8c 93       	st	X, r24
                                    SET_BIT(UCSRB,TXEN);
    1980:	aa e2       	ldi	r26, 0x2A	; 42
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	ea e2       	ldi	r30, 0x2A	; 42
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	88 60       	ori	r24, 0x08	; 8
    198c:	8c 93       	st	X, r24
    	                            break;
    }
	/*Config Transmission Speed*/
	switch( Config_Ptr ->speed)
    198e:	e9 81       	ldd	r30, Y+1	; 0x01
    1990:	fa 81       	ldd	r31, Y+2	; 0x02
    1992:	81 81       	ldd	r24, Z+1	; 0x01
    1994:	48 2f       	mov	r20, r24
    1996:	50 e0       	ldi	r21, 0x00	; 0
    1998:	5e 87       	std	Y+14, r21	; 0x0e
    199a:	4d 87       	std	Y+13, r20	; 0x0d
    199c:	8d 85       	ldd	r24, Y+13	; 0x0d
    199e:	9e 85       	ldd	r25, Y+14	; 0x0e
    19a0:	00 97       	sbiw	r24, 0x00	; 0
    19a2:	31 f0       	breq	.+12     	; 0x19b0 <UART_Init+0xa2>
    19a4:	2d 85       	ldd	r18, Y+13	; 0x0d
    19a6:	3e 85       	ldd	r19, Y+14	; 0x0e
    19a8:	21 30       	cpi	r18, 0x01	; 1
    19aa:	31 05       	cpc	r19, r1
    19ac:	61 f0       	breq	.+24     	; 0x19c6 <UART_Init+0xb8>
    19ae:	15 c0       	rjmp	.+42     	; 0x19da <UART_Init+0xcc>
	{
	  case Normal_Speed:   CLEAR_BIT(UCSRA,U2X);
    19b0:	ab e2       	ldi	r26, 0x2B	; 43
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	eb e2       	ldi	r30, 0x2B	; 43
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	8d 7f       	andi	r24, 0xFD	; 253
    19bc:	8c 93       	st	X, r24
	                       g_speed_mode_division_factor = 16;
    19be:	80 e1       	ldi	r24, 0x10	; 16
    19c0:	80 93 fb 00 	sts	0x00FB, r24
    19c4:	0a c0       	rjmp	.+20     	; 0x19da <UART_Init+0xcc>
	 	                   break;
	  case Double_Speed:   SET_BIT(UCSRA,U2X);
    19c6:	ab e2       	ldi	r26, 0x2B	; 43
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	eb e2       	ldi	r30, 0x2B	; 43
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	82 60       	ori	r24, 0x02	; 2
    19d2:	8c 93       	st	X, r24
                           g_speed_mode_division_factor = 8;
    19d4:	88 e0       	ldi	r24, 0x08	; 8
    19d6:	80 93 fb 00 	sts	0x00FB, r24
	  		               break;
	}

	/*Config Synchronization of UART*/
	switch ( Config_Ptr->synchronization)
    19da:	e9 81       	ldd	r30, Y+1	; 0x01
    19dc:	fa 81       	ldd	r31, Y+2	; 0x02
    19de:	82 81       	ldd	r24, Z+2	; 0x02
    19e0:	48 2f       	mov	r20, r24
    19e2:	50 e0       	ldi	r21, 0x00	; 0
    19e4:	5c 87       	std	Y+12, r21	; 0x0c
    19e6:	4b 87       	std	Y+11, r20	; 0x0b
    19e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    19ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    19ec:	00 97       	sbiw	r24, 0x00	; 0
    19ee:	31 f0       	breq	.+12     	; 0x19fc <UART_Init+0xee>
    19f0:	2b 85       	ldd	r18, Y+11	; 0x0b
    19f2:	3c 85       	ldd	r19, Y+12	; 0x0c
    19f4:	21 30       	cpi	r18, 0x01	; 1
    19f6:	31 05       	cpc	r19, r1
    19f8:	81 f0       	breq	.+32     	; 0x1a1a <UART_Init+0x10c>
    19fa:	1d c0       	rjmp	.+58     	; 0x1a36 <UART_Init+0x128>
	{
	 case Asynchronous: SET_BIT(UCSRC,URSEL);
    19fc:	a0 e4       	ldi	r26, 0x40	; 64
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	e0 e4       	ldi	r30, 0x40	; 64
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	80 68       	ori	r24, 0x80	; 128
    1a08:	8c 93       	st	X, r24
	                    CLEAR_BIT(UCSRC,UMSEL);
    1a0a:	a0 e4       	ldi	r26, 0x40	; 64
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	e0 e4       	ldi	r30, 0x40	; 64
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	8f 7b       	andi	r24, 0xBF	; 191
    1a16:	8c 93       	st	X, r24
    1a18:	0e c0       	rjmp	.+28     	; 0x1a36 <UART_Init+0x128>
		                break;
	 case Synchronous:  SET_BIT(UCSRC,URSEL);
    1a1a:	a0 e4       	ldi	r26, 0x40	; 64
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	e0 e4       	ldi	r30, 0x40	; 64
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	80 68       	ori	r24, 0x80	; 128
    1a26:	8c 93       	st	X, r24
	                    SET_BIT(UCSRC,UMSEL);
    1a28:	a0 e4       	ldi	r26, 0x40	; 64
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	e0 e4       	ldi	r30, 0x40	; 64
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	80 64       	ori	r24, 0x40	; 64
    1a34:	8c 93       	st	X, r24
	 		            break;
	}

	/*Config Parity Bit of UART*/
	switch ( Config_Ptr ->parity)
    1a36:	e9 81       	ldd	r30, Y+1	; 0x01
    1a38:	fa 81       	ldd	r31, Y+2	; 0x02
    1a3a:	83 81       	ldd	r24, Z+3	; 0x03
    1a3c:	48 2f       	mov	r20, r24
    1a3e:	50 e0       	ldi	r21, 0x00	; 0
    1a40:	5a 87       	std	Y+10, r21	; 0x0a
    1a42:	49 87       	std	Y+9, r20	; 0x09
    1a44:	89 85       	ldd	r24, Y+9	; 0x09
    1a46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a48:	81 30       	cpi	r24, 0x01	; 1
    1a4a:	91 05       	cpc	r25, r1
    1a4c:	09 f1       	breq	.+66     	; 0x1a90 <UART_Init+0x182>
    1a4e:	29 85       	ldd	r18, Y+9	; 0x09
    1a50:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a52:	22 30       	cpi	r18, 0x02	; 2
    1a54:	31 05       	cpc	r19, r1
    1a56:	91 f1       	breq	.+100    	; 0x1abc <UART_Init+0x1ae>
    1a58:	49 85       	ldd	r20, Y+9	; 0x09
    1a5a:	5a 85       	ldd	r21, Y+10	; 0x0a
    1a5c:	41 15       	cp	r20, r1
    1a5e:	51 05       	cpc	r21, r1
    1a60:	09 f0       	breq	.+2      	; 0x1a64 <UART_Init+0x156>
    1a62:	41 c0       	rjmp	.+130    	; 0x1ae6 <UART_Init+0x1d8>
	{
	  case Parity_Disabled: SET_BIT(UCSRC,URSEL);
    1a64:	a0 e4       	ldi	r26, 0x40	; 64
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
    1a68:	e0 e4       	ldi	r30, 0x40	; 64
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	80 81       	ld	r24, Z
    1a6e:	80 68       	ori	r24, 0x80	; 128
    1a70:	8c 93       	st	X, r24
		                    CLEAR_BIT(UCSRC,UPM0);
    1a72:	a0 e4       	ldi	r26, 0x40	; 64
    1a74:	b0 e0       	ldi	r27, 0x00	; 0
    1a76:	e0 e4       	ldi	r30, 0x40	; 64
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	8f 7e       	andi	r24, 0xEF	; 239
    1a7e:	8c 93       	st	X, r24
	                        CLEAR_BIT(UCSRC,UPM1);
    1a80:	a0 e4       	ldi	r26, 0x40	; 64
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	e0 e4       	ldi	r30, 0x40	; 64
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	8f 7d       	andi	r24, 0xDF	; 223
    1a8c:	8c 93       	st	X, r24
    1a8e:	2b c0       	rjmp	.+86     	; 0x1ae6 <UART_Init+0x1d8>
	                        break;
	  case Parity_Odd:      SET_BIT(UCSRC,URSEL);
    1a90:	a0 e4       	ldi	r26, 0x40	; 64
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	e0 e4       	ldi	r30, 0x40	; 64
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	80 68       	ori	r24, 0x80	; 128
    1a9c:	8c 93       	st	X, r24
		                    SET_BIT(UCSRC,UPM0);
    1a9e:	a0 e4       	ldi	r26, 0x40	; 64
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	e0 e4       	ldi	r30, 0x40	; 64
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	80 61       	ori	r24, 0x10	; 16
    1aaa:	8c 93       	st	X, r24
                            SET_BIT(UCSRC,UPM1);
    1aac:	a0 e4       	ldi	r26, 0x40	; 64
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	e0 e4       	ldi	r30, 0x40	; 64
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	80 62       	ori	r24, 0x20	; 32
    1ab8:	8c 93       	st	X, r24
    1aba:	15 c0       	rjmp	.+42     	; 0x1ae6 <UART_Init+0x1d8>
                            break;
	  case Parity_Even:     SET_BIT(UCSRC,URSEL);
    1abc:	a0 e4       	ldi	r26, 0x40	; 64
    1abe:	b0 e0       	ldi	r27, 0x00	; 0
    1ac0:	e0 e4       	ldi	r30, 0x40	; 64
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	80 68       	ori	r24, 0x80	; 128
    1ac8:	8c 93       	st	X, r24
		                    CLEAR_BIT(UCSRC,UPM0);
    1aca:	a0 e4       	ldi	r26, 0x40	; 64
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	e0 e4       	ldi	r30, 0x40	; 64
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	8f 7e       	andi	r24, 0xEF	; 239
    1ad6:	8c 93       	st	X, r24
                            SET_BIT(UCSRC,UPM1);
    1ad8:	a0 e4       	ldi	r26, 0x40	; 64
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	e0 e4       	ldi	r30, 0x40	; 64
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	80 62       	ori	r24, 0x20	; 32
    1ae4:	8c 93       	st	X, r24
                            break;
	}

	/*Config Number of Stop Bits of UART*/
    switch( Config_Ptr ->stop_bit)
    1ae6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ae8:	fa 81       	ldd	r31, Y+2	; 0x02
    1aea:	84 81       	ldd	r24, Z+4	; 0x04
    1aec:	28 2f       	mov	r18, r24
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	38 87       	std	Y+8, r19	; 0x08
    1af2:	2f 83       	std	Y+7, r18	; 0x07
    1af4:	4f 81       	ldd	r20, Y+7	; 0x07
    1af6:	58 85       	ldd	r21, Y+8	; 0x08
    1af8:	41 15       	cp	r20, r1
    1afa:	51 05       	cpc	r21, r1
    1afc:	31 f0       	breq	.+12     	; 0x1b0a <UART_Init+0x1fc>
    1afe:	8f 81       	ldd	r24, Y+7	; 0x07
    1b00:	98 85       	ldd	r25, Y+8	; 0x08
    1b02:	81 30       	cpi	r24, 0x01	; 1
    1b04:	91 05       	cpc	r25, r1
    1b06:	49 f0       	breq	.+18     	; 0x1b1a <UART_Init+0x20c>
    1b08:	0f c0       	rjmp	.+30     	; 0x1b28 <UART_Init+0x21a>
    {
    case StopBit_1:  CLEAR_BIT(UCSRC,USBS);
    1b0a:	a0 e4       	ldi	r26, 0x40	; 64
    1b0c:	b0 e0       	ldi	r27, 0x00	; 0
    1b0e:	e0 e4       	ldi	r30, 0x40	; 64
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	87 7f       	andi	r24, 0xF7	; 247
    1b16:	8c 93       	st	X, r24
    1b18:	07 c0       	rjmp	.+14     	; 0x1b28 <UART_Init+0x21a>
    	             break;
    case StopBit_2:  SET_BIT(UCSRC,USBS);
    1b1a:	a0 e4       	ldi	r26, 0x40	; 64
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	e0 e4       	ldi	r30, 0x40	; 64
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	88 60       	ori	r24, 0x08	; 8
    1b26:	8c 93       	st	X, r24
    	             break;
    }

    /*Config Number of Data Frame Bits*/
    switch ( Config_Ptr ->dataframe_bits )
    1b28:	e9 81       	ldd	r30, Y+1	; 0x01
    1b2a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b2c:	85 81       	ldd	r24, Z+5	; 0x05
    1b2e:	28 2f       	mov	r18, r24
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	3e 83       	std	Y+6, r19	; 0x06
    1b34:	2d 83       	std	Y+5, r18	; 0x05
    1b36:	4d 81       	ldd	r20, Y+5	; 0x05
    1b38:	5e 81       	ldd	r21, Y+6	; 0x06
    1b3a:	42 30       	cpi	r20, 0x02	; 2
    1b3c:	51 05       	cpc	r21, r1
    1b3e:	09 f4       	brne	.+2      	; 0x1b42 <UART_Init+0x234>
    1b40:	49 c0       	rjmp	.+146    	; 0x1bd4 <UART_Init+0x2c6>
    1b42:	8d 81       	ldd	r24, Y+5	; 0x05
    1b44:	9e 81       	ldd	r25, Y+6	; 0x06
    1b46:	83 30       	cpi	r24, 0x03	; 3
    1b48:	91 05       	cpc	r25, r1
    1b4a:	5c f4       	brge	.+22     	; 0x1b62 <UART_Init+0x254>
    1b4c:	2d 81       	ldd	r18, Y+5	; 0x05
    1b4e:	3e 81       	ldd	r19, Y+6	; 0x06
    1b50:	21 15       	cp	r18, r1
    1b52:	31 05       	cpc	r19, r1
    1b54:	99 f0       	breq	.+38     	; 0x1b7c <UART_Init+0x26e>
    1b56:	4d 81       	ldd	r20, Y+5	; 0x05
    1b58:	5e 81       	ldd	r21, Y+6	; 0x06
    1b5a:	41 30       	cpi	r20, 0x01	; 1
    1b5c:	51 05       	cpc	r21, r1
    1b5e:	21 f1       	breq	.+72     	; 0x1ba8 <UART_Init+0x29a>
    1b60:	7a c0       	rjmp	.+244    	; 0x1c56 <UART_Init+0x348>
    1b62:	8d 81       	ldd	r24, Y+5	; 0x05
    1b64:	9e 81       	ldd	r25, Y+6	; 0x06
    1b66:	83 30       	cpi	r24, 0x03	; 3
    1b68:	91 05       	cpc	r25, r1
    1b6a:	09 f4       	brne	.+2      	; 0x1b6e <UART_Init+0x260>
    1b6c:	49 c0       	rjmp	.+146    	; 0x1c00 <UART_Init+0x2f2>
    1b6e:	2d 81       	ldd	r18, Y+5	; 0x05
    1b70:	3e 81       	ldd	r19, Y+6	; 0x06
    1b72:	27 30       	cpi	r18, 0x07	; 7
    1b74:	31 05       	cpc	r19, r1
    1b76:	09 f4       	brne	.+2      	; 0x1b7a <UART_Init+0x26c>
    1b78:	59 c0       	rjmp	.+178    	; 0x1c2c <UART_Init+0x31e>
    1b7a:	6d c0       	rjmp	.+218    	; 0x1c56 <UART_Init+0x348>
    {
    case DataFrame_5Bits:  CLEAR_BIT(UCSRC,UCSZ0);
    1b7c:	a0 e4       	ldi	r26, 0x40	; 64
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	e0 e4       	ldi	r30, 0x40	; 64
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	8d 7f       	andi	r24, 0xFD	; 253
    1b88:	8c 93       	st	X, r24
                           CLEAR_BIT(UCSRC,UCSZ1);
    1b8a:	a0 e4       	ldi	r26, 0x40	; 64
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	e0 e4       	ldi	r30, 0x40	; 64
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	8b 7f       	andi	r24, 0xFB	; 251
    1b96:	8c 93       	st	X, r24
                           CLEAR_BIT(UCSRB,UCSZ2);
    1b98:	aa e2       	ldi	r26, 0x2A	; 42
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	ea e2       	ldi	r30, 0x2A	; 42
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	8b 7f       	andi	r24, 0xFB	; 251
    1ba4:	8c 93       	st	X, r24
    1ba6:	57 c0       	rjmp	.+174    	; 0x1c56 <UART_Init+0x348>
    	                   break;
    case DataFrame_6Bits:  SET_BIT(UCSRC,UCSZ0);
    1ba8:	a0 e4       	ldi	r26, 0x40	; 64
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	e0 e4       	ldi	r30, 0x40	; 64
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	82 60       	ori	r24, 0x02	; 2
    1bb4:	8c 93       	st	X, r24
                           CLEAR_BIT(UCSRC,UCSZ1);
    1bb6:	a0 e4       	ldi	r26, 0x40	; 64
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	e0 e4       	ldi	r30, 0x40	; 64
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	8b 7f       	andi	r24, 0xFB	; 251
    1bc2:	8c 93       	st	X, r24
                           CLEAR_BIT(UCSRB,UCSZ2);
    1bc4:	aa e2       	ldi	r26, 0x2A	; 42
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	ea e2       	ldi	r30, 0x2A	; 42
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	8b 7f       	andi	r24, 0xFB	; 251
    1bd0:	8c 93       	st	X, r24
    1bd2:	41 c0       	rjmp	.+130    	; 0x1c56 <UART_Init+0x348>
    	                   break;
    case DataFrame_7Bits:  CLEAR_BIT(UCSRC,UCSZ0);
    1bd4:	a0 e4       	ldi	r26, 0x40	; 64
    1bd6:	b0 e0       	ldi	r27, 0x00	; 0
    1bd8:	e0 e4       	ldi	r30, 0x40	; 64
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	8d 7f       	andi	r24, 0xFD	; 253
    1be0:	8c 93       	st	X, r24
                           SET_BIT(UCSRC,UCSZ1);
    1be2:	a0 e4       	ldi	r26, 0x40	; 64
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	e0 e4       	ldi	r30, 0x40	; 64
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	84 60       	ori	r24, 0x04	; 4
    1bee:	8c 93       	st	X, r24
                           CLEAR_BIT(UCSRB,UCSZ2);
    1bf0:	aa e2       	ldi	r26, 0x2A	; 42
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	ea e2       	ldi	r30, 0x2A	; 42
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	8b 7f       	andi	r24, 0xFB	; 251
    1bfc:	8c 93       	st	X, r24
    1bfe:	2b c0       	rjmp	.+86     	; 0x1c56 <UART_Init+0x348>
    	                   break;
    case DataFrame_8Bits:  SET_BIT(UCSRC,UCSZ0);
    1c00:	a0 e4       	ldi	r26, 0x40	; 64
    1c02:	b0 e0       	ldi	r27, 0x00	; 0
    1c04:	e0 e4       	ldi	r30, 0x40	; 64
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	80 81       	ld	r24, Z
    1c0a:	82 60       	ori	r24, 0x02	; 2
    1c0c:	8c 93       	st	X, r24
                           SET_BIT(UCSRC,UCSZ1);
    1c0e:	a0 e4       	ldi	r26, 0x40	; 64
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	e0 e4       	ldi	r30, 0x40	; 64
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	84 60       	ori	r24, 0x04	; 4
    1c1a:	8c 93       	st	X, r24
                           CLEAR_BIT(UCSRB,UCSZ2);
    1c1c:	aa e2       	ldi	r26, 0x2A	; 42
    1c1e:	b0 e0       	ldi	r27, 0x00	; 0
    1c20:	ea e2       	ldi	r30, 0x2A	; 42
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 81       	ld	r24, Z
    1c26:	8b 7f       	andi	r24, 0xFB	; 251
    1c28:	8c 93       	st	X, r24
    1c2a:	15 c0       	rjmp	.+42     	; 0x1c56 <UART_Init+0x348>
    	                   break;
    case DataFrame_9Bits:  SET_BIT(UCSRC,UCSZ0);
    1c2c:	a0 e4       	ldi	r26, 0x40	; 64
    1c2e:	b0 e0       	ldi	r27, 0x00	; 0
    1c30:	e0 e4       	ldi	r30, 0x40	; 64
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	82 60       	ori	r24, 0x02	; 2
    1c38:	8c 93       	st	X, r24
                           SET_BIT(UCSRC,UCSZ1);
    1c3a:	a0 e4       	ldi	r26, 0x40	; 64
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	e0 e4       	ldi	r30, 0x40	; 64
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	84 60       	ori	r24, 0x04	; 4
    1c46:	8c 93       	st	X, r24
                           SET_BIT(UCSRB,UCSZ2);
    1c48:	aa e2       	ldi	r26, 0x2A	; 42
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	ea e2       	ldi	r30, 0x2A	; 42
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	84 60       	ori	r24, 0x04	; 4
    1c54:	8c 93       	st	X, r24
    	                   break;
    }


    switch( Config_Ptr ->baud_rate)
    1c56:	e9 81       	ldd	r30, Y+1	; 0x01
    1c58:	fa 81       	ldd	r31, Y+2	; 0x02
    1c5a:	86 81       	ldd	r24, Z+6	; 0x06
    1c5c:	48 2f       	mov	r20, r24
    1c5e:	50 e0       	ldi	r21, 0x00	; 0
    1c60:	5c 83       	std	Y+4, r21	; 0x04
    1c62:	4b 83       	std	Y+3, r20	; 0x03
    1c64:	8b 81       	ldd	r24, Y+3	; 0x03
    1c66:	9c 81       	ldd	r25, Y+4	; 0x04
    1c68:	81 30       	cpi	r24, 0x01	; 1
    1c6a:	91 05       	cpc	r25, r1
    1c6c:	f9 f0       	breq	.+62     	; 0x1cac <UART_Init+0x39e>
    1c6e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c70:	3c 81       	ldd	r19, Y+4	; 0x04
    1c72:	22 30       	cpi	r18, 0x02	; 2
    1c74:	31 05       	cpc	r19, r1
    1c76:	34 f4       	brge	.+12     	; 0x1c84 <UART_Init+0x376>
    1c78:	4b 81       	ldd	r20, Y+3	; 0x03
    1c7a:	5c 81       	ldd	r21, Y+4	; 0x04
    1c7c:	41 15       	cp	r20, r1
    1c7e:	51 05       	cpc	r21, r1
    1c80:	69 f0       	breq	.+26     	; 0x1c9c <UART_Init+0x38e>
    1c82:	7b c0       	rjmp	.+246    	; 0x1d7a <UART_Init+0x46c>
    1c84:	8b 81       	ldd	r24, Y+3	; 0x03
    1c86:	9c 81       	ldd	r25, Y+4	; 0x04
    1c88:	82 30       	cpi	r24, 0x02	; 2
    1c8a:	91 05       	cpc	r25, r1
    1c8c:	91 f1       	breq	.+100    	; 0x1cf2 <UART_Init+0x3e4>
    1c8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c90:	3c 81       	ldd	r19, Y+4	; 0x04
    1c92:	23 30       	cpi	r18, 0x03	; 3
    1c94:	31 05       	cpc	r19, r1
    1c96:	09 f4       	brne	.+2      	; 0x1c9a <UART_Init+0x38c>
    1c98:	4f c0       	rjmp	.+158    	; 0x1d38 <UART_Init+0x42a>
    1c9a:	6f c0       	rjmp	.+222    	; 0x1d7a <UART_Init+0x46c>
    {
    case BaudRate_9600:   /*UBBR = 12 for 1MHz , UBBR = 103 for 8MHz*/
    	                  UBRRH = 103>>8;
    1c9c:	e0 e4       	ldi	r30, 0x40	; 64
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	10 82       	st	Z, r1
                           UBRRL = 103;
    1ca2:	e9 e2       	ldi	r30, 0x29	; 41
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	87 e6       	ldi	r24, 0x67	; 103
    1ca8:	80 83       	st	Z, r24
    1caa:	67 c0       	rjmp	.+206    	; 0x1d7a <UART_Init+0x46c>
    	                  break;
    	                  /*There is a bug in the equation shown blow */
    case BaudRate_14400:  g_UBRR_value= (uint16)(((F_CPU / (g_speed_mode_division_factor * 14400 )))-1);
    1cac:	80 91 fb 00 	lds	r24, 0x00FB
    1cb0:	28 2f       	mov	r18, r24
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	80 e4       	ldi	r24, 0x40	; 64
    1cb6:	98 e3       	ldi	r25, 0x38	; 56
    1cb8:	ac 01       	movw	r20, r24
    1cba:	24 9f       	mul	r18, r20
    1cbc:	c0 01       	movw	r24, r0
    1cbe:	25 9f       	mul	r18, r21
    1cc0:	90 0d       	add	r25, r0
    1cc2:	34 9f       	mul	r19, r20
    1cc4:	90 0d       	add	r25, r0
    1cc6:	11 24       	eor	r1, r1
    1cc8:	9c 01       	movw	r18, r24
    1cca:	44 27       	eor	r20, r20
    1ccc:	37 fd       	sbrc	r19, 7
    1cce:	40 95       	com	r20
    1cd0:	54 2f       	mov	r21, r20
    1cd2:	80 e0       	ldi	r24, 0x00	; 0
    1cd4:	92 e1       	ldi	r25, 0x12	; 18
    1cd6:	aa e7       	ldi	r26, 0x7A	; 122
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	bc 01       	movw	r22, r24
    1cdc:	cd 01       	movw	r24, r26
    1cde:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__udivmodsi4>
    1ce2:	da 01       	movw	r26, r20
    1ce4:	c9 01       	movw	r24, r18
    1ce6:	01 97       	sbiw	r24, 0x01	; 1
    1ce8:	90 93 fa 00 	sts	0x00FA, r25
    1cec:	80 93 f9 00 	sts	0x00F9, r24
    1cf0:	44 c0       	rjmp	.+136    	; 0x1d7a <UART_Init+0x46c>
    	                  break;
    case BaudRate_19200:  g_UBRR_value= (uint16)(((F_CPU / (g_speed_mode_division_factor * 19200 )))-1);
    1cf2:	80 91 fb 00 	lds	r24, 0x00FB
    1cf6:	28 2f       	mov	r18, r24
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	9b e4       	ldi	r25, 0x4B	; 75
    1cfe:	ac 01       	movw	r20, r24
    1d00:	24 9f       	mul	r18, r20
    1d02:	c0 01       	movw	r24, r0
    1d04:	25 9f       	mul	r18, r21
    1d06:	90 0d       	add	r25, r0
    1d08:	34 9f       	mul	r19, r20
    1d0a:	90 0d       	add	r25, r0
    1d0c:	11 24       	eor	r1, r1
    1d0e:	9c 01       	movw	r18, r24
    1d10:	44 27       	eor	r20, r20
    1d12:	37 fd       	sbrc	r19, 7
    1d14:	40 95       	com	r20
    1d16:	54 2f       	mov	r21, r20
    1d18:	80 e0       	ldi	r24, 0x00	; 0
    1d1a:	92 e1       	ldi	r25, 0x12	; 18
    1d1c:	aa e7       	ldi	r26, 0x7A	; 122
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	bc 01       	movw	r22, r24
    1d22:	cd 01       	movw	r24, r26
    1d24:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__udivmodsi4>
    1d28:	da 01       	movw	r26, r20
    1d2a:	c9 01       	movw	r24, r18
    1d2c:	01 97       	sbiw	r24, 0x01	; 1
    1d2e:	90 93 fa 00 	sts	0x00FA, r25
    1d32:	80 93 f9 00 	sts	0x00F9, r24
    1d36:	21 c0       	rjmp	.+66     	; 0x1d7a <UART_Init+0x46c>
    	                  break;
    case BaudRate_115200: g_UBRR_value= (uint16)(((F_CPU / (g_speed_mode_division_factor * 115200)))-1);
    1d38:	80 91 fb 00 	lds	r24, 0x00FB
    1d3c:	88 2f       	mov	r24, r24
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	a0 e0       	ldi	r26, 0x00	; 0
    1d42:	b0 e0       	ldi	r27, 0x00	; 0
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	32 ec       	ldi	r19, 0xC2	; 194
    1d48:	41 e0       	ldi	r20, 0x01	; 1
    1d4a:	50 e0       	ldi	r21, 0x00	; 0
    1d4c:	bc 01       	movw	r22, r24
    1d4e:	cd 01       	movw	r24, r26
    1d50:	0e 94 4a 18 	call	0x3094	; 0x3094 <__mulsi3>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	9c 01       	movw	r18, r24
    1d5a:	ad 01       	movw	r20, r26
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
    1d5e:	92 e1       	ldi	r25, 0x12	; 18
    1d60:	aa e7       	ldi	r26, 0x7A	; 122
    1d62:	b0 e0       	ldi	r27, 0x00	; 0
    1d64:	bc 01       	movw	r22, r24
    1d66:	cd 01       	movw	r24, r26
    1d68:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__udivmodsi4>
    1d6c:	da 01       	movw	r26, r20
    1d6e:	c9 01       	movw	r24, r18
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	90 93 fa 00 	sts	0x00FA, r25
    1d76:	80 93 f9 00 	sts	0x00F9, r24
    }




}
    1d7a:	60 96       	adiw	r28, 0x10	; 16
    1d7c:	0f b6       	in	r0, 0x3f	; 63
    1d7e:	f8 94       	cli
    1d80:	de bf       	out	0x3e, r29	; 62
    1d82:	0f be       	out	0x3f, r0	; 63
    1d84:	cd bf       	out	0x3d, r28	; 61
    1d86:	cf 91       	pop	r28
    1d88:	df 91       	pop	r29
    1d8a:	08 95       	ret

00001d8c <UART_sendByte>:
* Parameters (out):   None
* Return value:       None
* Description:        Send a Byte to other devices.
********************************************************************************/
void UART_sendByte( const uint8 data )
{
    1d8c:	df 93       	push	r29
    1d8e:	cf 93       	push	r28
    1d90:	0f 92       	push	r0
    1d92:	cd b7       	in	r28, 0x3d	; 61
    1d94:	de b7       	in	r29, 0x3e	; 62
    1d96:	89 83       	std	Y+1, r24	; 0x01
   /*Wait until Flag = 1 , etc: UDR is empty and ready to be loaded with data*/
   while (BIT_IS_CLEAR(UCSRA,UDRE));
    1d98:	eb e2       	ldi	r30, 0x2B	; 43
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	80 81       	ld	r24, Z
    1d9e:	88 2f       	mov	r24, r24
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	80 72       	andi	r24, 0x20	; 32
    1da4:	90 70       	andi	r25, 0x00	; 0
    1da6:	00 97       	sbiw	r24, 0x00	; 0
    1da8:	b9 f3       	breq	.-18     	; 0x1d98 <UART_sendByte+0xc>
   UDR = data;
    1daa:	ec e2       	ldi	r30, 0x2C	; 44
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	89 81       	ldd	r24, Y+1	; 0x01
    1db0:	80 83       	st	Z, r24
}
    1db2:	0f 90       	pop	r0
    1db4:	cf 91       	pop	r28
    1db6:	df 91       	pop	r29
    1db8:	08 95       	ret

00001dba <UART_receiveByte>:
* Parameters (out):   None
* Return value:       uint8
* Description:        receive a Byte from other devices
********************************************************************************/
uint8 UART_receiveByte (void)
{
    1dba:	df 93       	push	r29
    1dbc:	cf 93       	push	r28
    1dbe:	cd b7       	in	r28, 0x3d	; 61
    1dc0:	de b7       	in	r29, 0x3e	; 62
	 /*Wait until Flag = 1 , etc: UDR is Loaded with received Data then return UDR*/
	  while (BIT_IS_CLEAR(UCSRA,RXC));
    1dc2:	eb e2       	ldi	r30, 0x2B	; 43
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	80 81       	ld	r24, Z
    1dc8:	88 23       	and	r24, r24
    1dca:	dc f7       	brge	.-10     	; 0x1dc2 <UART_receiveByte+0x8>
      return UDR;
    1dcc:	ec e2       	ldi	r30, 0x2C	; 44
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 81       	ld	r24, Z
}
    1dd2:	cf 91       	pop	r28
    1dd4:	df 91       	pop	r29
    1dd6:	08 95       	ret

00001dd8 <UART_sendString>:
* Parameters (out):   None
* Return value:       None
* Description:        Send a String to other devices.
********************************************************************************/
void UART_sendString( const uint8 * Str)
{
    1dd8:	df 93       	push	r29
    1dda:	cf 93       	push	r28
    1ddc:	00 d0       	rcall	.+0      	; 0x1dde <UART_sendString+0x6>
    1dde:	0f 92       	push	r0
    1de0:	cd b7       	in	r28, 0x3d	; 61
    1de2:	de b7       	in	r29, 0x3e	; 62
    1de4:	9b 83       	std	Y+3, r25	; 0x03
    1de6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1de8:	19 82       	std	Y+1, r1	; 0x01
    1dea:	0e c0       	rjmp	.+28     	; 0x1e08 <UART_sendString+0x30>

		/* Send the whole string */
		while(Str[i] != '\0')
		{
			UART_sendByte(Str[i]);
    1dec:	89 81       	ldd	r24, Y+1	; 0x01
    1dee:	28 2f       	mov	r18, r24
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	8a 81       	ldd	r24, Y+2	; 0x02
    1df4:	9b 81       	ldd	r25, Y+3	; 0x03
    1df6:	fc 01       	movw	r30, r24
    1df8:	e2 0f       	add	r30, r18
    1dfa:	f3 1f       	adc	r31, r19
    1dfc:	80 81       	ld	r24, Z
    1dfe:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <UART_sendByte>
			i++;
    1e02:	89 81       	ldd	r24, Y+1	; 0x01
    1e04:	8f 5f       	subi	r24, 0xFF	; 255
    1e06:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString( const uint8 * Str)
{
	uint8 i = 0;

		/* Send the whole string */
		while(Str[i] != '\0')
    1e08:	89 81       	ldd	r24, Y+1	; 0x01
    1e0a:	28 2f       	mov	r18, r24
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e10:	9b 81       	ldd	r25, Y+3	; 0x03
    1e12:	fc 01       	movw	r30, r24
    1e14:	e2 0f       	add	r30, r18
    1e16:	f3 1f       	adc	r31, r19
    1e18:	80 81       	ld	r24, Z
    1e1a:	88 23       	and	r24, r24
    1e1c:	39 f7       	brne	.-50     	; 0x1dec <UART_sendString+0x14>
		{
			UART_sendByte(Str[i]);
			i++;
		}
}
    1e1e:	0f 90       	pop	r0
    1e20:	0f 90       	pop	r0
    1e22:	0f 90       	pop	r0
    1e24:	cf 91       	pop	r28
    1e26:	df 91       	pop	r29
    1e28:	08 95       	ret

00001e2a <UART_receiveString>:
* Parameters (out):   None
* Return value:       uint8
* Description:        receive a stringfrom other devices
********************************************************************************/
void UART_receiveString (uint8 *Str)
{
    1e2a:	0f 93       	push	r16
    1e2c:	1f 93       	push	r17
    1e2e:	df 93       	push	r29
    1e30:	cf 93       	push	r28
    1e32:	00 d0       	rcall	.+0      	; 0x1e34 <UART_receiveString+0xa>
    1e34:	0f 92       	push	r0
    1e36:	cd b7       	in	r28, 0x3d	; 61
    1e38:	de b7       	in	r29, 0x3e	; 62
    1e3a:	9b 83       	std	Y+3, r25	; 0x03
    1e3c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1e3e:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_receiveByte();
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	28 2f       	mov	r18, r24
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	8a 81       	ldd	r24, Y+2	; 0x02
    1e48:	9b 81       	ldd	r25, Y+3	; 0x03
    1e4a:	8c 01       	movw	r16, r24
    1e4c:	02 0f       	add	r16, r18
    1e4e:	13 1f       	adc	r17, r19
    1e50:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <UART_receiveByte>
    1e54:	f8 01       	movw	r30, r16
    1e56:	80 83       	st	Z, r24
    1e58:	0f c0       	rjmp	.+30     	; 0x1e78 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    1e5a:	89 81       	ldd	r24, Y+1	; 0x01
    1e5c:	8f 5f       	subi	r24, 0xFF	; 255
    1e5e:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    1e60:	89 81       	ldd	r24, Y+1	; 0x01
    1e62:	28 2f       	mov	r18, r24
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	8a 81       	ldd	r24, Y+2	; 0x02
    1e68:	9b 81       	ldd	r25, Y+3	; 0x03
    1e6a:	8c 01       	movw	r16, r24
    1e6c:	02 0f       	add	r16, r18
    1e6e:	13 1f       	adc	r17, r19
    1e70:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <UART_receiveByte>
    1e74:	f8 01       	movw	r30, r16
    1e76:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_receiveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    1e78:	89 81       	ldd	r24, Y+1	; 0x01
    1e7a:	28 2f       	mov	r18, r24
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e80:	9b 81       	ldd	r25, Y+3	; 0x03
    1e82:	fc 01       	movw	r30, r24
    1e84:	e2 0f       	add	r30, r18
    1e86:	f3 1f       	adc	r31, r19
    1e88:	80 81       	ld	r24, Z
    1e8a:	83 32       	cpi	r24, 0x23	; 35
    1e8c:	31 f7       	brne	.-52     	; 0x1e5a <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1e8e:	89 81       	ldd	r24, Y+1	; 0x01
    1e90:	28 2f       	mov	r18, r24
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	8a 81       	ldd	r24, Y+2	; 0x02
    1e96:	9b 81       	ldd	r25, Y+3	; 0x03
    1e98:	fc 01       	movw	r30, r24
    1e9a:	e2 0f       	add	r30, r18
    1e9c:	f3 1f       	adc	r31, r19
    1e9e:	10 82       	st	Z, r1
}
    1ea0:	0f 90       	pop	r0
    1ea2:	0f 90       	pop	r0
    1ea4:	0f 90       	pop	r0
    1ea6:	cf 91       	pop	r28
    1ea8:	df 91       	pop	r29
    1eaa:	1f 91       	pop	r17
    1eac:	0f 91       	pop	r16
    1eae:	08 95       	ret

00001eb0 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1eb0:	df 93       	push	r29
    1eb2:	cf 93       	push	r28
    1eb4:	00 d0       	rcall	.+0      	; 0x1eb6 <GPIO_setupPinDirection+0x6>
    1eb6:	00 d0       	rcall	.+0      	; 0x1eb8 <GPIO_setupPinDirection+0x8>
    1eb8:	0f 92       	push	r0
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
    1ebe:	89 83       	std	Y+1, r24	; 0x01
    1ec0:	6a 83       	std	Y+2, r22	; 0x02
    1ec2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec6:	88 30       	cpi	r24, 0x08	; 8
    1ec8:	08 f0       	brcs	.+2      	; 0x1ecc <GPIO_setupPinDirection+0x1c>
    1eca:	d5 c0       	rjmp	.+426    	; 0x2076 <GPIO_setupPinDirection+0x1c6>
    1ecc:	89 81       	ldd	r24, Y+1	; 0x01
    1ece:	84 30       	cpi	r24, 0x04	; 4
    1ed0:	08 f0       	brcs	.+2      	; 0x1ed4 <GPIO_setupPinDirection+0x24>
    1ed2:	d1 c0       	rjmp	.+418    	; 0x2076 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1ed4:	89 81       	ldd	r24, Y+1	; 0x01
    1ed6:	28 2f       	mov	r18, r24
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	3d 83       	std	Y+5, r19	; 0x05
    1edc:	2c 83       	std	Y+4, r18	; 0x04
    1ede:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ee2:	81 30       	cpi	r24, 0x01	; 1
    1ee4:	91 05       	cpc	r25, r1
    1ee6:	09 f4       	brne	.+2      	; 0x1eea <GPIO_setupPinDirection+0x3a>
    1ee8:	43 c0       	rjmp	.+134    	; 0x1f70 <GPIO_setupPinDirection+0xc0>
    1eea:	2c 81       	ldd	r18, Y+4	; 0x04
    1eec:	3d 81       	ldd	r19, Y+5	; 0x05
    1eee:	22 30       	cpi	r18, 0x02	; 2
    1ef0:	31 05       	cpc	r19, r1
    1ef2:	2c f4       	brge	.+10     	; 0x1efe <GPIO_setupPinDirection+0x4e>
    1ef4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ef8:	00 97       	sbiw	r24, 0x00	; 0
    1efa:	71 f0       	breq	.+28     	; 0x1f18 <GPIO_setupPinDirection+0x68>
    1efc:	bc c0       	rjmp	.+376    	; 0x2076 <GPIO_setupPinDirection+0x1c6>
    1efe:	2c 81       	ldd	r18, Y+4	; 0x04
    1f00:	3d 81       	ldd	r19, Y+5	; 0x05
    1f02:	22 30       	cpi	r18, 0x02	; 2
    1f04:	31 05       	cpc	r19, r1
    1f06:	09 f4       	brne	.+2      	; 0x1f0a <GPIO_setupPinDirection+0x5a>
    1f08:	5f c0       	rjmp	.+190    	; 0x1fc8 <GPIO_setupPinDirection+0x118>
    1f0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f0e:	83 30       	cpi	r24, 0x03	; 3
    1f10:	91 05       	cpc	r25, r1
    1f12:	09 f4       	brne	.+2      	; 0x1f16 <GPIO_setupPinDirection+0x66>
    1f14:	85 c0       	rjmp	.+266    	; 0x2020 <GPIO_setupPinDirection+0x170>
    1f16:	af c0       	rjmp	.+350    	; 0x2076 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1f18:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1a:	81 30       	cpi	r24, 0x01	; 1
    1f1c:	a1 f4       	brne	.+40     	; 0x1f46 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1f1e:	aa e3       	ldi	r26, 0x3A	; 58
    1f20:	b0 e0       	ldi	r27, 0x00	; 0
    1f22:	ea e3       	ldi	r30, 0x3A	; 58
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	80 81       	ld	r24, Z
    1f28:	48 2f       	mov	r20, r24
    1f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2c:	28 2f       	mov	r18, r24
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	02 2e       	mov	r0, r18
    1f36:	02 c0       	rjmp	.+4      	; 0x1f3c <GPIO_setupPinDirection+0x8c>
    1f38:	88 0f       	add	r24, r24
    1f3a:	99 1f       	adc	r25, r25
    1f3c:	0a 94       	dec	r0
    1f3e:	e2 f7       	brpl	.-8      	; 0x1f38 <GPIO_setupPinDirection+0x88>
    1f40:	84 2b       	or	r24, r20
    1f42:	8c 93       	st	X, r24
    1f44:	98 c0       	rjmp	.+304    	; 0x2076 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1f46:	aa e3       	ldi	r26, 0x3A	; 58
    1f48:	b0 e0       	ldi	r27, 0x00	; 0
    1f4a:	ea e3       	ldi	r30, 0x3A	; 58
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	80 81       	ld	r24, Z
    1f50:	48 2f       	mov	r20, r24
    1f52:	8a 81       	ldd	r24, Y+2	; 0x02
    1f54:	28 2f       	mov	r18, r24
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	02 2e       	mov	r0, r18
    1f5e:	02 c0       	rjmp	.+4      	; 0x1f64 <GPIO_setupPinDirection+0xb4>
    1f60:	88 0f       	add	r24, r24
    1f62:	99 1f       	adc	r25, r25
    1f64:	0a 94       	dec	r0
    1f66:	e2 f7       	brpl	.-8      	; 0x1f60 <GPIO_setupPinDirection+0xb0>
    1f68:	80 95       	com	r24
    1f6a:	84 23       	and	r24, r20
    1f6c:	8c 93       	st	X, r24
    1f6e:	83 c0       	rjmp	.+262    	; 0x2076 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1f70:	8b 81       	ldd	r24, Y+3	; 0x03
    1f72:	81 30       	cpi	r24, 0x01	; 1
    1f74:	a1 f4       	brne	.+40     	; 0x1f9e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1f76:	a7 e3       	ldi	r26, 0x37	; 55
    1f78:	b0 e0       	ldi	r27, 0x00	; 0
    1f7a:	e7 e3       	ldi	r30, 0x37	; 55
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	80 81       	ld	r24, Z
    1f80:	48 2f       	mov	r20, r24
    1f82:	8a 81       	ldd	r24, Y+2	; 0x02
    1f84:	28 2f       	mov	r18, r24
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	02 2e       	mov	r0, r18
    1f8e:	02 c0       	rjmp	.+4      	; 0x1f94 <GPIO_setupPinDirection+0xe4>
    1f90:	88 0f       	add	r24, r24
    1f92:	99 1f       	adc	r25, r25
    1f94:	0a 94       	dec	r0
    1f96:	e2 f7       	brpl	.-8      	; 0x1f90 <GPIO_setupPinDirection+0xe0>
    1f98:	84 2b       	or	r24, r20
    1f9a:	8c 93       	st	X, r24
    1f9c:	6c c0       	rjmp	.+216    	; 0x2076 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1f9e:	a7 e3       	ldi	r26, 0x37	; 55
    1fa0:	b0 e0       	ldi	r27, 0x00	; 0
    1fa2:	e7 e3       	ldi	r30, 0x37	; 55
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 81       	ld	r24, Z
    1fa8:	48 2f       	mov	r20, r24
    1faa:	8a 81       	ldd	r24, Y+2	; 0x02
    1fac:	28 2f       	mov	r18, r24
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	02 2e       	mov	r0, r18
    1fb6:	02 c0       	rjmp	.+4      	; 0x1fbc <GPIO_setupPinDirection+0x10c>
    1fb8:	88 0f       	add	r24, r24
    1fba:	99 1f       	adc	r25, r25
    1fbc:	0a 94       	dec	r0
    1fbe:	e2 f7       	brpl	.-8      	; 0x1fb8 <GPIO_setupPinDirection+0x108>
    1fc0:	80 95       	com	r24
    1fc2:	84 23       	and	r24, r20
    1fc4:	8c 93       	st	X, r24
    1fc6:	57 c0       	rjmp	.+174    	; 0x2076 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1fc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fca:	81 30       	cpi	r24, 0x01	; 1
    1fcc:	a1 f4       	brne	.+40     	; 0x1ff6 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1fce:	a4 e3       	ldi	r26, 0x34	; 52
    1fd0:	b0 e0       	ldi	r27, 0x00	; 0
    1fd2:	e4 e3       	ldi	r30, 0x34	; 52
    1fd4:	f0 e0       	ldi	r31, 0x00	; 0
    1fd6:	80 81       	ld	r24, Z
    1fd8:	48 2f       	mov	r20, r24
    1fda:	8a 81       	ldd	r24, Y+2	; 0x02
    1fdc:	28 2f       	mov	r18, r24
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	02 2e       	mov	r0, r18
    1fe6:	02 c0       	rjmp	.+4      	; 0x1fec <GPIO_setupPinDirection+0x13c>
    1fe8:	88 0f       	add	r24, r24
    1fea:	99 1f       	adc	r25, r25
    1fec:	0a 94       	dec	r0
    1fee:	e2 f7       	brpl	.-8      	; 0x1fe8 <GPIO_setupPinDirection+0x138>
    1ff0:	84 2b       	or	r24, r20
    1ff2:	8c 93       	st	X, r24
    1ff4:	40 c0       	rjmp	.+128    	; 0x2076 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1ff6:	a4 e3       	ldi	r26, 0x34	; 52
    1ff8:	b0 e0       	ldi	r27, 0x00	; 0
    1ffa:	e4 e3       	ldi	r30, 0x34	; 52
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	80 81       	ld	r24, Z
    2000:	48 2f       	mov	r20, r24
    2002:	8a 81       	ldd	r24, Y+2	; 0x02
    2004:	28 2f       	mov	r18, r24
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	02 2e       	mov	r0, r18
    200e:	02 c0       	rjmp	.+4      	; 0x2014 <GPIO_setupPinDirection+0x164>
    2010:	88 0f       	add	r24, r24
    2012:	99 1f       	adc	r25, r25
    2014:	0a 94       	dec	r0
    2016:	e2 f7       	brpl	.-8      	; 0x2010 <GPIO_setupPinDirection+0x160>
    2018:	80 95       	com	r24
    201a:	84 23       	and	r24, r20
    201c:	8c 93       	st	X, r24
    201e:	2b c0       	rjmp	.+86     	; 0x2076 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    2020:	8b 81       	ldd	r24, Y+3	; 0x03
    2022:	81 30       	cpi	r24, 0x01	; 1
    2024:	a1 f4       	brne	.+40     	; 0x204e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    2026:	a1 e3       	ldi	r26, 0x31	; 49
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	e1 e3       	ldi	r30, 0x31	; 49
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	48 2f       	mov	r20, r24
    2032:	8a 81       	ldd	r24, Y+2	; 0x02
    2034:	28 2f       	mov	r18, r24
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	02 2e       	mov	r0, r18
    203e:	02 c0       	rjmp	.+4      	; 0x2044 <GPIO_setupPinDirection+0x194>
    2040:	88 0f       	add	r24, r24
    2042:	99 1f       	adc	r25, r25
    2044:	0a 94       	dec	r0
    2046:	e2 f7       	brpl	.-8      	; 0x2040 <GPIO_setupPinDirection+0x190>
    2048:	84 2b       	or	r24, r20
    204a:	8c 93       	st	X, r24
    204c:	14 c0       	rjmp	.+40     	; 0x2076 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    204e:	a1 e3       	ldi	r26, 0x31	; 49
    2050:	b0 e0       	ldi	r27, 0x00	; 0
    2052:	e1 e3       	ldi	r30, 0x31	; 49
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	80 81       	ld	r24, Z
    2058:	48 2f       	mov	r20, r24
    205a:	8a 81       	ldd	r24, Y+2	; 0x02
    205c:	28 2f       	mov	r18, r24
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	02 2e       	mov	r0, r18
    2066:	02 c0       	rjmp	.+4      	; 0x206c <GPIO_setupPinDirection+0x1bc>
    2068:	88 0f       	add	r24, r24
    206a:	99 1f       	adc	r25, r25
    206c:	0a 94       	dec	r0
    206e:	e2 f7       	brpl	.-8      	; 0x2068 <GPIO_setupPinDirection+0x1b8>
    2070:	80 95       	com	r24
    2072:	84 23       	and	r24, r20
    2074:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2076:	0f 90       	pop	r0
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	0f 90       	pop	r0
    207e:	0f 90       	pop	r0
    2080:	cf 91       	pop	r28
    2082:	df 91       	pop	r29
    2084:	08 95       	ret

00002086 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    2086:	df 93       	push	r29
    2088:	cf 93       	push	r28
    208a:	00 d0       	rcall	.+0      	; 0x208c <GPIO_writePin+0x6>
    208c:	00 d0       	rcall	.+0      	; 0x208e <GPIO_writePin+0x8>
    208e:	0f 92       	push	r0
    2090:	cd b7       	in	r28, 0x3d	; 61
    2092:	de b7       	in	r29, 0x3e	; 62
    2094:	89 83       	std	Y+1, r24	; 0x01
    2096:	6a 83       	std	Y+2, r22	; 0x02
    2098:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    209a:	8a 81       	ldd	r24, Y+2	; 0x02
    209c:	88 30       	cpi	r24, 0x08	; 8
    209e:	08 f0       	brcs	.+2      	; 0x20a2 <GPIO_writePin+0x1c>
    20a0:	d5 c0       	rjmp	.+426    	; 0x224c <GPIO_writePin+0x1c6>
    20a2:	89 81       	ldd	r24, Y+1	; 0x01
    20a4:	84 30       	cpi	r24, 0x04	; 4
    20a6:	08 f0       	brcs	.+2      	; 0x20aa <GPIO_writePin+0x24>
    20a8:	d1 c0       	rjmp	.+418    	; 0x224c <GPIO_writePin+0x1c6>
	{
		/* Do Nothing */
	}
	else
	{
      switch(port_num)
    20aa:	89 81       	ldd	r24, Y+1	; 0x01
    20ac:	28 2f       	mov	r18, r24
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	3d 83       	std	Y+5, r19	; 0x05
    20b2:	2c 83       	std	Y+4, r18	; 0x04
    20b4:	8c 81       	ldd	r24, Y+4	; 0x04
    20b6:	9d 81       	ldd	r25, Y+5	; 0x05
    20b8:	81 30       	cpi	r24, 0x01	; 1
    20ba:	91 05       	cpc	r25, r1
    20bc:	09 f4       	brne	.+2      	; 0x20c0 <GPIO_writePin+0x3a>
    20be:	43 c0       	rjmp	.+134    	; 0x2146 <GPIO_writePin+0xc0>
    20c0:	2c 81       	ldd	r18, Y+4	; 0x04
    20c2:	3d 81       	ldd	r19, Y+5	; 0x05
    20c4:	22 30       	cpi	r18, 0x02	; 2
    20c6:	31 05       	cpc	r19, r1
    20c8:	2c f4       	brge	.+10     	; 0x20d4 <GPIO_writePin+0x4e>
    20ca:	8c 81       	ldd	r24, Y+4	; 0x04
    20cc:	9d 81       	ldd	r25, Y+5	; 0x05
    20ce:	00 97       	sbiw	r24, 0x00	; 0
    20d0:	71 f0       	breq	.+28     	; 0x20ee <GPIO_writePin+0x68>
    20d2:	bc c0       	rjmp	.+376    	; 0x224c <GPIO_writePin+0x1c6>
    20d4:	2c 81       	ldd	r18, Y+4	; 0x04
    20d6:	3d 81       	ldd	r19, Y+5	; 0x05
    20d8:	22 30       	cpi	r18, 0x02	; 2
    20da:	31 05       	cpc	r19, r1
    20dc:	09 f4       	brne	.+2      	; 0x20e0 <GPIO_writePin+0x5a>
    20de:	5f c0       	rjmp	.+190    	; 0x219e <GPIO_writePin+0x118>
    20e0:	8c 81       	ldd	r24, Y+4	; 0x04
    20e2:	9d 81       	ldd	r25, Y+5	; 0x05
    20e4:	83 30       	cpi	r24, 0x03	; 3
    20e6:	91 05       	cpc	r25, r1
    20e8:	09 f4       	brne	.+2      	; 0x20ec <GPIO_writePin+0x66>
    20ea:	85 c0       	rjmp	.+266    	; 0x21f6 <GPIO_writePin+0x170>
    20ec:	af c0       	rjmp	.+350    	; 0x224c <GPIO_writePin+0x1c6>
      {
         case PORTA_ID:
        	 if ( value == LOGIC_HIGH)
    20ee:	8b 81       	ldd	r24, Y+3	; 0x03
    20f0:	81 30       	cpi	r24, 0x01	; 1
    20f2:	a1 f4       	brne	.+40     	; 0x211c <GPIO_writePin+0x96>
        	 {
        		 SET_BIT(PORTA, pin_num);
    20f4:	ab e3       	ldi	r26, 0x3B	; 59
    20f6:	b0 e0       	ldi	r27, 0x00	; 0
    20f8:	eb e3       	ldi	r30, 0x3B	; 59
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	80 81       	ld	r24, Z
    20fe:	48 2f       	mov	r20, r24
    2100:	8a 81       	ldd	r24, Y+2	; 0x02
    2102:	28 2f       	mov	r18, r24
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	02 2e       	mov	r0, r18
    210c:	02 c0       	rjmp	.+4      	; 0x2112 <GPIO_writePin+0x8c>
    210e:	88 0f       	add	r24, r24
    2110:	99 1f       	adc	r25, r25
    2112:	0a 94       	dec	r0
    2114:	e2 f7       	brpl	.-8      	; 0x210e <GPIO_writePin+0x88>
    2116:	84 2b       	or	r24, r20
    2118:	8c 93       	st	X, r24
    211a:	98 c0       	rjmp	.+304    	; 0x224c <GPIO_writePin+0x1c6>
        	 }
        	 else
        	 {
        		 CLEAR_BIT(PORTA,pin_num);
    211c:	ab e3       	ldi	r26, 0x3B	; 59
    211e:	b0 e0       	ldi	r27, 0x00	; 0
    2120:	eb e3       	ldi	r30, 0x3B	; 59
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	80 81       	ld	r24, Z
    2126:	48 2f       	mov	r20, r24
    2128:	8a 81       	ldd	r24, Y+2	; 0x02
    212a:	28 2f       	mov	r18, r24
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	02 2e       	mov	r0, r18
    2134:	02 c0       	rjmp	.+4      	; 0x213a <GPIO_writePin+0xb4>
    2136:	88 0f       	add	r24, r24
    2138:	99 1f       	adc	r25, r25
    213a:	0a 94       	dec	r0
    213c:	e2 f7       	brpl	.-8      	; 0x2136 <GPIO_writePin+0xb0>
    213e:	80 95       	com	r24
    2140:	84 23       	and	r24, r20
    2142:	8c 93       	st	X, r24
    2144:	83 c0       	rjmp	.+262    	; 0x224c <GPIO_writePin+0x1c6>
        	 }
        	 break;
         case PORTB_ID:
        	 if ( value == LOGIC_HIGH)
    2146:	8b 81       	ldd	r24, Y+3	; 0x03
    2148:	81 30       	cpi	r24, 0x01	; 1
    214a:	a1 f4       	brne	.+40     	; 0x2174 <GPIO_writePin+0xee>
        	 {
        		 SET_BIT(PORTB, pin_num);
    214c:	a8 e3       	ldi	r26, 0x38	; 56
    214e:	b0 e0       	ldi	r27, 0x00	; 0
    2150:	e8 e3       	ldi	r30, 0x38	; 56
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	80 81       	ld	r24, Z
    2156:	48 2f       	mov	r20, r24
    2158:	8a 81       	ldd	r24, Y+2	; 0x02
    215a:	28 2f       	mov	r18, r24
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	81 e0       	ldi	r24, 0x01	; 1
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	02 2e       	mov	r0, r18
    2164:	02 c0       	rjmp	.+4      	; 0x216a <GPIO_writePin+0xe4>
    2166:	88 0f       	add	r24, r24
    2168:	99 1f       	adc	r25, r25
    216a:	0a 94       	dec	r0
    216c:	e2 f7       	brpl	.-8      	; 0x2166 <GPIO_writePin+0xe0>
    216e:	84 2b       	or	r24, r20
    2170:	8c 93       	st	X, r24
    2172:	6c c0       	rjmp	.+216    	; 0x224c <GPIO_writePin+0x1c6>
        	 }
        	 else
        	 {
        		 CLEAR_BIT(PORTB,pin_num);
    2174:	a8 e3       	ldi	r26, 0x38	; 56
    2176:	b0 e0       	ldi	r27, 0x00	; 0
    2178:	e8 e3       	ldi	r30, 0x38	; 56
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	80 81       	ld	r24, Z
    217e:	48 2f       	mov	r20, r24
    2180:	8a 81       	ldd	r24, Y+2	; 0x02
    2182:	28 2f       	mov	r18, r24
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	81 e0       	ldi	r24, 0x01	; 1
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	02 2e       	mov	r0, r18
    218c:	02 c0       	rjmp	.+4      	; 0x2192 <GPIO_writePin+0x10c>
    218e:	88 0f       	add	r24, r24
    2190:	99 1f       	adc	r25, r25
    2192:	0a 94       	dec	r0
    2194:	e2 f7       	brpl	.-8      	; 0x218e <GPIO_writePin+0x108>
    2196:	80 95       	com	r24
    2198:	84 23       	and	r24, r20
    219a:	8c 93       	st	X, r24
    219c:	57 c0       	rjmp	.+174    	; 0x224c <GPIO_writePin+0x1c6>
        	 }
        	 break;
         case PORTC_ID:
        	 if ( value == LOGIC_HIGH)
    219e:	8b 81       	ldd	r24, Y+3	; 0x03
    21a0:	81 30       	cpi	r24, 0x01	; 1
    21a2:	a1 f4       	brne	.+40     	; 0x21cc <GPIO_writePin+0x146>
        	 {
        		 SET_BIT(PORTC, pin_num);
    21a4:	a5 e3       	ldi	r26, 0x35	; 53
    21a6:	b0 e0       	ldi	r27, 0x00	; 0
    21a8:	e5 e3       	ldi	r30, 0x35	; 53
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	80 81       	ld	r24, Z
    21ae:	48 2f       	mov	r20, r24
    21b0:	8a 81       	ldd	r24, Y+2	; 0x02
    21b2:	28 2f       	mov	r18, r24
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	02 2e       	mov	r0, r18
    21bc:	02 c0       	rjmp	.+4      	; 0x21c2 <GPIO_writePin+0x13c>
    21be:	88 0f       	add	r24, r24
    21c0:	99 1f       	adc	r25, r25
    21c2:	0a 94       	dec	r0
    21c4:	e2 f7       	brpl	.-8      	; 0x21be <GPIO_writePin+0x138>
    21c6:	84 2b       	or	r24, r20
    21c8:	8c 93       	st	X, r24
    21ca:	40 c0       	rjmp	.+128    	; 0x224c <GPIO_writePin+0x1c6>
        	 }
        	 else
        	 {
        		 CLEAR_BIT(PORTC,pin_num);
    21cc:	a5 e3       	ldi	r26, 0x35	; 53
    21ce:	b0 e0       	ldi	r27, 0x00	; 0
    21d0:	e5 e3       	ldi	r30, 0x35	; 53
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	80 81       	ld	r24, Z
    21d6:	48 2f       	mov	r20, r24
    21d8:	8a 81       	ldd	r24, Y+2	; 0x02
    21da:	28 2f       	mov	r18, r24
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	02 2e       	mov	r0, r18
    21e4:	02 c0       	rjmp	.+4      	; 0x21ea <GPIO_writePin+0x164>
    21e6:	88 0f       	add	r24, r24
    21e8:	99 1f       	adc	r25, r25
    21ea:	0a 94       	dec	r0
    21ec:	e2 f7       	brpl	.-8      	; 0x21e6 <GPIO_writePin+0x160>
    21ee:	80 95       	com	r24
    21f0:	84 23       	and	r24, r20
    21f2:	8c 93       	st	X, r24
    21f4:	2b c0       	rjmp	.+86     	; 0x224c <GPIO_writePin+0x1c6>
        	 }
        	 break;
         case PORTD_ID:
        	 if ( value == LOGIC_HIGH)
    21f6:	8b 81       	ldd	r24, Y+3	; 0x03
    21f8:	81 30       	cpi	r24, 0x01	; 1
    21fa:	a1 f4       	brne	.+40     	; 0x2224 <GPIO_writePin+0x19e>
        	 {
        		 SET_BIT(PORTD, pin_num);
    21fc:	a2 e3       	ldi	r26, 0x32	; 50
    21fe:	b0 e0       	ldi	r27, 0x00	; 0
    2200:	e2 e3       	ldi	r30, 0x32	; 50
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	80 81       	ld	r24, Z
    2206:	48 2f       	mov	r20, r24
    2208:	8a 81       	ldd	r24, Y+2	; 0x02
    220a:	28 2f       	mov	r18, r24
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	02 2e       	mov	r0, r18
    2214:	02 c0       	rjmp	.+4      	; 0x221a <GPIO_writePin+0x194>
    2216:	88 0f       	add	r24, r24
    2218:	99 1f       	adc	r25, r25
    221a:	0a 94       	dec	r0
    221c:	e2 f7       	brpl	.-8      	; 0x2216 <GPIO_writePin+0x190>
    221e:	84 2b       	or	r24, r20
    2220:	8c 93       	st	X, r24
    2222:	14 c0       	rjmp	.+40     	; 0x224c <GPIO_writePin+0x1c6>
        	 }
        	 else
        	 {
        		 CLEAR_BIT(PORTD,pin_num);
    2224:	a2 e3       	ldi	r26, 0x32	; 50
    2226:	b0 e0       	ldi	r27, 0x00	; 0
    2228:	e2 e3       	ldi	r30, 0x32	; 50
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	80 81       	ld	r24, Z
    222e:	48 2f       	mov	r20, r24
    2230:	8a 81       	ldd	r24, Y+2	; 0x02
    2232:	28 2f       	mov	r18, r24
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	02 2e       	mov	r0, r18
    223c:	02 c0       	rjmp	.+4      	; 0x2242 <GPIO_writePin+0x1bc>
    223e:	88 0f       	add	r24, r24
    2240:	99 1f       	adc	r25, r25
    2242:	0a 94       	dec	r0
    2244:	e2 f7       	brpl	.-8      	; 0x223e <GPIO_writePin+0x1b8>
    2246:	80 95       	com	r24
    2248:	84 23       	and	r24, r20
    224a:	8c 93       	st	X, r24
        	 }
        	 break;
      }
	}
}
    224c:	0f 90       	pop	r0
    224e:	0f 90       	pop	r0
    2250:	0f 90       	pop	r0
    2252:	0f 90       	pop	r0
    2254:	0f 90       	pop	r0
    2256:	cf 91       	pop	r28
    2258:	df 91       	pop	r29
    225a:	08 95       	ret

0000225c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    225c:	df 93       	push	r29
    225e:	cf 93       	push	r28
    2260:	00 d0       	rcall	.+0      	; 0x2262 <GPIO_readPin+0x6>
    2262:	00 d0       	rcall	.+0      	; 0x2264 <GPIO_readPin+0x8>
    2264:	0f 92       	push	r0
    2266:	cd b7       	in	r28, 0x3d	; 61
    2268:	de b7       	in	r29, 0x3e	; 62
    226a:	8a 83       	std	Y+2, r24	; 0x02
    226c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 temp=0;
    226e:	19 82       	std	Y+1, r1	; 0x01
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2270:	8b 81       	ldd	r24, Y+3	; 0x03
    2272:	88 30       	cpi	r24, 0x08	; 8
    2274:	18 f4       	brcc	.+6      	; 0x227c <GPIO_readPin+0x20>
    2276:	8a 81       	ldd	r24, Y+2	; 0x02
    2278:	84 30       	cpi	r24, 0x04	; 4
    227a:	10 f0       	brcs	.+4      	; 0x2280 <GPIO_readPin+0x24>
	{
		temp = 0 ;
    227c:	19 82       	std	Y+1, r1	; 0x01
    227e:	67 c0       	rjmp	.+206    	; 0x234e <GPIO_readPin+0xf2>
	}
	else
	{
		switch(port_num)
    2280:	8a 81       	ldd	r24, Y+2	; 0x02
    2282:	28 2f       	mov	r18, r24
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	3d 83       	std	Y+5, r19	; 0x05
    2288:	2c 83       	std	Y+4, r18	; 0x04
    228a:	4c 81       	ldd	r20, Y+4	; 0x04
    228c:	5d 81       	ldd	r21, Y+5	; 0x05
    228e:	41 30       	cpi	r20, 0x01	; 1
    2290:	51 05       	cpc	r21, r1
    2292:	41 f1       	breq	.+80     	; 0x22e4 <GPIO_readPin+0x88>
    2294:	8c 81       	ldd	r24, Y+4	; 0x04
    2296:	9d 81       	ldd	r25, Y+5	; 0x05
    2298:	82 30       	cpi	r24, 0x02	; 2
    229a:	91 05       	cpc	r25, r1
    229c:	34 f4       	brge	.+12     	; 0x22aa <GPIO_readPin+0x4e>
    229e:	2c 81       	ldd	r18, Y+4	; 0x04
    22a0:	3d 81       	ldd	r19, Y+5	; 0x05
    22a2:	21 15       	cp	r18, r1
    22a4:	31 05       	cpc	r19, r1
    22a6:	61 f0       	breq	.+24     	; 0x22c0 <GPIO_readPin+0x64>
    22a8:	52 c0       	rjmp	.+164    	; 0x234e <GPIO_readPin+0xf2>
    22aa:	4c 81       	ldd	r20, Y+4	; 0x04
    22ac:	5d 81       	ldd	r21, Y+5	; 0x05
    22ae:	42 30       	cpi	r20, 0x02	; 2
    22b0:	51 05       	cpc	r21, r1
    22b2:	51 f1       	breq	.+84     	; 0x2308 <GPIO_readPin+0xac>
    22b4:	8c 81       	ldd	r24, Y+4	; 0x04
    22b6:	9d 81       	ldd	r25, Y+5	; 0x05
    22b8:	83 30       	cpi	r24, 0x03	; 3
    22ba:	91 05       	cpc	r25, r1
    22bc:	b9 f1       	breq	.+110    	; 0x232c <GPIO_readPin+0xd0>
    22be:	47 c0       	rjmp	.+142    	; 0x234e <GPIO_readPin+0xf2>
		{
		case PORTA_ID:
            temp = CHECK_BIT(PINA,pin_num);
    22c0:	e9 e3       	ldi	r30, 0x39	; 57
    22c2:	f0 e0       	ldi	r31, 0x00	; 0
    22c4:	80 81       	ld	r24, Z
    22c6:	28 2f       	mov	r18, r24
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	8b 81       	ldd	r24, Y+3	; 0x03
    22cc:	88 2f       	mov	r24, r24
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	a9 01       	movw	r20, r18
    22d2:	02 c0       	rjmp	.+4      	; 0x22d8 <GPIO_readPin+0x7c>
    22d4:	55 95       	asr	r21
    22d6:	47 95       	ror	r20
    22d8:	8a 95       	dec	r24
    22da:	e2 f7       	brpl	.-8      	; 0x22d4 <GPIO_readPin+0x78>
    22dc:	ca 01       	movw	r24, r20
    22de:	81 70       	andi	r24, 0x01	; 1
    22e0:	89 83       	std	Y+1, r24	; 0x01
    22e2:	35 c0       	rjmp	.+106    	; 0x234e <GPIO_readPin+0xf2>
			break;
		case PORTB_ID:
			temp = CHECK_BIT(PINB,pin_num);
    22e4:	e6 e3       	ldi	r30, 0x36	; 54
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	80 81       	ld	r24, Z
    22ea:	28 2f       	mov	r18, r24
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	8b 81       	ldd	r24, Y+3	; 0x03
    22f0:	88 2f       	mov	r24, r24
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	a9 01       	movw	r20, r18
    22f6:	02 c0       	rjmp	.+4      	; 0x22fc <GPIO_readPin+0xa0>
    22f8:	55 95       	asr	r21
    22fa:	47 95       	ror	r20
    22fc:	8a 95       	dec	r24
    22fe:	e2 f7       	brpl	.-8      	; 0x22f8 <GPIO_readPin+0x9c>
    2300:	ca 01       	movw	r24, r20
    2302:	81 70       	andi	r24, 0x01	; 1
    2304:	89 83       	std	Y+1, r24	; 0x01
    2306:	23 c0       	rjmp	.+70     	; 0x234e <GPIO_readPin+0xf2>
			break;
		case PORTC_ID:
			temp = CHECK_BIT(PINC,pin_num);
    2308:	e3 e3       	ldi	r30, 0x33	; 51
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	80 81       	ld	r24, Z
    230e:	28 2f       	mov	r18, r24
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	8b 81       	ldd	r24, Y+3	; 0x03
    2314:	88 2f       	mov	r24, r24
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	a9 01       	movw	r20, r18
    231a:	02 c0       	rjmp	.+4      	; 0x2320 <GPIO_readPin+0xc4>
    231c:	55 95       	asr	r21
    231e:	47 95       	ror	r20
    2320:	8a 95       	dec	r24
    2322:	e2 f7       	brpl	.-8      	; 0x231c <GPIO_readPin+0xc0>
    2324:	ca 01       	movw	r24, r20
    2326:	81 70       	andi	r24, 0x01	; 1
    2328:	89 83       	std	Y+1, r24	; 0x01
    232a:	11 c0       	rjmp	.+34     	; 0x234e <GPIO_readPin+0xf2>
			break;
		case PORTD_ID:
			temp = CHECK_BIT(PIND,pin_num);
    232c:	e0 e3       	ldi	r30, 0x30	; 48
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	80 81       	ld	r24, Z
    2332:	28 2f       	mov	r18, r24
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	8b 81       	ldd	r24, Y+3	; 0x03
    2338:	88 2f       	mov	r24, r24
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	a9 01       	movw	r20, r18
    233e:	02 c0       	rjmp	.+4      	; 0x2344 <GPIO_readPin+0xe8>
    2340:	55 95       	asr	r21
    2342:	47 95       	ror	r20
    2344:	8a 95       	dec	r24
    2346:	e2 f7       	brpl	.-8      	; 0x2340 <GPIO_readPin+0xe4>
    2348:	ca 01       	movw	r24, r20
    234a:	81 70       	andi	r24, 0x01	; 1
    234c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return temp;
    234e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2350:	0f 90       	pop	r0
    2352:	0f 90       	pop	r0
    2354:	0f 90       	pop	r0
    2356:	0f 90       	pop	r0
    2358:	0f 90       	pop	r0
    235a:	cf 91       	pop	r28
    235c:	df 91       	pop	r29
    235e:	08 95       	ret

00002360 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2360:	df 93       	push	r29
    2362:	cf 93       	push	r28
    2364:	00 d0       	rcall	.+0      	; 0x2366 <GPIO_setupPortDirection+0x6>
    2366:	00 d0       	rcall	.+0      	; 0x2368 <GPIO_setupPortDirection+0x8>
    2368:	cd b7       	in	r28, 0x3d	; 61
    236a:	de b7       	in	r29, 0x3e	; 62
    236c:	89 83       	std	Y+1, r24	; 0x01
    236e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2370:	89 81       	ldd	r24, Y+1	; 0x01
    2372:	84 30       	cpi	r24, 0x04	; 4
    2374:	90 f5       	brcc	.+100    	; 0x23da <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2376:	89 81       	ldd	r24, Y+1	; 0x01
    2378:	28 2f       	mov	r18, r24
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	3c 83       	std	Y+4, r19	; 0x04
    237e:	2b 83       	std	Y+3, r18	; 0x03
    2380:	8b 81       	ldd	r24, Y+3	; 0x03
    2382:	9c 81       	ldd	r25, Y+4	; 0x04
    2384:	81 30       	cpi	r24, 0x01	; 1
    2386:	91 05       	cpc	r25, r1
    2388:	d1 f0       	breq	.+52     	; 0x23be <GPIO_setupPortDirection+0x5e>
    238a:	2b 81       	ldd	r18, Y+3	; 0x03
    238c:	3c 81       	ldd	r19, Y+4	; 0x04
    238e:	22 30       	cpi	r18, 0x02	; 2
    2390:	31 05       	cpc	r19, r1
    2392:	2c f4       	brge	.+10     	; 0x239e <GPIO_setupPortDirection+0x3e>
    2394:	8b 81       	ldd	r24, Y+3	; 0x03
    2396:	9c 81       	ldd	r25, Y+4	; 0x04
    2398:	00 97       	sbiw	r24, 0x00	; 0
    239a:	61 f0       	breq	.+24     	; 0x23b4 <GPIO_setupPortDirection+0x54>
    239c:	1e c0       	rjmp	.+60     	; 0x23da <GPIO_setupPortDirection+0x7a>
    239e:	2b 81       	ldd	r18, Y+3	; 0x03
    23a0:	3c 81       	ldd	r19, Y+4	; 0x04
    23a2:	22 30       	cpi	r18, 0x02	; 2
    23a4:	31 05       	cpc	r19, r1
    23a6:	81 f0       	breq	.+32     	; 0x23c8 <GPIO_setupPortDirection+0x68>
    23a8:	8b 81       	ldd	r24, Y+3	; 0x03
    23aa:	9c 81       	ldd	r25, Y+4	; 0x04
    23ac:	83 30       	cpi	r24, 0x03	; 3
    23ae:	91 05       	cpc	r25, r1
    23b0:	81 f0       	breq	.+32     	; 0x23d2 <GPIO_setupPortDirection+0x72>
    23b2:	13 c0       	rjmp	.+38     	; 0x23da <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    23b4:	ea e3       	ldi	r30, 0x3A	; 58
    23b6:	f0 e0       	ldi	r31, 0x00	; 0
    23b8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ba:	80 83       	st	Z, r24
    23bc:	0e c0       	rjmp	.+28     	; 0x23da <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    23be:	e7 e3       	ldi	r30, 0x37	; 55
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	8a 81       	ldd	r24, Y+2	; 0x02
    23c4:	80 83       	st	Z, r24
    23c6:	09 c0       	rjmp	.+18     	; 0x23da <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    23c8:	e4 e3       	ldi	r30, 0x34	; 52
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	8a 81       	ldd	r24, Y+2	; 0x02
    23ce:	80 83       	st	Z, r24
    23d0:	04 c0       	rjmp	.+8      	; 0x23da <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    23d2:	e1 e3       	ldi	r30, 0x31	; 49
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	8a 81       	ldd	r24, Y+2	; 0x02
    23d8:	80 83       	st	Z, r24
			break;
		}
	}
}
    23da:	0f 90       	pop	r0
    23dc:	0f 90       	pop	r0
    23de:	0f 90       	pop	r0
    23e0:	0f 90       	pop	r0
    23e2:	cf 91       	pop	r28
    23e4:	df 91       	pop	r29
    23e6:	08 95       	ret

000023e8 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    23e8:	df 93       	push	r29
    23ea:	cf 93       	push	r28
    23ec:	00 d0       	rcall	.+0      	; 0x23ee <GPIO_writePort+0x6>
    23ee:	00 d0       	rcall	.+0      	; 0x23f0 <GPIO_writePort+0x8>
    23f0:	cd b7       	in	r28, 0x3d	; 61
    23f2:	de b7       	in	r29, 0x3e	; 62
    23f4:	89 83       	std	Y+1, r24	; 0x01
    23f6:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    23f8:	89 81       	ldd	r24, Y+1	; 0x01
    23fa:	84 30       	cpi	r24, 0x04	; 4
    23fc:	90 f5       	brcc	.+100    	; 0x2462 <GPIO_writePort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    23fe:	89 81       	ldd	r24, Y+1	; 0x01
    2400:	28 2f       	mov	r18, r24
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	3c 83       	std	Y+4, r19	; 0x04
    2406:	2b 83       	std	Y+3, r18	; 0x03
    2408:	8b 81       	ldd	r24, Y+3	; 0x03
    240a:	9c 81       	ldd	r25, Y+4	; 0x04
    240c:	81 30       	cpi	r24, 0x01	; 1
    240e:	91 05       	cpc	r25, r1
    2410:	d1 f0       	breq	.+52     	; 0x2446 <GPIO_writePort+0x5e>
    2412:	2b 81       	ldd	r18, Y+3	; 0x03
    2414:	3c 81       	ldd	r19, Y+4	; 0x04
    2416:	22 30       	cpi	r18, 0x02	; 2
    2418:	31 05       	cpc	r19, r1
    241a:	2c f4       	brge	.+10     	; 0x2426 <GPIO_writePort+0x3e>
    241c:	8b 81       	ldd	r24, Y+3	; 0x03
    241e:	9c 81       	ldd	r25, Y+4	; 0x04
    2420:	00 97       	sbiw	r24, 0x00	; 0
    2422:	61 f0       	breq	.+24     	; 0x243c <GPIO_writePort+0x54>
    2424:	1e c0       	rjmp	.+60     	; 0x2462 <GPIO_writePort+0x7a>
    2426:	2b 81       	ldd	r18, Y+3	; 0x03
    2428:	3c 81       	ldd	r19, Y+4	; 0x04
    242a:	22 30       	cpi	r18, 0x02	; 2
    242c:	31 05       	cpc	r19, r1
    242e:	81 f0       	breq	.+32     	; 0x2450 <GPIO_writePort+0x68>
    2430:	8b 81       	ldd	r24, Y+3	; 0x03
    2432:	9c 81       	ldd	r25, Y+4	; 0x04
    2434:	83 30       	cpi	r24, 0x03	; 3
    2436:	91 05       	cpc	r25, r1
    2438:	81 f0       	breq	.+32     	; 0x245a <GPIO_writePort+0x72>
    243a:	13 c0       	rjmp	.+38     	; 0x2462 <GPIO_writePort+0x7a>
		{

		case PORTA_ID:
			PORTA=value;
    243c:	eb e3       	ldi	r30, 0x3B	; 59
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	8a 81       	ldd	r24, Y+2	; 0x02
    2442:	80 83       	st	Z, r24
    2444:	0e c0       	rjmp	.+28     	; 0x2462 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB=value;
    2446:	e8 e3       	ldi	r30, 0x38	; 56
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	8a 81       	ldd	r24, Y+2	; 0x02
    244c:	80 83       	st	Z, r24
    244e:	09 c0       	rjmp	.+18     	; 0x2462 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC=value;
    2450:	e5 e3       	ldi	r30, 0x35	; 53
    2452:	f0 e0       	ldi	r31, 0x00	; 0
    2454:	8a 81       	ldd	r24, Y+2	; 0x02
    2456:	80 83       	st	Z, r24
    2458:	04 c0       	rjmp	.+8      	; 0x2462 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD=value;
    245a:	e2 e3       	ldi	r30, 0x32	; 50
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	8a 81       	ldd	r24, Y+2	; 0x02
    2460:	80 83       	st	Z, r24
			break;

		}
	}
}
    2462:	0f 90       	pop	r0
    2464:	0f 90       	pop	r0
    2466:	0f 90       	pop	r0
    2468:	0f 90       	pop	r0
    246a:	cf 91       	pop	r28
    246c:	df 91       	pop	r29
    246e:	08 95       	ret

00002470 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2470:	df 93       	push	r29
    2472:	cf 93       	push	r28
    2474:	00 d0       	rcall	.+0      	; 0x2476 <GPIO_readPort+0x6>
    2476:	00 d0       	rcall	.+0      	; 0x2478 <GPIO_readPort+0x8>
    2478:	0f 92       	push	r0
    247a:	cd b7       	in	r28, 0x3d	; 61
    247c:	de b7       	in	r29, 0x3e	; 62
    247e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 temp = 0;
    2480:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
    2482:	8a 81       	ldd	r24, Y+2	; 0x02
    2484:	84 30       	cpi	r24, 0x04	; 4
    2486:	18 f0       	brcs	.+6      	; 0x248e <GPIO_readPort+0x1e>
	{
		return temp;
    2488:	29 81       	ldd	r18, Y+1	; 0x01
    248a:	2d 83       	std	Y+5, r18	; 0x05
    248c:	34 c0       	rjmp	.+104    	; 0x24f6 <GPIO_readPort+0x86>
	}
	else
	{
		switch(port_num)
    248e:	8a 81       	ldd	r24, Y+2	; 0x02
    2490:	28 2f       	mov	r18, r24
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	3c 83       	std	Y+4, r19	; 0x04
    2496:	2b 83       	std	Y+3, r18	; 0x03
    2498:	8b 81       	ldd	r24, Y+3	; 0x03
    249a:	9c 81       	ldd	r25, Y+4	; 0x04
    249c:	81 30       	cpi	r24, 0x01	; 1
    249e:	91 05       	cpc	r25, r1
    24a0:	d1 f0       	breq	.+52     	; 0x24d6 <GPIO_readPort+0x66>
    24a2:	2b 81       	ldd	r18, Y+3	; 0x03
    24a4:	3c 81       	ldd	r19, Y+4	; 0x04
    24a6:	22 30       	cpi	r18, 0x02	; 2
    24a8:	31 05       	cpc	r19, r1
    24aa:	2c f4       	brge	.+10     	; 0x24b6 <GPIO_readPort+0x46>
    24ac:	8b 81       	ldd	r24, Y+3	; 0x03
    24ae:	9c 81       	ldd	r25, Y+4	; 0x04
    24b0:	00 97       	sbiw	r24, 0x00	; 0
    24b2:	61 f0       	breq	.+24     	; 0x24cc <GPIO_readPort+0x5c>
    24b4:	1e c0       	rjmp	.+60     	; 0x24f2 <GPIO_readPort+0x82>
    24b6:	2b 81       	ldd	r18, Y+3	; 0x03
    24b8:	3c 81       	ldd	r19, Y+4	; 0x04
    24ba:	22 30       	cpi	r18, 0x02	; 2
    24bc:	31 05       	cpc	r19, r1
    24be:	81 f0       	breq	.+32     	; 0x24e0 <GPIO_readPort+0x70>
    24c0:	8b 81       	ldd	r24, Y+3	; 0x03
    24c2:	9c 81       	ldd	r25, Y+4	; 0x04
    24c4:	83 30       	cpi	r24, 0x03	; 3
    24c6:	91 05       	cpc	r25, r1
    24c8:	81 f0       	breq	.+32     	; 0x24ea <GPIO_readPort+0x7a>
    24ca:	13 c0       	rjmp	.+38     	; 0x24f2 <GPIO_readPort+0x82>
		{

		case PORTA_ID:
            temp = PINA;
    24cc:	e9 e3       	ldi	r30, 0x39	; 57
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	80 81       	ld	r24, Z
    24d2:	89 83       	std	Y+1, r24	; 0x01
    24d4:	0e c0       	rjmp	.+28     	; 0x24f2 <GPIO_readPort+0x82>
			break;
		case PORTB_ID:
			temp = PINB;
    24d6:	e6 e3       	ldi	r30, 0x36	; 54
    24d8:	f0 e0       	ldi	r31, 0x00	; 0
    24da:	80 81       	ld	r24, Z
    24dc:	89 83       	std	Y+1, r24	; 0x01
    24de:	09 c0       	rjmp	.+18     	; 0x24f2 <GPIO_readPort+0x82>
			break;
		case PORTC_ID:
			temp = PINC;
    24e0:	e3 e3       	ldi	r30, 0x33	; 51
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	80 81       	ld	r24, Z
    24e6:	89 83       	std	Y+1, r24	; 0x01
    24e8:	04 c0       	rjmp	.+8      	; 0x24f2 <GPIO_readPort+0x82>
			break;
		case PORTD_ID:
			temp = PIND;
    24ea:	e0 e3       	ldi	r30, 0x30	; 48
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	80 81       	ld	r24, Z
    24f0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return temp;
    24f2:	99 81       	ldd	r25, Y+1	; 0x01
    24f4:	9d 83       	std	Y+5, r25	; 0x05
    24f6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    24f8:	0f 90       	pop	r0
    24fa:	0f 90       	pop	r0
    24fc:	0f 90       	pop	r0
    24fe:	0f 90       	pop	r0
    2500:	0f 90       	pop	r0
    2502:	cf 91       	pop	r28
    2504:	df 91       	pop	r29
    2506:	08 95       	ret

00002508 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    2508:	df 93       	push	r29
    250a:	cf 93       	push	r28
    250c:	00 d0       	rcall	.+0      	; 0x250e <KEYPAD_getPressedKey+0x6>
    250e:	0f 92       	push	r0
    2510:	cd b7       	in	r28, 0x3d	; 61
    2512:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    2514:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2516:	1b 82       	std	Y+3, r1	; 0x03
    2518:	42 c0       	rjmp	.+132    	; 0x259e <KEYPAD_getPressedKey+0x96>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    251a:	82 e0       	ldi	r24, 0x02	; 2
    251c:	60 e0       	ldi	r22, 0x00	; 0
    251e:	0e 94 b0 11 	call	0x2360	; 0x2360 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    2522:	8b 81       	ldd	r24, Y+3	; 0x03
    2524:	98 2f       	mov	r25, r24
    2526:	9c 5f       	subi	r25, 0xFC	; 252
    2528:	82 e0       	ldi	r24, 0x02	; 2
    252a:	69 2f       	mov	r22, r25
    252c:	41 e0       	ldi	r20, 0x01	; 1
    252e:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <GPIO_setupPinDirection>
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    2532:	8b 81       	ldd	r24, Y+3	; 0x03
    2534:	88 2f       	mov	r24, r24
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	9c 01       	movw	r18, r24
    253a:	2c 5f       	subi	r18, 0xFC	; 252
    253c:	3f 4f       	sbci	r19, 0xFF	; 255
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	02 c0       	rjmp	.+4      	; 0x2548 <KEYPAD_getPressedKey+0x40>
    2544:	88 0f       	add	r24, r24
    2546:	99 1f       	adc	r25, r25
    2548:	2a 95       	dec	r18
    254a:	e2 f7       	brpl	.-8      	; 0x2544 <KEYPAD_getPressedKey+0x3c>
    254c:	89 83       	std	Y+1, r24	; 0x01
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    254e:	82 e0       	ldi	r24, 0x02	; 2
    2550:	69 81       	ldd	r22, Y+1	; 0x01
    2552:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2556:	1a 82       	std	Y+2, r1	; 0x02
    2558:	1c c0       	rjmp	.+56     	; 0x2592 <KEYPAD_getPressedKey+0x8a>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    255a:	82 e0       	ldi	r24, 0x02	; 2
    255c:	6a 81       	ldd	r22, Y+2	; 0x02
    255e:	0e 94 2e 11 	call	0x225c	; 0x225c <GPIO_readPin>
    2562:	81 30       	cpi	r24, 0x01	; 1
    2564:	99 f4       	brne	.+38     	; 0x258c <KEYPAD_getPressedKey+0x84>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2566:	8a 81       	ldd	r24, Y+2	; 0x02
    2568:	88 2f       	mov	r24, r24
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	88 0f       	add	r24, r24
    256e:	99 1f       	adc	r25, r25
    2570:	88 0f       	add	r24, r24
    2572:	99 1f       	adc	r25, r25
    2574:	98 2f       	mov	r25, r24
    2576:	8b 81       	ldd	r24, Y+3	; 0x03
    2578:	89 0f       	add	r24, r25
    257a:	8f 5f       	subi	r24, 0xFF	; 255
    257c:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    2580:	0f 90       	pop	r0
    2582:	0f 90       	pop	r0
    2584:	0f 90       	pop	r0
    2586:	cf 91       	pop	r28
    2588:	df 91       	pop	r29
    258a:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    258c:	8a 81       	ldd	r24, Y+2	; 0x02
    258e:	8f 5f       	subi	r24, 0xFF	; 255
    2590:	8a 83       	std	Y+2, r24	; 0x02
    2592:	8a 81       	ldd	r24, Y+2	; 0x02
    2594:	84 30       	cpi	r24, 0x04	; 4
    2596:	08 f3       	brcs	.-62     	; 0x255a <KEYPAD_getPressedKey+0x52>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2598:	8b 81       	ldd	r24, Y+3	; 0x03
    259a:	8f 5f       	subi	r24, 0xFF	; 255
    259c:	8b 83       	std	Y+3, r24	; 0x03
    259e:	8b 81       	ldd	r24, Y+3	; 0x03
    25a0:	84 30       	cpi	r24, 0x04	; 4
    25a2:	08 f4       	brcc	.+2      	; 0x25a6 <KEYPAD_getPressedKey+0x9e>
    25a4:	ba cf       	rjmp	.-140    	; 0x251a <KEYPAD_getPressedKey+0x12>
    25a6:	b7 cf       	rjmp	.-146    	; 0x2516 <KEYPAD_getPressedKey+0xe>

000025a8 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    25a8:	df 93       	push	r29
    25aa:	cf 93       	push	r28
    25ac:	00 d0       	rcall	.+0      	; 0x25ae <KEYPAD_4x4_adjustKeyNumber+0x6>
    25ae:	00 d0       	rcall	.+0      	; 0x25b0 <KEYPAD_4x4_adjustKeyNumber+0x8>
    25b0:	cd b7       	in	r28, 0x3d	; 61
    25b2:	de b7       	in	r29, 0x3e	; 62
    25b4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    25b6:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    25b8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ba:	28 2f       	mov	r18, r24
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	3c 83       	std	Y+4, r19	; 0x04
    25c0:	2b 83       	std	Y+3, r18	; 0x03
    25c2:	8b 81       	ldd	r24, Y+3	; 0x03
    25c4:	9c 81       	ldd	r25, Y+4	; 0x04
    25c6:	88 30       	cpi	r24, 0x08	; 8
    25c8:	91 05       	cpc	r25, r1
    25ca:	09 f4       	brne	.+2      	; 0x25ce <KEYPAD_4x4_adjustKeyNumber+0x26>
    25cc:	70 c0       	rjmp	.+224    	; 0x26ae <KEYPAD_4x4_adjustKeyNumber+0x106>
    25ce:	2b 81       	ldd	r18, Y+3	; 0x03
    25d0:	3c 81       	ldd	r19, Y+4	; 0x04
    25d2:	29 30       	cpi	r18, 0x09	; 9
    25d4:	31 05       	cpc	r19, r1
    25d6:	5c f5       	brge	.+86     	; 0x262e <KEYPAD_4x4_adjustKeyNumber+0x86>
    25d8:	8b 81       	ldd	r24, Y+3	; 0x03
    25da:	9c 81       	ldd	r25, Y+4	; 0x04
    25dc:	84 30       	cpi	r24, 0x04	; 4
    25de:	91 05       	cpc	r25, r1
    25e0:	09 f4       	brne	.+2      	; 0x25e4 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    25e2:	59 c0       	rjmp	.+178    	; 0x2696 <KEYPAD_4x4_adjustKeyNumber+0xee>
    25e4:	2b 81       	ldd	r18, Y+3	; 0x03
    25e6:	3c 81       	ldd	r19, Y+4	; 0x04
    25e8:	25 30       	cpi	r18, 0x05	; 5
    25ea:	31 05       	cpc	r19, r1
    25ec:	9c f4       	brge	.+38     	; 0x2614 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    25ee:	8b 81       	ldd	r24, Y+3	; 0x03
    25f0:	9c 81       	ldd	r25, Y+4	; 0x04
    25f2:	82 30       	cpi	r24, 0x02	; 2
    25f4:	91 05       	cpc	r25, r1
    25f6:	09 f4       	brne	.+2      	; 0x25fa <KEYPAD_4x4_adjustKeyNumber+0x52>
    25f8:	48 c0       	rjmp	.+144    	; 0x268a <KEYPAD_4x4_adjustKeyNumber+0xe2>
    25fa:	2b 81       	ldd	r18, Y+3	; 0x03
    25fc:	3c 81       	ldd	r19, Y+4	; 0x04
    25fe:	23 30       	cpi	r18, 0x03	; 3
    2600:	31 05       	cpc	r19, r1
    2602:	0c f0       	brlt	.+2      	; 0x2606 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2604:	45 c0       	rjmp	.+138    	; 0x2690 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2606:	8b 81       	ldd	r24, Y+3	; 0x03
    2608:	9c 81       	ldd	r25, Y+4	; 0x04
    260a:	81 30       	cpi	r24, 0x01	; 1
    260c:	91 05       	cpc	r25, r1
    260e:	09 f4       	brne	.+2      	; 0x2612 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2610:	39 c0       	rjmp	.+114    	; 0x2684 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2612:	67 c0       	rjmp	.+206    	; 0x26e2 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2614:	2b 81       	ldd	r18, Y+3	; 0x03
    2616:	3c 81       	ldd	r19, Y+4	; 0x04
    2618:	26 30       	cpi	r18, 0x06	; 6
    261a:	31 05       	cpc	r19, r1
    261c:	09 f4       	brne	.+2      	; 0x2620 <KEYPAD_4x4_adjustKeyNumber+0x78>
    261e:	41 c0       	rjmp	.+130    	; 0x26a2 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2620:	8b 81       	ldd	r24, Y+3	; 0x03
    2622:	9c 81       	ldd	r25, Y+4	; 0x04
    2624:	87 30       	cpi	r24, 0x07	; 7
    2626:	91 05       	cpc	r25, r1
    2628:	0c f0       	brlt	.+2      	; 0x262c <KEYPAD_4x4_adjustKeyNumber+0x84>
    262a:	3e c0       	rjmp	.+124    	; 0x26a8 <KEYPAD_4x4_adjustKeyNumber+0x100>
    262c:	37 c0       	rjmp	.+110    	; 0x269c <KEYPAD_4x4_adjustKeyNumber+0xf4>
    262e:	2b 81       	ldd	r18, Y+3	; 0x03
    2630:	3c 81       	ldd	r19, Y+4	; 0x04
    2632:	2c 30       	cpi	r18, 0x0C	; 12
    2634:	31 05       	cpc	r19, r1
    2636:	09 f4       	brne	.+2      	; 0x263a <KEYPAD_4x4_adjustKeyNumber+0x92>
    2638:	46 c0       	rjmp	.+140    	; 0x26c6 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    263a:	8b 81       	ldd	r24, Y+3	; 0x03
    263c:	9c 81       	ldd	r25, Y+4	; 0x04
    263e:	8d 30       	cpi	r24, 0x0D	; 13
    2640:	91 05       	cpc	r25, r1
    2642:	5c f4       	brge	.+22     	; 0x265a <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2644:	2b 81       	ldd	r18, Y+3	; 0x03
    2646:	3c 81       	ldd	r19, Y+4	; 0x04
    2648:	2a 30       	cpi	r18, 0x0A	; 10
    264a:	31 05       	cpc	r19, r1
    264c:	b1 f1       	breq	.+108    	; 0x26ba <KEYPAD_4x4_adjustKeyNumber+0x112>
    264e:	8b 81       	ldd	r24, Y+3	; 0x03
    2650:	9c 81       	ldd	r25, Y+4	; 0x04
    2652:	8b 30       	cpi	r24, 0x0B	; 11
    2654:	91 05       	cpc	r25, r1
    2656:	a4 f5       	brge	.+104    	; 0x26c0 <KEYPAD_4x4_adjustKeyNumber+0x118>
    2658:	2d c0       	rjmp	.+90     	; 0x26b4 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    265a:	2b 81       	ldd	r18, Y+3	; 0x03
    265c:	3c 81       	ldd	r19, Y+4	; 0x04
    265e:	2e 30       	cpi	r18, 0x0E	; 14
    2660:	31 05       	cpc	r19, r1
    2662:	b9 f1       	breq	.+110    	; 0x26d2 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2664:	8b 81       	ldd	r24, Y+3	; 0x03
    2666:	9c 81       	ldd	r25, Y+4	; 0x04
    2668:	8e 30       	cpi	r24, 0x0E	; 14
    266a:	91 05       	cpc	r25, r1
    266c:	7c f1       	brlt	.+94     	; 0x26cc <KEYPAD_4x4_adjustKeyNumber+0x124>
    266e:	2b 81       	ldd	r18, Y+3	; 0x03
    2670:	3c 81       	ldd	r19, Y+4	; 0x04
    2672:	2f 30       	cpi	r18, 0x0F	; 15
    2674:	31 05       	cpc	r19, r1
    2676:	79 f1       	breq	.+94     	; 0x26d6 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2678:	8b 81       	ldd	r24, Y+3	; 0x03
    267a:	9c 81       	ldd	r25, Y+4	; 0x04
    267c:	80 31       	cpi	r24, 0x10	; 16
    267e:	91 05       	cpc	r25, r1
    2680:	69 f1       	breq	.+90     	; 0x26dc <KEYPAD_4x4_adjustKeyNumber+0x134>
    2682:	2f c0       	rjmp	.+94     	; 0x26e2 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2684:	87 e0       	ldi	r24, 0x07	; 7
    2686:	89 83       	std	Y+1, r24	; 0x01
    2688:	2e c0       	rjmp	.+92     	; 0x26e6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    268a:	88 e0       	ldi	r24, 0x08	; 8
    268c:	89 83       	std	Y+1, r24	; 0x01
    268e:	2b c0       	rjmp	.+86     	; 0x26e6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2690:	89 e0       	ldi	r24, 0x09	; 9
    2692:	89 83       	std	Y+1, r24	; 0x01
    2694:	28 c0       	rjmp	.+80     	; 0x26e6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2696:	85 e2       	ldi	r24, 0x25	; 37
    2698:	89 83       	std	Y+1, r24	; 0x01
    269a:	25 c0       	rjmp	.+74     	; 0x26e6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    269c:	84 e0       	ldi	r24, 0x04	; 4
    269e:	89 83       	std	Y+1, r24	; 0x01
    26a0:	22 c0       	rjmp	.+68     	; 0x26e6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    26a2:	85 e0       	ldi	r24, 0x05	; 5
    26a4:	89 83       	std	Y+1, r24	; 0x01
    26a6:	1f c0       	rjmp	.+62     	; 0x26e6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    26a8:	86 e0       	ldi	r24, 0x06	; 6
    26aa:	89 83       	std	Y+1, r24	; 0x01
    26ac:	1c c0       	rjmp	.+56     	; 0x26e6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    26ae:	8a e2       	ldi	r24, 0x2A	; 42
    26b0:	89 83       	std	Y+1, r24	; 0x01
    26b2:	19 c0       	rjmp	.+50     	; 0x26e6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    26b4:	81 e0       	ldi	r24, 0x01	; 1
    26b6:	89 83       	std	Y+1, r24	; 0x01
    26b8:	16 c0       	rjmp	.+44     	; 0x26e6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    26ba:	82 e0       	ldi	r24, 0x02	; 2
    26bc:	89 83       	std	Y+1, r24	; 0x01
    26be:	13 c0       	rjmp	.+38     	; 0x26e6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    26c0:	83 e0       	ldi	r24, 0x03	; 3
    26c2:	89 83       	std	Y+1, r24	; 0x01
    26c4:	10 c0       	rjmp	.+32     	; 0x26e6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    26c6:	8d e2       	ldi	r24, 0x2D	; 45
    26c8:	89 83       	std	Y+1, r24	; 0x01
    26ca:	0d c0       	rjmp	.+26     	; 0x26e6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    26cc:	8d e0       	ldi	r24, 0x0D	; 13
    26ce:	89 83       	std	Y+1, r24	; 0x01
    26d0:	0a c0       	rjmp	.+20     	; 0x26e6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    26d2:	19 82       	std	Y+1, r1	; 0x01
    26d4:	08 c0       	rjmp	.+16     	; 0x26e6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    26d6:	8d e3       	ldi	r24, 0x3D	; 61
    26d8:	89 83       	std	Y+1, r24	; 0x01
    26da:	05 c0       	rjmp	.+10     	; 0x26e6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    26dc:	8b e2       	ldi	r24, 0x2B	; 43
    26de:	89 83       	std	Y+1, r24	; 0x01
    26e0:	02 c0       	rjmp	.+4      	; 0x26e6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    26e2:	8a 81       	ldd	r24, Y+2	; 0x02
    26e4:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    26e6:	89 81       	ldd	r24, Y+1	; 0x01
} 
    26e8:	0f 90       	pop	r0
    26ea:	0f 90       	pop	r0
    26ec:	0f 90       	pop	r0
    26ee:	0f 90       	pop	r0
    26f0:	cf 91       	pop	r28
    26f2:	df 91       	pop	r29
    26f4:	08 95       	ret

000026f6 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    26f6:	df 93       	push	r29
    26f8:	cf 93       	push	r28
    26fa:	cd b7       	in	r28, 0x3d	; 61
    26fc:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	60 e0       	ldi	r22, 0x00	; 0
    2702:	41 e0       	ldi	r20, 0x01	; 1
    2704:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    2708:	81 e0       	ldi	r24, 0x01	; 1
    270a:	61 e0       	ldi	r22, 0x01	; 1
    270c:	41 e0       	ldi	r20, 0x01	; 1
    270e:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2712:	81 e0       	ldi	r24, 0x01	; 1
    2714:	62 e0       	ldi	r22, 0x02	; 2
    2716:	41 e0       	ldi	r20, 0x01	; 1
    2718:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    271c:	80 e0       	ldi	r24, 0x00	; 0
    271e:	6f ef       	ldi	r22, 0xFF	; 255
    2720:	0e 94 b0 11 	call	0x2360	; 0x2360 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    2724:	88 e3       	ldi	r24, 0x38	; 56
    2726:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    272a:	8c e0       	ldi	r24, 0x0C	; 12
    272c:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_sendCommand>
}
    2736:	cf 91       	pop	r28
    2738:	df 91       	pop	r29
    273a:	08 95       	ret

0000273c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    273c:	df 93       	push	r29
    273e:	cf 93       	push	r28
    2740:	cd b7       	in	r28, 0x3d	; 61
    2742:	de b7       	in	r29, 0x3e	; 62
    2744:	ea 97       	sbiw	r28, 0x3a	; 58
    2746:	0f b6       	in	r0, 0x3f	; 63
    2748:	f8 94       	cli
    274a:	de bf       	out	0x3e, r29	; 62
    274c:	0f be       	out	0x3f, r0	; 63
    274e:	cd bf       	out	0x3d, r28	; 61
    2750:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    2752:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2754:	81 e0       	ldi	r24, 0x01	; 1
    2756:	60 e0       	ldi	r22, 0x00	; 0
    2758:	40 e0       	ldi	r20, 0x00	; 0
    275a:	0e 94 43 10 	call	0x2086	; 0x2086 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	61 e0       	ldi	r22, 0x01	; 1
    2762:	40 e0       	ldi	r20, 0x00	; 0
    2764:	0e 94 43 10 	call	0x2086	; 0x2086 <GPIO_writePin>
    2768:	80 e0       	ldi	r24, 0x00	; 0
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	a0 e8       	ldi	r26, 0x80	; 128
    276e:	bf e3       	ldi	r27, 0x3F	; 63
    2770:	8d ab       	std	Y+53, r24	; 0x35
    2772:	9e ab       	std	Y+54, r25	; 0x36
    2774:	af ab       	std	Y+55, r26	; 0x37
    2776:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2778:	6d a9       	ldd	r22, Y+53	; 0x35
    277a:	7e a9       	ldd	r23, Y+54	; 0x36
    277c:	8f a9       	ldd	r24, Y+55	; 0x37
    277e:	98 ad       	ldd	r25, Y+56	; 0x38
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	4a ef       	ldi	r20, 0xFA	; 250
    2786:	54 e4       	ldi	r21, 0x44	; 68
    2788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	89 ab       	std	Y+49, r24	; 0x31
    2792:	9a ab       	std	Y+50, r25	; 0x32
    2794:	ab ab       	std	Y+51, r26	; 0x33
    2796:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2798:	69 a9       	ldd	r22, Y+49	; 0x31
    279a:	7a a9       	ldd	r23, Y+50	; 0x32
    279c:	8b a9       	ldd	r24, Y+51	; 0x33
    279e:	9c a9       	ldd	r25, Y+52	; 0x34
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	40 e8       	ldi	r20, 0x80	; 128
    27a6:	5f e3       	ldi	r21, 0x3F	; 63
    27a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27ac:	88 23       	and	r24, r24
    27ae:	2c f4       	brge	.+10     	; 0x27ba <LCD_sendCommand+0x7e>
		__ticks = 1;
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	98 ab       	std	Y+48, r25	; 0x30
    27b6:	8f a7       	std	Y+47, r24	; 0x2f
    27b8:	3f c0       	rjmp	.+126    	; 0x2838 <LCD_sendCommand+0xfc>
	else if (__tmp > 65535)
    27ba:	69 a9       	ldd	r22, Y+49	; 0x31
    27bc:	7a a9       	ldd	r23, Y+50	; 0x32
    27be:	8b a9       	ldd	r24, Y+51	; 0x33
    27c0:	9c a9       	ldd	r25, Y+52	; 0x34
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	3f ef       	ldi	r19, 0xFF	; 255
    27c6:	4f e7       	ldi	r20, 0x7F	; 127
    27c8:	57 e4       	ldi	r21, 0x47	; 71
    27ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27ce:	18 16       	cp	r1, r24
    27d0:	4c f5       	brge	.+82     	; 0x2824 <LCD_sendCommand+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d2:	6d a9       	ldd	r22, Y+53	; 0x35
    27d4:	7e a9       	ldd	r23, Y+54	; 0x36
    27d6:	8f a9       	ldd	r24, Y+55	; 0x37
    27d8:	98 ad       	ldd	r25, Y+56	; 0x38
    27da:	20 e0       	ldi	r18, 0x00	; 0
    27dc:	30 e0       	ldi	r19, 0x00	; 0
    27de:	40 e2       	ldi	r20, 0x20	; 32
    27e0:	51 e4       	ldi	r21, 0x41	; 65
    27e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e6:	dc 01       	movw	r26, r24
    27e8:	cb 01       	movw	r24, r22
    27ea:	bc 01       	movw	r22, r24
    27ec:	cd 01       	movw	r24, r26
    27ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	98 ab       	std	Y+48, r25	; 0x30
    27f8:	8f a7       	std	Y+47, r24	; 0x2f
    27fa:	0f c0       	rjmp	.+30     	; 0x281a <LCD_sendCommand+0xde>
    27fc:	88 ec       	ldi	r24, 0xC8	; 200
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	9e a7       	std	Y+46, r25	; 0x2e
    2802:	8d a7       	std	Y+45, r24	; 0x2d
    2804:	8d a5       	ldd	r24, Y+45	; 0x2d
    2806:	9e a5       	ldd	r25, Y+46	; 0x2e
    2808:	01 97       	sbiw	r24, 0x01	; 1
    280a:	f1 f7       	brne	.-4      	; 0x2808 <LCD_sendCommand+0xcc>
    280c:	9e a7       	std	Y+46, r25	; 0x2e
    280e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2810:	8f a5       	ldd	r24, Y+47	; 0x2f
    2812:	98 a9       	ldd	r25, Y+48	; 0x30
    2814:	01 97       	sbiw	r24, 0x01	; 1
    2816:	98 ab       	std	Y+48, r25	; 0x30
    2818:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    281a:	8f a5       	ldd	r24, Y+47	; 0x2f
    281c:	98 a9       	ldd	r25, Y+48	; 0x30
    281e:	00 97       	sbiw	r24, 0x00	; 0
    2820:	69 f7       	brne	.-38     	; 0x27fc <LCD_sendCommand+0xc0>
    2822:	14 c0       	rjmp	.+40     	; 0x284c <LCD_sendCommand+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2824:	69 a9       	ldd	r22, Y+49	; 0x31
    2826:	7a a9       	ldd	r23, Y+50	; 0x32
    2828:	8b a9       	ldd	r24, Y+51	; 0x33
    282a:	9c a9       	ldd	r25, Y+52	; 0x34
    282c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2830:	dc 01       	movw	r26, r24
    2832:	cb 01       	movw	r24, r22
    2834:	98 ab       	std	Y+48, r25	; 0x30
    2836:	8f a7       	std	Y+47, r24	; 0x2f
    2838:	8f a5       	ldd	r24, Y+47	; 0x2f
    283a:	98 a9       	ldd	r25, Y+48	; 0x30
    283c:	9c a7       	std	Y+44, r25	; 0x2c
    283e:	8b a7       	std	Y+43, r24	; 0x2b
    2840:	8b a5       	ldd	r24, Y+43	; 0x2b
    2842:	9c a5       	ldd	r25, Y+44	; 0x2c
    2844:	01 97       	sbiw	r24, 0x01	; 1
    2846:	f1 f7       	brne	.-4      	; 0x2844 <LCD_sendCommand+0x108>
    2848:	9c a7       	std	Y+44, r25	; 0x2c
    284a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	62 e0       	ldi	r22, 0x02	; 2
    2850:	41 e0       	ldi	r20, 0x01	; 1
    2852:	0e 94 43 10 	call	0x2086	; 0x2086 <GPIO_writePin>
    2856:	80 e0       	ldi	r24, 0x00	; 0
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	a0 e8       	ldi	r26, 0x80	; 128
    285c:	bf e3       	ldi	r27, 0x3F	; 63
    285e:	8f a3       	std	Y+39, r24	; 0x27
    2860:	98 a7       	std	Y+40, r25	; 0x28
    2862:	a9 a7       	std	Y+41, r26	; 0x29
    2864:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2866:	6f a1       	ldd	r22, Y+39	; 0x27
    2868:	78 a5       	ldd	r23, Y+40	; 0x28
    286a:	89 a5       	ldd	r24, Y+41	; 0x29
    286c:	9a a5       	ldd	r25, Y+42	; 0x2a
    286e:	20 e0       	ldi	r18, 0x00	; 0
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	4a ef       	ldi	r20, 0xFA	; 250
    2874:	54 e4       	ldi	r21, 0x44	; 68
    2876:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    287a:	dc 01       	movw	r26, r24
    287c:	cb 01       	movw	r24, r22
    287e:	8b a3       	std	Y+35, r24	; 0x23
    2880:	9c a3       	std	Y+36, r25	; 0x24
    2882:	ad a3       	std	Y+37, r26	; 0x25
    2884:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2886:	6b a1       	ldd	r22, Y+35	; 0x23
    2888:	7c a1       	ldd	r23, Y+36	; 0x24
    288a:	8d a1       	ldd	r24, Y+37	; 0x25
    288c:	9e a1       	ldd	r25, Y+38	; 0x26
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	40 e8       	ldi	r20, 0x80	; 128
    2894:	5f e3       	ldi	r21, 0x3F	; 63
    2896:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    289a:	88 23       	and	r24, r24
    289c:	2c f4       	brge	.+10     	; 0x28a8 <LCD_sendCommand+0x16c>
		__ticks = 1;
    289e:	81 e0       	ldi	r24, 0x01	; 1
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	9a a3       	std	Y+34, r25	; 0x22
    28a4:	89 a3       	std	Y+33, r24	; 0x21
    28a6:	3f c0       	rjmp	.+126    	; 0x2926 <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    28a8:	6b a1       	ldd	r22, Y+35	; 0x23
    28aa:	7c a1       	ldd	r23, Y+36	; 0x24
    28ac:	8d a1       	ldd	r24, Y+37	; 0x25
    28ae:	9e a1       	ldd	r25, Y+38	; 0x26
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	3f ef       	ldi	r19, 0xFF	; 255
    28b4:	4f e7       	ldi	r20, 0x7F	; 127
    28b6:	57 e4       	ldi	r21, 0x47	; 71
    28b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28bc:	18 16       	cp	r1, r24
    28be:	4c f5       	brge	.+82     	; 0x2912 <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28c0:	6f a1       	ldd	r22, Y+39	; 0x27
    28c2:	78 a5       	ldd	r23, Y+40	; 0x28
    28c4:	89 a5       	ldd	r24, Y+41	; 0x29
    28c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	40 e2       	ldi	r20, 0x20	; 32
    28ce:	51 e4       	ldi	r21, 0x41	; 65
    28d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d4:	dc 01       	movw	r26, r24
    28d6:	cb 01       	movw	r24, r22
    28d8:	bc 01       	movw	r22, r24
    28da:	cd 01       	movw	r24, r26
    28dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e0:	dc 01       	movw	r26, r24
    28e2:	cb 01       	movw	r24, r22
    28e4:	9a a3       	std	Y+34, r25	; 0x22
    28e6:	89 a3       	std	Y+33, r24	; 0x21
    28e8:	0f c0       	rjmp	.+30     	; 0x2908 <LCD_sendCommand+0x1cc>
    28ea:	88 ec       	ldi	r24, 0xC8	; 200
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	98 a3       	std	Y+32, r25	; 0x20
    28f0:	8f 8f       	std	Y+31, r24	; 0x1f
    28f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28f4:	98 a1       	ldd	r25, Y+32	; 0x20
    28f6:	01 97       	sbiw	r24, 0x01	; 1
    28f8:	f1 f7       	brne	.-4      	; 0x28f6 <LCD_sendCommand+0x1ba>
    28fa:	98 a3       	std	Y+32, r25	; 0x20
    28fc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28fe:	89 a1       	ldd	r24, Y+33	; 0x21
    2900:	9a a1       	ldd	r25, Y+34	; 0x22
    2902:	01 97       	sbiw	r24, 0x01	; 1
    2904:	9a a3       	std	Y+34, r25	; 0x22
    2906:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2908:	89 a1       	ldd	r24, Y+33	; 0x21
    290a:	9a a1       	ldd	r25, Y+34	; 0x22
    290c:	00 97       	sbiw	r24, 0x00	; 0
    290e:	69 f7       	brne	.-38     	; 0x28ea <LCD_sendCommand+0x1ae>
    2910:	14 c0       	rjmp	.+40     	; 0x293a <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2912:	6b a1       	ldd	r22, Y+35	; 0x23
    2914:	7c a1       	ldd	r23, Y+36	; 0x24
    2916:	8d a1       	ldd	r24, Y+37	; 0x25
    2918:	9e a1       	ldd	r25, Y+38	; 0x26
    291a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    291e:	dc 01       	movw	r26, r24
    2920:	cb 01       	movw	r24, r22
    2922:	9a a3       	std	Y+34, r25	; 0x22
    2924:	89 a3       	std	Y+33, r24	; 0x21
    2926:	89 a1       	ldd	r24, Y+33	; 0x21
    2928:	9a a1       	ldd	r25, Y+34	; 0x22
    292a:	9e 8f       	std	Y+30, r25	; 0x1e
    292c:	8d 8f       	std	Y+29, r24	; 0x1d
    292e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2930:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2932:	01 97       	sbiw	r24, 0x01	; 1
    2934:	f1 f7       	brne	.-4      	; 0x2932 <LCD_sendCommand+0x1f6>
    2936:	9e 8f       	std	Y+30, r25	; 0x1e
    2938:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    293a:	80 e0       	ldi	r24, 0x00	; 0
    293c:	6a ad       	ldd	r22, Y+58	; 0x3a
    293e:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <GPIO_writePort>
    2942:	80 e0       	ldi	r24, 0x00	; 0
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	a0 e8       	ldi	r26, 0x80	; 128
    2948:	bf e3       	ldi	r27, 0x3F	; 63
    294a:	89 8f       	std	Y+25, r24	; 0x19
    294c:	9a 8f       	std	Y+26, r25	; 0x1a
    294e:	ab 8f       	std	Y+27, r26	; 0x1b
    2950:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2952:	69 8d       	ldd	r22, Y+25	; 0x19
    2954:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2956:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2958:	9c 8d       	ldd	r25, Y+28	; 0x1c
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	4a ef       	ldi	r20, 0xFA	; 250
    2960:	54 e4       	ldi	r21, 0x44	; 68
    2962:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2966:	dc 01       	movw	r26, r24
    2968:	cb 01       	movw	r24, r22
    296a:	8d 8b       	std	Y+21, r24	; 0x15
    296c:	9e 8b       	std	Y+22, r25	; 0x16
    296e:	af 8b       	std	Y+23, r26	; 0x17
    2970:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2972:	6d 89       	ldd	r22, Y+21	; 0x15
    2974:	7e 89       	ldd	r23, Y+22	; 0x16
    2976:	8f 89       	ldd	r24, Y+23	; 0x17
    2978:	98 8d       	ldd	r25, Y+24	; 0x18
    297a:	20 e0       	ldi	r18, 0x00	; 0
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	40 e8       	ldi	r20, 0x80	; 128
    2980:	5f e3       	ldi	r21, 0x3F	; 63
    2982:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2986:	88 23       	and	r24, r24
    2988:	2c f4       	brge	.+10     	; 0x2994 <LCD_sendCommand+0x258>
		__ticks = 1;
    298a:	81 e0       	ldi	r24, 0x01	; 1
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	9c 8b       	std	Y+20, r25	; 0x14
    2990:	8b 8b       	std	Y+19, r24	; 0x13
    2992:	3f c0       	rjmp	.+126    	; 0x2a12 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    2994:	6d 89       	ldd	r22, Y+21	; 0x15
    2996:	7e 89       	ldd	r23, Y+22	; 0x16
    2998:	8f 89       	ldd	r24, Y+23	; 0x17
    299a:	98 8d       	ldd	r25, Y+24	; 0x18
    299c:	20 e0       	ldi	r18, 0x00	; 0
    299e:	3f ef       	ldi	r19, 0xFF	; 255
    29a0:	4f e7       	ldi	r20, 0x7F	; 127
    29a2:	57 e4       	ldi	r21, 0x47	; 71
    29a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29a8:	18 16       	cp	r1, r24
    29aa:	4c f5       	brge	.+82     	; 0x29fe <LCD_sendCommand+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ac:	69 8d       	ldd	r22, Y+25	; 0x19
    29ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29b4:	20 e0       	ldi	r18, 0x00	; 0
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	40 e2       	ldi	r20, 0x20	; 32
    29ba:	51 e4       	ldi	r21, 0x41	; 65
    29bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c0:	dc 01       	movw	r26, r24
    29c2:	cb 01       	movw	r24, r22
    29c4:	bc 01       	movw	r22, r24
    29c6:	cd 01       	movw	r24, r26
    29c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29cc:	dc 01       	movw	r26, r24
    29ce:	cb 01       	movw	r24, r22
    29d0:	9c 8b       	std	Y+20, r25	; 0x14
    29d2:	8b 8b       	std	Y+19, r24	; 0x13
    29d4:	0f c0       	rjmp	.+30     	; 0x29f4 <LCD_sendCommand+0x2b8>
    29d6:	88 ec       	ldi	r24, 0xC8	; 200
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	9a 8b       	std	Y+18, r25	; 0x12
    29dc:	89 8b       	std	Y+17, r24	; 0x11
    29de:	89 89       	ldd	r24, Y+17	; 0x11
    29e0:	9a 89       	ldd	r25, Y+18	; 0x12
    29e2:	01 97       	sbiw	r24, 0x01	; 1
    29e4:	f1 f7       	brne	.-4      	; 0x29e2 <LCD_sendCommand+0x2a6>
    29e6:	9a 8b       	std	Y+18, r25	; 0x12
    29e8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ea:	8b 89       	ldd	r24, Y+19	; 0x13
    29ec:	9c 89       	ldd	r25, Y+20	; 0x14
    29ee:	01 97       	sbiw	r24, 0x01	; 1
    29f0:	9c 8b       	std	Y+20, r25	; 0x14
    29f2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29f4:	8b 89       	ldd	r24, Y+19	; 0x13
    29f6:	9c 89       	ldd	r25, Y+20	; 0x14
    29f8:	00 97       	sbiw	r24, 0x00	; 0
    29fa:	69 f7       	brne	.-38     	; 0x29d6 <LCD_sendCommand+0x29a>
    29fc:	14 c0       	rjmp	.+40     	; 0x2a26 <LCD_sendCommand+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2a00:	7e 89       	ldd	r23, Y+22	; 0x16
    2a02:	8f 89       	ldd	r24, Y+23	; 0x17
    2a04:	98 8d       	ldd	r25, Y+24	; 0x18
    2a06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a0a:	dc 01       	movw	r26, r24
    2a0c:	cb 01       	movw	r24, r22
    2a0e:	9c 8b       	std	Y+20, r25	; 0x14
    2a10:	8b 8b       	std	Y+19, r24	; 0x13
    2a12:	8b 89       	ldd	r24, Y+19	; 0x13
    2a14:	9c 89       	ldd	r25, Y+20	; 0x14
    2a16:	98 8b       	std	Y+16, r25	; 0x10
    2a18:	8f 87       	std	Y+15, r24	; 0x0f
    2a1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a1c:	98 89       	ldd	r25, Y+16	; 0x10
    2a1e:	01 97       	sbiw	r24, 0x01	; 1
    2a20:	f1 f7       	brne	.-4      	; 0x2a1e <LCD_sendCommand+0x2e2>
    2a22:	98 8b       	std	Y+16, r25	; 0x10
    2a24:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2a26:	81 e0       	ldi	r24, 0x01	; 1
    2a28:	62 e0       	ldi	r22, 0x02	; 2
    2a2a:	40 e0       	ldi	r20, 0x00	; 0
    2a2c:	0e 94 43 10 	call	0x2086	; 0x2086 <GPIO_writePin>
    2a30:	80 e0       	ldi	r24, 0x00	; 0
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	a0 e8       	ldi	r26, 0x80	; 128
    2a36:	bf e3       	ldi	r27, 0x3F	; 63
    2a38:	8b 87       	std	Y+11, r24	; 0x0b
    2a3a:	9c 87       	std	Y+12, r25	; 0x0c
    2a3c:	ad 87       	std	Y+13, r26	; 0x0d
    2a3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a40:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a42:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a44:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a46:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a48:	20 e0       	ldi	r18, 0x00	; 0
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	4a ef       	ldi	r20, 0xFA	; 250
    2a4e:	54 e4       	ldi	r21, 0x44	; 68
    2a50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a54:	dc 01       	movw	r26, r24
    2a56:	cb 01       	movw	r24, r22
    2a58:	8f 83       	std	Y+7, r24	; 0x07
    2a5a:	98 87       	std	Y+8, r25	; 0x08
    2a5c:	a9 87       	std	Y+9, r26	; 0x09
    2a5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a60:	6f 81       	ldd	r22, Y+7	; 0x07
    2a62:	78 85       	ldd	r23, Y+8	; 0x08
    2a64:	89 85       	ldd	r24, Y+9	; 0x09
    2a66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a68:	20 e0       	ldi	r18, 0x00	; 0
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	40 e8       	ldi	r20, 0x80	; 128
    2a6e:	5f e3       	ldi	r21, 0x3F	; 63
    2a70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a74:	88 23       	and	r24, r24
    2a76:	2c f4       	brge	.+10     	; 0x2a82 <LCD_sendCommand+0x346>
		__ticks = 1;
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	9e 83       	std	Y+6, r25	; 0x06
    2a7e:	8d 83       	std	Y+5, r24	; 0x05
    2a80:	3f c0       	rjmp	.+126    	; 0x2b00 <LCD_sendCommand+0x3c4>
	else if (__tmp > 65535)
    2a82:	6f 81       	ldd	r22, Y+7	; 0x07
    2a84:	78 85       	ldd	r23, Y+8	; 0x08
    2a86:	89 85       	ldd	r24, Y+9	; 0x09
    2a88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	3f ef       	ldi	r19, 0xFF	; 255
    2a8e:	4f e7       	ldi	r20, 0x7F	; 127
    2a90:	57 e4       	ldi	r21, 0x47	; 71
    2a92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a96:	18 16       	cp	r1, r24
    2a98:	4c f5       	brge	.+82     	; 0x2aec <LCD_sendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aa0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aa2:	20 e0       	ldi	r18, 0x00	; 0
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	40 e2       	ldi	r20, 0x20	; 32
    2aa8:	51 e4       	ldi	r21, 0x41	; 65
    2aaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aae:	dc 01       	movw	r26, r24
    2ab0:	cb 01       	movw	r24, r22
    2ab2:	bc 01       	movw	r22, r24
    2ab4:	cd 01       	movw	r24, r26
    2ab6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aba:	dc 01       	movw	r26, r24
    2abc:	cb 01       	movw	r24, r22
    2abe:	9e 83       	std	Y+6, r25	; 0x06
    2ac0:	8d 83       	std	Y+5, r24	; 0x05
    2ac2:	0f c0       	rjmp	.+30     	; 0x2ae2 <LCD_sendCommand+0x3a6>
    2ac4:	88 ec       	ldi	r24, 0xC8	; 200
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	9c 83       	std	Y+4, r25	; 0x04
    2aca:	8b 83       	std	Y+3, r24	; 0x03
    2acc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ace:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad0:	01 97       	sbiw	r24, 0x01	; 1
    2ad2:	f1 f7       	brne	.-4      	; 0x2ad0 <LCD_sendCommand+0x394>
    2ad4:	9c 83       	std	Y+4, r25	; 0x04
    2ad6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ad8:	8d 81       	ldd	r24, Y+5	; 0x05
    2ada:	9e 81       	ldd	r25, Y+6	; 0x06
    2adc:	01 97       	sbiw	r24, 0x01	; 1
    2ade:	9e 83       	std	Y+6, r25	; 0x06
    2ae0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ae2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae6:	00 97       	sbiw	r24, 0x00	; 0
    2ae8:	69 f7       	brne	.-38     	; 0x2ac4 <LCD_sendCommand+0x388>
    2aea:	14 c0       	rjmp	.+40     	; 0x2b14 <LCD_sendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aec:	6f 81       	ldd	r22, Y+7	; 0x07
    2aee:	78 85       	ldd	r23, Y+8	; 0x08
    2af0:	89 85       	ldd	r24, Y+9	; 0x09
    2af2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2af4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	9e 83       	std	Y+6, r25	; 0x06
    2afe:	8d 83       	std	Y+5, r24	; 0x05
    2b00:	8d 81       	ldd	r24, Y+5	; 0x05
    2b02:	9e 81       	ldd	r25, Y+6	; 0x06
    2b04:	9a 83       	std	Y+2, r25	; 0x02
    2b06:	89 83       	std	Y+1, r24	; 0x01
    2b08:	89 81       	ldd	r24, Y+1	; 0x01
    2b0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b0c:	01 97       	sbiw	r24, 0x01	; 1
    2b0e:	f1 f7       	brne	.-4      	; 0x2b0c <LCD_sendCommand+0x3d0>
    2b10:	9a 83       	std	Y+2, r25	; 0x02
    2b12:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2b14:	ea 96       	adiw	r28, 0x3a	; 58
    2b16:	0f b6       	in	r0, 0x3f	; 63
    2b18:	f8 94       	cli
    2b1a:	de bf       	out	0x3e, r29	; 62
    2b1c:	0f be       	out	0x3f, r0	; 63
    2b1e:	cd bf       	out	0x3d, r28	; 61
    2b20:	cf 91       	pop	r28
    2b22:	df 91       	pop	r29
    2b24:	08 95       	ret

00002b26 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2b26:	df 93       	push	r29
    2b28:	cf 93       	push	r28
    2b2a:	cd b7       	in	r28, 0x3d	; 61
    2b2c:	de b7       	in	r29, 0x3e	; 62
    2b2e:	ea 97       	sbiw	r28, 0x3a	; 58
    2b30:	0f b6       	in	r0, 0x3f	; 63
    2b32:	f8 94       	cli
    2b34:	de bf       	out	0x3e, r29	; 62
    2b36:	0f be       	out	0x3f, r0	; 63
    2b38:	cd bf       	out	0x3d, r28	; 61
    2b3a:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    2b3c:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2b3e:	81 e0       	ldi	r24, 0x01	; 1
    2b40:	60 e0       	ldi	r22, 0x00	; 0
    2b42:	41 e0       	ldi	r20, 0x01	; 1
    2b44:	0e 94 43 10 	call	0x2086	; 0x2086 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2b48:	81 e0       	ldi	r24, 0x01	; 1
    2b4a:	61 e0       	ldi	r22, 0x01	; 1
    2b4c:	40 e0       	ldi	r20, 0x00	; 0
    2b4e:	0e 94 43 10 	call	0x2086	; 0x2086 <GPIO_writePin>
    2b52:	80 e0       	ldi	r24, 0x00	; 0
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	a0 e8       	ldi	r26, 0x80	; 128
    2b58:	bf e3       	ldi	r27, 0x3F	; 63
    2b5a:	8d ab       	std	Y+53, r24	; 0x35
    2b5c:	9e ab       	std	Y+54, r25	; 0x36
    2b5e:	af ab       	std	Y+55, r26	; 0x37
    2b60:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b62:	6d a9       	ldd	r22, Y+53	; 0x35
    2b64:	7e a9       	ldd	r23, Y+54	; 0x36
    2b66:	8f a9       	ldd	r24, Y+55	; 0x37
    2b68:	98 ad       	ldd	r25, Y+56	; 0x38
    2b6a:	20 e0       	ldi	r18, 0x00	; 0
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	4a ef       	ldi	r20, 0xFA	; 250
    2b70:	54 e4       	ldi	r21, 0x44	; 68
    2b72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b76:	dc 01       	movw	r26, r24
    2b78:	cb 01       	movw	r24, r22
    2b7a:	89 ab       	std	Y+49, r24	; 0x31
    2b7c:	9a ab       	std	Y+50, r25	; 0x32
    2b7e:	ab ab       	std	Y+51, r26	; 0x33
    2b80:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b82:	69 a9       	ldd	r22, Y+49	; 0x31
    2b84:	7a a9       	ldd	r23, Y+50	; 0x32
    2b86:	8b a9       	ldd	r24, Y+51	; 0x33
    2b88:	9c a9       	ldd	r25, Y+52	; 0x34
    2b8a:	20 e0       	ldi	r18, 0x00	; 0
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	40 e8       	ldi	r20, 0x80	; 128
    2b90:	5f e3       	ldi	r21, 0x3F	; 63
    2b92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b96:	88 23       	and	r24, r24
    2b98:	2c f4       	brge	.+10     	; 0x2ba4 <LCD_displayCharacter+0x7e>
		__ticks = 1;
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	98 ab       	std	Y+48, r25	; 0x30
    2ba0:	8f a7       	std	Y+47, r24	; 0x2f
    2ba2:	3f c0       	rjmp	.+126    	; 0x2c22 <LCD_displayCharacter+0xfc>
	else if (__tmp > 65535)
    2ba4:	69 a9       	ldd	r22, Y+49	; 0x31
    2ba6:	7a a9       	ldd	r23, Y+50	; 0x32
    2ba8:	8b a9       	ldd	r24, Y+51	; 0x33
    2baa:	9c a9       	ldd	r25, Y+52	; 0x34
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	3f ef       	ldi	r19, 0xFF	; 255
    2bb0:	4f e7       	ldi	r20, 0x7F	; 127
    2bb2:	57 e4       	ldi	r21, 0x47	; 71
    2bb4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bb8:	18 16       	cp	r1, r24
    2bba:	4c f5       	brge	.+82     	; 0x2c0e <LCD_displayCharacter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bbc:	6d a9       	ldd	r22, Y+53	; 0x35
    2bbe:	7e a9       	ldd	r23, Y+54	; 0x36
    2bc0:	8f a9       	ldd	r24, Y+55	; 0x37
    2bc2:	98 ad       	ldd	r25, Y+56	; 0x38
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	40 e2       	ldi	r20, 0x20	; 32
    2bca:	51 e4       	ldi	r21, 0x41	; 65
    2bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	bc 01       	movw	r22, r24
    2bd6:	cd 01       	movw	r24, r26
    2bd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bdc:	dc 01       	movw	r26, r24
    2bde:	cb 01       	movw	r24, r22
    2be0:	98 ab       	std	Y+48, r25	; 0x30
    2be2:	8f a7       	std	Y+47, r24	; 0x2f
    2be4:	0f c0       	rjmp	.+30     	; 0x2c04 <LCD_displayCharacter+0xde>
    2be6:	88 ec       	ldi	r24, 0xC8	; 200
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	9e a7       	std	Y+46, r25	; 0x2e
    2bec:	8d a7       	std	Y+45, r24	; 0x2d
    2bee:	8d a5       	ldd	r24, Y+45	; 0x2d
    2bf0:	9e a5       	ldd	r25, Y+46	; 0x2e
    2bf2:	01 97       	sbiw	r24, 0x01	; 1
    2bf4:	f1 f7       	brne	.-4      	; 0x2bf2 <LCD_displayCharacter+0xcc>
    2bf6:	9e a7       	std	Y+46, r25	; 0x2e
    2bf8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bfa:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bfc:	98 a9       	ldd	r25, Y+48	; 0x30
    2bfe:	01 97       	sbiw	r24, 0x01	; 1
    2c00:	98 ab       	std	Y+48, r25	; 0x30
    2c02:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c04:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c06:	98 a9       	ldd	r25, Y+48	; 0x30
    2c08:	00 97       	sbiw	r24, 0x00	; 0
    2c0a:	69 f7       	brne	.-38     	; 0x2be6 <LCD_displayCharacter+0xc0>
    2c0c:	14 c0       	rjmp	.+40     	; 0x2c36 <LCD_displayCharacter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c0e:	69 a9       	ldd	r22, Y+49	; 0x31
    2c10:	7a a9       	ldd	r23, Y+50	; 0x32
    2c12:	8b a9       	ldd	r24, Y+51	; 0x33
    2c14:	9c a9       	ldd	r25, Y+52	; 0x34
    2c16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c1a:	dc 01       	movw	r26, r24
    2c1c:	cb 01       	movw	r24, r22
    2c1e:	98 ab       	std	Y+48, r25	; 0x30
    2c20:	8f a7       	std	Y+47, r24	; 0x2f
    2c22:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c24:	98 a9       	ldd	r25, Y+48	; 0x30
    2c26:	9c a7       	std	Y+44, r25	; 0x2c
    2c28:	8b a7       	std	Y+43, r24	; 0x2b
    2c2a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c2c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c2e:	01 97       	sbiw	r24, 0x01	; 1
    2c30:	f1 f7       	brne	.-4      	; 0x2c2e <LCD_displayCharacter+0x108>
    2c32:	9c a7       	std	Y+44, r25	; 0x2c
    2c34:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2c36:	81 e0       	ldi	r24, 0x01	; 1
    2c38:	62 e0       	ldi	r22, 0x02	; 2
    2c3a:	41 e0       	ldi	r20, 0x01	; 1
    2c3c:	0e 94 43 10 	call	0x2086	; 0x2086 <GPIO_writePin>
    2c40:	80 e0       	ldi	r24, 0x00	; 0
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	a0 e8       	ldi	r26, 0x80	; 128
    2c46:	bf e3       	ldi	r27, 0x3F	; 63
    2c48:	8f a3       	std	Y+39, r24	; 0x27
    2c4a:	98 a7       	std	Y+40, r25	; 0x28
    2c4c:	a9 a7       	std	Y+41, r26	; 0x29
    2c4e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c50:	6f a1       	ldd	r22, Y+39	; 0x27
    2c52:	78 a5       	ldd	r23, Y+40	; 0x28
    2c54:	89 a5       	ldd	r24, Y+41	; 0x29
    2c56:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c58:	20 e0       	ldi	r18, 0x00	; 0
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	4a ef       	ldi	r20, 0xFA	; 250
    2c5e:	54 e4       	ldi	r21, 0x44	; 68
    2c60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c64:	dc 01       	movw	r26, r24
    2c66:	cb 01       	movw	r24, r22
    2c68:	8b a3       	std	Y+35, r24	; 0x23
    2c6a:	9c a3       	std	Y+36, r25	; 0x24
    2c6c:	ad a3       	std	Y+37, r26	; 0x25
    2c6e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c70:	6b a1       	ldd	r22, Y+35	; 0x23
    2c72:	7c a1       	ldd	r23, Y+36	; 0x24
    2c74:	8d a1       	ldd	r24, Y+37	; 0x25
    2c76:	9e a1       	ldd	r25, Y+38	; 0x26
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	40 e8       	ldi	r20, 0x80	; 128
    2c7e:	5f e3       	ldi	r21, 0x3F	; 63
    2c80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c84:	88 23       	and	r24, r24
    2c86:	2c f4       	brge	.+10     	; 0x2c92 <LCD_displayCharacter+0x16c>
		__ticks = 1;
    2c88:	81 e0       	ldi	r24, 0x01	; 1
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	9a a3       	std	Y+34, r25	; 0x22
    2c8e:	89 a3       	std	Y+33, r24	; 0x21
    2c90:	3f c0       	rjmp	.+126    	; 0x2d10 <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    2c92:	6b a1       	ldd	r22, Y+35	; 0x23
    2c94:	7c a1       	ldd	r23, Y+36	; 0x24
    2c96:	8d a1       	ldd	r24, Y+37	; 0x25
    2c98:	9e a1       	ldd	r25, Y+38	; 0x26
    2c9a:	20 e0       	ldi	r18, 0x00	; 0
    2c9c:	3f ef       	ldi	r19, 0xFF	; 255
    2c9e:	4f e7       	ldi	r20, 0x7F	; 127
    2ca0:	57 e4       	ldi	r21, 0x47	; 71
    2ca2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ca6:	18 16       	cp	r1, r24
    2ca8:	4c f5       	brge	.+82     	; 0x2cfc <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2caa:	6f a1       	ldd	r22, Y+39	; 0x27
    2cac:	78 a5       	ldd	r23, Y+40	; 0x28
    2cae:	89 a5       	ldd	r24, Y+41	; 0x29
    2cb0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cb2:	20 e0       	ldi	r18, 0x00	; 0
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	40 e2       	ldi	r20, 0x20	; 32
    2cb8:	51 e4       	ldi	r21, 0x41	; 65
    2cba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cbe:	dc 01       	movw	r26, r24
    2cc0:	cb 01       	movw	r24, r22
    2cc2:	bc 01       	movw	r22, r24
    2cc4:	cd 01       	movw	r24, r26
    2cc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cca:	dc 01       	movw	r26, r24
    2ccc:	cb 01       	movw	r24, r22
    2cce:	9a a3       	std	Y+34, r25	; 0x22
    2cd0:	89 a3       	std	Y+33, r24	; 0x21
    2cd2:	0f c0       	rjmp	.+30     	; 0x2cf2 <LCD_displayCharacter+0x1cc>
    2cd4:	88 ec       	ldi	r24, 0xC8	; 200
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	98 a3       	std	Y+32, r25	; 0x20
    2cda:	8f 8f       	std	Y+31, r24	; 0x1f
    2cdc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2cde:	98 a1       	ldd	r25, Y+32	; 0x20
    2ce0:	01 97       	sbiw	r24, 0x01	; 1
    2ce2:	f1 f7       	brne	.-4      	; 0x2ce0 <LCD_displayCharacter+0x1ba>
    2ce4:	98 a3       	std	Y+32, r25	; 0x20
    2ce6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ce8:	89 a1       	ldd	r24, Y+33	; 0x21
    2cea:	9a a1       	ldd	r25, Y+34	; 0x22
    2cec:	01 97       	sbiw	r24, 0x01	; 1
    2cee:	9a a3       	std	Y+34, r25	; 0x22
    2cf0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cf2:	89 a1       	ldd	r24, Y+33	; 0x21
    2cf4:	9a a1       	ldd	r25, Y+34	; 0x22
    2cf6:	00 97       	sbiw	r24, 0x00	; 0
    2cf8:	69 f7       	brne	.-38     	; 0x2cd4 <LCD_displayCharacter+0x1ae>
    2cfa:	14 c0       	rjmp	.+40     	; 0x2d24 <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cfc:	6b a1       	ldd	r22, Y+35	; 0x23
    2cfe:	7c a1       	ldd	r23, Y+36	; 0x24
    2d00:	8d a1       	ldd	r24, Y+37	; 0x25
    2d02:	9e a1       	ldd	r25, Y+38	; 0x26
    2d04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d08:	dc 01       	movw	r26, r24
    2d0a:	cb 01       	movw	r24, r22
    2d0c:	9a a3       	std	Y+34, r25	; 0x22
    2d0e:	89 a3       	std	Y+33, r24	; 0x21
    2d10:	89 a1       	ldd	r24, Y+33	; 0x21
    2d12:	9a a1       	ldd	r25, Y+34	; 0x22
    2d14:	9e 8f       	std	Y+30, r25	; 0x1e
    2d16:	8d 8f       	std	Y+29, r24	; 0x1d
    2d18:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d1a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d1c:	01 97       	sbiw	r24, 0x01	; 1
    2d1e:	f1 f7       	brne	.-4      	; 0x2d1c <LCD_displayCharacter+0x1f6>
    2d20:	9e 8f       	std	Y+30, r25	; 0x1e
    2d22:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    2d24:	80 e0       	ldi	r24, 0x00	; 0
    2d26:	6a ad       	ldd	r22, Y+58	; 0x3a
    2d28:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <GPIO_writePort>
    2d2c:	80 e0       	ldi	r24, 0x00	; 0
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	a0 e8       	ldi	r26, 0x80	; 128
    2d32:	bf e3       	ldi	r27, 0x3F	; 63
    2d34:	89 8f       	std	Y+25, r24	; 0x19
    2d36:	9a 8f       	std	Y+26, r25	; 0x1a
    2d38:	ab 8f       	std	Y+27, r26	; 0x1b
    2d3a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d3c:	69 8d       	ldd	r22, Y+25	; 0x19
    2d3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	4a ef       	ldi	r20, 0xFA	; 250
    2d4a:	54 e4       	ldi	r21, 0x44	; 68
    2d4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d50:	dc 01       	movw	r26, r24
    2d52:	cb 01       	movw	r24, r22
    2d54:	8d 8b       	std	Y+21, r24	; 0x15
    2d56:	9e 8b       	std	Y+22, r25	; 0x16
    2d58:	af 8b       	std	Y+23, r26	; 0x17
    2d5a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d5c:	6d 89       	ldd	r22, Y+21	; 0x15
    2d5e:	7e 89       	ldd	r23, Y+22	; 0x16
    2d60:	8f 89       	ldd	r24, Y+23	; 0x17
    2d62:	98 8d       	ldd	r25, Y+24	; 0x18
    2d64:	20 e0       	ldi	r18, 0x00	; 0
    2d66:	30 e0       	ldi	r19, 0x00	; 0
    2d68:	40 e8       	ldi	r20, 0x80	; 128
    2d6a:	5f e3       	ldi	r21, 0x3F	; 63
    2d6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d70:	88 23       	and	r24, r24
    2d72:	2c f4       	brge	.+10     	; 0x2d7e <LCD_displayCharacter+0x258>
		__ticks = 1;
    2d74:	81 e0       	ldi	r24, 0x01	; 1
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	9c 8b       	std	Y+20, r25	; 0x14
    2d7a:	8b 8b       	std	Y+19, r24	; 0x13
    2d7c:	3f c0       	rjmp	.+126    	; 0x2dfc <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2d7e:	6d 89       	ldd	r22, Y+21	; 0x15
    2d80:	7e 89       	ldd	r23, Y+22	; 0x16
    2d82:	8f 89       	ldd	r24, Y+23	; 0x17
    2d84:	98 8d       	ldd	r25, Y+24	; 0x18
    2d86:	20 e0       	ldi	r18, 0x00	; 0
    2d88:	3f ef       	ldi	r19, 0xFF	; 255
    2d8a:	4f e7       	ldi	r20, 0x7F	; 127
    2d8c:	57 e4       	ldi	r21, 0x47	; 71
    2d8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d92:	18 16       	cp	r1, r24
    2d94:	4c f5       	brge	.+82     	; 0x2de8 <LCD_displayCharacter+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d96:	69 8d       	ldd	r22, Y+25	; 0x19
    2d98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d9e:	20 e0       	ldi	r18, 0x00	; 0
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	40 e2       	ldi	r20, 0x20	; 32
    2da4:	51 e4       	ldi	r21, 0x41	; 65
    2da6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2daa:	dc 01       	movw	r26, r24
    2dac:	cb 01       	movw	r24, r22
    2dae:	bc 01       	movw	r22, r24
    2db0:	cd 01       	movw	r24, r26
    2db2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db6:	dc 01       	movw	r26, r24
    2db8:	cb 01       	movw	r24, r22
    2dba:	9c 8b       	std	Y+20, r25	; 0x14
    2dbc:	8b 8b       	std	Y+19, r24	; 0x13
    2dbe:	0f c0       	rjmp	.+30     	; 0x2dde <LCD_displayCharacter+0x2b8>
    2dc0:	88 ec       	ldi	r24, 0xC8	; 200
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	9a 8b       	std	Y+18, r25	; 0x12
    2dc6:	89 8b       	std	Y+17, r24	; 0x11
    2dc8:	89 89       	ldd	r24, Y+17	; 0x11
    2dca:	9a 89       	ldd	r25, Y+18	; 0x12
    2dcc:	01 97       	sbiw	r24, 0x01	; 1
    2dce:	f1 f7       	brne	.-4      	; 0x2dcc <LCD_displayCharacter+0x2a6>
    2dd0:	9a 8b       	std	Y+18, r25	; 0x12
    2dd2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dd4:	8b 89       	ldd	r24, Y+19	; 0x13
    2dd6:	9c 89       	ldd	r25, Y+20	; 0x14
    2dd8:	01 97       	sbiw	r24, 0x01	; 1
    2dda:	9c 8b       	std	Y+20, r25	; 0x14
    2ddc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dde:	8b 89       	ldd	r24, Y+19	; 0x13
    2de0:	9c 89       	ldd	r25, Y+20	; 0x14
    2de2:	00 97       	sbiw	r24, 0x00	; 0
    2de4:	69 f7       	brne	.-38     	; 0x2dc0 <LCD_displayCharacter+0x29a>
    2de6:	14 c0       	rjmp	.+40     	; 0x2e10 <LCD_displayCharacter+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2de8:	6d 89       	ldd	r22, Y+21	; 0x15
    2dea:	7e 89       	ldd	r23, Y+22	; 0x16
    2dec:	8f 89       	ldd	r24, Y+23	; 0x17
    2dee:	98 8d       	ldd	r25, Y+24	; 0x18
    2df0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df4:	dc 01       	movw	r26, r24
    2df6:	cb 01       	movw	r24, r22
    2df8:	9c 8b       	std	Y+20, r25	; 0x14
    2dfa:	8b 8b       	std	Y+19, r24	; 0x13
    2dfc:	8b 89       	ldd	r24, Y+19	; 0x13
    2dfe:	9c 89       	ldd	r25, Y+20	; 0x14
    2e00:	98 8b       	std	Y+16, r25	; 0x10
    2e02:	8f 87       	std	Y+15, r24	; 0x0f
    2e04:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e06:	98 89       	ldd	r25, Y+16	; 0x10
    2e08:	01 97       	sbiw	r24, 0x01	; 1
    2e0a:	f1 f7       	brne	.-4      	; 0x2e08 <LCD_displayCharacter+0x2e2>
    2e0c:	98 8b       	std	Y+16, r25	; 0x10
    2e0e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2e10:	81 e0       	ldi	r24, 0x01	; 1
    2e12:	62 e0       	ldi	r22, 0x02	; 2
    2e14:	40 e0       	ldi	r20, 0x00	; 0
    2e16:	0e 94 43 10 	call	0x2086	; 0x2086 <GPIO_writePin>
    2e1a:	80 e0       	ldi	r24, 0x00	; 0
    2e1c:	90 e0       	ldi	r25, 0x00	; 0
    2e1e:	a0 e8       	ldi	r26, 0x80	; 128
    2e20:	bf e3       	ldi	r27, 0x3F	; 63
    2e22:	8b 87       	std	Y+11, r24	; 0x0b
    2e24:	9c 87       	std	Y+12, r25	; 0x0c
    2e26:	ad 87       	std	Y+13, r26	; 0x0d
    2e28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e30:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e32:	20 e0       	ldi	r18, 0x00	; 0
    2e34:	30 e0       	ldi	r19, 0x00	; 0
    2e36:	4a ef       	ldi	r20, 0xFA	; 250
    2e38:	54 e4       	ldi	r21, 0x44	; 68
    2e3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e3e:	dc 01       	movw	r26, r24
    2e40:	cb 01       	movw	r24, r22
    2e42:	8f 83       	std	Y+7, r24	; 0x07
    2e44:	98 87       	std	Y+8, r25	; 0x08
    2e46:	a9 87       	std	Y+9, r26	; 0x09
    2e48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e4a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e4c:	78 85       	ldd	r23, Y+8	; 0x08
    2e4e:	89 85       	ldd	r24, Y+9	; 0x09
    2e50:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e52:	20 e0       	ldi	r18, 0x00	; 0
    2e54:	30 e0       	ldi	r19, 0x00	; 0
    2e56:	40 e8       	ldi	r20, 0x80	; 128
    2e58:	5f e3       	ldi	r21, 0x3F	; 63
    2e5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e5e:	88 23       	and	r24, r24
    2e60:	2c f4       	brge	.+10     	; 0x2e6c <LCD_displayCharacter+0x346>
		__ticks = 1;
    2e62:	81 e0       	ldi	r24, 0x01	; 1
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	9e 83       	std	Y+6, r25	; 0x06
    2e68:	8d 83       	std	Y+5, r24	; 0x05
    2e6a:	3f c0       	rjmp	.+126    	; 0x2eea <LCD_displayCharacter+0x3c4>
	else if (__tmp > 65535)
    2e6c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e6e:	78 85       	ldd	r23, Y+8	; 0x08
    2e70:	89 85       	ldd	r24, Y+9	; 0x09
    2e72:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e74:	20 e0       	ldi	r18, 0x00	; 0
    2e76:	3f ef       	ldi	r19, 0xFF	; 255
    2e78:	4f e7       	ldi	r20, 0x7F	; 127
    2e7a:	57 e4       	ldi	r21, 0x47	; 71
    2e7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e80:	18 16       	cp	r1, r24
    2e82:	4c f5       	brge	.+82     	; 0x2ed6 <LCD_displayCharacter+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e84:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e86:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e88:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e8c:	20 e0       	ldi	r18, 0x00	; 0
    2e8e:	30 e0       	ldi	r19, 0x00	; 0
    2e90:	40 e2       	ldi	r20, 0x20	; 32
    2e92:	51 e4       	ldi	r21, 0x41	; 65
    2e94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e98:	dc 01       	movw	r26, r24
    2e9a:	cb 01       	movw	r24, r22
    2e9c:	bc 01       	movw	r22, r24
    2e9e:	cd 01       	movw	r24, r26
    2ea0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea4:	dc 01       	movw	r26, r24
    2ea6:	cb 01       	movw	r24, r22
    2ea8:	9e 83       	std	Y+6, r25	; 0x06
    2eaa:	8d 83       	std	Y+5, r24	; 0x05
    2eac:	0f c0       	rjmp	.+30     	; 0x2ecc <LCD_displayCharacter+0x3a6>
    2eae:	88 ec       	ldi	r24, 0xC8	; 200
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	9c 83       	std	Y+4, r25	; 0x04
    2eb4:	8b 83       	std	Y+3, r24	; 0x03
    2eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb8:	9c 81       	ldd	r25, Y+4	; 0x04
    2eba:	01 97       	sbiw	r24, 0x01	; 1
    2ebc:	f1 f7       	brne	.-4      	; 0x2eba <LCD_displayCharacter+0x394>
    2ebe:	9c 83       	std	Y+4, r25	; 0x04
    2ec0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ec2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ec6:	01 97       	sbiw	r24, 0x01	; 1
    2ec8:	9e 83       	std	Y+6, r25	; 0x06
    2eca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ecc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ece:	9e 81       	ldd	r25, Y+6	; 0x06
    2ed0:	00 97       	sbiw	r24, 0x00	; 0
    2ed2:	69 f7       	brne	.-38     	; 0x2eae <LCD_displayCharacter+0x388>
    2ed4:	14 c0       	rjmp	.+40     	; 0x2efe <LCD_displayCharacter+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ed6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ed8:	78 85       	ldd	r23, Y+8	; 0x08
    2eda:	89 85       	ldd	r24, Y+9	; 0x09
    2edc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ede:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ee2:	dc 01       	movw	r26, r24
    2ee4:	cb 01       	movw	r24, r22
    2ee6:	9e 83       	std	Y+6, r25	; 0x06
    2ee8:	8d 83       	std	Y+5, r24	; 0x05
    2eea:	8d 81       	ldd	r24, Y+5	; 0x05
    2eec:	9e 81       	ldd	r25, Y+6	; 0x06
    2eee:	9a 83       	std	Y+2, r25	; 0x02
    2ef0:	89 83       	std	Y+1, r24	; 0x01
    2ef2:	89 81       	ldd	r24, Y+1	; 0x01
    2ef4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ef6:	01 97       	sbiw	r24, 0x01	; 1
    2ef8:	f1 f7       	brne	.-4      	; 0x2ef6 <LCD_displayCharacter+0x3d0>
    2efa:	9a 83       	std	Y+2, r25	; 0x02
    2efc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2efe:	ea 96       	adiw	r28, 0x3a	; 58
    2f00:	0f b6       	in	r0, 0x3f	; 63
    2f02:	f8 94       	cli
    2f04:	de bf       	out	0x3e, r29	; 62
    2f06:	0f be       	out	0x3f, r0	; 63
    2f08:	cd bf       	out	0x3d, r28	; 61
    2f0a:	cf 91       	pop	r28
    2f0c:	df 91       	pop	r29
    2f0e:	08 95       	ret

00002f10 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2f10:	df 93       	push	r29
    2f12:	cf 93       	push	r28
    2f14:	00 d0       	rcall	.+0      	; 0x2f16 <LCD_displayString+0x6>
    2f16:	0f 92       	push	r0
    2f18:	cd b7       	in	r28, 0x3d	; 61
    2f1a:	de b7       	in	r29, 0x3e	; 62
    2f1c:	9b 83       	std	Y+3, r25	; 0x03
    2f1e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2f20:	19 82       	std	Y+1, r1	; 0x01
    2f22:	0e c0       	rjmp	.+28     	; 0x2f40 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2f24:	89 81       	ldd	r24, Y+1	; 0x01
    2f26:	28 2f       	mov	r18, r24
    2f28:	30 e0       	ldi	r19, 0x00	; 0
    2f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f2c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f2e:	fc 01       	movw	r30, r24
    2f30:	e2 0f       	add	r30, r18
    2f32:	f3 1f       	adc	r31, r19
    2f34:	80 81       	ld	r24, Z
    2f36:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_displayCharacter>
		i++;
    2f3a:	89 81       	ldd	r24, Y+1	; 0x01
    2f3c:	8f 5f       	subi	r24, 0xFF	; 255
    2f3e:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2f40:	89 81       	ldd	r24, Y+1	; 0x01
    2f42:	28 2f       	mov	r18, r24
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	8a 81       	ldd	r24, Y+2	; 0x02
    2f48:	9b 81       	ldd	r25, Y+3	; 0x03
    2f4a:	fc 01       	movw	r30, r24
    2f4c:	e2 0f       	add	r30, r18
    2f4e:	f3 1f       	adc	r31, r19
    2f50:	80 81       	ld	r24, Z
    2f52:	88 23       	and	r24, r24
    2f54:	39 f7       	brne	.-50     	; 0x2f24 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2f56:	0f 90       	pop	r0
    2f58:	0f 90       	pop	r0
    2f5a:	0f 90       	pop	r0
    2f5c:	cf 91       	pop	r28
    2f5e:	df 91       	pop	r29
    2f60:	08 95       	ret

00002f62 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2f62:	df 93       	push	r29
    2f64:	cf 93       	push	r28
    2f66:	00 d0       	rcall	.+0      	; 0x2f68 <LCD_moveCursor+0x6>
    2f68:	00 d0       	rcall	.+0      	; 0x2f6a <LCD_moveCursor+0x8>
    2f6a:	0f 92       	push	r0
    2f6c:	cd b7       	in	r28, 0x3d	; 61
    2f6e:	de b7       	in	r29, 0x3e	; 62
    2f70:	8a 83       	std	Y+2, r24	; 0x02
    2f72:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2f74:	8a 81       	ldd	r24, Y+2	; 0x02
    2f76:	28 2f       	mov	r18, r24
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	3d 83       	std	Y+5, r19	; 0x05
    2f7c:	2c 83       	std	Y+4, r18	; 0x04
    2f7e:	8c 81       	ldd	r24, Y+4	; 0x04
    2f80:	9d 81       	ldd	r25, Y+5	; 0x05
    2f82:	81 30       	cpi	r24, 0x01	; 1
    2f84:	91 05       	cpc	r25, r1
    2f86:	c1 f0       	breq	.+48     	; 0x2fb8 <LCD_moveCursor+0x56>
    2f88:	2c 81       	ldd	r18, Y+4	; 0x04
    2f8a:	3d 81       	ldd	r19, Y+5	; 0x05
    2f8c:	22 30       	cpi	r18, 0x02	; 2
    2f8e:	31 05       	cpc	r19, r1
    2f90:	2c f4       	brge	.+10     	; 0x2f9c <LCD_moveCursor+0x3a>
    2f92:	8c 81       	ldd	r24, Y+4	; 0x04
    2f94:	9d 81       	ldd	r25, Y+5	; 0x05
    2f96:	00 97       	sbiw	r24, 0x00	; 0
    2f98:	61 f0       	breq	.+24     	; 0x2fb2 <LCD_moveCursor+0x50>
    2f9a:	19 c0       	rjmp	.+50     	; 0x2fce <LCD_moveCursor+0x6c>
    2f9c:	2c 81       	ldd	r18, Y+4	; 0x04
    2f9e:	3d 81       	ldd	r19, Y+5	; 0x05
    2fa0:	22 30       	cpi	r18, 0x02	; 2
    2fa2:	31 05       	cpc	r19, r1
    2fa4:	69 f0       	breq	.+26     	; 0x2fc0 <LCD_moveCursor+0x5e>
    2fa6:	8c 81       	ldd	r24, Y+4	; 0x04
    2fa8:	9d 81       	ldd	r25, Y+5	; 0x05
    2faa:	83 30       	cpi	r24, 0x03	; 3
    2fac:	91 05       	cpc	r25, r1
    2fae:	61 f0       	breq	.+24     	; 0x2fc8 <LCD_moveCursor+0x66>
    2fb0:	0e c0       	rjmp	.+28     	; 0x2fce <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2fb2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb4:	89 83       	std	Y+1, r24	; 0x01
    2fb6:	0b c0       	rjmp	.+22     	; 0x2fce <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2fba:	80 5c       	subi	r24, 0xC0	; 192
    2fbc:	89 83       	std	Y+1, r24	; 0x01
    2fbe:	07 c0       	rjmp	.+14     	; 0x2fce <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc2:	80 5f       	subi	r24, 0xF0	; 240
    2fc4:	89 83       	std	Y+1, r24	; 0x01
    2fc6:	03 c0       	rjmp	.+6      	; 0x2fce <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2fc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2fca:	80 5b       	subi	r24, 0xB0	; 176
    2fcc:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2fce:	89 81       	ldd	r24, Y+1	; 0x01
    2fd0:	80 68       	ori	r24, 0x80	; 128
    2fd2:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_sendCommand>
}
    2fd6:	0f 90       	pop	r0
    2fd8:	0f 90       	pop	r0
    2fda:	0f 90       	pop	r0
    2fdc:	0f 90       	pop	r0
    2fde:	0f 90       	pop	r0
    2fe0:	cf 91       	pop	r28
    2fe2:	df 91       	pop	r29
    2fe4:	08 95       	ret

00002fe6 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2fe6:	df 93       	push	r29
    2fe8:	cf 93       	push	r28
    2fea:	00 d0       	rcall	.+0      	; 0x2fec <LCD_displayStringRowColumn+0x6>
    2fec:	00 d0       	rcall	.+0      	; 0x2fee <LCD_displayStringRowColumn+0x8>
    2fee:	cd b7       	in	r28, 0x3d	; 61
    2ff0:	de b7       	in	r29, 0x3e	; 62
    2ff2:	89 83       	std	Y+1, r24	; 0x01
    2ff4:	6a 83       	std	Y+2, r22	; 0x02
    2ff6:	5c 83       	std	Y+4, r21	; 0x04
    2ff8:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2ffa:	89 81       	ldd	r24, Y+1	; 0x01
    2ffc:	6a 81       	ldd	r22, Y+2	; 0x02
    2ffe:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    3002:	8b 81       	ldd	r24, Y+3	; 0x03
    3004:	9c 81       	ldd	r25, Y+4	; 0x04
    3006:	0e 94 88 17 	call	0x2f10	; 0x2f10 <LCD_displayString>
}
    300a:	0f 90       	pop	r0
    300c:	0f 90       	pop	r0
    300e:	0f 90       	pop	r0
    3010:	0f 90       	pop	r0
    3012:	cf 91       	pop	r28
    3014:	df 91       	pop	r29
    3016:	08 95       	ret

00003018 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3018:	df 93       	push	r29
    301a:	cf 93       	push	r28
    301c:	cd b7       	in	r28, 0x3d	; 61
    301e:	de b7       	in	r29, 0x3e	; 62
    3020:	62 97       	sbiw	r28, 0x12	; 18
    3022:	0f b6       	in	r0, 0x3f	; 63
    3024:	f8 94       	cli
    3026:	de bf       	out	0x3e, r29	; 62
    3028:	0f be       	out	0x3f, r0	; 63
    302a:	cd bf       	out	0x3d, r28	; 61
    302c:	9a 8b       	std	Y+18, r25	; 0x12
    302e:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3030:	89 89       	ldd	r24, Y+17	; 0x11
    3032:	9a 89       	ldd	r25, Y+18	; 0x12
    3034:	9e 01       	movw	r18, r28
    3036:	2f 5f       	subi	r18, 0xFF	; 255
    3038:	3f 4f       	sbci	r19, 0xFF	; 255
    303a:	b9 01       	movw	r22, r18
    303c:	4a e0       	ldi	r20, 0x0A	; 10
    303e:	50 e0       	ldi	r21, 0x00	; 0
    3040:	0e 94 c2 18 	call	0x3184	; 0x3184 <itoa>
   LCD_displayString(buff); /* Display the string */
    3044:	ce 01       	movw	r24, r28
    3046:	01 96       	adiw	r24, 0x01	; 1
    3048:	0e 94 88 17 	call	0x2f10	; 0x2f10 <LCD_displayString>
}
    304c:	62 96       	adiw	r28, 0x12	; 18
    304e:	0f b6       	in	r0, 0x3f	; 63
    3050:	f8 94       	cli
    3052:	de bf       	out	0x3e, r29	; 62
    3054:	0f be       	out	0x3f, r0	; 63
    3056:	cd bf       	out	0x3d, r28	; 61
    3058:	cf 91       	pop	r28
    305a:	df 91       	pop	r29
    305c:	08 95       	ret

0000305e <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    305e:	df 93       	push	r29
    3060:	cf 93       	push	r28
    3062:	cd b7       	in	r28, 0x3d	; 61
    3064:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3066:	81 e0       	ldi	r24, 0x01	; 1
    3068:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_sendCommand>
}
    306c:	cf 91       	pop	r28
    306e:	df 91       	pop	r29
    3070:	08 95       	ret

00003072 <main>:
#include "avr/interrupt.h"



int main (void)
{
    3072:	df 93       	push	r29
    3074:	cf 93       	push	r28
    3076:	cd b7       	in	r28, 0x3d	; 61
    3078:	de b7       	in	r29, 0x3e	; 62
			DataFrame_8Bits,
			BaudRate_9600
	};

	/*LCD init*/
	LCD_init();
    307a:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <LCD_init>

	/*UART_Init*/
    UART_Init(&UART_ConfigStruct);
    307e:	83 ee       	ldi	r24, 0xE3	; 227
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	0e 94 87 0c 	call	0x190e	; 0x190e <UART_Init>

    OPERATION_EnterPassword();
    3086:	0e 94 de 05 	call	0xbbc	; 0xbbc <OPERATION_EnterPassword>
    OPERATION_reEnterPassword();
    308a:	0e 94 86 06 	call	0xd0c	; 0xd0c <OPERATION_reEnterPassword>
    OPERATION_checkPasswordMatch();
    308e:	0e 94 2e 07 	call	0xe5c	; 0xe5c <OPERATION_checkPasswordMatch>
    3092:	ff cf       	rjmp	.-2      	; 0x3092 <main+0x20>

00003094 <__mulsi3>:
    3094:	62 9f       	mul	r22, r18
    3096:	d0 01       	movw	r26, r0
    3098:	73 9f       	mul	r23, r19
    309a:	f0 01       	movw	r30, r0
    309c:	82 9f       	mul	r24, r18
    309e:	e0 0d       	add	r30, r0
    30a0:	f1 1d       	adc	r31, r1
    30a2:	64 9f       	mul	r22, r20
    30a4:	e0 0d       	add	r30, r0
    30a6:	f1 1d       	adc	r31, r1
    30a8:	92 9f       	mul	r25, r18
    30aa:	f0 0d       	add	r31, r0
    30ac:	83 9f       	mul	r24, r19
    30ae:	f0 0d       	add	r31, r0
    30b0:	74 9f       	mul	r23, r20
    30b2:	f0 0d       	add	r31, r0
    30b4:	65 9f       	mul	r22, r21
    30b6:	f0 0d       	add	r31, r0
    30b8:	99 27       	eor	r25, r25
    30ba:	72 9f       	mul	r23, r18
    30bc:	b0 0d       	add	r27, r0
    30be:	e1 1d       	adc	r30, r1
    30c0:	f9 1f       	adc	r31, r25
    30c2:	63 9f       	mul	r22, r19
    30c4:	b0 0d       	add	r27, r0
    30c6:	e1 1d       	adc	r30, r1
    30c8:	f9 1f       	adc	r31, r25
    30ca:	bd 01       	movw	r22, r26
    30cc:	cf 01       	movw	r24, r30
    30ce:	11 24       	eor	r1, r1
    30d0:	08 95       	ret

000030d2 <__udivmodsi4>:
    30d2:	a1 e2       	ldi	r26, 0x21	; 33
    30d4:	1a 2e       	mov	r1, r26
    30d6:	aa 1b       	sub	r26, r26
    30d8:	bb 1b       	sub	r27, r27
    30da:	fd 01       	movw	r30, r26
    30dc:	0d c0       	rjmp	.+26     	; 0x30f8 <__udivmodsi4_ep>

000030de <__udivmodsi4_loop>:
    30de:	aa 1f       	adc	r26, r26
    30e0:	bb 1f       	adc	r27, r27
    30e2:	ee 1f       	adc	r30, r30
    30e4:	ff 1f       	adc	r31, r31
    30e6:	a2 17       	cp	r26, r18
    30e8:	b3 07       	cpc	r27, r19
    30ea:	e4 07       	cpc	r30, r20
    30ec:	f5 07       	cpc	r31, r21
    30ee:	20 f0       	brcs	.+8      	; 0x30f8 <__udivmodsi4_ep>
    30f0:	a2 1b       	sub	r26, r18
    30f2:	b3 0b       	sbc	r27, r19
    30f4:	e4 0b       	sbc	r30, r20
    30f6:	f5 0b       	sbc	r31, r21

000030f8 <__udivmodsi4_ep>:
    30f8:	66 1f       	adc	r22, r22
    30fa:	77 1f       	adc	r23, r23
    30fc:	88 1f       	adc	r24, r24
    30fe:	99 1f       	adc	r25, r25
    3100:	1a 94       	dec	r1
    3102:	69 f7       	brne	.-38     	; 0x30de <__udivmodsi4_loop>
    3104:	60 95       	com	r22
    3106:	70 95       	com	r23
    3108:	80 95       	com	r24
    310a:	90 95       	com	r25
    310c:	9b 01       	movw	r18, r22
    310e:	ac 01       	movw	r20, r24
    3110:	bd 01       	movw	r22, r26
    3112:	cf 01       	movw	r24, r30
    3114:	08 95       	ret

00003116 <__prologue_saves__>:
    3116:	2f 92       	push	r2
    3118:	3f 92       	push	r3
    311a:	4f 92       	push	r4
    311c:	5f 92       	push	r5
    311e:	6f 92       	push	r6
    3120:	7f 92       	push	r7
    3122:	8f 92       	push	r8
    3124:	9f 92       	push	r9
    3126:	af 92       	push	r10
    3128:	bf 92       	push	r11
    312a:	cf 92       	push	r12
    312c:	df 92       	push	r13
    312e:	ef 92       	push	r14
    3130:	ff 92       	push	r15
    3132:	0f 93       	push	r16
    3134:	1f 93       	push	r17
    3136:	cf 93       	push	r28
    3138:	df 93       	push	r29
    313a:	cd b7       	in	r28, 0x3d	; 61
    313c:	de b7       	in	r29, 0x3e	; 62
    313e:	ca 1b       	sub	r28, r26
    3140:	db 0b       	sbc	r29, r27
    3142:	0f b6       	in	r0, 0x3f	; 63
    3144:	f8 94       	cli
    3146:	de bf       	out	0x3e, r29	; 62
    3148:	0f be       	out	0x3f, r0	; 63
    314a:	cd bf       	out	0x3d, r28	; 61
    314c:	09 94       	ijmp

0000314e <__epilogue_restores__>:
    314e:	2a 88       	ldd	r2, Y+18	; 0x12
    3150:	39 88       	ldd	r3, Y+17	; 0x11
    3152:	48 88       	ldd	r4, Y+16	; 0x10
    3154:	5f 84       	ldd	r5, Y+15	; 0x0f
    3156:	6e 84       	ldd	r6, Y+14	; 0x0e
    3158:	7d 84       	ldd	r7, Y+13	; 0x0d
    315a:	8c 84       	ldd	r8, Y+12	; 0x0c
    315c:	9b 84       	ldd	r9, Y+11	; 0x0b
    315e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3160:	b9 84       	ldd	r11, Y+9	; 0x09
    3162:	c8 84       	ldd	r12, Y+8	; 0x08
    3164:	df 80       	ldd	r13, Y+7	; 0x07
    3166:	ee 80       	ldd	r14, Y+6	; 0x06
    3168:	fd 80       	ldd	r15, Y+5	; 0x05
    316a:	0c 81       	ldd	r16, Y+4	; 0x04
    316c:	1b 81       	ldd	r17, Y+3	; 0x03
    316e:	aa 81       	ldd	r26, Y+2	; 0x02
    3170:	b9 81       	ldd	r27, Y+1	; 0x01
    3172:	ce 0f       	add	r28, r30
    3174:	d1 1d       	adc	r29, r1
    3176:	0f b6       	in	r0, 0x3f	; 63
    3178:	f8 94       	cli
    317a:	de bf       	out	0x3e, r29	; 62
    317c:	0f be       	out	0x3f, r0	; 63
    317e:	cd bf       	out	0x3d, r28	; 61
    3180:	ed 01       	movw	r28, r26
    3182:	08 95       	ret

00003184 <itoa>:
    3184:	fb 01       	movw	r30, r22
    3186:	9f 01       	movw	r18, r30
    3188:	e8 94       	clt
    318a:	42 30       	cpi	r20, 0x02	; 2
    318c:	c4 f0       	brlt	.+48     	; 0x31be <itoa+0x3a>
    318e:	45 32       	cpi	r20, 0x25	; 37
    3190:	b4 f4       	brge	.+44     	; 0x31be <itoa+0x3a>
    3192:	4a 30       	cpi	r20, 0x0A	; 10
    3194:	29 f4       	brne	.+10     	; 0x31a0 <itoa+0x1c>
    3196:	97 fb       	bst	r25, 7
    3198:	1e f4       	brtc	.+6      	; 0x31a0 <itoa+0x1c>
    319a:	90 95       	com	r25
    319c:	81 95       	neg	r24
    319e:	9f 4f       	sbci	r25, 0xFF	; 255
    31a0:	64 2f       	mov	r22, r20
    31a2:	77 27       	eor	r23, r23
    31a4:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__udivmodhi4>
    31a8:	80 5d       	subi	r24, 0xD0	; 208
    31aa:	8a 33       	cpi	r24, 0x3A	; 58
    31ac:	0c f0       	brlt	.+2      	; 0x31b0 <itoa+0x2c>
    31ae:	89 5d       	subi	r24, 0xD9	; 217
    31b0:	81 93       	st	Z+, r24
    31b2:	cb 01       	movw	r24, r22
    31b4:	00 97       	sbiw	r24, 0x00	; 0
    31b6:	a1 f7       	brne	.-24     	; 0x31a0 <itoa+0x1c>
    31b8:	16 f4       	brtc	.+4      	; 0x31be <itoa+0x3a>
    31ba:	5d e2       	ldi	r21, 0x2D	; 45
    31bc:	51 93       	st	Z+, r21
    31be:	10 82       	st	Z, r1
    31c0:	c9 01       	movw	r24, r18
    31c2:	0c 94 e3 18 	jmp	0x31c6	; 0x31c6 <strrev>

000031c6 <strrev>:
    31c6:	dc 01       	movw	r26, r24
    31c8:	fc 01       	movw	r30, r24
    31ca:	67 2f       	mov	r22, r23
    31cc:	71 91       	ld	r23, Z+
    31ce:	77 23       	and	r23, r23
    31d0:	e1 f7       	brne	.-8      	; 0x31ca <strrev+0x4>
    31d2:	32 97       	sbiw	r30, 0x02	; 2
    31d4:	04 c0       	rjmp	.+8      	; 0x31de <strrev+0x18>
    31d6:	7c 91       	ld	r23, X
    31d8:	6d 93       	st	X+, r22
    31da:	70 83       	st	Z, r23
    31dc:	62 91       	ld	r22, -Z
    31de:	ae 17       	cp	r26, r30
    31e0:	bf 07       	cpc	r27, r31
    31e2:	c8 f3       	brcs	.-14     	; 0x31d6 <strrev+0x10>
    31e4:	08 95       	ret

000031e6 <__udivmodhi4>:
    31e6:	aa 1b       	sub	r26, r26
    31e8:	bb 1b       	sub	r27, r27
    31ea:	51 e1       	ldi	r21, 0x11	; 17
    31ec:	07 c0       	rjmp	.+14     	; 0x31fc <__udivmodhi4_ep>

000031ee <__udivmodhi4_loop>:
    31ee:	aa 1f       	adc	r26, r26
    31f0:	bb 1f       	adc	r27, r27
    31f2:	a6 17       	cp	r26, r22
    31f4:	b7 07       	cpc	r27, r23
    31f6:	10 f0       	brcs	.+4      	; 0x31fc <__udivmodhi4_ep>
    31f8:	a6 1b       	sub	r26, r22
    31fa:	b7 0b       	sbc	r27, r23

000031fc <__udivmodhi4_ep>:
    31fc:	88 1f       	adc	r24, r24
    31fe:	99 1f       	adc	r25, r25
    3200:	5a 95       	dec	r21
    3202:	a9 f7       	brne	.-22     	; 0x31ee <__udivmodhi4_loop>
    3204:	80 95       	com	r24
    3206:	90 95       	com	r25
    3208:	bc 01       	movw	r22, r24
    320a:	cd 01       	movw	r24, r26
    320c:	08 95       	ret

0000320e <_exit>:
    320e:	f8 94       	cli

00003210 <__stop_program>:
    3210:	ff cf       	rjmp	.-2      	; 0x3210 <__stop_program>
