
UART_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000023ec  00002480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800072  00800072  00002492  2**0
                  ALLOC
  3 .stab         00001c20  00000000  00000000  00002494  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001067  00000000  00000000  000040b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000511b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000525b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000053cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007eff  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008cac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009867  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ee       	ldi	r30, 0xEC	; 236
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 37       	cpi	r26, 0x75	; 117
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 df 10 	call	0x21be	; 0x21be <main>
      8a:	0c 94 f4 11 	jmp	0x23e8	; 0x23e8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 78 11 	jmp	0x22f0	; 0x22f0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 94 11 	jmp	0x2328	; 0x2328 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 84 11 	jmp	0x2308	; 0x2308 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 84 11 	jmp	0x2308	; 0x2308 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 78 11 	jmp	0x22f0	; 0x22f0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 94 11 	jmp	0x2328	; 0x2328 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 84 11 	jmp	0x2308	; 0x2308 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 84 11 	jmp	0x2308	; 0x2308 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 84 11 	jmp	0x2308	; 0x2308 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 88 11 	jmp	0x2310	; 0x2310 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a4 11 	jmp	0x2348	; 0x2348 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_11>:
 *                                                                              *
 *                          Interrupt Service Routine                           *
 *                                                                              *
 ********************************************************************************/
ISR(USART_RXC_vect)
 {
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	0f 92       	push	r0
     b6e:	cd b7       	in	r28, 0x3d	; 61
     b70:	de b7       	in	r29, 0x3e	; 62
	uint8 key;

	key = UDR;
     b72:	ec e2       	ldi	r30, 0x2C	; 44
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	80 81       	ld	r24, Z
     b78:	89 83       	std	Y+1, r24	; 0x01

    LCD_displayCharacter(key);
     b7a:	89 81       	ldd	r24, Y+1	; 0x01
     b7c:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <LCD_displayCharacter>


     if ( key == 'b')
     b80:	89 81       	ldd	r24, Y+1	; 0x01
     b82:	82 36       	cpi	r24, 0x62	; 98
     b84:	31 f4       	brne	.+12     	; 0xb92 <__vector_11+0x4c>
     {
     	GPIO_writePin(PORTB_ID, PIN0_ID, LOGIC_HIGH);
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	60 e0       	ldi	r22, 0x00	; 0
     b8a:	41 e0       	ldi	r20, 0x01	; 1
     b8c:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <GPIO_writePin>
     b90:	05 c0       	rjmp	.+10     	; 0xb9c <__vector_11+0x56>
     }
     else
     {
     	GPIO_writePin(PORTB_ID, PIN0_ID, LOGIC_LOW);
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	60 e0       	ldi	r22, 0x00	; 0
     b96:	40 e0       	ldi	r20, 0x00	; 0
     b98:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <GPIO_writePin>
     }
 }
     b9c:	0f 90       	pop	r0
     b9e:	cf 91       	pop	r28
     ba0:	df 91       	pop	r29
     ba2:	ff 91       	pop	r31
     ba4:	ef 91       	pop	r30
     ba6:	bf 91       	pop	r27
     ba8:	af 91       	pop	r26
     baa:	9f 91       	pop	r25
     bac:	8f 91       	pop	r24
     bae:	7f 91       	pop	r23
     bb0:	6f 91       	pop	r22
     bb2:	5f 91       	pop	r21
     bb4:	4f 91       	pop	r20
     bb6:	3f 91       	pop	r19
     bb8:	2f 91       	pop	r18
     bba:	0f 90       	pop	r0
     bbc:	0f be       	out	0x3f, r0	; 63
     bbe:	0f 90       	pop	r0
     bc0:	1f 90       	pop	r1
     bc2:	18 95       	reti

00000bc4 <UART_Init>:
* Parameters (out):   None
* Return value:       None
* Description:        Initialize the UART module.
********************************************************************************/
void UART_Init(const UART_ConfigType * Config_Ptr)
{
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	cd b7       	in	r28, 0x3d	; 61
     bca:	de b7       	in	r29, 0x3e	; 62
     bcc:	64 97       	sbiw	r28, 0x14	; 20
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	f8 94       	cli
     bd2:	de bf       	out	0x3e, r29	; 62
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	cd bf       	out	0x3d, r28	; 61
     bd8:	9a 83       	std	Y+2, r25	; 0x02
     bda:	89 83       	std	Y+1, r24	; 0x01
	/*Config Operation Mode*/
    switch( Config_Ptr ->operation_mode)
     bdc:	e9 81       	ldd	r30, Y+1	; 0x01
     bde:	fa 81       	ldd	r31, Y+2	; 0x02
     be0:	80 81       	ld	r24, Z
     be2:	28 2f       	mov	r18, r24
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	3c 8b       	std	Y+20, r19	; 0x14
     be8:	2b 8b       	std	Y+19, r18	; 0x13
     bea:	4b 89       	ldd	r20, Y+19	; 0x13
     bec:	5c 89       	ldd	r21, Y+20	; 0x14
     bee:	41 30       	cpi	r20, 0x01	; 1
     bf0:	51 05       	cpc	r21, r1
     bf2:	91 f0       	breq	.+36     	; 0xc18 <UART_Init+0x54>
     bf4:	8b 89       	ldd	r24, Y+19	; 0x13
     bf6:	9c 89       	ldd	r25, Y+20	; 0x14
     bf8:	82 30       	cpi	r24, 0x02	; 2
     bfa:	91 05       	cpc	r25, r1
     bfc:	a9 f0       	breq	.+42     	; 0xc28 <UART_Init+0x64>
     bfe:	2b 89       	ldd	r18, Y+19	; 0x13
     c00:	3c 89       	ldd	r19, Y+20	; 0x14
     c02:	21 15       	cp	r18, r1
     c04:	31 05       	cpc	r19, r1
     c06:	f1 f4       	brne	.+60     	; 0xc44 <UART_Init+0x80>
    {
      case Receiver:                SET_BIT(UCSRB,RXEN);
     c08:	aa e2       	ldi	r26, 0x2A	; 42
     c0a:	b0 e0       	ldi	r27, 0x00	; 0
     c0c:	ea e2       	ldi	r30, 0x2A	; 42
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	80 81       	ld	r24, Z
     c12:	80 61       	ori	r24, 0x10	; 16
     c14:	8c 93       	st	X, r24
     c16:	16 c0       	rjmp	.+44     	; 0xc44 <UART_Init+0x80>
    	                            break;
      case Transmitter:             SET_BIT(UCSRB,TXEN);
     c18:	aa e2       	ldi	r26, 0x2A	; 42
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	ea e2       	ldi	r30, 0x2A	; 42
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	88 60       	ori	r24, 0x08	; 8
     c24:	8c 93       	st	X, r24
     c26:	0e c0       	rjmp	.+28     	; 0xc44 <UART_Init+0x80>
    	                            break;
      case Transmitter_Receiver:    SET_BIT(UCSRB,RXEN);
     c28:	aa e2       	ldi	r26, 0x2A	; 42
     c2a:	b0 e0       	ldi	r27, 0x00	; 0
     c2c:	ea e2       	ldi	r30, 0x2A	; 42
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
     c32:	80 61       	ori	r24, 0x10	; 16
     c34:	8c 93       	st	X, r24
                                    SET_BIT(UCSRB,TXEN);
     c36:	aa e2       	ldi	r26, 0x2A	; 42
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	ea e2       	ldi	r30, 0x2A	; 42
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	88 60       	ori	r24, 0x08	; 8
     c42:	8c 93       	st	X, r24
    	                            break;
    }
	/*Config Transmission Speed*/
	switch( Config_Ptr ->speed)
     c44:	e9 81       	ldd	r30, Y+1	; 0x01
     c46:	fa 81       	ldd	r31, Y+2	; 0x02
     c48:	81 81       	ldd	r24, Z+1	; 0x01
     c4a:	48 2f       	mov	r20, r24
     c4c:	50 e0       	ldi	r21, 0x00	; 0
     c4e:	5a 8b       	std	Y+18, r21	; 0x12
     c50:	49 8b       	std	Y+17, r20	; 0x11
     c52:	89 89       	ldd	r24, Y+17	; 0x11
     c54:	9a 89       	ldd	r25, Y+18	; 0x12
     c56:	00 97       	sbiw	r24, 0x00	; 0
     c58:	31 f0       	breq	.+12     	; 0xc66 <UART_Init+0xa2>
     c5a:	29 89       	ldd	r18, Y+17	; 0x11
     c5c:	3a 89       	ldd	r19, Y+18	; 0x12
     c5e:	21 30       	cpi	r18, 0x01	; 1
     c60:	31 05       	cpc	r19, r1
     c62:	61 f0       	breq	.+24     	; 0xc7c <UART_Init+0xb8>
     c64:	15 c0       	rjmp	.+42     	; 0xc90 <UART_Init+0xcc>
	{
	  case Normal_Speed:   CLEAR_BIT(UCSRA,U2X);
     c66:	ab e2       	ldi	r26, 0x2B	; 43
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	eb e2       	ldi	r30, 0x2B	; 43
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	8d 7f       	andi	r24, 0xFD	; 253
     c72:	8c 93       	st	X, r24
	                       g_speed_mode_division_factor = 16;
     c74:	80 e1       	ldi	r24, 0x10	; 16
     c76:	80 93 74 00 	sts	0x0074, r24
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <UART_Init+0xcc>
	 	                   break;
	  case Double_Speed:   SET_BIT(UCSRA,U2X);
     c7c:	ab e2       	ldi	r26, 0x2B	; 43
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	eb e2       	ldi	r30, 0x2B	; 43
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	82 60       	ori	r24, 0x02	; 2
     c88:	8c 93       	st	X, r24
                           g_speed_mode_division_factor = 8;
     c8a:	88 e0       	ldi	r24, 0x08	; 8
     c8c:	80 93 74 00 	sts	0x0074, r24
	  		               break;
	}

	/*Config Synchronization of UART*/
	switch ( Config_Ptr->synchronization)
     c90:	e9 81       	ldd	r30, Y+1	; 0x01
     c92:	fa 81       	ldd	r31, Y+2	; 0x02
     c94:	82 81       	ldd	r24, Z+2	; 0x02
     c96:	48 2f       	mov	r20, r24
     c98:	50 e0       	ldi	r21, 0x00	; 0
     c9a:	58 8b       	std	Y+16, r21	; 0x10
     c9c:	4f 87       	std	Y+15, r20	; 0x0f
     c9e:	8f 85       	ldd	r24, Y+15	; 0x0f
     ca0:	98 89       	ldd	r25, Y+16	; 0x10
     ca2:	00 97       	sbiw	r24, 0x00	; 0
     ca4:	31 f0       	breq	.+12     	; 0xcb2 <UART_Init+0xee>
     ca6:	2f 85       	ldd	r18, Y+15	; 0x0f
     ca8:	38 89       	ldd	r19, Y+16	; 0x10
     caa:	21 30       	cpi	r18, 0x01	; 1
     cac:	31 05       	cpc	r19, r1
     cae:	81 f0       	breq	.+32     	; 0xcd0 <UART_Init+0x10c>
     cb0:	1d c0       	rjmp	.+58     	; 0xcec <UART_Init+0x128>
	{
	 case Asynchronous: SET_BIT(UCSRC,URSEL);
     cb2:	a0 e4       	ldi	r26, 0x40	; 64
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	e0 e4       	ldi	r30, 0x40	; 64
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	80 68       	ori	r24, 0x80	; 128
     cbe:	8c 93       	st	X, r24
	                    CLEAR_BIT(UCSRC,UMSEL);
     cc0:	a0 e4       	ldi	r26, 0x40	; 64
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	e0 e4       	ldi	r30, 0x40	; 64
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	8f 7b       	andi	r24, 0xBF	; 191
     ccc:	8c 93       	st	X, r24
     cce:	0e c0       	rjmp	.+28     	; 0xcec <UART_Init+0x128>
		                break;
	 case Synchronous:  SET_BIT(UCSRC,URSEL);
     cd0:	a0 e4       	ldi	r26, 0x40	; 64
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e0 e4       	ldi	r30, 0x40	; 64
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	80 68       	ori	r24, 0x80	; 128
     cdc:	8c 93       	st	X, r24
	                    SET_BIT(UCSRC,UMSEL);
     cde:	a0 e4       	ldi	r26, 0x40	; 64
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e0 e4       	ldi	r30, 0x40	; 64
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	80 64       	ori	r24, 0x40	; 64
     cea:	8c 93       	st	X, r24
	 		            break;
	}

	/*Config Parity Bit of UART*/
	switch ( Config_Ptr ->parity)
     cec:	e9 81       	ldd	r30, Y+1	; 0x01
     cee:	fa 81       	ldd	r31, Y+2	; 0x02
     cf0:	83 81       	ldd	r24, Z+3	; 0x03
     cf2:	48 2f       	mov	r20, r24
     cf4:	50 e0       	ldi	r21, 0x00	; 0
     cf6:	5e 87       	std	Y+14, r21	; 0x0e
     cf8:	4d 87       	std	Y+13, r20	; 0x0d
     cfa:	8d 85       	ldd	r24, Y+13	; 0x0d
     cfc:	9e 85       	ldd	r25, Y+14	; 0x0e
     cfe:	81 30       	cpi	r24, 0x01	; 1
     d00:	91 05       	cpc	r25, r1
     d02:	09 f1       	breq	.+66     	; 0xd46 <UART_Init+0x182>
     d04:	2d 85       	ldd	r18, Y+13	; 0x0d
     d06:	3e 85       	ldd	r19, Y+14	; 0x0e
     d08:	22 30       	cpi	r18, 0x02	; 2
     d0a:	31 05       	cpc	r19, r1
     d0c:	91 f1       	breq	.+100    	; 0xd72 <UART_Init+0x1ae>
     d0e:	4d 85       	ldd	r20, Y+13	; 0x0d
     d10:	5e 85       	ldd	r21, Y+14	; 0x0e
     d12:	41 15       	cp	r20, r1
     d14:	51 05       	cpc	r21, r1
     d16:	09 f0       	breq	.+2      	; 0xd1a <UART_Init+0x156>
     d18:	41 c0       	rjmp	.+130    	; 0xd9c <UART_Init+0x1d8>
	{
	  case Parity_Disabled: SET_BIT(UCSRC,URSEL);
     d1a:	a0 e4       	ldi	r26, 0x40	; 64
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	e0 e4       	ldi	r30, 0x40	; 64
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	80 68       	ori	r24, 0x80	; 128
     d26:	8c 93       	st	X, r24
		                    CLEAR_BIT(UCSRC,UPM0);
     d28:	a0 e4       	ldi	r26, 0x40	; 64
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e0 e4       	ldi	r30, 0x40	; 64
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	8f 7e       	andi	r24, 0xEF	; 239
     d34:	8c 93       	st	X, r24
	                        CLEAR_BIT(UCSRC,UPM1);
     d36:	a0 e4       	ldi	r26, 0x40	; 64
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e0 e4       	ldi	r30, 0x40	; 64
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	8f 7d       	andi	r24, 0xDF	; 223
     d42:	8c 93       	st	X, r24
     d44:	2b c0       	rjmp	.+86     	; 0xd9c <UART_Init+0x1d8>
	                        break;
	  case Parity_Odd:      SET_BIT(UCSRC,URSEL);
     d46:	a0 e4       	ldi	r26, 0x40	; 64
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e0 e4       	ldi	r30, 0x40	; 64
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	80 68       	ori	r24, 0x80	; 128
     d52:	8c 93       	st	X, r24
		                    SET_BIT(UCSRC,UPM0);
     d54:	a0 e4       	ldi	r26, 0x40	; 64
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e0 e4       	ldi	r30, 0x40	; 64
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	80 61       	ori	r24, 0x10	; 16
     d60:	8c 93       	st	X, r24
                            SET_BIT(UCSRC,UPM1);
     d62:	a0 e4       	ldi	r26, 0x40	; 64
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e0 e4       	ldi	r30, 0x40	; 64
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	80 62       	ori	r24, 0x20	; 32
     d6e:	8c 93       	st	X, r24
     d70:	15 c0       	rjmp	.+42     	; 0xd9c <UART_Init+0x1d8>
                            break;
	  case Parity_Even:     SET_BIT(UCSRC,URSEL);
     d72:	a0 e4       	ldi	r26, 0x40	; 64
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	e0 e4       	ldi	r30, 0x40	; 64
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	80 68       	ori	r24, 0x80	; 128
     d7e:	8c 93       	st	X, r24
		                    CLEAR_BIT(UCSRC,UPM0);
     d80:	a0 e4       	ldi	r26, 0x40	; 64
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	e0 e4       	ldi	r30, 0x40	; 64
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	8f 7e       	andi	r24, 0xEF	; 239
     d8c:	8c 93       	st	X, r24
                            SET_BIT(UCSRC,UPM1);
     d8e:	a0 e4       	ldi	r26, 0x40	; 64
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	e0 e4       	ldi	r30, 0x40	; 64
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	80 62       	ori	r24, 0x20	; 32
     d9a:	8c 93       	st	X, r24
                            break;
	}

	/*Config Number of Stop Bits of UART*/
    switch( Config_Ptr ->stop_bit)
     d9c:	e9 81       	ldd	r30, Y+1	; 0x01
     d9e:	fa 81       	ldd	r31, Y+2	; 0x02
     da0:	84 81       	ldd	r24, Z+4	; 0x04
     da2:	28 2f       	mov	r18, r24
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	3c 87       	std	Y+12, r19	; 0x0c
     da8:	2b 87       	std	Y+11, r18	; 0x0b
     daa:	4b 85       	ldd	r20, Y+11	; 0x0b
     dac:	5c 85       	ldd	r21, Y+12	; 0x0c
     dae:	41 15       	cp	r20, r1
     db0:	51 05       	cpc	r21, r1
     db2:	31 f0       	breq	.+12     	; 0xdc0 <UART_Init+0x1fc>
     db4:	8b 85       	ldd	r24, Y+11	; 0x0b
     db6:	9c 85       	ldd	r25, Y+12	; 0x0c
     db8:	81 30       	cpi	r24, 0x01	; 1
     dba:	91 05       	cpc	r25, r1
     dbc:	49 f0       	breq	.+18     	; 0xdd0 <UART_Init+0x20c>
     dbe:	0f c0       	rjmp	.+30     	; 0xdde <UART_Init+0x21a>
    {
    case StopBit_1:  CLEAR_BIT(UCSRC,USBS);
     dc0:	a0 e4       	ldi	r26, 0x40	; 64
     dc2:	b0 e0       	ldi	r27, 0x00	; 0
     dc4:	e0 e4       	ldi	r30, 0x40	; 64
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	87 7f       	andi	r24, 0xF7	; 247
     dcc:	8c 93       	st	X, r24
     dce:	07 c0       	rjmp	.+14     	; 0xdde <UART_Init+0x21a>
    	             break;
    case StopBit_2:  SET_BIT(UCSRC,USBS);
     dd0:	a0 e4       	ldi	r26, 0x40	; 64
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	e0 e4       	ldi	r30, 0x40	; 64
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	88 60       	ori	r24, 0x08	; 8
     ddc:	8c 93       	st	X, r24
    	             break;
    }

    /*Config Number of Data Frame Bits*/
    switch ( Config_Ptr ->dataframe_bits )
     dde:	e9 81       	ldd	r30, Y+1	; 0x01
     de0:	fa 81       	ldd	r31, Y+2	; 0x02
     de2:	85 81       	ldd	r24, Z+5	; 0x05
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	3a 87       	std	Y+10, r19	; 0x0a
     dea:	29 87       	std	Y+9, r18	; 0x09
     dec:	49 85       	ldd	r20, Y+9	; 0x09
     dee:	5a 85       	ldd	r21, Y+10	; 0x0a
     df0:	42 30       	cpi	r20, 0x02	; 2
     df2:	51 05       	cpc	r21, r1
     df4:	09 f4       	brne	.+2      	; 0xdf8 <UART_Init+0x234>
     df6:	49 c0       	rjmp	.+146    	; 0xe8a <UART_Init+0x2c6>
     df8:	89 85       	ldd	r24, Y+9	; 0x09
     dfa:	9a 85       	ldd	r25, Y+10	; 0x0a
     dfc:	83 30       	cpi	r24, 0x03	; 3
     dfe:	91 05       	cpc	r25, r1
     e00:	5c f4       	brge	.+22     	; 0xe18 <UART_Init+0x254>
     e02:	29 85       	ldd	r18, Y+9	; 0x09
     e04:	3a 85       	ldd	r19, Y+10	; 0x0a
     e06:	21 15       	cp	r18, r1
     e08:	31 05       	cpc	r19, r1
     e0a:	99 f0       	breq	.+38     	; 0xe32 <UART_Init+0x26e>
     e0c:	49 85       	ldd	r20, Y+9	; 0x09
     e0e:	5a 85       	ldd	r21, Y+10	; 0x0a
     e10:	41 30       	cpi	r20, 0x01	; 1
     e12:	51 05       	cpc	r21, r1
     e14:	21 f1       	breq	.+72     	; 0xe5e <UART_Init+0x29a>
     e16:	7a c0       	rjmp	.+244    	; 0xf0c <UART_Init+0x348>
     e18:	89 85       	ldd	r24, Y+9	; 0x09
     e1a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e1c:	83 30       	cpi	r24, 0x03	; 3
     e1e:	91 05       	cpc	r25, r1
     e20:	09 f4       	brne	.+2      	; 0xe24 <UART_Init+0x260>
     e22:	49 c0       	rjmp	.+146    	; 0xeb6 <UART_Init+0x2f2>
     e24:	29 85       	ldd	r18, Y+9	; 0x09
     e26:	3a 85       	ldd	r19, Y+10	; 0x0a
     e28:	27 30       	cpi	r18, 0x07	; 7
     e2a:	31 05       	cpc	r19, r1
     e2c:	09 f4       	brne	.+2      	; 0xe30 <UART_Init+0x26c>
     e2e:	59 c0       	rjmp	.+178    	; 0xee2 <UART_Init+0x31e>
     e30:	6d c0       	rjmp	.+218    	; 0xf0c <UART_Init+0x348>
    {
    case DataFrame_5Bits:  CLEAR_BIT(UCSRC,UCSZ0);
     e32:	a0 e4       	ldi	r26, 0x40	; 64
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	e0 e4       	ldi	r30, 0x40	; 64
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	8d 7f       	andi	r24, 0xFD	; 253
     e3e:	8c 93       	st	X, r24
                           CLEAR_BIT(UCSRC,UCSZ1);
     e40:	a0 e4       	ldi	r26, 0x40	; 64
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	e0 e4       	ldi	r30, 0x40	; 64
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	8b 7f       	andi	r24, 0xFB	; 251
     e4c:	8c 93       	st	X, r24
                           CLEAR_BIT(UCSRB,UCSZ2);
     e4e:	aa e2       	ldi	r26, 0x2A	; 42
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	ea e2       	ldi	r30, 0x2A	; 42
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	8b 7f       	andi	r24, 0xFB	; 251
     e5a:	8c 93       	st	X, r24
     e5c:	57 c0       	rjmp	.+174    	; 0xf0c <UART_Init+0x348>
    	                   break;
    case DataFrame_6Bits:  SET_BIT(UCSRC,UCSZ0);
     e5e:	a0 e4       	ldi	r26, 0x40	; 64
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e0 e4       	ldi	r30, 0x40	; 64
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	82 60       	ori	r24, 0x02	; 2
     e6a:	8c 93       	st	X, r24
                           CLEAR_BIT(UCSRC,UCSZ1);
     e6c:	a0 e4       	ldi	r26, 0x40	; 64
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	e0 e4       	ldi	r30, 0x40	; 64
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	8b 7f       	andi	r24, 0xFB	; 251
     e78:	8c 93       	st	X, r24
                           CLEAR_BIT(UCSRB,UCSZ2);
     e7a:	aa e2       	ldi	r26, 0x2A	; 42
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	ea e2       	ldi	r30, 0x2A	; 42
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	8b 7f       	andi	r24, 0xFB	; 251
     e86:	8c 93       	st	X, r24
     e88:	41 c0       	rjmp	.+130    	; 0xf0c <UART_Init+0x348>
    	                   break;
    case DataFrame_7Bits:  CLEAR_BIT(UCSRC,UCSZ0);
     e8a:	a0 e4       	ldi	r26, 0x40	; 64
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e0 e4       	ldi	r30, 0x40	; 64
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	8d 7f       	andi	r24, 0xFD	; 253
     e96:	8c 93       	st	X, r24
                           SET_BIT(UCSRC,UCSZ1);
     e98:	a0 e4       	ldi	r26, 0x40	; 64
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e0 e4       	ldi	r30, 0x40	; 64
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	84 60       	ori	r24, 0x04	; 4
     ea4:	8c 93       	st	X, r24
                           CLEAR_BIT(UCSRB,UCSZ2);
     ea6:	aa e2       	ldi	r26, 0x2A	; 42
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	ea e2       	ldi	r30, 0x2A	; 42
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	8b 7f       	andi	r24, 0xFB	; 251
     eb2:	8c 93       	st	X, r24
     eb4:	2b c0       	rjmp	.+86     	; 0xf0c <UART_Init+0x348>
    	                   break;
    case DataFrame_8Bits:  SET_BIT(UCSRC,UCSZ0);
     eb6:	a0 e4       	ldi	r26, 0x40	; 64
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e0 e4       	ldi	r30, 0x40	; 64
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	82 60       	ori	r24, 0x02	; 2
     ec2:	8c 93       	st	X, r24
                           SET_BIT(UCSRC,UCSZ1);
     ec4:	a0 e4       	ldi	r26, 0x40	; 64
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e0 e4       	ldi	r30, 0x40	; 64
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	84 60       	ori	r24, 0x04	; 4
     ed0:	8c 93       	st	X, r24
                           CLEAR_BIT(UCSRB,UCSZ2);
     ed2:	aa e2       	ldi	r26, 0x2A	; 42
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	ea e2       	ldi	r30, 0x2A	; 42
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	8b 7f       	andi	r24, 0xFB	; 251
     ede:	8c 93       	st	X, r24
     ee0:	15 c0       	rjmp	.+42     	; 0xf0c <UART_Init+0x348>
    	                   break;
    case DataFrame_9Bits:  SET_BIT(UCSRC,UCSZ0);
     ee2:	a0 e4       	ldi	r26, 0x40	; 64
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e0 e4       	ldi	r30, 0x40	; 64
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	82 60       	ori	r24, 0x02	; 2
     eee:	8c 93       	st	X, r24
                           SET_BIT(UCSRC,UCSZ1);
     ef0:	a0 e4       	ldi	r26, 0x40	; 64
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	e0 e4       	ldi	r30, 0x40	; 64
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	84 60       	ori	r24, 0x04	; 4
     efc:	8c 93       	st	X, r24
                           SET_BIT(UCSRB,UCSZ2);
     efe:	aa e2       	ldi	r26, 0x2A	; 42
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	ea e2       	ldi	r30, 0x2A	; 42
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	84 60       	ori	r24, 0x04	; 4
     f0a:	8c 93       	st	X, r24
    	                   break;
    }

    /*Config Baud Rate*/
    switch( Config_Ptr ->baud_rate)
     f0c:	e9 81       	ldd	r30, Y+1	; 0x01
     f0e:	fa 81       	ldd	r31, Y+2	; 0x02
     f10:	86 81       	ldd	r24, Z+6	; 0x06
     f12:	48 2f       	mov	r20, r24
     f14:	50 e0       	ldi	r21, 0x00	; 0
     f16:	58 87       	std	Y+8, r21	; 0x08
     f18:	4f 83       	std	Y+7, r20	; 0x07
     f1a:	8f 81       	ldd	r24, Y+7	; 0x07
     f1c:	98 85       	ldd	r25, Y+8	; 0x08
     f1e:	81 30       	cpi	r24, 0x01	; 1
     f20:	91 05       	cpc	r25, r1
     f22:	f9 f0       	breq	.+62     	; 0xf62 <UART_Init+0x39e>
     f24:	2f 81       	ldd	r18, Y+7	; 0x07
     f26:	38 85       	ldd	r19, Y+8	; 0x08
     f28:	22 30       	cpi	r18, 0x02	; 2
     f2a:	31 05       	cpc	r19, r1
     f2c:	34 f4       	brge	.+12     	; 0xf3a <UART_Init+0x376>
     f2e:	4f 81       	ldd	r20, Y+7	; 0x07
     f30:	58 85       	ldd	r21, Y+8	; 0x08
     f32:	41 15       	cp	r20, r1
     f34:	51 05       	cpc	r21, r1
     f36:	69 f0       	breq	.+26     	; 0xf52 <UART_Init+0x38e>
     f38:	7b c0       	rjmp	.+246    	; 0x1030 <UART_Init+0x46c>
     f3a:	8f 81       	ldd	r24, Y+7	; 0x07
     f3c:	98 85       	ldd	r25, Y+8	; 0x08
     f3e:	82 30       	cpi	r24, 0x02	; 2
     f40:	91 05       	cpc	r25, r1
     f42:	91 f1       	breq	.+100    	; 0xfa8 <UART_Init+0x3e4>
     f44:	2f 81       	ldd	r18, Y+7	; 0x07
     f46:	38 85       	ldd	r19, Y+8	; 0x08
     f48:	23 30       	cpi	r18, 0x03	; 3
     f4a:	31 05       	cpc	r19, r1
     f4c:	09 f4       	brne	.+2      	; 0xf50 <UART_Init+0x38c>
     f4e:	4f c0       	rjmp	.+158    	; 0xfee <UART_Init+0x42a>
     f50:	6f c0       	rjmp	.+222    	; 0x1030 <UART_Init+0x46c>
    {
    case BaudRate_9600:    UBRRH = 12>>8; // for 1MHz make it 12 , for 8MHz make it 103
     f52:	e0 e4       	ldi	r30, 0x40	; 64
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	10 82       	st	Z, r1
                           UBRRL = 12;
     f58:	e9 e2       	ldi	r30, 0x29	; 41
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	8c e0       	ldi	r24, 0x0C	; 12
     f5e:	80 83       	st	Z, r24
     f60:	67 c0       	rjmp	.+206    	; 0x1030 <UART_Init+0x46c>
    	                  break;
    	                  /*There is a bug in the equation shown blow */
    case BaudRate_14400:  g_UBRR_value= (uint16)(((F_CPU / (g_speed_mode_division_factor * 14400 )))-1);
     f62:	80 91 74 00 	lds	r24, 0x0074
     f66:	28 2f       	mov	r18, r24
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	80 e4       	ldi	r24, 0x40	; 64
     f6c:	98 e3       	ldi	r25, 0x38	; 56
     f6e:	ac 01       	movw	r20, r24
     f70:	24 9f       	mul	r18, r20
     f72:	c0 01       	movw	r24, r0
     f74:	25 9f       	mul	r18, r21
     f76:	90 0d       	add	r25, r0
     f78:	34 9f       	mul	r19, r20
     f7a:	90 0d       	add	r25, r0
     f7c:	11 24       	eor	r1, r1
     f7e:	9c 01       	movw	r18, r24
     f80:	44 27       	eor	r20, r20
     f82:	37 fd       	sbrc	r19, 7
     f84:	40 95       	com	r20
     f86:	54 2f       	mov	r21, r20
     f88:	80 e4       	ldi	r24, 0x40	; 64
     f8a:	92 e4       	ldi	r25, 0x42	; 66
     f8c:	af e0       	ldi	r26, 0x0F	; 15
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	bc 01       	movw	r22, r24
     f92:	cd 01       	movw	r24, r26
     f94:	0e 94 56 11 	call	0x22ac	; 0x22ac <__udivmodsi4>
     f98:	da 01       	movw	r26, r20
     f9a:	c9 01       	movw	r24, r18
     f9c:	01 97       	sbiw	r24, 0x01	; 1
     f9e:	90 93 73 00 	sts	0x0073, r25
     fa2:	80 93 72 00 	sts	0x0072, r24
     fa6:	44 c0       	rjmp	.+136    	; 0x1030 <UART_Init+0x46c>
    	                  break;
    case BaudRate_19200:  g_UBRR_value= (uint16)(((F_CPU / (g_speed_mode_division_factor * 19200 )))-1);
     fa8:	80 91 74 00 	lds	r24, 0x0074
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	9b e4       	ldi	r25, 0x4B	; 75
     fb4:	ac 01       	movw	r20, r24
     fb6:	24 9f       	mul	r18, r20
     fb8:	c0 01       	movw	r24, r0
     fba:	25 9f       	mul	r18, r21
     fbc:	90 0d       	add	r25, r0
     fbe:	34 9f       	mul	r19, r20
     fc0:	90 0d       	add	r25, r0
     fc2:	11 24       	eor	r1, r1
     fc4:	9c 01       	movw	r18, r24
     fc6:	44 27       	eor	r20, r20
     fc8:	37 fd       	sbrc	r19, 7
     fca:	40 95       	com	r20
     fcc:	54 2f       	mov	r21, r20
     fce:	80 e4       	ldi	r24, 0x40	; 64
     fd0:	92 e4       	ldi	r25, 0x42	; 66
     fd2:	af e0       	ldi	r26, 0x0F	; 15
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	bc 01       	movw	r22, r24
     fd8:	cd 01       	movw	r24, r26
     fda:	0e 94 56 11 	call	0x22ac	; 0x22ac <__udivmodsi4>
     fde:	da 01       	movw	r26, r20
     fe0:	c9 01       	movw	r24, r18
     fe2:	01 97       	sbiw	r24, 0x01	; 1
     fe4:	90 93 73 00 	sts	0x0073, r25
     fe8:	80 93 72 00 	sts	0x0072, r24
     fec:	21 c0       	rjmp	.+66     	; 0x1030 <UART_Init+0x46c>
    	                  break;
    case BaudRate_115200: g_UBRR_value= (uint16)(((F_CPU / (g_speed_mode_division_factor * 115200)))-1);
     fee:	80 91 74 00 	lds	r24, 0x0074
     ff2:	88 2f       	mov	r24, r24
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	a0 e0       	ldi	r26, 0x00	; 0
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	32 ec       	ldi	r19, 0xC2	; 194
     ffe:	41 e0       	ldi	r20, 0x01	; 1
    1000:	50 e0       	ldi	r21, 0x00	; 0
    1002:	bc 01       	movw	r22, r24
    1004:	cd 01       	movw	r24, r26
    1006:	0e 94 37 11 	call	0x226e	; 0x226e <__mulsi3>
    100a:	dc 01       	movw	r26, r24
    100c:	cb 01       	movw	r24, r22
    100e:	9c 01       	movw	r18, r24
    1010:	ad 01       	movw	r20, r26
    1012:	80 e4       	ldi	r24, 0x40	; 64
    1014:	92 e4       	ldi	r25, 0x42	; 66
    1016:	af e0       	ldi	r26, 0x0F	; 15
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	bc 01       	movw	r22, r24
    101c:	cd 01       	movw	r24, r26
    101e:	0e 94 56 11 	call	0x22ac	; 0x22ac <__udivmodsi4>
    1022:	da 01       	movw	r26, r20
    1024:	c9 01       	movw	r24, r18
    1026:	01 97       	sbiw	r24, 0x01	; 1
    1028:	90 93 73 00 	sts	0x0073, r25
    102c:	80 93 72 00 	sts	0x0072, r24
    	                  break;
    }

    /*Config RX Interrupt*/
    switch(Config_Ptr ->rx_interrupt)
    1030:	e9 81       	ldd	r30, Y+1	; 0x01
    1032:	fa 81       	ldd	r31, Y+2	; 0x02
    1034:	87 81       	ldd	r24, Z+7	; 0x07
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	3e 83       	std	Y+6, r19	; 0x06
    103c:	2d 83       	std	Y+5, r18	; 0x05
    103e:	4d 81       	ldd	r20, Y+5	; 0x05
    1040:	5e 81       	ldd	r21, Y+6	; 0x06
    1042:	41 15       	cp	r20, r1
    1044:	51 05       	cpc	r21, r1
    1046:	31 f0       	breq	.+12     	; 0x1054 <UART_Init+0x490>
    1048:	8d 81       	ldd	r24, Y+5	; 0x05
    104a:	9e 81       	ldd	r25, Y+6	; 0x06
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	91 05       	cpc	r25, r1
    1050:	49 f0       	breq	.+18     	; 0x1064 <UART_Init+0x4a0>
    1052:	0f c0       	rjmp	.+30     	; 0x1072 <UART_Init+0x4ae>
    {
    case RX_InterruptDisable: CLEAR_BIT(UCSRB,RXCIE);
    1054:	aa e2       	ldi	r26, 0x2A	; 42
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	ea e2       	ldi	r30, 0x2A	; 42
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	8f 77       	andi	r24, 0x7F	; 127
    1060:	8c 93       	st	X, r24
    1062:	07 c0       	rjmp	.+14     	; 0x1072 <UART_Init+0x4ae>
                              break;
    case RX_InterruptEnable:  SET_BIT(UCSRB,RXCIE);
    1064:	aa e2       	ldi	r26, 0x2A	; 42
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	ea e2       	ldi	r30, 0x2A	; 42
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	80 68       	ori	r24, 0x80	; 128
    1070:	8c 93       	st	X, r24
                              break;

    }

    /*Config TX Interrupt*/
    switch(Config_Ptr ->tx_interrupt)
    1072:	e9 81       	ldd	r30, Y+1	; 0x01
    1074:	fa 81       	ldd	r31, Y+2	; 0x02
    1076:	80 85       	ldd	r24, Z+8	; 0x08
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	3c 83       	std	Y+4, r19	; 0x04
    107e:	2b 83       	std	Y+3, r18	; 0x03
    1080:	4b 81       	ldd	r20, Y+3	; 0x03
    1082:	5c 81       	ldd	r21, Y+4	; 0x04
    1084:	41 15       	cp	r20, r1
    1086:	51 05       	cpc	r21, r1
    1088:	31 f0       	breq	.+12     	; 0x1096 <UART_Init+0x4d2>
    108a:	8b 81       	ldd	r24, Y+3	; 0x03
    108c:	9c 81       	ldd	r25, Y+4	; 0x04
    108e:	81 30       	cpi	r24, 0x01	; 1
    1090:	91 05       	cpc	r25, r1
    1092:	49 f0       	breq	.+18     	; 0x10a6 <UART_Init+0x4e2>
    1094:	0f c0       	rjmp	.+30     	; 0x10b4 <UART_Init+0x4f0>
    {
    case TX_InterruptDisable: CLEAR_BIT(UCSRB,TXCIE);
    1096:	aa e2       	ldi	r26, 0x2A	; 42
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	ea e2       	ldi	r30, 0x2A	; 42
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	8f 7b       	andi	r24, 0xBF	; 191
    10a2:	8c 93       	st	X, r24
    10a4:	07 c0       	rjmp	.+14     	; 0x10b4 <UART_Init+0x4f0>
                              break;
    case TX_InterruptEnable:  SET_BIT(UCSRB,TXCIE);
    10a6:	aa e2       	ldi	r26, 0x2A	; 42
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	ea e2       	ldi	r30, 0x2A	; 42
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	80 64       	ori	r24, 0x40	; 64
    10b2:	8c 93       	st	X, r24
    }




}
    10b4:	64 96       	adiw	r28, 0x14	; 20
    10b6:	0f b6       	in	r0, 0x3f	; 63
    10b8:	f8 94       	cli
    10ba:	de bf       	out	0x3e, r29	; 62
    10bc:	0f be       	out	0x3f, r0	; 63
    10be:	cd bf       	out	0x3d, r28	; 61
    10c0:	cf 91       	pop	r28
    10c2:	df 91       	pop	r29
    10c4:	08 95       	ret

000010c6 <UART_sendByte>:
* Parameters (out):   None
* Return value:       None
* Description:        Send a Byte to other devices.
********************************************************************************/
void UART_sendByte( const uint8 data )
{
    10c6:	df 93       	push	r29
    10c8:	cf 93       	push	r28
    10ca:	0f 92       	push	r0
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
    10d0:	89 83       	std	Y+1, r24	; 0x01
   /*Wait until Flag = 1 , etc: UDR is empty and ready to be loaded with data*/
   while (BIT_IS_CLEAR(UCSRA,UDRE));
    10d2:	eb e2       	ldi	r30, 0x2B	; 43
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	88 2f       	mov	r24, r24
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	80 72       	andi	r24, 0x20	; 32
    10de:	90 70       	andi	r25, 0x00	; 0
    10e0:	00 97       	sbiw	r24, 0x00	; 0
    10e2:	b9 f3       	breq	.-18     	; 0x10d2 <UART_sendByte+0xc>
   UDR = data;
    10e4:	ec e2       	ldi	r30, 0x2C	; 44
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	89 81       	ldd	r24, Y+1	; 0x01
    10ea:	80 83       	st	Z, r24
}
    10ec:	0f 90       	pop	r0
    10ee:	cf 91       	pop	r28
    10f0:	df 91       	pop	r29
    10f2:	08 95       	ret

000010f4 <UART_receiveByte>:
* Parameters (out):   None
* Return value:       uint8
* Description:        receive a Byte from other devices
********************************************************************************/
uint8 UART_receiveByte (void)
{
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
	 /*Wait until Flag = 1 , etc: UDR is Loaded with received Data then return UDR*/
	  while (BIT_IS_CLEAR(UCSRA,RXC));
    10fc:	eb e2       	ldi	r30, 0x2B	; 43
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	88 23       	and	r24, r24
    1104:	dc f7       	brge	.-10     	; 0x10fc <UART_receiveByte+0x8>
      return UDR;
    1106:	ec e2       	ldi	r30, 0x2C	; 44
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
}
    110c:	cf 91       	pop	r28
    110e:	df 91       	pop	r29
    1110:	08 95       	ret

00001112 <UART_sendString>:
* Parameters (out):   None
* Return value:       None
* Description:        Send a String to other devices.
********************************************************************************/
void UART_sendString( const uint8 * Str)
{
    1112:	df 93       	push	r29
    1114:	cf 93       	push	r28
    1116:	00 d0       	rcall	.+0      	; 0x1118 <UART_sendString+0x6>
    1118:	0f 92       	push	r0
    111a:	cd b7       	in	r28, 0x3d	; 61
    111c:	de b7       	in	r29, 0x3e	; 62
    111e:	9b 83       	std	Y+3, r25	; 0x03
    1120:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1122:	19 82       	std	Y+1, r1	; 0x01
    1124:	0e c0       	rjmp	.+28     	; 0x1142 <UART_sendString+0x30>

		/* Send the whole string */
		while(Str[i] != '\0')
		{
			UART_sendByte(Str[i]);
    1126:	89 81       	ldd	r24, Y+1	; 0x01
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	8a 81       	ldd	r24, Y+2	; 0x02
    112e:	9b 81       	ldd	r25, Y+3	; 0x03
    1130:	fc 01       	movw	r30, r24
    1132:	e2 0f       	add	r30, r18
    1134:	f3 1f       	adc	r31, r19
    1136:	80 81       	ld	r24, Z
    1138:	0e 94 63 08 	call	0x10c6	; 0x10c6 <UART_sendByte>
			i++;
    113c:	89 81       	ldd	r24, Y+1	; 0x01
    113e:	8f 5f       	subi	r24, 0xFF	; 255
    1140:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString( const uint8 * Str)
{
	uint8 i = 0;

		/* Send the whole string */
		while(Str[i] != '\0')
    1142:	89 81       	ldd	r24, Y+1	; 0x01
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	9b 81       	ldd	r25, Y+3	; 0x03
    114c:	fc 01       	movw	r30, r24
    114e:	e2 0f       	add	r30, r18
    1150:	f3 1f       	adc	r31, r19
    1152:	80 81       	ld	r24, Z
    1154:	88 23       	and	r24, r24
    1156:	39 f7       	brne	.-50     	; 0x1126 <UART_sendString+0x14>
		{
			UART_sendByte(Str[i]);
			i++;
		}
}
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	0f 90       	pop	r0
    115e:	cf 91       	pop	r28
    1160:	df 91       	pop	r29
    1162:	08 95       	ret

00001164 <UART_receiveString>:
* Parameters (out):   None
* Return value:       uint8
* Description:        receive a stringfrom other devices
********************************************************************************/
void UART_receiveString (uint8 *Str)
{
    1164:	0f 93       	push	r16
    1166:	1f 93       	push	r17
    1168:	df 93       	push	r29
    116a:	cf 93       	push	r28
    116c:	00 d0       	rcall	.+0      	; 0x116e <UART_receiveString+0xa>
    116e:	0f 92       	push	r0
    1170:	cd b7       	in	r28, 0x3d	; 61
    1172:	de b7       	in	r29, 0x3e	; 62
    1174:	9b 83       	std	Y+3, r25	; 0x03
    1176:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1178:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_receiveByte();
    117a:	89 81       	ldd	r24, Y+1	; 0x01
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	9b 81       	ldd	r25, Y+3	; 0x03
    1184:	8c 01       	movw	r16, r24
    1186:	02 0f       	add	r16, r18
    1188:	13 1f       	adc	r17, r19
    118a:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <UART_receiveByte>
    118e:	f8 01       	movw	r30, r16
    1190:	80 83       	st	Z, r24
    1192:	0f c0       	rjmp	.+30     	; 0x11b2 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	8f 5f       	subi	r24, 0xFF	; 255
    1198:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	9b 81       	ldd	r25, Y+3	; 0x03
    11a4:	8c 01       	movw	r16, r24
    11a6:	02 0f       	add	r16, r18
    11a8:	13 1f       	adc	r17, r19
    11aa:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <UART_receiveByte>
    11ae:	f8 01       	movw	r30, r16
    11b0:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_receiveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
    11b4:	28 2f       	mov	r18, r24
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	9b 81       	ldd	r25, Y+3	; 0x03
    11bc:	fc 01       	movw	r30, r24
    11be:	e2 0f       	add	r30, r18
    11c0:	f3 1f       	adc	r31, r19
    11c2:	80 81       	ld	r24, Z
    11c4:	83 32       	cpi	r24, 0x23	; 35
    11c6:	31 f7       	brne	.-52     	; 0x1194 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	9b 81       	ldd	r25, Y+3	; 0x03
    11d2:	fc 01       	movw	r30, r24
    11d4:	e2 0f       	add	r30, r18
    11d6:	f3 1f       	adc	r31, r19
    11d8:	10 82       	st	Z, r1
}
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	1f 91       	pop	r17
    11e6:	0f 91       	pop	r16
    11e8:	08 95       	ret

000011ea <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    11ea:	df 93       	push	r29
    11ec:	cf 93       	push	r28
    11ee:	00 d0       	rcall	.+0      	; 0x11f0 <GPIO_setupPinDirection+0x6>
    11f0:	00 d0       	rcall	.+0      	; 0x11f2 <GPIO_setupPinDirection+0x8>
    11f2:	0f 92       	push	r0
    11f4:	cd b7       	in	r28, 0x3d	; 61
    11f6:	de b7       	in	r29, 0x3e	; 62
    11f8:	89 83       	std	Y+1, r24	; 0x01
    11fa:	6a 83       	std	Y+2, r22	; 0x02
    11fc:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	88 30       	cpi	r24, 0x08	; 8
    1202:	08 f0       	brcs	.+2      	; 0x1206 <GPIO_setupPinDirection+0x1c>
    1204:	d5 c0       	rjmp	.+426    	; 0x13b0 <GPIO_setupPinDirection+0x1c6>
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	84 30       	cpi	r24, 0x04	; 4
    120a:	08 f0       	brcs	.+2      	; 0x120e <GPIO_setupPinDirection+0x24>
    120c:	d1 c0       	rjmp	.+418    	; 0x13b0 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	3d 83       	std	Y+5, r19	; 0x05
    1216:	2c 83       	std	Y+4, r18	; 0x04
    1218:	8c 81       	ldd	r24, Y+4	; 0x04
    121a:	9d 81       	ldd	r25, Y+5	; 0x05
    121c:	81 30       	cpi	r24, 0x01	; 1
    121e:	91 05       	cpc	r25, r1
    1220:	09 f4       	brne	.+2      	; 0x1224 <GPIO_setupPinDirection+0x3a>
    1222:	43 c0       	rjmp	.+134    	; 0x12aa <GPIO_setupPinDirection+0xc0>
    1224:	2c 81       	ldd	r18, Y+4	; 0x04
    1226:	3d 81       	ldd	r19, Y+5	; 0x05
    1228:	22 30       	cpi	r18, 0x02	; 2
    122a:	31 05       	cpc	r19, r1
    122c:	2c f4       	brge	.+10     	; 0x1238 <GPIO_setupPinDirection+0x4e>
    122e:	8c 81       	ldd	r24, Y+4	; 0x04
    1230:	9d 81       	ldd	r25, Y+5	; 0x05
    1232:	00 97       	sbiw	r24, 0x00	; 0
    1234:	71 f0       	breq	.+28     	; 0x1252 <GPIO_setupPinDirection+0x68>
    1236:	bc c0       	rjmp	.+376    	; 0x13b0 <GPIO_setupPinDirection+0x1c6>
    1238:	2c 81       	ldd	r18, Y+4	; 0x04
    123a:	3d 81       	ldd	r19, Y+5	; 0x05
    123c:	22 30       	cpi	r18, 0x02	; 2
    123e:	31 05       	cpc	r19, r1
    1240:	09 f4       	brne	.+2      	; 0x1244 <GPIO_setupPinDirection+0x5a>
    1242:	5f c0       	rjmp	.+190    	; 0x1302 <GPIO_setupPinDirection+0x118>
    1244:	8c 81       	ldd	r24, Y+4	; 0x04
    1246:	9d 81       	ldd	r25, Y+5	; 0x05
    1248:	83 30       	cpi	r24, 0x03	; 3
    124a:	91 05       	cpc	r25, r1
    124c:	09 f4       	brne	.+2      	; 0x1250 <GPIO_setupPinDirection+0x66>
    124e:	85 c0       	rjmp	.+266    	; 0x135a <GPIO_setupPinDirection+0x170>
    1250:	af c0       	rjmp	.+350    	; 0x13b0 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	81 30       	cpi	r24, 0x01	; 1
    1256:	a1 f4       	brne	.+40     	; 0x1280 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1258:	aa e3       	ldi	r26, 0x3A	; 58
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	ea e3       	ldi	r30, 0x3A	; 58
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	48 2f       	mov	r20, r24
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	02 2e       	mov	r0, r18
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <GPIO_setupPinDirection+0x8c>
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	0a 94       	dec	r0
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <GPIO_setupPinDirection+0x88>
    127a:	84 2b       	or	r24, r20
    127c:	8c 93       	st	X, r24
    127e:	98 c0       	rjmp	.+304    	; 0x13b0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1280:	aa e3       	ldi	r26, 0x3A	; 58
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	ea e3       	ldi	r30, 0x3A	; 58
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	48 2f       	mov	r20, r24
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	02 2e       	mov	r0, r18
    1298:	02 c0       	rjmp	.+4      	; 0x129e <GPIO_setupPinDirection+0xb4>
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	0a 94       	dec	r0
    12a0:	e2 f7       	brpl	.-8      	; 0x129a <GPIO_setupPinDirection+0xb0>
    12a2:	80 95       	com	r24
    12a4:	84 23       	and	r24, r20
    12a6:	8c 93       	st	X, r24
    12a8:	83 c0       	rjmp	.+262    	; 0x13b0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	81 30       	cpi	r24, 0x01	; 1
    12ae:	a1 f4       	brne	.+40     	; 0x12d8 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    12b0:	a7 e3       	ldi	r26, 0x37	; 55
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	e7 e3       	ldi	r30, 0x37	; 55
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	48 2f       	mov	r20, r24
    12bc:	8a 81       	ldd	r24, Y+2	; 0x02
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	02 2e       	mov	r0, r18
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <GPIO_setupPinDirection+0xe4>
    12ca:	88 0f       	add	r24, r24
    12cc:	99 1f       	adc	r25, r25
    12ce:	0a 94       	dec	r0
    12d0:	e2 f7       	brpl	.-8      	; 0x12ca <GPIO_setupPinDirection+0xe0>
    12d2:	84 2b       	or	r24, r20
    12d4:	8c 93       	st	X, r24
    12d6:	6c c0       	rjmp	.+216    	; 0x13b0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    12d8:	a7 e3       	ldi	r26, 0x37	; 55
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	e7 e3       	ldi	r30, 0x37	; 55
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	48 2f       	mov	r20, r24
    12e4:	8a 81       	ldd	r24, Y+2	; 0x02
    12e6:	28 2f       	mov	r18, r24
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	02 2e       	mov	r0, r18
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <GPIO_setupPinDirection+0x10c>
    12f2:	88 0f       	add	r24, r24
    12f4:	99 1f       	adc	r25, r25
    12f6:	0a 94       	dec	r0
    12f8:	e2 f7       	brpl	.-8      	; 0x12f2 <GPIO_setupPinDirection+0x108>
    12fa:	80 95       	com	r24
    12fc:	84 23       	and	r24, r20
    12fe:	8c 93       	st	X, r24
    1300:	57 c0       	rjmp	.+174    	; 0x13b0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1302:	8b 81       	ldd	r24, Y+3	; 0x03
    1304:	81 30       	cpi	r24, 0x01	; 1
    1306:	a1 f4       	brne	.+40     	; 0x1330 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1308:	a4 e3       	ldi	r26, 0x34	; 52
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	e4 e3       	ldi	r30, 0x34	; 52
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	48 2f       	mov	r20, r24
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	02 2e       	mov	r0, r18
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <GPIO_setupPinDirection+0x13c>
    1322:	88 0f       	add	r24, r24
    1324:	99 1f       	adc	r25, r25
    1326:	0a 94       	dec	r0
    1328:	e2 f7       	brpl	.-8      	; 0x1322 <GPIO_setupPinDirection+0x138>
    132a:	84 2b       	or	r24, r20
    132c:	8c 93       	st	X, r24
    132e:	40 c0       	rjmp	.+128    	; 0x13b0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1330:	a4 e3       	ldi	r26, 0x34	; 52
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e4 e3       	ldi	r30, 0x34	; 52
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	48 2f       	mov	r20, r24
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	02 2e       	mov	r0, r18
    1348:	02 c0       	rjmp	.+4      	; 0x134e <GPIO_setupPinDirection+0x164>
    134a:	88 0f       	add	r24, r24
    134c:	99 1f       	adc	r25, r25
    134e:	0a 94       	dec	r0
    1350:	e2 f7       	brpl	.-8      	; 0x134a <GPIO_setupPinDirection+0x160>
    1352:	80 95       	com	r24
    1354:	84 23       	and	r24, r20
    1356:	8c 93       	st	X, r24
    1358:	2b c0       	rjmp	.+86     	; 0x13b0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	81 30       	cpi	r24, 0x01	; 1
    135e:	a1 f4       	brne	.+40     	; 0x1388 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1360:	a1 e3       	ldi	r26, 0x31	; 49
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	e1 e3       	ldi	r30, 0x31	; 49
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	48 2f       	mov	r20, r24
    136c:	8a 81       	ldd	r24, Y+2	; 0x02
    136e:	28 2f       	mov	r18, r24
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	02 2e       	mov	r0, r18
    1378:	02 c0       	rjmp	.+4      	; 0x137e <GPIO_setupPinDirection+0x194>
    137a:	88 0f       	add	r24, r24
    137c:	99 1f       	adc	r25, r25
    137e:	0a 94       	dec	r0
    1380:	e2 f7       	brpl	.-8      	; 0x137a <GPIO_setupPinDirection+0x190>
    1382:	84 2b       	or	r24, r20
    1384:	8c 93       	st	X, r24
    1386:	14 c0       	rjmp	.+40     	; 0x13b0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1388:	a1 e3       	ldi	r26, 0x31	; 49
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	e1 e3       	ldi	r30, 0x31	; 49
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	48 2f       	mov	r20, r24
    1394:	8a 81       	ldd	r24, Y+2	; 0x02
    1396:	28 2f       	mov	r18, r24
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	02 2e       	mov	r0, r18
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <GPIO_setupPinDirection+0x1bc>
    13a2:	88 0f       	add	r24, r24
    13a4:	99 1f       	adc	r25, r25
    13a6:	0a 94       	dec	r0
    13a8:	e2 f7       	brpl	.-8      	; 0x13a2 <GPIO_setupPinDirection+0x1b8>
    13aa:	80 95       	com	r24
    13ac:	84 23       	and	r24, r20
    13ae:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	cf 91       	pop	r28
    13bc:	df 91       	pop	r29
    13be:	08 95       	ret

000013c0 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    13c0:	df 93       	push	r29
    13c2:	cf 93       	push	r28
    13c4:	00 d0       	rcall	.+0      	; 0x13c6 <GPIO_writePin+0x6>
    13c6:	00 d0       	rcall	.+0      	; 0x13c8 <GPIO_writePin+0x8>
    13c8:	0f 92       	push	r0
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
    13ce:	89 83       	std	Y+1, r24	; 0x01
    13d0:	6a 83       	std	Y+2, r22	; 0x02
    13d2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	88 30       	cpi	r24, 0x08	; 8
    13d8:	08 f0       	brcs	.+2      	; 0x13dc <GPIO_writePin+0x1c>
    13da:	d5 c0       	rjmp	.+426    	; 0x1586 <GPIO_writePin+0x1c6>
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
    13de:	84 30       	cpi	r24, 0x04	; 4
    13e0:	08 f0       	brcs	.+2      	; 0x13e4 <GPIO_writePin+0x24>
    13e2:	d1 c0       	rjmp	.+418    	; 0x1586 <GPIO_writePin+0x1c6>
	{
		/* Do Nothing */
	}
	else
	{
      switch(port_num)
    13e4:	89 81       	ldd	r24, Y+1	; 0x01
    13e6:	28 2f       	mov	r18, r24
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	3d 83       	std	Y+5, r19	; 0x05
    13ec:	2c 83       	std	Y+4, r18	; 0x04
    13ee:	8c 81       	ldd	r24, Y+4	; 0x04
    13f0:	9d 81       	ldd	r25, Y+5	; 0x05
    13f2:	81 30       	cpi	r24, 0x01	; 1
    13f4:	91 05       	cpc	r25, r1
    13f6:	09 f4       	brne	.+2      	; 0x13fa <GPIO_writePin+0x3a>
    13f8:	43 c0       	rjmp	.+134    	; 0x1480 <GPIO_writePin+0xc0>
    13fa:	2c 81       	ldd	r18, Y+4	; 0x04
    13fc:	3d 81       	ldd	r19, Y+5	; 0x05
    13fe:	22 30       	cpi	r18, 0x02	; 2
    1400:	31 05       	cpc	r19, r1
    1402:	2c f4       	brge	.+10     	; 0x140e <GPIO_writePin+0x4e>
    1404:	8c 81       	ldd	r24, Y+4	; 0x04
    1406:	9d 81       	ldd	r25, Y+5	; 0x05
    1408:	00 97       	sbiw	r24, 0x00	; 0
    140a:	71 f0       	breq	.+28     	; 0x1428 <GPIO_writePin+0x68>
    140c:	bc c0       	rjmp	.+376    	; 0x1586 <GPIO_writePin+0x1c6>
    140e:	2c 81       	ldd	r18, Y+4	; 0x04
    1410:	3d 81       	ldd	r19, Y+5	; 0x05
    1412:	22 30       	cpi	r18, 0x02	; 2
    1414:	31 05       	cpc	r19, r1
    1416:	09 f4       	brne	.+2      	; 0x141a <GPIO_writePin+0x5a>
    1418:	5f c0       	rjmp	.+190    	; 0x14d8 <GPIO_writePin+0x118>
    141a:	8c 81       	ldd	r24, Y+4	; 0x04
    141c:	9d 81       	ldd	r25, Y+5	; 0x05
    141e:	83 30       	cpi	r24, 0x03	; 3
    1420:	91 05       	cpc	r25, r1
    1422:	09 f4       	brne	.+2      	; 0x1426 <GPIO_writePin+0x66>
    1424:	85 c0       	rjmp	.+266    	; 0x1530 <GPIO_writePin+0x170>
    1426:	af c0       	rjmp	.+350    	; 0x1586 <GPIO_writePin+0x1c6>
      {
         case PORTA_ID:
        	 if ( value == LOGIC_HIGH)
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
    142a:	81 30       	cpi	r24, 0x01	; 1
    142c:	a1 f4       	brne	.+40     	; 0x1456 <GPIO_writePin+0x96>
        	 {
        		 SET_BIT(PORTA, pin_num);
    142e:	ab e3       	ldi	r26, 0x3B	; 59
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	eb e3       	ldi	r30, 0x3B	; 59
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	48 2f       	mov	r20, r24
    143a:	8a 81       	ldd	r24, Y+2	; 0x02
    143c:	28 2f       	mov	r18, r24
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	02 2e       	mov	r0, r18
    1446:	02 c0       	rjmp	.+4      	; 0x144c <GPIO_writePin+0x8c>
    1448:	88 0f       	add	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	0a 94       	dec	r0
    144e:	e2 f7       	brpl	.-8      	; 0x1448 <GPIO_writePin+0x88>
    1450:	84 2b       	or	r24, r20
    1452:	8c 93       	st	X, r24
    1454:	98 c0       	rjmp	.+304    	; 0x1586 <GPIO_writePin+0x1c6>
        	 }
        	 else
        	 {
        		 CLEAR_BIT(PORTA,pin_num);
    1456:	ab e3       	ldi	r26, 0x3B	; 59
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	eb e3       	ldi	r30, 0x3B	; 59
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	48 2f       	mov	r20, r24
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	28 2f       	mov	r18, r24
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	02 2e       	mov	r0, r18
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <GPIO_writePin+0xb4>
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	0a 94       	dec	r0
    1476:	e2 f7       	brpl	.-8      	; 0x1470 <GPIO_writePin+0xb0>
    1478:	80 95       	com	r24
    147a:	84 23       	and	r24, r20
    147c:	8c 93       	st	X, r24
    147e:	83 c0       	rjmp	.+262    	; 0x1586 <GPIO_writePin+0x1c6>
        	 }
        	 break;
         case PORTB_ID:
        	 if ( value == LOGIC_HIGH)
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	81 30       	cpi	r24, 0x01	; 1
    1484:	a1 f4       	brne	.+40     	; 0x14ae <GPIO_writePin+0xee>
        	 {
        		 SET_BIT(PORTB, pin_num);
    1486:	a8 e3       	ldi	r26, 0x38	; 56
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	e8 e3       	ldi	r30, 0x38	; 56
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	48 2f       	mov	r20, r24
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	28 2f       	mov	r18, r24
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	02 2e       	mov	r0, r18
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <GPIO_writePin+0xe4>
    14a0:	88 0f       	add	r24, r24
    14a2:	99 1f       	adc	r25, r25
    14a4:	0a 94       	dec	r0
    14a6:	e2 f7       	brpl	.-8      	; 0x14a0 <GPIO_writePin+0xe0>
    14a8:	84 2b       	or	r24, r20
    14aa:	8c 93       	st	X, r24
    14ac:	6c c0       	rjmp	.+216    	; 0x1586 <GPIO_writePin+0x1c6>
        	 }
        	 else
        	 {
        		 CLEAR_BIT(PORTB,pin_num);
    14ae:	a8 e3       	ldi	r26, 0x38	; 56
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	e8 e3       	ldi	r30, 0x38	; 56
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	48 2f       	mov	r20, r24
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	02 2e       	mov	r0, r18
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <GPIO_writePin+0x10c>
    14c8:	88 0f       	add	r24, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	0a 94       	dec	r0
    14ce:	e2 f7       	brpl	.-8      	; 0x14c8 <GPIO_writePin+0x108>
    14d0:	80 95       	com	r24
    14d2:	84 23       	and	r24, r20
    14d4:	8c 93       	st	X, r24
    14d6:	57 c0       	rjmp	.+174    	; 0x1586 <GPIO_writePin+0x1c6>
        	 }
        	 break;
         case PORTC_ID:
        	 if ( value == LOGIC_HIGH)
    14d8:	8b 81       	ldd	r24, Y+3	; 0x03
    14da:	81 30       	cpi	r24, 0x01	; 1
    14dc:	a1 f4       	brne	.+40     	; 0x1506 <GPIO_writePin+0x146>
        	 {
        		 SET_BIT(PORTC, pin_num);
    14de:	a5 e3       	ldi	r26, 0x35	; 53
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	e5 e3       	ldi	r30, 0x35	; 53
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	48 2f       	mov	r20, r24
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	02 2e       	mov	r0, r18
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <GPIO_writePin+0x13c>
    14f8:	88 0f       	add	r24, r24
    14fa:	99 1f       	adc	r25, r25
    14fc:	0a 94       	dec	r0
    14fe:	e2 f7       	brpl	.-8      	; 0x14f8 <GPIO_writePin+0x138>
    1500:	84 2b       	or	r24, r20
    1502:	8c 93       	st	X, r24
    1504:	40 c0       	rjmp	.+128    	; 0x1586 <GPIO_writePin+0x1c6>
        	 }
        	 else
        	 {
        		 CLEAR_BIT(PORTC,pin_num);
    1506:	a5 e3       	ldi	r26, 0x35	; 53
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	e5 e3       	ldi	r30, 0x35	; 53
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	48 2f       	mov	r20, r24
    1512:	8a 81       	ldd	r24, Y+2	; 0x02
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	02 2e       	mov	r0, r18
    151e:	02 c0       	rjmp	.+4      	; 0x1524 <GPIO_writePin+0x164>
    1520:	88 0f       	add	r24, r24
    1522:	99 1f       	adc	r25, r25
    1524:	0a 94       	dec	r0
    1526:	e2 f7       	brpl	.-8      	; 0x1520 <GPIO_writePin+0x160>
    1528:	80 95       	com	r24
    152a:	84 23       	and	r24, r20
    152c:	8c 93       	st	X, r24
    152e:	2b c0       	rjmp	.+86     	; 0x1586 <GPIO_writePin+0x1c6>
        	 }
        	 break;
         case PORTD_ID:
        	 if ( value == LOGIC_HIGH)
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	81 30       	cpi	r24, 0x01	; 1
    1534:	a1 f4       	brne	.+40     	; 0x155e <GPIO_writePin+0x19e>
        	 {
        		 SET_BIT(PORTD, pin_num);
    1536:	a2 e3       	ldi	r26, 0x32	; 50
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	e2 e3       	ldi	r30, 0x32	; 50
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	48 2f       	mov	r20, r24
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	02 2e       	mov	r0, r18
    154e:	02 c0       	rjmp	.+4      	; 0x1554 <GPIO_writePin+0x194>
    1550:	88 0f       	add	r24, r24
    1552:	99 1f       	adc	r25, r25
    1554:	0a 94       	dec	r0
    1556:	e2 f7       	brpl	.-8      	; 0x1550 <GPIO_writePin+0x190>
    1558:	84 2b       	or	r24, r20
    155a:	8c 93       	st	X, r24
    155c:	14 c0       	rjmp	.+40     	; 0x1586 <GPIO_writePin+0x1c6>
        	 }
        	 else
        	 {
        		 CLEAR_BIT(PORTD,pin_num);
    155e:	a2 e3       	ldi	r26, 0x32	; 50
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	e2 e3       	ldi	r30, 0x32	; 50
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	48 2f       	mov	r20, r24
    156a:	8a 81       	ldd	r24, Y+2	; 0x02
    156c:	28 2f       	mov	r18, r24
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	02 2e       	mov	r0, r18
    1576:	02 c0       	rjmp	.+4      	; 0x157c <GPIO_writePin+0x1bc>
    1578:	88 0f       	add	r24, r24
    157a:	99 1f       	adc	r25, r25
    157c:	0a 94       	dec	r0
    157e:	e2 f7       	brpl	.-8      	; 0x1578 <GPIO_writePin+0x1b8>
    1580:	80 95       	com	r24
    1582:	84 23       	and	r24, r20
    1584:	8c 93       	st	X, r24
        	 }
        	 break;
      }
	}
}
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	0f 90       	pop	r0
    158c:	0f 90       	pop	r0
    158e:	0f 90       	pop	r0
    1590:	cf 91       	pop	r28
    1592:	df 91       	pop	r29
    1594:	08 95       	ret

00001596 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1596:	df 93       	push	r29
    1598:	cf 93       	push	r28
    159a:	00 d0       	rcall	.+0      	; 0x159c <GPIO_readPin+0x6>
    159c:	00 d0       	rcall	.+0      	; 0x159e <GPIO_readPin+0x8>
    159e:	0f 92       	push	r0
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
    15a4:	8a 83       	std	Y+2, r24	; 0x02
    15a6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 temp=0;
    15a8:	19 82       	std	Y+1, r1	; 0x01
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	88 30       	cpi	r24, 0x08	; 8
    15ae:	18 f4       	brcc	.+6      	; 0x15b6 <GPIO_readPin+0x20>
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	84 30       	cpi	r24, 0x04	; 4
    15b4:	10 f0       	brcs	.+4      	; 0x15ba <GPIO_readPin+0x24>
	{
		temp = 0 ;
    15b6:	19 82       	std	Y+1, r1	; 0x01
    15b8:	67 c0       	rjmp	.+206    	; 0x1688 <GPIO_readPin+0xf2>
	}
	else
	{
		switch(port_num)
    15ba:	8a 81       	ldd	r24, Y+2	; 0x02
    15bc:	28 2f       	mov	r18, r24
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	3d 83       	std	Y+5, r19	; 0x05
    15c2:	2c 83       	std	Y+4, r18	; 0x04
    15c4:	4c 81       	ldd	r20, Y+4	; 0x04
    15c6:	5d 81       	ldd	r21, Y+5	; 0x05
    15c8:	41 30       	cpi	r20, 0x01	; 1
    15ca:	51 05       	cpc	r21, r1
    15cc:	41 f1       	breq	.+80     	; 0x161e <GPIO_readPin+0x88>
    15ce:	8c 81       	ldd	r24, Y+4	; 0x04
    15d0:	9d 81       	ldd	r25, Y+5	; 0x05
    15d2:	82 30       	cpi	r24, 0x02	; 2
    15d4:	91 05       	cpc	r25, r1
    15d6:	34 f4       	brge	.+12     	; 0x15e4 <GPIO_readPin+0x4e>
    15d8:	2c 81       	ldd	r18, Y+4	; 0x04
    15da:	3d 81       	ldd	r19, Y+5	; 0x05
    15dc:	21 15       	cp	r18, r1
    15de:	31 05       	cpc	r19, r1
    15e0:	61 f0       	breq	.+24     	; 0x15fa <GPIO_readPin+0x64>
    15e2:	52 c0       	rjmp	.+164    	; 0x1688 <GPIO_readPin+0xf2>
    15e4:	4c 81       	ldd	r20, Y+4	; 0x04
    15e6:	5d 81       	ldd	r21, Y+5	; 0x05
    15e8:	42 30       	cpi	r20, 0x02	; 2
    15ea:	51 05       	cpc	r21, r1
    15ec:	51 f1       	breq	.+84     	; 0x1642 <GPIO_readPin+0xac>
    15ee:	8c 81       	ldd	r24, Y+4	; 0x04
    15f0:	9d 81       	ldd	r25, Y+5	; 0x05
    15f2:	83 30       	cpi	r24, 0x03	; 3
    15f4:	91 05       	cpc	r25, r1
    15f6:	b9 f1       	breq	.+110    	; 0x1666 <GPIO_readPin+0xd0>
    15f8:	47 c0       	rjmp	.+142    	; 0x1688 <GPIO_readPin+0xf2>
		{
		case PORTA_ID:
            temp = CHECK_BIT(PINA,pin_num);
    15fa:	e9 e3       	ldi	r30, 0x39	; 57
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	88 2f       	mov	r24, r24
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	a9 01       	movw	r20, r18
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <GPIO_readPin+0x7c>
    160e:	55 95       	asr	r21
    1610:	47 95       	ror	r20
    1612:	8a 95       	dec	r24
    1614:	e2 f7       	brpl	.-8      	; 0x160e <GPIO_readPin+0x78>
    1616:	ca 01       	movw	r24, r20
    1618:	81 70       	andi	r24, 0x01	; 1
    161a:	89 83       	std	Y+1, r24	; 0x01
    161c:	35 c0       	rjmp	.+106    	; 0x1688 <GPIO_readPin+0xf2>
			break;
		case PORTB_ID:
			temp = CHECK_BIT(PINB,pin_num);
    161e:	e6 e3       	ldi	r30, 0x36	; 54
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	28 2f       	mov	r18, r24
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	8b 81       	ldd	r24, Y+3	; 0x03
    162a:	88 2f       	mov	r24, r24
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	a9 01       	movw	r20, r18
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <GPIO_readPin+0xa0>
    1632:	55 95       	asr	r21
    1634:	47 95       	ror	r20
    1636:	8a 95       	dec	r24
    1638:	e2 f7       	brpl	.-8      	; 0x1632 <GPIO_readPin+0x9c>
    163a:	ca 01       	movw	r24, r20
    163c:	81 70       	andi	r24, 0x01	; 1
    163e:	89 83       	std	Y+1, r24	; 0x01
    1640:	23 c0       	rjmp	.+70     	; 0x1688 <GPIO_readPin+0xf2>
			break;
		case PORTC_ID:
			temp = CHECK_BIT(PINC,pin_num);
    1642:	e3 e3       	ldi	r30, 0x33	; 51
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	28 2f       	mov	r18, r24
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	8b 81       	ldd	r24, Y+3	; 0x03
    164e:	88 2f       	mov	r24, r24
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	a9 01       	movw	r20, r18
    1654:	02 c0       	rjmp	.+4      	; 0x165a <GPIO_readPin+0xc4>
    1656:	55 95       	asr	r21
    1658:	47 95       	ror	r20
    165a:	8a 95       	dec	r24
    165c:	e2 f7       	brpl	.-8      	; 0x1656 <GPIO_readPin+0xc0>
    165e:	ca 01       	movw	r24, r20
    1660:	81 70       	andi	r24, 0x01	; 1
    1662:	89 83       	std	Y+1, r24	; 0x01
    1664:	11 c0       	rjmp	.+34     	; 0x1688 <GPIO_readPin+0xf2>
			break;
		case PORTD_ID:
			temp = CHECK_BIT(PIND,pin_num);
    1666:	e0 e3       	ldi	r30, 0x30	; 48
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	28 2f       	mov	r18, r24
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	88 2f       	mov	r24, r24
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	a9 01       	movw	r20, r18
    1678:	02 c0       	rjmp	.+4      	; 0x167e <GPIO_readPin+0xe8>
    167a:	55 95       	asr	r21
    167c:	47 95       	ror	r20
    167e:	8a 95       	dec	r24
    1680:	e2 f7       	brpl	.-8      	; 0x167a <GPIO_readPin+0xe4>
    1682:	ca 01       	movw	r24, r20
    1684:	81 70       	andi	r24, 0x01	; 1
    1686:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return temp;
    1688:	89 81       	ldd	r24, Y+1	; 0x01
}
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	0f 90       	pop	r0
    1694:	cf 91       	pop	r28
    1696:	df 91       	pop	r29
    1698:	08 95       	ret

0000169a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    169a:	df 93       	push	r29
    169c:	cf 93       	push	r28
    169e:	00 d0       	rcall	.+0      	; 0x16a0 <GPIO_setupPortDirection+0x6>
    16a0:	00 d0       	rcall	.+0      	; 0x16a2 <GPIO_setupPortDirection+0x8>
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
    16a6:	89 83       	std	Y+1, r24	; 0x01
    16a8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	84 30       	cpi	r24, 0x04	; 4
    16ae:	90 f5       	brcc	.+100    	; 0x1714 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    16b0:	89 81       	ldd	r24, Y+1	; 0x01
    16b2:	28 2f       	mov	r18, r24
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	3c 83       	std	Y+4, r19	; 0x04
    16b8:	2b 83       	std	Y+3, r18	; 0x03
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	9c 81       	ldd	r25, Y+4	; 0x04
    16be:	81 30       	cpi	r24, 0x01	; 1
    16c0:	91 05       	cpc	r25, r1
    16c2:	d1 f0       	breq	.+52     	; 0x16f8 <GPIO_setupPortDirection+0x5e>
    16c4:	2b 81       	ldd	r18, Y+3	; 0x03
    16c6:	3c 81       	ldd	r19, Y+4	; 0x04
    16c8:	22 30       	cpi	r18, 0x02	; 2
    16ca:	31 05       	cpc	r19, r1
    16cc:	2c f4       	brge	.+10     	; 0x16d8 <GPIO_setupPortDirection+0x3e>
    16ce:	8b 81       	ldd	r24, Y+3	; 0x03
    16d0:	9c 81       	ldd	r25, Y+4	; 0x04
    16d2:	00 97       	sbiw	r24, 0x00	; 0
    16d4:	61 f0       	breq	.+24     	; 0x16ee <GPIO_setupPortDirection+0x54>
    16d6:	1e c0       	rjmp	.+60     	; 0x1714 <GPIO_setupPortDirection+0x7a>
    16d8:	2b 81       	ldd	r18, Y+3	; 0x03
    16da:	3c 81       	ldd	r19, Y+4	; 0x04
    16dc:	22 30       	cpi	r18, 0x02	; 2
    16de:	31 05       	cpc	r19, r1
    16e0:	81 f0       	breq	.+32     	; 0x1702 <GPIO_setupPortDirection+0x68>
    16e2:	8b 81       	ldd	r24, Y+3	; 0x03
    16e4:	9c 81       	ldd	r25, Y+4	; 0x04
    16e6:	83 30       	cpi	r24, 0x03	; 3
    16e8:	91 05       	cpc	r25, r1
    16ea:	81 f0       	breq	.+32     	; 0x170c <GPIO_setupPortDirection+0x72>
    16ec:	13 c0       	rjmp	.+38     	; 0x1714 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    16ee:	ea e3       	ldi	r30, 0x3A	; 58
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	8a 81       	ldd	r24, Y+2	; 0x02
    16f4:	80 83       	st	Z, r24
    16f6:	0e c0       	rjmp	.+28     	; 0x1714 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    16f8:	e7 e3       	ldi	r30, 0x37	; 55
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	8a 81       	ldd	r24, Y+2	; 0x02
    16fe:	80 83       	st	Z, r24
    1700:	09 c0       	rjmp	.+18     	; 0x1714 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1702:	e4 e3       	ldi	r30, 0x34	; 52
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	8a 81       	ldd	r24, Y+2	; 0x02
    1708:	80 83       	st	Z, r24
    170a:	04 c0       	rjmp	.+8      	; 0x1714 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    170c:	e1 e3       	ldi	r30, 0x31	; 49
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	80 83       	st	Z, r24
			break;
		}
	}
}
    1714:	0f 90       	pop	r0
    1716:	0f 90       	pop	r0
    1718:	0f 90       	pop	r0
    171a:	0f 90       	pop	r0
    171c:	cf 91       	pop	r28
    171e:	df 91       	pop	r29
    1720:	08 95       	ret

00001722 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1722:	df 93       	push	r29
    1724:	cf 93       	push	r28
    1726:	00 d0       	rcall	.+0      	; 0x1728 <GPIO_writePort+0x6>
    1728:	00 d0       	rcall	.+0      	; 0x172a <GPIO_writePort+0x8>
    172a:	cd b7       	in	r28, 0x3d	; 61
    172c:	de b7       	in	r29, 0x3e	; 62
    172e:	89 83       	std	Y+1, r24	; 0x01
    1730:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    1732:	89 81       	ldd	r24, Y+1	; 0x01
    1734:	84 30       	cpi	r24, 0x04	; 4
    1736:	90 f5       	brcc	.+100    	; 0x179c <GPIO_writePort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1738:	89 81       	ldd	r24, Y+1	; 0x01
    173a:	28 2f       	mov	r18, r24
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	3c 83       	std	Y+4, r19	; 0x04
    1740:	2b 83       	std	Y+3, r18	; 0x03
    1742:	8b 81       	ldd	r24, Y+3	; 0x03
    1744:	9c 81       	ldd	r25, Y+4	; 0x04
    1746:	81 30       	cpi	r24, 0x01	; 1
    1748:	91 05       	cpc	r25, r1
    174a:	d1 f0       	breq	.+52     	; 0x1780 <GPIO_writePort+0x5e>
    174c:	2b 81       	ldd	r18, Y+3	; 0x03
    174e:	3c 81       	ldd	r19, Y+4	; 0x04
    1750:	22 30       	cpi	r18, 0x02	; 2
    1752:	31 05       	cpc	r19, r1
    1754:	2c f4       	brge	.+10     	; 0x1760 <GPIO_writePort+0x3e>
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	9c 81       	ldd	r25, Y+4	; 0x04
    175a:	00 97       	sbiw	r24, 0x00	; 0
    175c:	61 f0       	breq	.+24     	; 0x1776 <GPIO_writePort+0x54>
    175e:	1e c0       	rjmp	.+60     	; 0x179c <GPIO_writePort+0x7a>
    1760:	2b 81       	ldd	r18, Y+3	; 0x03
    1762:	3c 81       	ldd	r19, Y+4	; 0x04
    1764:	22 30       	cpi	r18, 0x02	; 2
    1766:	31 05       	cpc	r19, r1
    1768:	81 f0       	breq	.+32     	; 0x178a <GPIO_writePort+0x68>
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	9c 81       	ldd	r25, Y+4	; 0x04
    176e:	83 30       	cpi	r24, 0x03	; 3
    1770:	91 05       	cpc	r25, r1
    1772:	81 f0       	breq	.+32     	; 0x1794 <GPIO_writePort+0x72>
    1774:	13 c0       	rjmp	.+38     	; 0x179c <GPIO_writePort+0x7a>
		{

		case PORTA_ID:
			PORTA=value;
    1776:	eb e3       	ldi	r30, 0x3B	; 59
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	80 83       	st	Z, r24
    177e:	0e c0       	rjmp	.+28     	; 0x179c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB=value;
    1780:	e8 e3       	ldi	r30, 0x38	; 56
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	80 83       	st	Z, r24
    1788:	09 c0       	rjmp	.+18     	; 0x179c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC=value;
    178a:	e5 e3       	ldi	r30, 0x35	; 53
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	80 83       	st	Z, r24
    1792:	04 c0       	rjmp	.+8      	; 0x179c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD=value;
    1794:	e2 e3       	ldi	r30, 0x32	; 50
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	8a 81       	ldd	r24, Y+2	; 0x02
    179a:	80 83       	st	Z, r24
			break;

		}
	}
}
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	cf 91       	pop	r28
    17a6:	df 91       	pop	r29
    17a8:	08 95       	ret

000017aa <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    17aa:	df 93       	push	r29
    17ac:	cf 93       	push	r28
    17ae:	00 d0       	rcall	.+0      	; 0x17b0 <GPIO_readPort+0x6>
    17b0:	00 d0       	rcall	.+0      	; 0x17b2 <GPIO_readPort+0x8>
    17b2:	0f 92       	push	r0
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 temp = 0;
    17ba:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
    17bc:	8a 81       	ldd	r24, Y+2	; 0x02
    17be:	84 30       	cpi	r24, 0x04	; 4
    17c0:	18 f0       	brcs	.+6      	; 0x17c8 <GPIO_readPort+0x1e>
	{
		return temp;
    17c2:	29 81       	ldd	r18, Y+1	; 0x01
    17c4:	2d 83       	std	Y+5, r18	; 0x05
    17c6:	34 c0       	rjmp	.+104    	; 0x1830 <GPIO_readPort+0x86>
	}
	else
	{
		switch(port_num)
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	28 2f       	mov	r18, r24
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	3c 83       	std	Y+4, r19	; 0x04
    17d0:	2b 83       	std	Y+3, r18	; 0x03
    17d2:	8b 81       	ldd	r24, Y+3	; 0x03
    17d4:	9c 81       	ldd	r25, Y+4	; 0x04
    17d6:	81 30       	cpi	r24, 0x01	; 1
    17d8:	91 05       	cpc	r25, r1
    17da:	d1 f0       	breq	.+52     	; 0x1810 <GPIO_readPort+0x66>
    17dc:	2b 81       	ldd	r18, Y+3	; 0x03
    17de:	3c 81       	ldd	r19, Y+4	; 0x04
    17e0:	22 30       	cpi	r18, 0x02	; 2
    17e2:	31 05       	cpc	r19, r1
    17e4:	2c f4       	brge	.+10     	; 0x17f0 <GPIO_readPort+0x46>
    17e6:	8b 81       	ldd	r24, Y+3	; 0x03
    17e8:	9c 81       	ldd	r25, Y+4	; 0x04
    17ea:	00 97       	sbiw	r24, 0x00	; 0
    17ec:	61 f0       	breq	.+24     	; 0x1806 <GPIO_readPort+0x5c>
    17ee:	1e c0       	rjmp	.+60     	; 0x182c <GPIO_readPort+0x82>
    17f0:	2b 81       	ldd	r18, Y+3	; 0x03
    17f2:	3c 81       	ldd	r19, Y+4	; 0x04
    17f4:	22 30       	cpi	r18, 0x02	; 2
    17f6:	31 05       	cpc	r19, r1
    17f8:	81 f0       	breq	.+32     	; 0x181a <GPIO_readPort+0x70>
    17fa:	8b 81       	ldd	r24, Y+3	; 0x03
    17fc:	9c 81       	ldd	r25, Y+4	; 0x04
    17fe:	83 30       	cpi	r24, 0x03	; 3
    1800:	91 05       	cpc	r25, r1
    1802:	81 f0       	breq	.+32     	; 0x1824 <GPIO_readPort+0x7a>
    1804:	13 c0       	rjmp	.+38     	; 0x182c <GPIO_readPort+0x82>
		{

		case PORTA_ID:
            temp = PINA;
    1806:	e9 e3       	ldi	r30, 0x39	; 57
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	89 83       	std	Y+1, r24	; 0x01
    180e:	0e c0       	rjmp	.+28     	; 0x182c <GPIO_readPort+0x82>
			break;
		case PORTB_ID:
			temp = PINB;
    1810:	e6 e3       	ldi	r30, 0x36	; 54
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	89 83       	std	Y+1, r24	; 0x01
    1818:	09 c0       	rjmp	.+18     	; 0x182c <GPIO_readPort+0x82>
			break;
		case PORTC_ID:
			temp = PINC;
    181a:	e3 e3       	ldi	r30, 0x33	; 51
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	89 83       	std	Y+1, r24	; 0x01
    1822:	04 c0       	rjmp	.+8      	; 0x182c <GPIO_readPort+0x82>
			break;
		case PORTD_ID:
			temp = PIND;
    1824:	e0 e3       	ldi	r30, 0x30	; 48
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return temp;
    182c:	99 81       	ldd	r25, Y+1	; 0x01
    182e:	9d 83       	std	Y+5, r25	; 0x05
    1830:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1832:	0f 90       	pop	r0
    1834:	0f 90       	pop	r0
    1836:	0f 90       	pop	r0
    1838:	0f 90       	pop	r0
    183a:	0f 90       	pop	r0
    183c:	cf 91       	pop	r28
    183e:	df 91       	pop	r29
    1840:	08 95       	ret

00001842 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1842:	df 93       	push	r29
    1844:	cf 93       	push	r28
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    184a:	83 e0       	ldi	r24, 0x03	; 3
    184c:	64 e0       	ldi	r22, 0x04	; 4
    184e:	41 e0       	ldi	r20, 0x01	; 1
    1850:	0e 94 f5 08 	call	0x11ea	; 0x11ea <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1854:	83 e0       	ldi	r24, 0x03	; 3
    1856:	65 e0       	ldi	r22, 0x05	; 5
    1858:	41 e0       	ldi	r20, 0x01	; 1
    185a:	0e 94 f5 08 	call	0x11ea	; 0x11ea <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    185e:	83 e0       	ldi	r24, 0x03	; 3
    1860:	66 e0       	ldi	r22, 0x06	; 6
    1862:	41 e0       	ldi	r20, 0x01	; 1
    1864:	0e 94 f5 08 	call	0x11ea	; 0x11ea <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1868:	82 e0       	ldi	r24, 0x02	; 2
    186a:	6f ef       	ldi	r22, 0xFF	; 255
    186c:	0e 94 4d 0b 	call	0x169a	; 0x169a <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1870:	88 e3       	ldi	r24, 0x38	; 56
    1872:	0e 94 44 0c 	call	0x1888	; 0x1888 <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1876:	8c e0       	ldi	r24, 0x0C	; 12
    1878:	0e 94 44 0c 	call	0x1888	; 0x1888 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	0e 94 44 0c 	call	0x1888	; 0x1888 <LCD_sendCommand>
}
    1882:	cf 91       	pop	r28
    1884:	df 91       	pop	r29
    1886:	08 95       	ret

00001888 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1888:	df 93       	push	r29
    188a:	cf 93       	push	r28
    188c:	cd b7       	in	r28, 0x3d	; 61
    188e:	de b7       	in	r29, 0x3e	; 62
    1890:	ea 97       	sbiw	r28, 0x3a	; 58
    1892:	0f b6       	in	r0, 0x3f	; 63
    1894:	f8 94       	cli
    1896:	de bf       	out	0x3e, r29	; 62
    1898:	0f be       	out	0x3f, r0	; 63
    189a:	cd bf       	out	0x3d, r28	; 61
    189c:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    189e:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    18a0:	83 e0       	ldi	r24, 0x03	; 3
    18a2:	64 e0       	ldi	r22, 0x04	; 4
    18a4:	40 e0       	ldi	r20, 0x00	; 0
    18a6:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    18aa:	83 e0       	ldi	r24, 0x03	; 3
    18ac:	65 e0       	ldi	r22, 0x05	; 5
    18ae:	40 e0       	ldi	r20, 0x00	; 0
    18b0:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <GPIO_writePin>
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	a0 e8       	ldi	r26, 0x80	; 128
    18ba:	bf e3       	ldi	r27, 0x3F	; 63
    18bc:	8d ab       	std	Y+53, r24	; 0x35
    18be:	9e ab       	std	Y+54, r25	; 0x36
    18c0:	af ab       	std	Y+55, r26	; 0x37
    18c2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18c4:	6d a9       	ldd	r22, Y+53	; 0x35
    18c6:	7e a9       	ldd	r23, Y+54	; 0x36
    18c8:	8f a9       	ldd	r24, Y+55	; 0x37
    18ca:	98 ad       	ldd	r25, Y+56	; 0x38
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	4a e7       	ldi	r20, 0x7A	; 122
    18d2:	53 e4       	ldi	r21, 0x43	; 67
    18d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d8:	dc 01       	movw	r26, r24
    18da:	cb 01       	movw	r24, r22
    18dc:	89 ab       	std	Y+49, r24	; 0x31
    18de:	9a ab       	std	Y+50, r25	; 0x32
    18e0:	ab ab       	std	Y+51, r26	; 0x33
    18e2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18e4:	69 a9       	ldd	r22, Y+49	; 0x31
    18e6:	7a a9       	ldd	r23, Y+50	; 0x32
    18e8:	8b a9       	ldd	r24, Y+51	; 0x33
    18ea:	9c a9       	ldd	r25, Y+52	; 0x34
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	40 e8       	ldi	r20, 0x80	; 128
    18f2:	5f e3       	ldi	r21, 0x3F	; 63
    18f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18f8:	88 23       	and	r24, r24
    18fa:	2c f4       	brge	.+10     	; 0x1906 <LCD_sendCommand+0x7e>
		__ticks = 1;
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	98 ab       	std	Y+48, r25	; 0x30
    1902:	8f a7       	std	Y+47, r24	; 0x2f
    1904:	3f c0       	rjmp	.+126    	; 0x1984 <LCD_sendCommand+0xfc>
	else if (__tmp > 65535)
    1906:	69 a9       	ldd	r22, Y+49	; 0x31
    1908:	7a a9       	ldd	r23, Y+50	; 0x32
    190a:	8b a9       	ldd	r24, Y+51	; 0x33
    190c:	9c a9       	ldd	r25, Y+52	; 0x34
    190e:	20 e0       	ldi	r18, 0x00	; 0
    1910:	3f ef       	ldi	r19, 0xFF	; 255
    1912:	4f e7       	ldi	r20, 0x7F	; 127
    1914:	57 e4       	ldi	r21, 0x47	; 71
    1916:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    191a:	18 16       	cp	r1, r24
    191c:	4c f5       	brge	.+82     	; 0x1970 <LCD_sendCommand+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    191e:	6d a9       	ldd	r22, Y+53	; 0x35
    1920:	7e a9       	ldd	r23, Y+54	; 0x36
    1922:	8f a9       	ldd	r24, Y+55	; 0x37
    1924:	98 ad       	ldd	r25, Y+56	; 0x38
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	40 e2       	ldi	r20, 0x20	; 32
    192c:	51 e4       	ldi	r21, 0x41	; 65
    192e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1932:	dc 01       	movw	r26, r24
    1934:	cb 01       	movw	r24, r22
    1936:	bc 01       	movw	r22, r24
    1938:	cd 01       	movw	r24, r26
    193a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    193e:	dc 01       	movw	r26, r24
    1940:	cb 01       	movw	r24, r22
    1942:	98 ab       	std	Y+48, r25	; 0x30
    1944:	8f a7       	std	Y+47, r24	; 0x2f
    1946:	0f c0       	rjmp	.+30     	; 0x1966 <LCD_sendCommand+0xde>
    1948:	89 e1       	ldi	r24, 0x19	; 25
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	9e a7       	std	Y+46, r25	; 0x2e
    194e:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1950:	8d a5       	ldd	r24, Y+45	; 0x2d
    1952:	9e a5       	ldd	r25, Y+46	; 0x2e
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	f1 f7       	brne	.-4      	; 0x1954 <LCD_sendCommand+0xcc>
    1958:	9e a7       	std	Y+46, r25	; 0x2e
    195a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    195c:	8f a5       	ldd	r24, Y+47	; 0x2f
    195e:	98 a9       	ldd	r25, Y+48	; 0x30
    1960:	01 97       	sbiw	r24, 0x01	; 1
    1962:	98 ab       	std	Y+48, r25	; 0x30
    1964:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1966:	8f a5       	ldd	r24, Y+47	; 0x2f
    1968:	98 a9       	ldd	r25, Y+48	; 0x30
    196a:	00 97       	sbiw	r24, 0x00	; 0
    196c:	69 f7       	brne	.-38     	; 0x1948 <LCD_sendCommand+0xc0>
    196e:	14 c0       	rjmp	.+40     	; 0x1998 <LCD_sendCommand+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1970:	69 a9       	ldd	r22, Y+49	; 0x31
    1972:	7a a9       	ldd	r23, Y+50	; 0x32
    1974:	8b a9       	ldd	r24, Y+51	; 0x33
    1976:	9c a9       	ldd	r25, Y+52	; 0x34
    1978:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    197c:	dc 01       	movw	r26, r24
    197e:	cb 01       	movw	r24, r22
    1980:	98 ab       	std	Y+48, r25	; 0x30
    1982:	8f a7       	std	Y+47, r24	; 0x2f
    1984:	8f a5       	ldd	r24, Y+47	; 0x2f
    1986:	98 a9       	ldd	r25, Y+48	; 0x30
    1988:	9c a7       	std	Y+44, r25	; 0x2c
    198a:	8b a7       	std	Y+43, r24	; 0x2b
    198c:	8b a5       	ldd	r24, Y+43	; 0x2b
    198e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1990:	01 97       	sbiw	r24, 0x01	; 1
    1992:	f1 f7       	brne	.-4      	; 0x1990 <LCD_sendCommand+0x108>
    1994:	9c a7       	std	Y+44, r25	; 0x2c
    1996:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1998:	83 e0       	ldi	r24, 0x03	; 3
    199a:	66 e0       	ldi	r22, 0x06	; 6
    199c:	41 e0       	ldi	r20, 0x01	; 1
    199e:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <GPIO_writePin>
    19a2:	80 e0       	ldi	r24, 0x00	; 0
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	a0 e8       	ldi	r26, 0x80	; 128
    19a8:	bf e3       	ldi	r27, 0x3F	; 63
    19aa:	8f a3       	std	Y+39, r24	; 0x27
    19ac:	98 a7       	std	Y+40, r25	; 0x28
    19ae:	a9 a7       	std	Y+41, r26	; 0x29
    19b0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19b2:	6f a1       	ldd	r22, Y+39	; 0x27
    19b4:	78 a5       	ldd	r23, Y+40	; 0x28
    19b6:	89 a5       	ldd	r24, Y+41	; 0x29
    19b8:	9a a5       	ldd	r25, Y+42	; 0x2a
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	4a e7       	ldi	r20, 0x7A	; 122
    19c0:	53 e4       	ldi	r21, 0x43	; 67
    19c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	8b a3       	std	Y+35, r24	; 0x23
    19cc:	9c a3       	std	Y+36, r25	; 0x24
    19ce:	ad a3       	std	Y+37, r26	; 0x25
    19d0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    19d2:	6b a1       	ldd	r22, Y+35	; 0x23
    19d4:	7c a1       	ldd	r23, Y+36	; 0x24
    19d6:	8d a1       	ldd	r24, Y+37	; 0x25
    19d8:	9e a1       	ldd	r25, Y+38	; 0x26
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	40 e8       	ldi	r20, 0x80	; 128
    19e0:	5f e3       	ldi	r21, 0x3F	; 63
    19e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19e6:	88 23       	and	r24, r24
    19e8:	2c f4       	brge	.+10     	; 0x19f4 <LCD_sendCommand+0x16c>
		__ticks = 1;
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	9a a3       	std	Y+34, r25	; 0x22
    19f0:	89 a3       	std	Y+33, r24	; 0x21
    19f2:	3f c0       	rjmp	.+126    	; 0x1a72 <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    19f4:	6b a1       	ldd	r22, Y+35	; 0x23
    19f6:	7c a1       	ldd	r23, Y+36	; 0x24
    19f8:	8d a1       	ldd	r24, Y+37	; 0x25
    19fa:	9e a1       	ldd	r25, Y+38	; 0x26
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	3f ef       	ldi	r19, 0xFF	; 255
    1a00:	4f e7       	ldi	r20, 0x7F	; 127
    1a02:	57 e4       	ldi	r21, 0x47	; 71
    1a04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a08:	18 16       	cp	r1, r24
    1a0a:	4c f5       	brge	.+82     	; 0x1a5e <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a0c:	6f a1       	ldd	r22, Y+39	; 0x27
    1a0e:	78 a5       	ldd	r23, Y+40	; 0x28
    1a10:	89 a5       	ldd	r24, Y+41	; 0x29
    1a12:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	40 e2       	ldi	r20, 0x20	; 32
    1a1a:	51 e4       	ldi	r21, 0x41	; 65
    1a1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	bc 01       	movw	r22, r24
    1a26:	cd 01       	movw	r24, r26
    1a28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	9a a3       	std	Y+34, r25	; 0x22
    1a32:	89 a3       	std	Y+33, r24	; 0x21
    1a34:	0f c0       	rjmp	.+30     	; 0x1a54 <LCD_sendCommand+0x1cc>
    1a36:	89 e1       	ldi	r24, 0x19	; 25
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	98 a3       	std	Y+32, r25	; 0x20
    1a3c:	8f 8f       	std	Y+31, r24	; 0x1f
    1a3e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a40:	98 a1       	ldd	r25, Y+32	; 0x20
    1a42:	01 97       	sbiw	r24, 0x01	; 1
    1a44:	f1 f7       	brne	.-4      	; 0x1a42 <LCD_sendCommand+0x1ba>
    1a46:	98 a3       	std	Y+32, r25	; 0x20
    1a48:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a4a:	89 a1       	ldd	r24, Y+33	; 0x21
    1a4c:	9a a1       	ldd	r25, Y+34	; 0x22
    1a4e:	01 97       	sbiw	r24, 0x01	; 1
    1a50:	9a a3       	std	Y+34, r25	; 0x22
    1a52:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a54:	89 a1       	ldd	r24, Y+33	; 0x21
    1a56:	9a a1       	ldd	r25, Y+34	; 0x22
    1a58:	00 97       	sbiw	r24, 0x00	; 0
    1a5a:	69 f7       	brne	.-38     	; 0x1a36 <LCD_sendCommand+0x1ae>
    1a5c:	14 c0       	rjmp	.+40     	; 0x1a86 <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a5e:	6b a1       	ldd	r22, Y+35	; 0x23
    1a60:	7c a1       	ldd	r23, Y+36	; 0x24
    1a62:	8d a1       	ldd	r24, Y+37	; 0x25
    1a64:	9e a1       	ldd	r25, Y+38	; 0x26
    1a66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	9a a3       	std	Y+34, r25	; 0x22
    1a70:	89 a3       	std	Y+33, r24	; 0x21
    1a72:	89 a1       	ldd	r24, Y+33	; 0x21
    1a74:	9a a1       	ldd	r25, Y+34	; 0x22
    1a76:	9e 8f       	std	Y+30, r25	; 0x1e
    1a78:	8d 8f       	std	Y+29, r24	; 0x1d
    1a7a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a7c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a7e:	01 97       	sbiw	r24, 0x01	; 1
    1a80:	f1 f7       	brne	.-4      	; 0x1a7e <LCD_sendCommand+0x1f6>
    1a82:	9e 8f       	std	Y+30, r25	; 0x1e
    1a84:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1a86:	82 e0       	ldi	r24, 0x02	; 2
    1a88:	6a ad       	ldd	r22, Y+58	; 0x3a
    1a8a:	0e 94 91 0b 	call	0x1722	; 0x1722 <GPIO_writePort>
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	a0 e8       	ldi	r26, 0x80	; 128
    1a94:	bf e3       	ldi	r27, 0x3F	; 63
    1a96:	89 8f       	std	Y+25, r24	; 0x19
    1a98:	9a 8f       	std	Y+26, r25	; 0x1a
    1a9a:	ab 8f       	std	Y+27, r26	; 0x1b
    1a9c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a9e:	69 8d       	ldd	r22, Y+25	; 0x19
    1aa0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1aa2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1aa4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	4a e7       	ldi	r20, 0x7A	; 122
    1aac:	53 e4       	ldi	r21, 0x43	; 67
    1aae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	8d 8b       	std	Y+21, r24	; 0x15
    1ab8:	9e 8b       	std	Y+22, r25	; 0x16
    1aba:	af 8b       	std	Y+23, r26	; 0x17
    1abc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1abe:	6d 89       	ldd	r22, Y+21	; 0x15
    1ac0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ac2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ac4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	40 e8       	ldi	r20, 0x80	; 128
    1acc:	5f e3       	ldi	r21, 0x3F	; 63
    1ace:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ad2:	88 23       	and	r24, r24
    1ad4:	2c f4       	brge	.+10     	; 0x1ae0 <LCD_sendCommand+0x258>
		__ticks = 1;
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	9c 8b       	std	Y+20, r25	; 0x14
    1adc:	8b 8b       	std	Y+19, r24	; 0x13
    1ade:	3f c0       	rjmp	.+126    	; 0x1b5e <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1ae0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ae2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ae4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ae6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	3f ef       	ldi	r19, 0xFF	; 255
    1aec:	4f e7       	ldi	r20, 0x7F	; 127
    1aee:	57 e4       	ldi	r21, 0x47	; 71
    1af0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1af4:	18 16       	cp	r1, r24
    1af6:	4c f5       	brge	.+82     	; 0x1b4a <LCD_sendCommand+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af8:	69 8d       	ldd	r22, Y+25	; 0x19
    1afa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1afc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1afe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	40 e2       	ldi	r20, 0x20	; 32
    1b06:	51 e4       	ldi	r21, 0x41	; 65
    1b08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	bc 01       	movw	r22, r24
    1b12:	cd 01       	movw	r24, r26
    1b14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	9c 8b       	std	Y+20, r25	; 0x14
    1b1e:	8b 8b       	std	Y+19, r24	; 0x13
    1b20:	0f c0       	rjmp	.+30     	; 0x1b40 <LCD_sendCommand+0x2b8>
    1b22:	89 e1       	ldi	r24, 0x19	; 25
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	9a 8b       	std	Y+18, r25	; 0x12
    1b28:	89 8b       	std	Y+17, r24	; 0x11
    1b2a:	89 89       	ldd	r24, Y+17	; 0x11
    1b2c:	9a 89       	ldd	r25, Y+18	; 0x12
    1b2e:	01 97       	sbiw	r24, 0x01	; 1
    1b30:	f1 f7       	brne	.-4      	; 0x1b2e <LCD_sendCommand+0x2a6>
    1b32:	9a 8b       	std	Y+18, r25	; 0x12
    1b34:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b36:	8b 89       	ldd	r24, Y+19	; 0x13
    1b38:	9c 89       	ldd	r25, Y+20	; 0x14
    1b3a:	01 97       	sbiw	r24, 0x01	; 1
    1b3c:	9c 8b       	std	Y+20, r25	; 0x14
    1b3e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b40:	8b 89       	ldd	r24, Y+19	; 0x13
    1b42:	9c 89       	ldd	r25, Y+20	; 0x14
    1b44:	00 97       	sbiw	r24, 0x00	; 0
    1b46:	69 f7       	brne	.-38     	; 0x1b22 <LCD_sendCommand+0x29a>
    1b48:	14 c0       	rjmp	.+40     	; 0x1b72 <LCD_sendCommand+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b4a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b4c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b4e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b50:	98 8d       	ldd	r25, Y+24	; 0x18
    1b52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	9c 8b       	std	Y+20, r25	; 0x14
    1b5c:	8b 8b       	std	Y+19, r24	; 0x13
    1b5e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b60:	9c 89       	ldd	r25, Y+20	; 0x14
    1b62:	98 8b       	std	Y+16, r25	; 0x10
    1b64:	8f 87       	std	Y+15, r24	; 0x0f
    1b66:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b68:	98 89       	ldd	r25, Y+16	; 0x10
    1b6a:	01 97       	sbiw	r24, 0x01	; 1
    1b6c:	f1 f7       	brne	.-4      	; 0x1b6a <LCD_sendCommand+0x2e2>
    1b6e:	98 8b       	std	Y+16, r25	; 0x10
    1b70:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1b72:	83 e0       	ldi	r24, 0x03	; 3
    1b74:	66 e0       	ldi	r22, 0x06	; 6
    1b76:	40 e0       	ldi	r20, 0x00	; 0
    1b78:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <GPIO_writePin>
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	a0 e8       	ldi	r26, 0x80	; 128
    1b82:	bf e3       	ldi	r27, 0x3F	; 63
    1b84:	8b 87       	std	Y+11, r24	; 0x0b
    1b86:	9c 87       	std	Y+12, r25	; 0x0c
    1b88:	ad 87       	std	Y+13, r26	; 0x0d
    1b8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b90:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b92:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	4a e7       	ldi	r20, 0x7A	; 122
    1b9a:	53 e4       	ldi	r21, 0x43	; 67
    1b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	8f 83       	std	Y+7, r24	; 0x07
    1ba6:	98 87       	std	Y+8, r25	; 0x08
    1ba8:	a9 87       	std	Y+9, r26	; 0x09
    1baa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bac:	6f 81       	ldd	r22, Y+7	; 0x07
    1bae:	78 85       	ldd	r23, Y+8	; 0x08
    1bb0:	89 85       	ldd	r24, Y+9	; 0x09
    1bb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	40 e8       	ldi	r20, 0x80	; 128
    1bba:	5f e3       	ldi	r21, 0x3F	; 63
    1bbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bc0:	88 23       	and	r24, r24
    1bc2:	2c f4       	brge	.+10     	; 0x1bce <LCD_sendCommand+0x346>
		__ticks = 1;
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	9e 83       	std	Y+6, r25	; 0x06
    1bca:	8d 83       	std	Y+5, r24	; 0x05
    1bcc:	3f c0       	rjmp	.+126    	; 0x1c4c <LCD_sendCommand+0x3c4>
	else if (__tmp > 65535)
    1bce:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd0:	78 85       	ldd	r23, Y+8	; 0x08
    1bd2:	89 85       	ldd	r24, Y+9	; 0x09
    1bd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	3f ef       	ldi	r19, 0xFF	; 255
    1bda:	4f e7       	ldi	r20, 0x7F	; 127
    1bdc:	57 e4       	ldi	r21, 0x47	; 71
    1bde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1be2:	18 16       	cp	r1, r24
    1be4:	4c f5       	brge	.+82     	; 0x1c38 <LCD_sendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1be8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bec:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	40 e2       	ldi	r20, 0x20	; 32
    1bf4:	51 e4       	ldi	r21, 0x41	; 65
    1bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	bc 01       	movw	r22, r24
    1c00:	cd 01       	movw	r24, r26
    1c02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c06:	dc 01       	movw	r26, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	9e 83       	std	Y+6, r25	; 0x06
    1c0c:	8d 83       	std	Y+5, r24	; 0x05
    1c0e:	0f c0       	rjmp	.+30     	; 0x1c2e <LCD_sendCommand+0x3a6>
    1c10:	89 e1       	ldi	r24, 0x19	; 25
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	9c 83       	std	Y+4, r25	; 0x04
    1c16:	8b 83       	std	Y+3, r24	; 0x03
    1c18:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1c:	01 97       	sbiw	r24, 0x01	; 1
    1c1e:	f1 f7       	brne	.-4      	; 0x1c1c <LCD_sendCommand+0x394>
    1c20:	9c 83       	std	Y+4, r25	; 0x04
    1c22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c24:	8d 81       	ldd	r24, Y+5	; 0x05
    1c26:	9e 81       	ldd	r25, Y+6	; 0x06
    1c28:	01 97       	sbiw	r24, 0x01	; 1
    1c2a:	9e 83       	std	Y+6, r25	; 0x06
    1c2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c30:	9e 81       	ldd	r25, Y+6	; 0x06
    1c32:	00 97       	sbiw	r24, 0x00	; 0
    1c34:	69 f7       	brne	.-38     	; 0x1c10 <LCD_sendCommand+0x388>
    1c36:	14 c0       	rjmp	.+40     	; 0x1c60 <LCD_sendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c38:	6f 81       	ldd	r22, Y+7	; 0x07
    1c3a:	78 85       	ldd	r23, Y+8	; 0x08
    1c3c:	89 85       	ldd	r24, Y+9	; 0x09
    1c3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	9e 83       	std	Y+6, r25	; 0x06
    1c4a:	8d 83       	std	Y+5, r24	; 0x05
    1c4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c50:	9a 83       	std	Y+2, r25	; 0x02
    1c52:	89 83       	std	Y+1, r24	; 0x01
    1c54:	89 81       	ldd	r24, Y+1	; 0x01
    1c56:	9a 81       	ldd	r25, Y+2	; 0x02
    1c58:	01 97       	sbiw	r24, 0x01	; 1
    1c5a:	f1 f7       	brne	.-4      	; 0x1c58 <LCD_sendCommand+0x3d0>
    1c5c:	9a 83       	std	Y+2, r25	; 0x02
    1c5e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1c60:	ea 96       	adiw	r28, 0x3a	; 58
    1c62:	0f b6       	in	r0, 0x3f	; 63
    1c64:	f8 94       	cli
    1c66:	de bf       	out	0x3e, r29	; 62
    1c68:	0f be       	out	0x3f, r0	; 63
    1c6a:	cd bf       	out	0x3d, r28	; 61
    1c6c:	cf 91       	pop	r28
    1c6e:	df 91       	pop	r29
    1c70:	08 95       	ret

00001c72 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1c72:	df 93       	push	r29
    1c74:	cf 93       	push	r28
    1c76:	cd b7       	in	r28, 0x3d	; 61
    1c78:	de b7       	in	r29, 0x3e	; 62
    1c7a:	ea 97       	sbiw	r28, 0x3a	; 58
    1c7c:	0f b6       	in	r0, 0x3f	; 63
    1c7e:	f8 94       	cli
    1c80:	de bf       	out	0x3e, r29	; 62
    1c82:	0f be       	out	0x3f, r0	; 63
    1c84:	cd bf       	out	0x3d, r28	; 61
    1c86:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    1c88:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1c8a:	83 e0       	ldi	r24, 0x03	; 3
    1c8c:	64 e0       	ldi	r22, 0x04	; 4
    1c8e:	41 e0       	ldi	r20, 0x01	; 1
    1c90:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1c94:	83 e0       	ldi	r24, 0x03	; 3
    1c96:	65 e0       	ldi	r22, 0x05	; 5
    1c98:	40 e0       	ldi	r20, 0x00	; 0
    1c9a:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <GPIO_writePin>
    1c9e:	80 e0       	ldi	r24, 0x00	; 0
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	a0 e8       	ldi	r26, 0x80	; 128
    1ca4:	bf e3       	ldi	r27, 0x3F	; 63
    1ca6:	8d ab       	std	Y+53, r24	; 0x35
    1ca8:	9e ab       	std	Y+54, r25	; 0x36
    1caa:	af ab       	std	Y+55, r26	; 0x37
    1cac:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cae:	6d a9       	ldd	r22, Y+53	; 0x35
    1cb0:	7e a9       	ldd	r23, Y+54	; 0x36
    1cb2:	8f a9       	ldd	r24, Y+55	; 0x37
    1cb4:	98 ad       	ldd	r25, Y+56	; 0x38
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	4a e7       	ldi	r20, 0x7A	; 122
    1cbc:	53 e4       	ldi	r21, 0x43	; 67
    1cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	89 ab       	std	Y+49, r24	; 0x31
    1cc8:	9a ab       	std	Y+50, r25	; 0x32
    1cca:	ab ab       	std	Y+51, r26	; 0x33
    1ccc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1cce:	69 a9       	ldd	r22, Y+49	; 0x31
    1cd0:	7a a9       	ldd	r23, Y+50	; 0x32
    1cd2:	8b a9       	ldd	r24, Y+51	; 0x33
    1cd4:	9c a9       	ldd	r25, Y+52	; 0x34
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	40 e8       	ldi	r20, 0x80	; 128
    1cdc:	5f e3       	ldi	r21, 0x3F	; 63
    1cde:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ce2:	88 23       	and	r24, r24
    1ce4:	2c f4       	brge	.+10     	; 0x1cf0 <LCD_displayCharacter+0x7e>
		__ticks = 1;
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	98 ab       	std	Y+48, r25	; 0x30
    1cec:	8f a7       	std	Y+47, r24	; 0x2f
    1cee:	3f c0       	rjmp	.+126    	; 0x1d6e <LCD_displayCharacter+0xfc>
	else if (__tmp > 65535)
    1cf0:	69 a9       	ldd	r22, Y+49	; 0x31
    1cf2:	7a a9       	ldd	r23, Y+50	; 0x32
    1cf4:	8b a9       	ldd	r24, Y+51	; 0x33
    1cf6:	9c a9       	ldd	r25, Y+52	; 0x34
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	3f ef       	ldi	r19, 0xFF	; 255
    1cfc:	4f e7       	ldi	r20, 0x7F	; 127
    1cfe:	57 e4       	ldi	r21, 0x47	; 71
    1d00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d04:	18 16       	cp	r1, r24
    1d06:	4c f5       	brge	.+82     	; 0x1d5a <LCD_displayCharacter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d08:	6d a9       	ldd	r22, Y+53	; 0x35
    1d0a:	7e a9       	ldd	r23, Y+54	; 0x36
    1d0c:	8f a9       	ldd	r24, Y+55	; 0x37
    1d0e:	98 ad       	ldd	r25, Y+56	; 0x38
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	40 e2       	ldi	r20, 0x20	; 32
    1d16:	51 e4       	ldi	r21, 0x41	; 65
    1d18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	cb 01       	movw	r24, r22
    1d20:	bc 01       	movw	r22, r24
    1d22:	cd 01       	movw	r24, r26
    1d24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d28:	dc 01       	movw	r26, r24
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	98 ab       	std	Y+48, r25	; 0x30
    1d2e:	8f a7       	std	Y+47, r24	; 0x2f
    1d30:	0f c0       	rjmp	.+30     	; 0x1d50 <LCD_displayCharacter+0xde>
    1d32:	89 e1       	ldi	r24, 0x19	; 25
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	9e a7       	std	Y+46, r25	; 0x2e
    1d38:	8d a7       	std	Y+45, r24	; 0x2d
    1d3a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d3c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d3e:	01 97       	sbiw	r24, 0x01	; 1
    1d40:	f1 f7       	brne	.-4      	; 0x1d3e <LCD_displayCharacter+0xcc>
    1d42:	9e a7       	std	Y+46, r25	; 0x2e
    1d44:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d46:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d48:	98 a9       	ldd	r25, Y+48	; 0x30
    1d4a:	01 97       	sbiw	r24, 0x01	; 1
    1d4c:	98 ab       	std	Y+48, r25	; 0x30
    1d4e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d50:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d52:	98 a9       	ldd	r25, Y+48	; 0x30
    1d54:	00 97       	sbiw	r24, 0x00	; 0
    1d56:	69 f7       	brne	.-38     	; 0x1d32 <LCD_displayCharacter+0xc0>
    1d58:	14 c0       	rjmp	.+40     	; 0x1d82 <LCD_displayCharacter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d5a:	69 a9       	ldd	r22, Y+49	; 0x31
    1d5c:	7a a9       	ldd	r23, Y+50	; 0x32
    1d5e:	8b a9       	ldd	r24, Y+51	; 0x33
    1d60:	9c a9       	ldd	r25, Y+52	; 0x34
    1d62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	98 ab       	std	Y+48, r25	; 0x30
    1d6c:	8f a7       	std	Y+47, r24	; 0x2f
    1d6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d70:	98 a9       	ldd	r25, Y+48	; 0x30
    1d72:	9c a7       	std	Y+44, r25	; 0x2c
    1d74:	8b a7       	std	Y+43, r24	; 0x2b
    1d76:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d78:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	f1 f7       	brne	.-4      	; 0x1d7a <LCD_displayCharacter+0x108>
    1d7e:	9c a7       	std	Y+44, r25	; 0x2c
    1d80:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1d82:	83 e0       	ldi	r24, 0x03	; 3
    1d84:	66 e0       	ldi	r22, 0x06	; 6
    1d86:	41 e0       	ldi	r20, 0x01	; 1
    1d88:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <GPIO_writePin>
    1d8c:	80 e0       	ldi	r24, 0x00	; 0
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	a0 e8       	ldi	r26, 0x80	; 128
    1d92:	bf e3       	ldi	r27, 0x3F	; 63
    1d94:	8f a3       	std	Y+39, r24	; 0x27
    1d96:	98 a7       	std	Y+40, r25	; 0x28
    1d98:	a9 a7       	std	Y+41, r26	; 0x29
    1d9a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d9c:	6f a1       	ldd	r22, Y+39	; 0x27
    1d9e:	78 a5       	ldd	r23, Y+40	; 0x28
    1da0:	89 a5       	ldd	r24, Y+41	; 0x29
    1da2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	4a e7       	ldi	r20, 0x7A	; 122
    1daa:	53 e4       	ldi	r21, 0x43	; 67
    1dac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db0:	dc 01       	movw	r26, r24
    1db2:	cb 01       	movw	r24, r22
    1db4:	8b a3       	std	Y+35, r24	; 0x23
    1db6:	9c a3       	std	Y+36, r25	; 0x24
    1db8:	ad a3       	std	Y+37, r26	; 0x25
    1dba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1dbc:	6b a1       	ldd	r22, Y+35	; 0x23
    1dbe:	7c a1       	ldd	r23, Y+36	; 0x24
    1dc0:	8d a1       	ldd	r24, Y+37	; 0x25
    1dc2:	9e a1       	ldd	r25, Y+38	; 0x26
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	40 e8       	ldi	r20, 0x80	; 128
    1dca:	5f e3       	ldi	r21, 0x3F	; 63
    1dcc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dd0:	88 23       	and	r24, r24
    1dd2:	2c f4       	brge	.+10     	; 0x1dde <LCD_displayCharacter+0x16c>
		__ticks = 1;
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	9a a3       	std	Y+34, r25	; 0x22
    1dda:	89 a3       	std	Y+33, r24	; 0x21
    1ddc:	3f c0       	rjmp	.+126    	; 0x1e5c <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    1dde:	6b a1       	ldd	r22, Y+35	; 0x23
    1de0:	7c a1       	ldd	r23, Y+36	; 0x24
    1de2:	8d a1       	ldd	r24, Y+37	; 0x25
    1de4:	9e a1       	ldd	r25, Y+38	; 0x26
    1de6:	20 e0       	ldi	r18, 0x00	; 0
    1de8:	3f ef       	ldi	r19, 0xFF	; 255
    1dea:	4f e7       	ldi	r20, 0x7F	; 127
    1dec:	57 e4       	ldi	r21, 0x47	; 71
    1dee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1df2:	18 16       	cp	r1, r24
    1df4:	4c f5       	brge	.+82     	; 0x1e48 <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1df6:	6f a1       	ldd	r22, Y+39	; 0x27
    1df8:	78 a5       	ldd	r23, Y+40	; 0x28
    1dfa:	89 a5       	ldd	r24, Y+41	; 0x29
    1dfc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	40 e2       	ldi	r20, 0x20	; 32
    1e04:	51 e4       	ldi	r21, 0x41	; 65
    1e06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	bc 01       	movw	r22, r24
    1e10:	cd 01       	movw	r24, r26
    1e12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e16:	dc 01       	movw	r26, r24
    1e18:	cb 01       	movw	r24, r22
    1e1a:	9a a3       	std	Y+34, r25	; 0x22
    1e1c:	89 a3       	std	Y+33, r24	; 0x21
    1e1e:	0f c0       	rjmp	.+30     	; 0x1e3e <LCD_displayCharacter+0x1cc>
    1e20:	89 e1       	ldi	r24, 0x19	; 25
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	98 a3       	std	Y+32, r25	; 0x20
    1e26:	8f 8f       	std	Y+31, r24	; 0x1f
    1e28:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e2a:	98 a1       	ldd	r25, Y+32	; 0x20
    1e2c:	01 97       	sbiw	r24, 0x01	; 1
    1e2e:	f1 f7       	brne	.-4      	; 0x1e2c <LCD_displayCharacter+0x1ba>
    1e30:	98 a3       	std	Y+32, r25	; 0x20
    1e32:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e34:	89 a1       	ldd	r24, Y+33	; 0x21
    1e36:	9a a1       	ldd	r25, Y+34	; 0x22
    1e38:	01 97       	sbiw	r24, 0x01	; 1
    1e3a:	9a a3       	std	Y+34, r25	; 0x22
    1e3c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e3e:	89 a1       	ldd	r24, Y+33	; 0x21
    1e40:	9a a1       	ldd	r25, Y+34	; 0x22
    1e42:	00 97       	sbiw	r24, 0x00	; 0
    1e44:	69 f7       	brne	.-38     	; 0x1e20 <LCD_displayCharacter+0x1ae>
    1e46:	14 c0       	rjmp	.+40     	; 0x1e70 <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e48:	6b a1       	ldd	r22, Y+35	; 0x23
    1e4a:	7c a1       	ldd	r23, Y+36	; 0x24
    1e4c:	8d a1       	ldd	r24, Y+37	; 0x25
    1e4e:	9e a1       	ldd	r25, Y+38	; 0x26
    1e50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e54:	dc 01       	movw	r26, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	9a a3       	std	Y+34, r25	; 0x22
    1e5a:	89 a3       	std	Y+33, r24	; 0x21
    1e5c:	89 a1       	ldd	r24, Y+33	; 0x21
    1e5e:	9a a1       	ldd	r25, Y+34	; 0x22
    1e60:	9e 8f       	std	Y+30, r25	; 0x1e
    1e62:	8d 8f       	std	Y+29, r24	; 0x1d
    1e64:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e66:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e68:	01 97       	sbiw	r24, 0x01	; 1
    1e6a:	f1 f7       	brne	.-4      	; 0x1e68 <LCD_displayCharacter+0x1f6>
    1e6c:	9e 8f       	std	Y+30, r25	; 0x1e
    1e6e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    1e70:	82 e0       	ldi	r24, 0x02	; 2
    1e72:	6a ad       	ldd	r22, Y+58	; 0x3a
    1e74:	0e 94 91 0b 	call	0x1722	; 0x1722 <GPIO_writePort>
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	a0 e8       	ldi	r26, 0x80	; 128
    1e7e:	bf e3       	ldi	r27, 0x3F	; 63
    1e80:	89 8f       	std	Y+25, r24	; 0x19
    1e82:	9a 8f       	std	Y+26, r25	; 0x1a
    1e84:	ab 8f       	std	Y+27, r26	; 0x1b
    1e86:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e88:	69 8d       	ldd	r22, Y+25	; 0x19
    1e8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	4a e7       	ldi	r20, 0x7A	; 122
    1e96:	53 e4       	ldi	r21, 0x43	; 67
    1e98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	8d 8b       	std	Y+21, r24	; 0x15
    1ea2:	9e 8b       	std	Y+22, r25	; 0x16
    1ea4:	af 8b       	std	Y+23, r26	; 0x17
    1ea6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ea8:	6d 89       	ldd	r22, Y+21	; 0x15
    1eaa:	7e 89       	ldd	r23, Y+22	; 0x16
    1eac:	8f 89       	ldd	r24, Y+23	; 0x17
    1eae:	98 8d       	ldd	r25, Y+24	; 0x18
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	40 e8       	ldi	r20, 0x80	; 128
    1eb6:	5f e3       	ldi	r21, 0x3F	; 63
    1eb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ebc:	88 23       	and	r24, r24
    1ebe:	2c f4       	brge	.+10     	; 0x1eca <LCD_displayCharacter+0x258>
		__ticks = 1;
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	9c 8b       	std	Y+20, r25	; 0x14
    1ec6:	8b 8b       	std	Y+19, r24	; 0x13
    1ec8:	3f c0       	rjmp	.+126    	; 0x1f48 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    1eca:	6d 89       	ldd	r22, Y+21	; 0x15
    1ecc:	7e 89       	ldd	r23, Y+22	; 0x16
    1ece:	8f 89       	ldd	r24, Y+23	; 0x17
    1ed0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	3f ef       	ldi	r19, 0xFF	; 255
    1ed6:	4f e7       	ldi	r20, 0x7F	; 127
    1ed8:	57 e4       	ldi	r21, 0x47	; 71
    1eda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ede:	18 16       	cp	r1, r24
    1ee0:	4c f5       	brge	.+82     	; 0x1f34 <LCD_displayCharacter+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee2:	69 8d       	ldd	r22, Y+25	; 0x19
    1ee4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ee6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ee8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	40 e2       	ldi	r20, 0x20	; 32
    1ef0:	51 e4       	ldi	r21, 0x41	; 65
    1ef2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	bc 01       	movw	r22, r24
    1efc:	cd 01       	movw	r24, r26
    1efe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	9c 8b       	std	Y+20, r25	; 0x14
    1f08:	8b 8b       	std	Y+19, r24	; 0x13
    1f0a:	0f c0       	rjmp	.+30     	; 0x1f2a <LCD_displayCharacter+0x2b8>
    1f0c:	89 e1       	ldi	r24, 0x19	; 25
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	9a 8b       	std	Y+18, r25	; 0x12
    1f12:	89 8b       	std	Y+17, r24	; 0x11
    1f14:	89 89       	ldd	r24, Y+17	; 0x11
    1f16:	9a 89       	ldd	r25, Y+18	; 0x12
    1f18:	01 97       	sbiw	r24, 0x01	; 1
    1f1a:	f1 f7       	brne	.-4      	; 0x1f18 <LCD_displayCharacter+0x2a6>
    1f1c:	9a 8b       	std	Y+18, r25	; 0x12
    1f1e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f20:	8b 89       	ldd	r24, Y+19	; 0x13
    1f22:	9c 89       	ldd	r25, Y+20	; 0x14
    1f24:	01 97       	sbiw	r24, 0x01	; 1
    1f26:	9c 8b       	std	Y+20, r25	; 0x14
    1f28:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f2c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f2e:	00 97       	sbiw	r24, 0x00	; 0
    1f30:	69 f7       	brne	.-38     	; 0x1f0c <LCD_displayCharacter+0x29a>
    1f32:	14 c0       	rjmp	.+40     	; 0x1f5c <LCD_displayCharacter+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f34:	6d 89       	ldd	r22, Y+21	; 0x15
    1f36:	7e 89       	ldd	r23, Y+22	; 0x16
    1f38:	8f 89       	ldd	r24, Y+23	; 0x17
    1f3a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	9c 8b       	std	Y+20, r25	; 0x14
    1f46:	8b 8b       	std	Y+19, r24	; 0x13
    1f48:	8b 89       	ldd	r24, Y+19	; 0x13
    1f4a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f4c:	98 8b       	std	Y+16, r25	; 0x10
    1f4e:	8f 87       	std	Y+15, r24	; 0x0f
    1f50:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f52:	98 89       	ldd	r25, Y+16	; 0x10
    1f54:	01 97       	sbiw	r24, 0x01	; 1
    1f56:	f1 f7       	brne	.-4      	; 0x1f54 <LCD_displayCharacter+0x2e2>
    1f58:	98 8b       	std	Y+16, r25	; 0x10
    1f5a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1f5c:	83 e0       	ldi	r24, 0x03	; 3
    1f5e:	66 e0       	ldi	r22, 0x06	; 6
    1f60:	40 e0       	ldi	r20, 0x00	; 0
    1f62:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <GPIO_writePin>
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	a0 e8       	ldi	r26, 0x80	; 128
    1f6c:	bf e3       	ldi	r27, 0x3F	; 63
    1f6e:	8b 87       	std	Y+11, r24	; 0x0b
    1f70:	9c 87       	std	Y+12, r25	; 0x0c
    1f72:	ad 87       	std	Y+13, r26	; 0x0d
    1f74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f76:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f78:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f7e:	20 e0       	ldi	r18, 0x00	; 0
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	4a e7       	ldi	r20, 0x7A	; 122
    1f84:	53 e4       	ldi	r21, 0x43	; 67
    1f86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	8f 83       	std	Y+7, r24	; 0x07
    1f90:	98 87       	std	Y+8, r25	; 0x08
    1f92:	a9 87       	std	Y+9, r26	; 0x09
    1f94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f96:	6f 81       	ldd	r22, Y+7	; 0x07
    1f98:	78 85       	ldd	r23, Y+8	; 0x08
    1f9a:	89 85       	ldd	r24, Y+9	; 0x09
    1f9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f9e:	20 e0       	ldi	r18, 0x00	; 0
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	40 e8       	ldi	r20, 0x80	; 128
    1fa4:	5f e3       	ldi	r21, 0x3F	; 63
    1fa6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1faa:	88 23       	and	r24, r24
    1fac:	2c f4       	brge	.+10     	; 0x1fb8 <LCD_displayCharacter+0x346>
		__ticks = 1;
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	9e 83       	std	Y+6, r25	; 0x06
    1fb4:	8d 83       	std	Y+5, r24	; 0x05
    1fb6:	3f c0       	rjmp	.+126    	; 0x2036 <LCD_displayCharacter+0x3c4>
	else if (__tmp > 65535)
    1fb8:	6f 81       	ldd	r22, Y+7	; 0x07
    1fba:	78 85       	ldd	r23, Y+8	; 0x08
    1fbc:	89 85       	ldd	r24, Y+9	; 0x09
    1fbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	3f ef       	ldi	r19, 0xFF	; 255
    1fc4:	4f e7       	ldi	r20, 0x7F	; 127
    1fc6:	57 e4       	ldi	r21, 0x47	; 71
    1fc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fcc:	18 16       	cp	r1, r24
    1fce:	4c f5       	brge	.+82     	; 0x2022 <LCD_displayCharacter+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	40 e2       	ldi	r20, 0x20	; 32
    1fde:	51 e4       	ldi	r21, 0x41	; 65
    1fe0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	bc 01       	movw	r22, r24
    1fea:	cd 01       	movw	r24, r26
    1fec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	9e 83       	std	Y+6, r25	; 0x06
    1ff6:	8d 83       	std	Y+5, r24	; 0x05
    1ff8:	0f c0       	rjmp	.+30     	; 0x2018 <LCD_displayCharacter+0x3a6>
    1ffa:	89 e1       	ldi	r24, 0x19	; 25
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	9c 83       	std	Y+4, r25	; 0x04
    2000:	8b 83       	std	Y+3, r24	; 0x03
    2002:	8b 81       	ldd	r24, Y+3	; 0x03
    2004:	9c 81       	ldd	r25, Y+4	; 0x04
    2006:	01 97       	sbiw	r24, 0x01	; 1
    2008:	f1 f7       	brne	.-4      	; 0x2006 <LCD_displayCharacter+0x394>
    200a:	9c 83       	std	Y+4, r25	; 0x04
    200c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    200e:	8d 81       	ldd	r24, Y+5	; 0x05
    2010:	9e 81       	ldd	r25, Y+6	; 0x06
    2012:	01 97       	sbiw	r24, 0x01	; 1
    2014:	9e 83       	std	Y+6, r25	; 0x06
    2016:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2018:	8d 81       	ldd	r24, Y+5	; 0x05
    201a:	9e 81       	ldd	r25, Y+6	; 0x06
    201c:	00 97       	sbiw	r24, 0x00	; 0
    201e:	69 f7       	brne	.-38     	; 0x1ffa <LCD_displayCharacter+0x388>
    2020:	14 c0       	rjmp	.+40     	; 0x204a <LCD_displayCharacter+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2022:	6f 81       	ldd	r22, Y+7	; 0x07
    2024:	78 85       	ldd	r23, Y+8	; 0x08
    2026:	89 85       	ldd	r24, Y+9	; 0x09
    2028:	9a 85       	ldd	r25, Y+10	; 0x0a
    202a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	9e 83       	std	Y+6, r25	; 0x06
    2034:	8d 83       	std	Y+5, r24	; 0x05
    2036:	8d 81       	ldd	r24, Y+5	; 0x05
    2038:	9e 81       	ldd	r25, Y+6	; 0x06
    203a:	9a 83       	std	Y+2, r25	; 0x02
    203c:	89 83       	std	Y+1, r24	; 0x01
    203e:	89 81       	ldd	r24, Y+1	; 0x01
    2040:	9a 81       	ldd	r25, Y+2	; 0x02
    2042:	01 97       	sbiw	r24, 0x01	; 1
    2044:	f1 f7       	brne	.-4      	; 0x2042 <LCD_displayCharacter+0x3d0>
    2046:	9a 83       	std	Y+2, r25	; 0x02
    2048:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    204a:	ea 96       	adiw	r28, 0x3a	; 58
    204c:	0f b6       	in	r0, 0x3f	; 63
    204e:	f8 94       	cli
    2050:	de bf       	out	0x3e, r29	; 62
    2052:	0f be       	out	0x3f, r0	; 63
    2054:	cd bf       	out	0x3d, r28	; 61
    2056:	cf 91       	pop	r28
    2058:	df 91       	pop	r29
    205a:	08 95       	ret

0000205c <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    205c:	df 93       	push	r29
    205e:	cf 93       	push	r28
    2060:	00 d0       	rcall	.+0      	; 0x2062 <LCD_displayString+0x6>
    2062:	0f 92       	push	r0
    2064:	cd b7       	in	r28, 0x3d	; 61
    2066:	de b7       	in	r29, 0x3e	; 62
    2068:	9b 83       	std	Y+3, r25	; 0x03
    206a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    206c:	19 82       	std	Y+1, r1	; 0x01
    206e:	0e c0       	rjmp	.+28     	; 0x208c <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2070:	89 81       	ldd	r24, Y+1	; 0x01
    2072:	28 2f       	mov	r18, r24
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	8a 81       	ldd	r24, Y+2	; 0x02
    2078:	9b 81       	ldd	r25, Y+3	; 0x03
    207a:	fc 01       	movw	r30, r24
    207c:	e2 0f       	add	r30, r18
    207e:	f3 1f       	adc	r31, r19
    2080:	80 81       	ld	r24, Z
    2082:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <LCD_displayCharacter>
		i++;
    2086:	89 81       	ldd	r24, Y+1	; 0x01
    2088:	8f 5f       	subi	r24, 0xFF	; 255
    208a:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    208c:	89 81       	ldd	r24, Y+1	; 0x01
    208e:	28 2f       	mov	r18, r24
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	8a 81       	ldd	r24, Y+2	; 0x02
    2094:	9b 81       	ldd	r25, Y+3	; 0x03
    2096:	fc 01       	movw	r30, r24
    2098:	e2 0f       	add	r30, r18
    209a:	f3 1f       	adc	r31, r19
    209c:	80 81       	ld	r24, Z
    209e:	88 23       	and	r24, r24
    20a0:	39 f7       	brne	.-50     	; 0x2070 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	0f 90       	pop	r0
    20a8:	cf 91       	pop	r28
    20aa:	df 91       	pop	r29
    20ac:	08 95       	ret

000020ae <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    20ae:	df 93       	push	r29
    20b0:	cf 93       	push	r28
    20b2:	00 d0       	rcall	.+0      	; 0x20b4 <LCD_moveCursor+0x6>
    20b4:	00 d0       	rcall	.+0      	; 0x20b6 <LCD_moveCursor+0x8>
    20b6:	0f 92       	push	r0
    20b8:	cd b7       	in	r28, 0x3d	; 61
    20ba:	de b7       	in	r29, 0x3e	; 62
    20bc:	8a 83       	std	Y+2, r24	; 0x02
    20be:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    20c0:	8a 81       	ldd	r24, Y+2	; 0x02
    20c2:	28 2f       	mov	r18, r24
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	3d 83       	std	Y+5, r19	; 0x05
    20c8:	2c 83       	std	Y+4, r18	; 0x04
    20ca:	8c 81       	ldd	r24, Y+4	; 0x04
    20cc:	9d 81       	ldd	r25, Y+5	; 0x05
    20ce:	81 30       	cpi	r24, 0x01	; 1
    20d0:	91 05       	cpc	r25, r1
    20d2:	c1 f0       	breq	.+48     	; 0x2104 <LCD_moveCursor+0x56>
    20d4:	2c 81       	ldd	r18, Y+4	; 0x04
    20d6:	3d 81       	ldd	r19, Y+5	; 0x05
    20d8:	22 30       	cpi	r18, 0x02	; 2
    20da:	31 05       	cpc	r19, r1
    20dc:	2c f4       	brge	.+10     	; 0x20e8 <LCD_moveCursor+0x3a>
    20de:	8c 81       	ldd	r24, Y+4	; 0x04
    20e0:	9d 81       	ldd	r25, Y+5	; 0x05
    20e2:	00 97       	sbiw	r24, 0x00	; 0
    20e4:	61 f0       	breq	.+24     	; 0x20fe <LCD_moveCursor+0x50>
    20e6:	19 c0       	rjmp	.+50     	; 0x211a <LCD_moveCursor+0x6c>
    20e8:	2c 81       	ldd	r18, Y+4	; 0x04
    20ea:	3d 81       	ldd	r19, Y+5	; 0x05
    20ec:	22 30       	cpi	r18, 0x02	; 2
    20ee:	31 05       	cpc	r19, r1
    20f0:	69 f0       	breq	.+26     	; 0x210c <LCD_moveCursor+0x5e>
    20f2:	8c 81       	ldd	r24, Y+4	; 0x04
    20f4:	9d 81       	ldd	r25, Y+5	; 0x05
    20f6:	83 30       	cpi	r24, 0x03	; 3
    20f8:	91 05       	cpc	r25, r1
    20fa:	61 f0       	breq	.+24     	; 0x2114 <LCD_moveCursor+0x66>
    20fc:	0e c0       	rjmp	.+28     	; 0x211a <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    20fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2100:	89 83       	std	Y+1, r24	; 0x01
    2102:	0b c0       	rjmp	.+22     	; 0x211a <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2104:	8b 81       	ldd	r24, Y+3	; 0x03
    2106:	80 5c       	subi	r24, 0xC0	; 192
    2108:	89 83       	std	Y+1, r24	; 0x01
    210a:	07 c0       	rjmp	.+14     	; 0x211a <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    210c:	8b 81       	ldd	r24, Y+3	; 0x03
    210e:	80 5f       	subi	r24, 0xF0	; 240
    2110:	89 83       	std	Y+1, r24	; 0x01
    2112:	03 c0       	rjmp	.+6      	; 0x211a <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2114:	8b 81       	ldd	r24, Y+3	; 0x03
    2116:	80 5b       	subi	r24, 0xB0	; 176
    2118:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    211a:	89 81       	ldd	r24, Y+1	; 0x01
    211c:	80 68       	ori	r24, 0x80	; 128
    211e:	0e 94 44 0c 	call	0x1888	; 0x1888 <LCD_sendCommand>
}
    2122:	0f 90       	pop	r0
    2124:	0f 90       	pop	r0
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
    212c:	cf 91       	pop	r28
    212e:	df 91       	pop	r29
    2130:	08 95       	ret

00002132 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2132:	df 93       	push	r29
    2134:	cf 93       	push	r28
    2136:	00 d0       	rcall	.+0      	; 0x2138 <LCD_displayStringRowColumn+0x6>
    2138:	00 d0       	rcall	.+0      	; 0x213a <LCD_displayStringRowColumn+0x8>
    213a:	cd b7       	in	r28, 0x3d	; 61
    213c:	de b7       	in	r29, 0x3e	; 62
    213e:	89 83       	std	Y+1, r24	; 0x01
    2140:	6a 83       	std	Y+2, r22	; 0x02
    2142:	5c 83       	std	Y+4, r21	; 0x04
    2144:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2146:	89 81       	ldd	r24, Y+1	; 0x01
    2148:	6a 81       	ldd	r22, Y+2	; 0x02
    214a:	0e 94 57 10 	call	0x20ae	; 0x20ae <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    214e:	8b 81       	ldd	r24, Y+3	; 0x03
    2150:	9c 81       	ldd	r25, Y+4	; 0x04
    2152:	0e 94 2e 10 	call	0x205c	; 0x205c <LCD_displayString>
}
    2156:	0f 90       	pop	r0
    2158:	0f 90       	pop	r0
    215a:	0f 90       	pop	r0
    215c:	0f 90       	pop	r0
    215e:	cf 91       	pop	r28
    2160:	df 91       	pop	r29
    2162:	08 95       	ret

00002164 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2164:	df 93       	push	r29
    2166:	cf 93       	push	r28
    2168:	cd b7       	in	r28, 0x3d	; 61
    216a:	de b7       	in	r29, 0x3e	; 62
    216c:	62 97       	sbiw	r28, 0x12	; 18
    216e:	0f b6       	in	r0, 0x3f	; 63
    2170:	f8 94       	cli
    2172:	de bf       	out	0x3e, r29	; 62
    2174:	0f be       	out	0x3f, r0	; 63
    2176:	cd bf       	out	0x3d, r28	; 61
    2178:	9a 8b       	std	Y+18, r25	; 0x12
    217a:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    217c:	89 89       	ldd	r24, Y+17	; 0x11
    217e:	9a 89       	ldd	r25, Y+18	; 0x12
    2180:	9e 01       	movw	r18, r28
    2182:	2f 5f       	subi	r18, 0xFF	; 255
    2184:	3f 4f       	sbci	r19, 0xFF	; 255
    2186:	b9 01       	movw	r22, r18
    2188:	4a e0       	ldi	r20, 0x0A	; 10
    218a:	50 e0       	ldi	r21, 0x00	; 0
    218c:	0e 94 af 11 	call	0x235e	; 0x235e <itoa>
   LCD_displayString(buff); /* Display the string */
    2190:	ce 01       	movw	r24, r28
    2192:	01 96       	adiw	r24, 0x01	; 1
    2194:	0e 94 2e 10 	call	0x205c	; 0x205c <LCD_displayString>
}
    2198:	62 96       	adiw	r28, 0x12	; 18
    219a:	0f b6       	in	r0, 0x3f	; 63
    219c:	f8 94       	cli
    219e:	de bf       	out	0x3e, r29	; 62
    21a0:	0f be       	out	0x3f, r0	; 63
    21a2:	cd bf       	out	0x3d, r28	; 61
    21a4:	cf 91       	pop	r28
    21a6:	df 91       	pop	r29
    21a8:	08 95       	ret

000021aa <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    21aa:	df 93       	push	r29
    21ac:	cf 93       	push	r28
    21ae:	cd b7       	in	r28, 0x3d	; 61
    21b0:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	0e 94 44 0c 	call	0x1888	; 0x1888 <LCD_sendCommand>
}
    21b8:	cf 91       	pop	r28
    21ba:	df 91       	pop	r29
    21bc:	08 95       	ret

000021be <main>:
********************************************************************************/



int main (void)
{
    21be:	df 93       	push	r29
    21c0:	cf 93       	push	r28
    21c2:	cd b7       	in	r28, 0x3d	; 61
    21c4:	de b7       	in	r29, 0x3e	; 62
    21c6:	2f 97       	sbiw	r28, 0x0f	; 15
    21c8:	0f b6       	in	r0, 0x3f	; 63
    21ca:	f8 94       	cli
    21cc:	de bf       	out	0x3e, r29	; 62
    21ce:	0f be       	out	0x3f, r0	; 63
    21d0:	cd bf       	out	0x3d, r28	; 61


   uint8 key = 'a';
    21d2:	81 e6       	ldi	r24, 0x61	; 97
    21d4:	89 83       	std	Y+1, r24	; 0x01
			StopBit_1,
			DataFrame_8Bits,
			BaudRate_9600,
			RX_InterruptDisable,
			TX_InterruptDisable
	};
    21d6:	ce 01       	movw	r24, r28
    21d8:	02 96       	adiw	r24, 0x02	; 2
    21da:	9c 87       	std	Y+12, r25	; 0x0c
    21dc:	8b 87       	std	Y+11, r24	; 0x0b
    21de:	e8 e6       	ldi	r30, 0x68	; 104
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	fe 87       	std	Y+14, r31	; 0x0e
    21e4:	ed 87       	std	Y+13, r30	; 0x0d
    21e6:	f9 e0       	ldi	r31, 0x09	; 9
    21e8:	ff 87       	std	Y+15, r31	; 0x0f
    21ea:	ed 85       	ldd	r30, Y+13	; 0x0d
    21ec:	fe 85       	ldd	r31, Y+14	; 0x0e
    21ee:	00 80       	ld	r0, Z
    21f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    21f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    21f4:	01 96       	adiw	r24, 0x01	; 1
    21f6:	9e 87       	std	Y+14, r25	; 0x0e
    21f8:	8d 87       	std	Y+13, r24	; 0x0d
    21fa:	eb 85       	ldd	r30, Y+11	; 0x0b
    21fc:	fc 85       	ldd	r31, Y+12	; 0x0c
    21fe:	00 82       	st	Z, r0
    2200:	8b 85       	ldd	r24, Y+11	; 0x0b
    2202:	9c 85       	ldd	r25, Y+12	; 0x0c
    2204:	01 96       	adiw	r24, 0x01	; 1
    2206:	9c 87       	std	Y+12, r25	; 0x0c
    2208:	8b 87       	std	Y+11, r24	; 0x0b
    220a:	9f 85       	ldd	r25, Y+15	; 0x0f
    220c:	91 50       	subi	r25, 0x01	; 1
    220e:	9f 87       	std	Y+15, r25	; 0x0f
    2210:	ef 85       	ldd	r30, Y+15	; 0x0f
    2212:	ee 23       	and	r30, r30
    2214:	51 f7       	brne	.-44     	; 0x21ea <main+0x2c>

	/*LED Init*/
	GPIO_setupPinDirection(PORTB_ID, PIN0_ID, PIN_OUTPUT);
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	60 e0       	ldi	r22, 0x00	; 0
    221a:	41 e0       	ldi	r20, 0x01	; 1
    221c:	0e 94 f5 08 	call	0x11ea	; 0x11ea <GPIO_setupPinDirection>
	GPIO_writePin(PORTB_ID, PIN0_ID, LOGIC_LOW);
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	60 e0       	ldi	r22, 0x00	; 0
    2224:	40 e0       	ldi	r20, 0x00	; 0
    2226:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <GPIO_writePin>

	LCD_init();
    222a:	0e 94 21 0c 	call	0x1842	; 0x1842 <LCD_init>
	UART_Init(&UART_Config_Struct);
    222e:	ce 01       	movw	r24, r28
    2230:	02 96       	adiw	r24, 0x02	; 2
    2232:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <UART_Init>

	/*Enable I-Bit*/
	SET_BIT(SREG,7);
    2236:	af e5       	ldi	r26, 0x5F	; 95
    2238:	b0 e0       	ldi	r27, 0x00	; 0
    223a:	ef e5       	ldi	r30, 0x5F	; 95
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	80 81       	ld	r24, Z
    2240:	80 68       	ori	r24, 0x80	; 128
    2242:	8c 93       	st	X, r24
	while(1)
	{



		key = UART_receiveByte();
    2244:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <UART_receiveByte>
    2248:	89 83       	std	Y+1, r24	; 0x01

	    LCD_displayCharacter(key);
    224a:	89 81       	ldd	r24, Y+1	; 0x01
    224c:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <LCD_displayCharacter>


	     if ( key == 'b')
    2250:	89 81       	ldd	r24, Y+1	; 0x01
    2252:	82 36       	cpi	r24, 0x62	; 98
    2254:	31 f4       	brne	.+12     	; 0x2262 <main+0xa4>
	     {
	     	GPIO_writePin(PORTB_ID, PIN0_ID, LOGIC_HIGH);
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	60 e0       	ldi	r22, 0x00	; 0
    225a:	41 e0       	ldi	r20, 0x01	; 1
    225c:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <GPIO_writePin>
    2260:	f1 cf       	rjmp	.-30     	; 0x2244 <main+0x86>
	     }
	     else
	     {
	     	GPIO_writePin(PORTB_ID, PIN0_ID, LOGIC_LOW);
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	60 e0       	ldi	r22, 0x00	; 0
    2266:	40 e0       	ldi	r20, 0x00	; 0
    2268:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <GPIO_writePin>
    226c:	eb cf       	rjmp	.-42     	; 0x2244 <main+0x86>

0000226e <__mulsi3>:
    226e:	62 9f       	mul	r22, r18
    2270:	d0 01       	movw	r26, r0
    2272:	73 9f       	mul	r23, r19
    2274:	f0 01       	movw	r30, r0
    2276:	82 9f       	mul	r24, r18
    2278:	e0 0d       	add	r30, r0
    227a:	f1 1d       	adc	r31, r1
    227c:	64 9f       	mul	r22, r20
    227e:	e0 0d       	add	r30, r0
    2280:	f1 1d       	adc	r31, r1
    2282:	92 9f       	mul	r25, r18
    2284:	f0 0d       	add	r31, r0
    2286:	83 9f       	mul	r24, r19
    2288:	f0 0d       	add	r31, r0
    228a:	74 9f       	mul	r23, r20
    228c:	f0 0d       	add	r31, r0
    228e:	65 9f       	mul	r22, r21
    2290:	f0 0d       	add	r31, r0
    2292:	99 27       	eor	r25, r25
    2294:	72 9f       	mul	r23, r18
    2296:	b0 0d       	add	r27, r0
    2298:	e1 1d       	adc	r30, r1
    229a:	f9 1f       	adc	r31, r25
    229c:	63 9f       	mul	r22, r19
    229e:	b0 0d       	add	r27, r0
    22a0:	e1 1d       	adc	r30, r1
    22a2:	f9 1f       	adc	r31, r25
    22a4:	bd 01       	movw	r22, r26
    22a6:	cf 01       	movw	r24, r30
    22a8:	11 24       	eor	r1, r1
    22aa:	08 95       	ret

000022ac <__udivmodsi4>:
    22ac:	a1 e2       	ldi	r26, 0x21	; 33
    22ae:	1a 2e       	mov	r1, r26
    22b0:	aa 1b       	sub	r26, r26
    22b2:	bb 1b       	sub	r27, r27
    22b4:	fd 01       	movw	r30, r26
    22b6:	0d c0       	rjmp	.+26     	; 0x22d2 <__udivmodsi4_ep>

000022b8 <__udivmodsi4_loop>:
    22b8:	aa 1f       	adc	r26, r26
    22ba:	bb 1f       	adc	r27, r27
    22bc:	ee 1f       	adc	r30, r30
    22be:	ff 1f       	adc	r31, r31
    22c0:	a2 17       	cp	r26, r18
    22c2:	b3 07       	cpc	r27, r19
    22c4:	e4 07       	cpc	r30, r20
    22c6:	f5 07       	cpc	r31, r21
    22c8:	20 f0       	brcs	.+8      	; 0x22d2 <__udivmodsi4_ep>
    22ca:	a2 1b       	sub	r26, r18
    22cc:	b3 0b       	sbc	r27, r19
    22ce:	e4 0b       	sbc	r30, r20
    22d0:	f5 0b       	sbc	r31, r21

000022d2 <__udivmodsi4_ep>:
    22d2:	66 1f       	adc	r22, r22
    22d4:	77 1f       	adc	r23, r23
    22d6:	88 1f       	adc	r24, r24
    22d8:	99 1f       	adc	r25, r25
    22da:	1a 94       	dec	r1
    22dc:	69 f7       	brne	.-38     	; 0x22b8 <__udivmodsi4_loop>
    22de:	60 95       	com	r22
    22e0:	70 95       	com	r23
    22e2:	80 95       	com	r24
    22e4:	90 95       	com	r25
    22e6:	9b 01       	movw	r18, r22
    22e8:	ac 01       	movw	r20, r24
    22ea:	bd 01       	movw	r22, r26
    22ec:	cf 01       	movw	r24, r30
    22ee:	08 95       	ret

000022f0 <__prologue_saves__>:
    22f0:	2f 92       	push	r2
    22f2:	3f 92       	push	r3
    22f4:	4f 92       	push	r4
    22f6:	5f 92       	push	r5
    22f8:	6f 92       	push	r6
    22fa:	7f 92       	push	r7
    22fc:	8f 92       	push	r8
    22fe:	9f 92       	push	r9
    2300:	af 92       	push	r10
    2302:	bf 92       	push	r11
    2304:	cf 92       	push	r12
    2306:	df 92       	push	r13
    2308:	ef 92       	push	r14
    230a:	ff 92       	push	r15
    230c:	0f 93       	push	r16
    230e:	1f 93       	push	r17
    2310:	cf 93       	push	r28
    2312:	df 93       	push	r29
    2314:	cd b7       	in	r28, 0x3d	; 61
    2316:	de b7       	in	r29, 0x3e	; 62
    2318:	ca 1b       	sub	r28, r26
    231a:	db 0b       	sbc	r29, r27
    231c:	0f b6       	in	r0, 0x3f	; 63
    231e:	f8 94       	cli
    2320:	de bf       	out	0x3e, r29	; 62
    2322:	0f be       	out	0x3f, r0	; 63
    2324:	cd bf       	out	0x3d, r28	; 61
    2326:	09 94       	ijmp

00002328 <__epilogue_restores__>:
    2328:	2a 88       	ldd	r2, Y+18	; 0x12
    232a:	39 88       	ldd	r3, Y+17	; 0x11
    232c:	48 88       	ldd	r4, Y+16	; 0x10
    232e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2330:	6e 84       	ldd	r6, Y+14	; 0x0e
    2332:	7d 84       	ldd	r7, Y+13	; 0x0d
    2334:	8c 84       	ldd	r8, Y+12	; 0x0c
    2336:	9b 84       	ldd	r9, Y+11	; 0x0b
    2338:	aa 84       	ldd	r10, Y+10	; 0x0a
    233a:	b9 84       	ldd	r11, Y+9	; 0x09
    233c:	c8 84       	ldd	r12, Y+8	; 0x08
    233e:	df 80       	ldd	r13, Y+7	; 0x07
    2340:	ee 80       	ldd	r14, Y+6	; 0x06
    2342:	fd 80       	ldd	r15, Y+5	; 0x05
    2344:	0c 81       	ldd	r16, Y+4	; 0x04
    2346:	1b 81       	ldd	r17, Y+3	; 0x03
    2348:	aa 81       	ldd	r26, Y+2	; 0x02
    234a:	b9 81       	ldd	r27, Y+1	; 0x01
    234c:	ce 0f       	add	r28, r30
    234e:	d1 1d       	adc	r29, r1
    2350:	0f b6       	in	r0, 0x3f	; 63
    2352:	f8 94       	cli
    2354:	de bf       	out	0x3e, r29	; 62
    2356:	0f be       	out	0x3f, r0	; 63
    2358:	cd bf       	out	0x3d, r28	; 61
    235a:	ed 01       	movw	r28, r26
    235c:	08 95       	ret

0000235e <itoa>:
    235e:	fb 01       	movw	r30, r22
    2360:	9f 01       	movw	r18, r30
    2362:	e8 94       	clt
    2364:	42 30       	cpi	r20, 0x02	; 2
    2366:	c4 f0       	brlt	.+48     	; 0x2398 <itoa+0x3a>
    2368:	45 32       	cpi	r20, 0x25	; 37
    236a:	b4 f4       	brge	.+44     	; 0x2398 <itoa+0x3a>
    236c:	4a 30       	cpi	r20, 0x0A	; 10
    236e:	29 f4       	brne	.+10     	; 0x237a <itoa+0x1c>
    2370:	97 fb       	bst	r25, 7
    2372:	1e f4       	brtc	.+6      	; 0x237a <itoa+0x1c>
    2374:	90 95       	com	r25
    2376:	81 95       	neg	r24
    2378:	9f 4f       	sbci	r25, 0xFF	; 255
    237a:	64 2f       	mov	r22, r20
    237c:	77 27       	eor	r23, r23
    237e:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__udivmodhi4>
    2382:	80 5d       	subi	r24, 0xD0	; 208
    2384:	8a 33       	cpi	r24, 0x3A	; 58
    2386:	0c f0       	brlt	.+2      	; 0x238a <itoa+0x2c>
    2388:	89 5d       	subi	r24, 0xD9	; 217
    238a:	81 93       	st	Z+, r24
    238c:	cb 01       	movw	r24, r22
    238e:	00 97       	sbiw	r24, 0x00	; 0
    2390:	a1 f7       	brne	.-24     	; 0x237a <itoa+0x1c>
    2392:	16 f4       	brtc	.+4      	; 0x2398 <itoa+0x3a>
    2394:	5d e2       	ldi	r21, 0x2D	; 45
    2396:	51 93       	st	Z+, r21
    2398:	10 82       	st	Z, r1
    239a:	c9 01       	movw	r24, r18
    239c:	0c 94 d0 11 	jmp	0x23a0	; 0x23a0 <strrev>

000023a0 <strrev>:
    23a0:	dc 01       	movw	r26, r24
    23a2:	fc 01       	movw	r30, r24
    23a4:	67 2f       	mov	r22, r23
    23a6:	71 91       	ld	r23, Z+
    23a8:	77 23       	and	r23, r23
    23aa:	e1 f7       	brne	.-8      	; 0x23a4 <strrev+0x4>
    23ac:	32 97       	sbiw	r30, 0x02	; 2
    23ae:	04 c0       	rjmp	.+8      	; 0x23b8 <strrev+0x18>
    23b0:	7c 91       	ld	r23, X
    23b2:	6d 93       	st	X+, r22
    23b4:	70 83       	st	Z, r23
    23b6:	62 91       	ld	r22, -Z
    23b8:	ae 17       	cp	r26, r30
    23ba:	bf 07       	cpc	r27, r31
    23bc:	c8 f3       	brcs	.-14     	; 0x23b0 <strrev+0x10>
    23be:	08 95       	ret

000023c0 <__udivmodhi4>:
    23c0:	aa 1b       	sub	r26, r26
    23c2:	bb 1b       	sub	r27, r27
    23c4:	51 e1       	ldi	r21, 0x11	; 17
    23c6:	07 c0       	rjmp	.+14     	; 0x23d6 <__udivmodhi4_ep>

000023c8 <__udivmodhi4_loop>:
    23c8:	aa 1f       	adc	r26, r26
    23ca:	bb 1f       	adc	r27, r27
    23cc:	a6 17       	cp	r26, r22
    23ce:	b7 07       	cpc	r27, r23
    23d0:	10 f0       	brcs	.+4      	; 0x23d6 <__udivmodhi4_ep>
    23d2:	a6 1b       	sub	r26, r22
    23d4:	b7 0b       	sbc	r27, r23

000023d6 <__udivmodhi4_ep>:
    23d6:	88 1f       	adc	r24, r24
    23d8:	99 1f       	adc	r25, r25
    23da:	5a 95       	dec	r21
    23dc:	a9 f7       	brne	.-22     	; 0x23c8 <__udivmodhi4_loop>
    23de:	80 95       	com	r24
    23e0:	90 95       	com	r25
    23e2:	bc 01       	movw	r22, r24
    23e4:	cd 01       	movw	r24, r26
    23e6:	08 95       	ret

000023e8 <_exit>:
    23e8:	f8 94       	cli

000023ea <__stop_program>:
    23ea:	ff cf       	rjmp	.-2      	; 0x23ea <__stop_program>
