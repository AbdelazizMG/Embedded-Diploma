
Final_Projcet_II.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000029e6  00002a7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  00800078  00800078  00002a92  2**0
                  ALLOC
  3 .stab         00002e44  00000000  00000000  00002a94  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a67  00000000  00000000  000058d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000733f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000747f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000075ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009238  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a123  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000aed0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b030  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b2bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ba8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 01 0b 	jmp	0x1602	; 0x1602 <__vector_3>
      10:	0c 94 ce 0a 	jmp	0x159c	; 0x159c <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 68 0a 	jmp	0x14d0	; 0x14d0 <__vector_6>
      1c:	0c 94 9b 0a 	jmp	0x1536	; 0x1536 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 02 0a 	jmp	0x1404	; 0x1404 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 35 0a 	jmp	0x146a	; 0x146a <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ee       	ldi	r30, 0xE6	; 230
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 39       	cpi	r26, 0x96	; 150
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f7 13 	call	0x27ee	; 0x27ee <main>
      8a:	0c 94 f1 14 	jmp	0x29e2	; 0x29e2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ba 14 	jmp	0x2974	; 0x2974 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d6 14 	jmp	0x29ac	; 0x29ac <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c6 14 	jmp	0x298c	; 0x298c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e2 14 	jmp	0x29c4	; 0x29c4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c6 14 	jmp	0x298c	; 0x298c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e2 14 	jmp	0x29c4	; 0x29c4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ba 14 	jmp	0x2974	; 0x2974 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d6 14 	jmp	0x29ac	; 0x29ac <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c6 14 	jmp	0x298c	; 0x298c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e2 14 	jmp	0x29c4	; 0x29c4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c6 14 	jmp	0x298c	; 0x298c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e2 14 	jmp	0x29c4	; 0x29c4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c6 14 	jmp	0x298c	; 0x298c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e2 14 	jmp	0x29c4	; 0x29c4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ca 14 	jmp	0x2994	; 0x2994 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e6 14 	jmp	0x29cc	; 0x29cc <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <BUZZER_init>:
* Return value:       None
* Description:        Define buzzer pin as output pin
*                     Saves port and pin in global variables defined above
********************************************************************************/
void BUZZER_init(uint8 port , uint8 pin)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <BUZZER_init+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	89 83       	std	Y+1, r24	; 0x01
     b52:	6a 83       	std	Y+2, r22	; 0x02
	/*User Error*/
    if( port > 3 || pin > 7 )
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	84 30       	cpi	r24, 0x04	; 4
     b58:	70 f4       	brcc	.+28     	; 0xb76 <BUZZER_init+0x30>
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	58 f4       	brcc	.+22     	; 0xb76 <BUZZER_init+0x30>

    }
    else
    {
       /*Setup Pin direction as output pin*/
       GPIO_setupPinDirection(port, pin, PIN_OUTPUT);
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	6a 81       	ldd	r22, Y+2	; 0x02
     b64:	41 e0       	ldi	r20, 0x01	; 1
     b66:	0e 94 cb 10 	call	0x2196	; 0x2196 <GPIO_setupPinDirection>

       /*Saves the port and pin in global variables to be used in functions below*/
       g_buzzer_port = port;
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	80 93 78 00 	sts	0x0078, r24
       g_buzzer_pin = pin;
     b70:	8a 81       	ldd	r24, Y+2	; 0x02
     b72:	80 93 79 00 	sts	0x0079, r24
    }
}
     b76:	0f 90       	pop	r0
     b78:	0f 90       	pop	r0
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <BUZZER_ON>:
* Parameters (out):   None
* Return value:       None
* Description:        Make The Buzzer Beebs
********************************************************************************/
void BUZZER_ON(void)
{
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
   /*Make the Buzzer Beebs*/
   GPIO_writePin(g_buzzer_port, g_buzzer_pin, LOGIC_HIGH);
     b88:	80 91 78 00 	lds	r24, 0x0078
     b8c:	90 91 79 00 	lds	r25, 0x0079
     b90:	69 2f       	mov	r22, r25
     b92:	41 e0       	ldi	r20, 0x01	; 1
     b94:	0e 94 b6 11 	call	0x236c	; 0x236c <GPIO_writePin>
}
     b98:	cf 91       	pop	r28
     b9a:	df 91       	pop	r29
     b9c:	08 95       	ret

00000b9e <BUZZER_OFF>:
* Parameters (out):   None
* Return value:       None
* Description:        Make The Buzzer Stop
********************************************************************************/
void BUZZER_OFF(void)
{
     b9e:	df 93       	push	r29
     ba0:	cf 93       	push	r28
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
	/*Make the Buzzer Stops*/
	 GPIO_writePin(g_buzzer_port, g_buzzer_pin, LOGIC_LOW);
     ba6:	80 91 78 00 	lds	r24, 0x0078
     baa:	90 91 79 00 	lds	r25, 0x0079
     bae:	69 2f       	mov	r22, r25
     bb0:	40 e0       	ldi	r20, 0x00	; 0
     bb2:	0e 94 b6 11 	call	0x236c	; 0x236c <GPIO_writePin>
}
     bb6:	cf 91       	pop	r28
     bb8:	df 91       	pop	r29
     bba:	08 95       	ret

00000bbc <DC_MOTOR_Init>:
* Parameters (out):   None
* Return value:       None
* Description:        Initialize the DC Motor
********************************************************************************/
void DC_MOTOR_Init(void)
{
     bbc:	df 93       	push	r29
     bbe:	cf 93       	push	r28
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
	/*Set DC Motors Pins as Output PINS*/
	GPIO_setupPinDirection(DC_Motor_PORT, DC_Motor_PINA, PIN_OUTPUT);
     bc4:	83 e0       	ldi	r24, 0x03	; 3
     bc6:	62 e0       	ldi	r22, 0x02	; 2
     bc8:	41 e0       	ldi	r20, 0x01	; 1
     bca:	0e 94 cb 10 	call	0x2196	; 0x2196 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_Motor_PORT, DC_Motor_PINB, PIN_OUTPUT);
     bce:	83 e0       	ldi	r24, 0x03	; 3
     bd0:	63 e0       	ldi	r22, 0x03	; 3
     bd2:	41 e0       	ldi	r20, 0x01	; 1
     bd4:	0e 94 cb 10 	call	0x2196	; 0x2196 <GPIO_setupPinDirection>

	/*Stop DC Motor at the beginning*/
	GPIO_writePin(DC_Motor_PORT,DC_Motor_PINA,LOGIC_LOW);
     bd8:	83 e0       	ldi	r24, 0x03	; 3
     bda:	62 e0       	ldi	r22, 0x02	; 2
     bdc:	40 e0       	ldi	r20, 0x00	; 0
     bde:	0e 94 b6 11 	call	0x236c	; 0x236c <GPIO_writePin>
	GPIO_writePin(DC_Motor_PORT,DC_Motor_PINB,LOGIC_LOW);
     be2:	83 e0       	ldi	r24, 0x03	; 3
     be4:	63 e0       	ldi	r22, 0x03	; 3
     be6:	40 e0       	ldi	r20, 0x00	; 0
     be8:	0e 94 b6 11 	call	0x236c	; 0x236c <GPIO_writePin>
}
     bec:	cf 91       	pop	r28
     bee:	df 91       	pop	r29
     bf0:	08 95       	ret

00000bf2 <DC_MOTOR_Rotate>:
* Description:        Rotate the DC Depending on the Motor State
*                     Send the required PWM Duty Cycle based on the required
*                     speed precentage needed.
********************************************************************************/
void DC_MOTOR_Rotate(DC_Motor_State state , uint8 speed)
{
     bf2:	df 93       	push	r29
     bf4:	cf 93       	push	r28
     bf6:	00 d0       	rcall	.+0      	; 0xbf8 <DC_MOTOR_Rotate+0x6>
     bf8:	00 d0       	rcall	.+0      	; 0xbfa <DC_MOTOR_Rotate+0x8>
     bfa:	0f 92       	push	r0
     bfc:	cd b7       	in	r28, 0x3d	; 61
     bfe:	de b7       	in	r29, 0x3e	; 62
     c00:	8a 83       	std	Y+2, r24	; 0x02
     c02:	6b 83       	std	Y+3, r22	; 0x03
	/*Variable to convert the speed precentage into a duty cycle*/
	uint8 temp_duty_cycle;
    switch ( state )
     c04:	8a 81       	ldd	r24, Y+2	; 0x02
     c06:	28 2f       	mov	r18, r24
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	3d 83       	std	Y+5, r19	; 0x05
     c0c:	2c 83       	std	Y+4, r18	; 0x04
     c0e:	8c 81       	ldd	r24, Y+4	; 0x04
     c10:	9d 81       	ldd	r25, Y+5	; 0x05
     c12:	81 30       	cpi	r24, 0x01	; 1
     c14:	91 05       	cpc	r25, r1
     c16:	a1 f0       	breq	.+40     	; 0xc40 <DC_MOTOR_Rotate+0x4e>
     c18:	2c 81       	ldd	r18, Y+4	; 0x04
     c1a:	3d 81       	ldd	r19, Y+5	; 0x05
     c1c:	22 30       	cpi	r18, 0x02	; 2
     c1e:	31 05       	cpc	r19, r1
     c20:	d1 f0       	breq	.+52     	; 0xc56 <DC_MOTOR_Rotate+0x64>
     c22:	8c 81       	ldd	r24, Y+4	; 0x04
     c24:	9d 81       	ldd	r25, Y+5	; 0x05
     c26:	00 97       	sbiw	r24, 0x00	; 0
     c28:	01 f5       	brne	.+64     	; 0xc6a <DC_MOTOR_Rotate+0x78>
    {
       case Stop : GPIO_writePin(DC_Motor_PORT,DC_Motor_PINA,LOGIC_LOW);
     c2a:	83 e0       	ldi	r24, 0x03	; 3
     c2c:	62 e0       	ldi	r22, 0x02	; 2
     c2e:	40 e0       	ldi	r20, 0x00	; 0
     c30:	0e 94 b6 11 	call	0x236c	; 0x236c <GPIO_writePin>
                   GPIO_writePin(DC_Motor_PORT,DC_Motor_PINB,LOGIC_LOW);
     c34:	83 e0       	ldi	r24, 0x03	; 3
     c36:	63 e0       	ldi	r22, 0x03	; 3
     c38:	40 e0       	ldi	r20, 0x00	; 0
     c3a:	0e 94 b6 11 	call	0x236c	; 0x236c <GPIO_writePin>
     c3e:	15 c0       	rjmp	.+42     	; 0xc6a <DC_MOTOR_Rotate+0x78>
                   break;
       case CW:
    	           GPIO_writePin(DC_Motor_PORT,DC_Motor_PINA,LOGIC_HIGH);
     c40:	83 e0       	ldi	r24, 0x03	; 3
     c42:	62 e0       	ldi	r22, 0x02	; 2
     c44:	41 e0       	ldi	r20, 0x01	; 1
     c46:	0e 94 b6 11 	call	0x236c	; 0x236c <GPIO_writePin>
    	           GPIO_writePin(DC_Motor_PORT,DC_Motor_PINB,LOGIC_LOW);
     c4a:	83 e0       	ldi	r24, 0x03	; 3
     c4c:	63 e0       	ldi	r22, 0x03	; 3
     c4e:	40 e0       	ldi	r20, 0x00	; 0
     c50:	0e 94 b6 11 	call	0x236c	; 0x236c <GPIO_writePin>
     c54:	0a c0       	rjmp	.+20     	; 0xc6a <DC_MOTOR_Rotate+0x78>
    	           break;
       case CCW:
    	           GPIO_writePin(DC_Motor_PORT,DC_Motor_PINA,LOGIC_LOW);
     c56:	83 e0       	ldi	r24, 0x03	; 3
     c58:	62 e0       	ldi	r22, 0x02	; 2
     c5a:	40 e0       	ldi	r20, 0x00	; 0
     c5c:	0e 94 b6 11 	call	0x236c	; 0x236c <GPIO_writePin>
    	           GPIO_writePin(DC_Motor_PORT,DC_Motor_PINB,LOGIC_HIGH);
     c60:	83 e0       	ldi	r24, 0x03	; 3
     c62:	63 e0       	ldi	r22, 0x03	; 3
     c64:	41 e0       	ldi	r20, 0x01	; 1
     c66:	0e 94 b6 11 	call	0x236c	; 0x236c <GPIO_writePin>
    	           break;
    }
    temp_duty_cycle = (speed * 255) / 100 ;
     c6a:	8b 81       	ldd	r24, Y+3	; 0x03
     c6c:	48 2f       	mov	r20, r24
     c6e:	50 e0       	ldi	r21, 0x00	; 0
     c70:	ca 01       	movw	r24, r20
     c72:	9c 01       	movw	r18, r24
     c74:	22 0f       	add	r18, r18
     c76:	33 1f       	adc	r19, r19
     c78:	c9 01       	movw	r24, r18
     c7a:	96 95       	lsr	r25
     c7c:	98 2f       	mov	r25, r24
     c7e:	88 27       	eor	r24, r24
     c80:	97 95       	ror	r25
     c82:	87 95       	ror	r24
     c84:	82 1b       	sub	r24, r18
     c86:	93 0b       	sbc	r25, r19
     c88:	84 0f       	add	r24, r20
     c8a:	95 1f       	adc	r25, r21
     c8c:	24 e6       	ldi	r18, 0x64	; 100
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	b9 01       	movw	r22, r18
     c92:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
     c96:	cb 01       	movw	r24, r22
     c98:	89 83       	std	Y+1, r24	; 0x01
    PWM_Timer0_Start(temp_duty_cycle);
     c9a:	89 81       	ldd	r24, Y+1	; 0x01
     c9c:	0e 94 c2 09 	call	0x1384	; 0x1384 <PWM_Timer0_Start>
}
     ca0:	0f 90       	pop	r0
     ca2:	0f 90       	pop	r0
     ca4:	0f 90       	pop	r0
     ca6:	0f 90       	pop	r0
     ca8:	0f 90       	pop	r0
     caa:	cf 91       	pop	r28
     cac:	df 91       	pop	r29
     cae:	08 95       	ret

00000cb0 <TWI_init>:
* Parameters (out):   None
* Return value:       None
* Description:        Initialize the I2C module.
********************************************************************************/
void TWI_init(const TWI_ConfigType * Config_Ptr)
{
     cb0:	df 93       	push	r29
     cb2:	cf 93       	push	r28
     cb4:	cd b7       	in	r28, 0x3d	; 61
     cb6:	de b7       	in	r29, 0x3e	; 62
     cb8:	28 97       	sbiw	r28, 0x08	; 8
     cba:	0f b6       	in	r0, 0x3f	; 63
     cbc:	f8 94       	cli
     cbe:	de bf       	out	0x3e, r29	; 62
     cc0:	0f be       	out	0x3f, r0	; 63
     cc2:	cd bf       	out	0x3d, r28	; 61
     cc4:	9a 83       	std	Y+2, r25	; 0x02
     cc6:	89 83       	std	Y+1, r24	; 0x01
    /*Enable or Disable the TWI Module*/
   switch ( Config_Ptr -> mode )
     cc8:	e9 81       	ldd	r30, Y+1	; 0x01
     cca:	fa 81       	ldd	r31, Y+2	; 0x02
     ccc:	80 81       	ld	r24, Z
     cce:	28 2f       	mov	r18, r24
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	38 87       	std	Y+8, r19	; 0x08
     cd4:	2f 83       	std	Y+7, r18	; 0x07
     cd6:	8f 81       	ldd	r24, Y+7	; 0x07
     cd8:	98 85       	ldd	r25, Y+8	; 0x08
     cda:	00 97       	sbiw	r24, 0x00	; 0
     cdc:	31 f0       	breq	.+12     	; 0xcea <TWI_init+0x3a>
     cde:	2f 81       	ldd	r18, Y+7	; 0x07
     ce0:	38 85       	ldd	r19, Y+8	; 0x08
     ce2:	21 30       	cpi	r18, 0x01	; 1
     ce4:	31 05       	cpc	r19, r1
     ce6:	49 f0       	breq	.+18     	; 0xcfa <TWI_init+0x4a>
     ce8:	0f c0       	rjmp	.+30     	; 0xd08 <TWI_init+0x58>
   {
      case TWI_Disable: CLEAR_BIT(TWCR,TWEN);
     cea:	a6 e5       	ldi	r26, 0x56	; 86
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e6 e5       	ldi	r30, 0x56	; 86
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	8b 7f       	andi	r24, 0xFB	; 251
     cf6:	8c 93       	st	X, r24
     cf8:	07 c0       	rjmp	.+14     	; 0xd08 <TWI_init+0x58>
    	            break;
      case TWI_Enable:  SET_BIT(TWCR,TWEN);
     cfa:	a6 e5       	ldi	r26, 0x56	; 86
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e6 e5       	ldi	r30, 0x56	; 86
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	84 60       	ori	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
    	            break;
   }

   /*Enable or Disable Interrupt for I2C*/
   switch( Config_Ptr ->interrupt_mode)
     d08:	e9 81       	ldd	r30, Y+1	; 0x01
     d0a:	fa 81       	ldd	r31, Y+2	; 0x02
     d0c:	81 81       	ldd	r24, Z+1	; 0x01
     d0e:	28 2f       	mov	r18, r24
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	3e 83       	std	Y+6, r19	; 0x06
     d14:	2d 83       	std	Y+5, r18	; 0x05
     d16:	8d 81       	ldd	r24, Y+5	; 0x05
     d18:	9e 81       	ldd	r25, Y+6	; 0x06
     d1a:	00 97       	sbiw	r24, 0x00	; 0
     d1c:	31 f0       	breq	.+12     	; 0xd2a <TWI_init+0x7a>
     d1e:	2d 81       	ldd	r18, Y+5	; 0x05
     d20:	3e 81       	ldd	r19, Y+6	; 0x06
     d22:	21 30       	cpi	r18, 0x01	; 1
     d24:	31 05       	cpc	r19, r1
     d26:	49 f0       	breq	.+18     	; 0xd3a <TWI_init+0x8a>
     d28:	0f c0       	rjmp	.+30     	; 0xd48 <TWI_init+0x98>
   {
     case Interrupt_Disable:   CLEAR_BIT(TWCR,TWIE);
     d2a:	a6 e5       	ldi	r26, 0x56	; 86
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e6 e5       	ldi	r30, 0x56	; 86
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	8e 7f       	andi	r24, 0xFE	; 254
     d36:	8c 93       	st	X, r24
     d38:	07 c0       	rjmp	.+14     	; 0xd48 <TWI_init+0x98>
    	                       break;
     case Interrupt_Enable:    SET_BIT(TWCR,TWIE);
     d3a:	a6 e5       	ldi	r26, 0x56	; 86
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	e6 e5       	ldi	r30, 0x56	; 86
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	81 60       	ori	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
    	                       break;
   }

   /*Setting Prescaler*/
   TWSR = ( TWSR & 0xFC ) | Config_Ptr -> TWI_prescaler ;
     d48:	a1 e2       	ldi	r26, 0x21	; 33
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	e1 e2       	ldi	r30, 0x21	; 33
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	98 2f       	mov	r25, r24
     d54:	9c 7f       	andi	r25, 0xFC	; 252
     d56:	e9 81       	ldd	r30, Y+1	; 0x01
     d58:	fa 81       	ldd	r31, Y+2	; 0x02
     d5a:	82 81       	ldd	r24, Z+2	; 0x02
     d5c:	89 2b       	or	r24, r25
     d5e:	8c 93       	st	X, r24

   /*General Call Recognition Enable Bit*/
   switch ( Config_Ptr ->GCR)
     d60:	e9 81       	ldd	r30, Y+1	; 0x01
     d62:	fa 81       	ldd	r31, Y+2	; 0x02
     d64:	83 81       	ldd	r24, Z+3	; 0x03
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	3c 83       	std	Y+4, r19	; 0x04
     d6c:	2b 83       	std	Y+3, r18	; 0x03
     d6e:	8b 81       	ldd	r24, Y+3	; 0x03
     d70:	9c 81       	ldd	r25, Y+4	; 0x04
     d72:	00 97       	sbiw	r24, 0x00	; 0
     d74:	31 f0       	breq	.+12     	; 0xd82 <TWI_init+0xd2>
     d76:	2b 81       	ldd	r18, Y+3	; 0x03
     d78:	3c 81       	ldd	r19, Y+4	; 0x04
     d7a:	21 30       	cpi	r18, 0x01	; 1
     d7c:	31 05       	cpc	r19, r1
     d7e:	49 f0       	breq	.+18     	; 0xd92 <TWI_init+0xe2>
     d80:	0f c0       	rjmp	.+30     	; 0xda0 <TWI_init+0xf0>
   {
       case GCR_Disable : CLEAR_BIT(TWAR,TWGCE);
     d82:	a2 e2       	ldi	r26, 0x22	; 34
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	e2 e2       	ldi	r30, 0x22	; 34
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	8e 7f       	andi	r24, 0xFE	; 254
     d8e:	8c 93       	st	X, r24
     d90:	07 c0       	rjmp	.+14     	; 0xda0 <TWI_init+0xf0>
    	         break;
       case GCR_Enable :  SET_BIT(TWAR,TWGCE);
     d92:	a2 e2       	ldi	r26, 0x22	; 34
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	e2 e2       	ldi	r30, 0x22	; 34
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	81 60       	ori	r24, 0x01	; 1
     d9e:	8c 93       	st	X, r24
    	         break;
   }

   TWBR = 0x02;
     da0:	e0 e2       	ldi	r30, 0x20	; 32
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	82 e0       	ldi	r24, 0x02	; 2
     da6:	80 83       	st	Z, r24
   TWAR = 0b00000010; // my address = 0x01 :)
     da8:	e2 e2       	ldi	r30, 0x22	; 34
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	82 e0       	ldi	r24, 0x02	; 2
     dae:	80 83       	st	Z, r24
}
     db0:	28 96       	adiw	r28, 0x08	; 8
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	f8 94       	cli
     db6:	de bf       	out	0x3e, r29	; 62
     db8:	0f be       	out	0x3f, r0	; 63
     dba:	cd bf       	out	0x3d, r28	; 61
     dbc:	cf 91       	pop	r28
     dbe:	df 91       	pop	r29
     dc0:	08 95       	ret

00000dc2 <TWI_start>:
* Parameters (out):   None
* Return value:       None
* Description:        Send the start BIT
********************************************************************************/
void TWI_start(void)
{
     dc2:	df 93       	push	r29
     dc4:	cf 93       	push	r28
     dc6:	cd b7       	in	r28, 0x3d	; 61
     dc8:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     dca:	e6 e5       	ldi	r30, 0x56	; 86
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	84 ea       	ldi	r24, 0xA4	; 164
     dd0:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     dd2:	e6 e5       	ldi	r30, 0x56	; 86
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	88 23       	and	r24, r24
     dda:	dc f7       	brge	.-10     	; 0xdd2 <TWI_start+0x10>
}
     ddc:	cf 91       	pop	r28
     dde:	df 91       	pop	r29
     de0:	08 95       	ret

00000de2 <TWI_stop>:
* Parameters (out):   None
* Return value:       None
* Description:        Send the stop BIT
********************************************************************************/
void TWI_stop(void)
{
     de2:	df 93       	push	r29
     de4:	cf 93       	push	r28
     de6:	cd b7       	in	r28, 0x3d	; 61
     de8:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     dea:	e6 e5       	ldi	r30, 0x56	; 86
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	84 e9       	ldi	r24, 0x94	; 148
     df0:	80 83       	st	Z, r24
}
     df2:	cf 91       	pop	r28
     df4:	df 91       	pop	r29
     df6:	08 95       	ret

00000df8 <TWI_writeByte>:
* Parameters (out):   None
* Return value:       None
* Description:        write byte
********************************************************************************/
void TWI_writeByte(uint8 data)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	0f 92       	push	r0
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
     e04:	e3 e2       	ldi	r30, 0x23	; 35
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
     e0c:	e6 e5       	ldi	r30, 0x56	; 86
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	84 e8       	ldi	r24, 0x84	; 132
     e12:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     e14:	e6 e5       	ldi	r30, 0x56	; 86
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	88 23       	and	r24, r24
     e1c:	dc f7       	brge	.-10     	; 0xe14 <TWI_writeByte+0x1c>
}
     e1e:	0f 90       	pop	r0
     e20:	cf 91       	pop	r28
     e22:	df 91       	pop	r29
     e24:	08 95       	ret

00000e26 <TWI_readByteWithACK>:
* Parameters (out):   Byte read with ack
* Return value:       None
* Description:        write byte
********************************************************************************/
uint8 TWI_readByteWithACK(void)
{
     e26:	df 93       	push	r29
     e28:	cf 93       	push	r28
     e2a:	cd b7       	in	r28, 0x3d	; 61
     e2c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     e2e:	e6 e5       	ldi	r30, 0x56	; 86
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	84 ec       	ldi	r24, 0xC4	; 196
     e34:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     e36:	e6 e5       	ldi	r30, 0x56	; 86
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	88 23       	and	r24, r24
     e3e:	dc f7       	brge	.-10     	; 0xe36 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
     e40:	e3 e2       	ldi	r30, 0x23	; 35
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
}
     e46:	cf 91       	pop	r28
     e48:	df 91       	pop	r29
     e4a:	08 95       	ret

00000e4c <TWI_readByteWithNACK>:
* Parameters (out):   Byte read with NACK
* Return value:       uint8
* Description:        write byte with NACK
********************************************************************************/
uint8 TWI_readByteWithNACK(void)
{
     e4c:	df 93       	push	r29
     e4e:	cf 93       	push	r28
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
     e54:	e6 e5       	ldi	r30, 0x56	; 86
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	84 e8       	ldi	r24, 0x84	; 132
     e5a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     e5c:	e6 e5       	ldi	r30, 0x56	; 86
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	88 23       	and	r24, r24
     e64:	dc f7       	brge	.-10     	; 0xe5c <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
     e66:	e3 e2       	ldi	r30, 0x23	; 35
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
}
     e6c:	cf 91       	pop	r28
     e6e:	df 91       	pop	r29
     e70:	08 95       	ret

00000e72 <TWI_getStatus>:
* Parameters (out):   None
* Return value:       uint8
* Description:        get the status
********************************************************************************/
uint8 TWI_getStatus(void)
{
     e72:	df 93       	push	r29
     e74:	cf 93       	push	r28
     e76:	0f 92       	push	r0
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
     e7c:	e1 e2       	ldi	r30, 0x21	; 33
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	88 7f       	andi	r24, 0xF8	; 248
     e84:	89 83       	std	Y+1, r24	; 0x01
    return status;
     e86:	89 81       	ldd	r24, Y+1	; 0x01
}
     e88:	0f 90       	pop	r0
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <OPERATION_II_ReceivePassword>:
* Parameters (out):   None
* Return value:       None
* Description:        Receive First Password from First MCU
********************************************************************************/
void OPERATION_II_ReceivePassword(void)
{
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	00 d0       	rcall	.+0      	; 0xe96 <OPERATION_II_ReceivePassword+0x6>
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
   /*Variable to hold keypadd press*/
	uint8 key1;

   /*counter for while loop*/
    uint8 counter = 0;
     e9a:	19 82       	std	Y+1, r1	; 0x01
     e9c:	0e c0       	rjmp	.+28     	; 0xeba <OPERATION_II_ReceivePassword+0x2a>

   while ( counter < 5)
   {
       /*Receive Digit from first MCU*/
	   key1 = UART_receiveByte();
     e9e:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <UART_receiveByte>
     ea2:	8a 83       	std	Y+2, r24	; 0x02

	   /*Store Digit in the array*/
	   g_Password_Entry1[counter]=key1;
     ea4:	89 81       	ldd	r24, Y+1	; 0x01
     ea6:	88 2f       	mov	r24, r24
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	fc 01       	movw	r30, r24
     eac:	ef 56       	subi	r30, 0x6F	; 111
     eae:	ff 4f       	sbci	r31, 0xFF	; 255
     eb0:	8a 81       	ldd	r24, Y+2	; 0x02
     eb2:	80 83       	st	Z, r24

	   /*Increament counter*/
	   counter ++;
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
     eb6:	8f 5f       	subi	r24, 0xFF	; 255
     eb8:	89 83       	std	Y+1, r24	; 0x01
	uint8 key1;

   /*counter for while loop*/
    uint8 counter = 0;

   while ( counter < 5)
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	85 30       	cpi	r24, 0x05	; 5
     ebe:	78 f3       	brcs	.-34     	; 0xe9e <OPERATION_II_ReceivePassword+0xe>
	   /*Increament counter*/
	   counter ++;
   }


}
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	cf 91       	pop	r28
     ec6:	df 91       	pop	r29
     ec8:	08 95       	ret

00000eca <OPERATION_II_ReceiveSecondPassword>:
* Parameters (out):   None
* Return value:       None
* Description:        Receive First Password from First MCU
********************************************************************************/
void OPERATION_II_ReceiveSecondPassword(void)
{
     eca:	df 93       	push	r29
     ecc:	cf 93       	push	r28
     ece:	00 d0       	rcall	.+0      	; 0xed0 <OPERATION_II_ReceiveSecondPassword+0x6>
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
	   /*Variable to hold keypadd press*/
		uint8 key1;

	   /*counter for while loop*/
	    uint8 counter = 0;
     ed4:	19 82       	std	Y+1, r1	; 0x01
     ed6:	0e c0       	rjmp	.+28     	; 0xef4 <OPERATION_II_ReceiveSecondPassword+0x2a>

	   while ( counter < 5)
	   {
	       /*Receive Digit from first MCU*/
		   key1 = UART_receiveByte();
     ed8:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <UART_receiveByte>
     edc:	8a 83       	std	Y+2, r24	; 0x02

		   /*Store Digit in the array*/
		   g_Password_Entry2[counter]=key1;
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	88 2f       	mov	r24, r24
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	fc 01       	movw	r30, r24
     ee6:	e4 57       	subi	r30, 0x74	; 116
     ee8:	ff 4f       	sbci	r31, 0xFF	; 255
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	80 83       	st	Z, r24

		   /*Increament counter*/
		   counter ++;
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	8f 5f       	subi	r24, 0xFF	; 255
     ef2:	89 83       	std	Y+1, r24	; 0x01
		uint8 key1;

	   /*counter for while loop*/
	    uint8 counter = 0;

	   while ( counter < 5)
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	85 30       	cpi	r24, 0x05	; 5
     ef8:	78 f3       	brcs	.-34     	; 0xed8 <OPERATION_II_ReceiveSecondPassword+0xe>
		   g_Password_Entry2[counter]=key1;

		   /*Increament counter*/
		   counter ++;
	   }
}
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	08 95       	ret

00000f04 <OPERATION_II_checkPasswordMatch>:
* Parameters (out):   None
* Return value:       None
* Description:        Check Password Match between different entries
********************************************************************************/
void OPERATION_II_checkPasswordMatch(void)
{
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	62 97       	sbiw	r28, 0x12	; 18
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	f8 94       	cli
     f12:	de bf       	out	0x3e, r29	; 62
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	cd bf       	out	0x3d, r28	; 61
	   /*Variable to be used in while loop*/
	   uint8 counter = 0;
     f18:	18 8a       	std	Y+16, r1	; 0x10

	   /*flag for matching detection - if 0 missmatch - if 1 matched*/
	   uint8 flag = 1 ;
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	8f 87       	std	Y+15, r24	; 0x0f
     f1e:	15 c0       	rjmp	.+42     	; 0xf4a <OPERATION_II_checkPasswordMatch+0x46>
	   static uint8 missmatch_counter = 0;

	   /*Check Each Element in the Array*/
	   while (counter < 5 )
	   {
	       if ( g_Password_Entry1[counter] != g_Password_Entry2[counter])
     f20:	88 89       	ldd	r24, Y+16	; 0x10
     f22:	88 2f       	mov	r24, r24
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	fc 01       	movw	r30, r24
     f28:	ef 56       	subi	r30, 0x6F	; 111
     f2a:	ff 4f       	sbci	r31, 0xFF	; 255
     f2c:	20 81       	ld	r18, Z
     f2e:	88 89       	ldd	r24, Y+16	; 0x10
     f30:	88 2f       	mov	r24, r24
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	fc 01       	movw	r30, r24
     f36:	e4 57       	subi	r30, 0x74	; 116
     f38:	ff 4f       	sbci	r31, 0xFF	; 255
     f3a:	80 81       	ld	r24, Z
     f3c:	28 17       	cp	r18, r24
     f3e:	11 f0       	breq	.+4      	; 0xf44 <OPERATION_II_checkPasswordMatch+0x40>
	       {
	   	    flag = 0 ;
     f40:	1f 86       	std	Y+15, r1	; 0x0f
     f42:	06 c0       	rjmp	.+12     	; 0xf50 <OPERATION_II_checkPasswordMatch+0x4c>
	   	    break;
	       }
	       counter ++ ;
     f44:	88 89       	ldd	r24, Y+16	; 0x10
     f46:	8f 5f       	subi	r24, 0xFF	; 255
     f48:	88 8b       	std	Y+16, r24	; 0x10

	   /*Variable to hold number of miss matches*/
	   static uint8 missmatch_counter = 0;

	   /*Check Each Element in the Array*/
	   while (counter < 5 )
     f4a:	88 89       	ldd	r24, Y+16	; 0x10
     f4c:	85 30       	cpi	r24, 0x05	; 5
     f4e:	40 f3       	brcs	.-48     	; 0xf20 <OPERATION_II_checkPasswordMatch+0x1c>
	       }
	       counter ++ ;
	   }

	   /*Resetting Counter for EEPROM LOOP*/
	   counter = 0;
     f50:	18 8a       	std	Y+16, r1	; 0x10

     	/*Send to First MCU: 0 if dismatches , 1 if matches*/
     	UART_sendByte(flag);
     f52:	8f 85       	ldd	r24, Y+15	; 0x0f
     f54:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <UART_sendByte>

	   switch (flag)
     f58:	8f 85       	ldd	r24, Y+15	; 0x0f
     f5a:	28 2f       	mov	r18, r24
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	3a 8b       	std	Y+18, r19	; 0x12
     f60:	29 8b       	std	Y+17, r18	; 0x11
     f62:	89 89       	ldd	r24, Y+17	; 0x11
     f64:	9a 89       	ldd	r25, Y+18	; 0x12
     f66:	00 97       	sbiw	r24, 0x00	; 0
     f68:	39 f0       	breq	.+14     	; 0xf78 <OPERATION_II_checkPasswordMatch+0x74>
     f6a:	29 89       	ldd	r18, Y+17	; 0x11
     f6c:	3a 89       	ldd	r19, Y+18	; 0x12
     f6e:	21 30       	cpi	r18, 0x01	; 1
     f70:	31 05       	cpc	r19, r1
     f72:	09 f4       	brne	.+2      	; 0xf76 <OPERATION_II_checkPasswordMatch+0x72>
     f74:	a7 c0       	rjmp	.+334    	; 0x10c4 <OPERATION_II_checkPasswordMatch+0x1c0>
     f76:	aa c0       	rjmp	.+340    	; 0x10cc <OPERATION_II_checkPasswordMatch+0x1c8>
	   {
	      /*Missmatched Case*/
	      /*Repeat Step 1 */
	      case 0 :  missmatch_counter++;
     f78:	80 91 7c 00 	lds	r24, 0x007C
     f7c:	8f 5f       	subi	r24, 0xFF	; 255
     f7e:	80 93 7c 00 	sts	0x007C, r24
	                if(missmatch_counter== 3)
     f82:	80 91 7c 00 	lds	r24, 0x007C
     f86:	83 30       	cpi	r24, 0x03	; 3
     f88:	99 f4       	brne	.+38     	; 0xfb0 <OPERATION_II_checkPasswordMatch+0xac>
	                {
	            		BUZZER_ON();
     f8a:	0e 94 c0 05 	call	0xb80	; 0xb80 <BUZZER_ON>
	            		Timer_init(&TIMER_Config_Struct);
     f8e:	88 e6       	ldi	r24, 0x68	; 104
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	0e 94 34 0b 	call	0x1668	; 0x1668 <Timer_init>
	            		Timer2_setCallBack(OPERATIONS_II_Buzzer);
     f96:	85 e1       	ldi	r24, 0x15	; 21
     f98:	99 e0       	ldi	r25, 0x09	; 9
     f9a:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <Timer2_setCallBack>
	            		g_Interrupts_number= 215;
     f9e:	87 ed       	ldi	r24, 0xD7	; 215
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	90 93 7b 00 	sts	0x007B, r25
     fa6:	80 93 7a 00 	sts	0x007A, r24
	                	missmatch_counter = 0;
     faa:	10 92 7c 00 	sts	0x007C, r1
     fae:	8e c0       	rjmp	.+284    	; 0x10cc <OPERATION_II_checkPasswordMatch+0x1c8>
	                }
	                else
	                {
	                	OPERATION_II_ReceivePassword();
     fb0:	0e 94 48 07 	call	0xe90	; 0xe90 <OPERATION_II_ReceivePassword>
	                	OPERATION_II_ReceiveSecondPassword();
     fb4:	0e 94 65 07 	call	0xeca	; 0xeca <OPERATION_II_ReceiveSecondPassword>
	                	OPERATION_II_checkPasswordMatch();
     fb8:	0e 94 82 07 	call	0xf04	; 0xf04 <OPERATION_II_checkPasswordMatch>
     fbc:	87 c0       	rjmp	.+270    	; 0x10cc <OPERATION_II_checkPasswordMatch+0x1c8>
	      /* Go to Main Options*/
	      case 1 :
	    	  while (counter < 5 )
	    	  {

	          	EEPROM_writeByte((uint16)(EEPROM_ADDRESS + counter), g_Password_Entry1[counter]);
     fbe:	88 89       	ldd	r24, Y+16	; 0x10
     fc0:	48 2f       	mov	r20, r24
     fc2:	50 e0       	ldi	r21, 0x00	; 0
     fc4:	88 89       	ldd	r24, Y+16	; 0x10
     fc6:	88 2f       	mov	r24, r24
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	fc 01       	movw	r30, r24
     fcc:	ef 56       	subi	r30, 0x6F	; 111
     fce:	ff 4f       	sbci	r31, 0xFF	; 255
     fd0:	20 81       	ld	r18, Z
     fd2:	ca 01       	movw	r24, r20
     fd4:	62 2f       	mov	r22, r18
     fd6:	0e 94 2a 10 	call	0x2054	; 0x2054 <EEPROM_writeByte>
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	a0 e2       	ldi	r26, 0x20	; 32
     fe0:	b1 e4       	ldi	r27, 0x41	; 65
     fe2:	8b 87       	std	Y+11, r24	; 0x0b
     fe4:	9c 87       	std	Y+12, r25	; 0x0c
     fe6:	ad 87       	std	Y+13, r26	; 0x0d
     fe8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fea:	6b 85       	ldd	r22, Y+11	; 0x0b
     fec:	7c 85       	ldd	r23, Y+12	; 0x0c
     fee:	8d 85       	ldd	r24, Y+13	; 0x0d
     ff0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	4a ef       	ldi	r20, 0xFA	; 250
     ff8:	54 e4       	ldi	r21, 0x44	; 68
     ffa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ffe:	dc 01       	movw	r26, r24
    1000:	cb 01       	movw	r24, r22
    1002:	8f 83       	std	Y+7, r24	; 0x07
    1004:	98 87       	std	Y+8, r25	; 0x08
    1006:	a9 87       	std	Y+9, r26	; 0x09
    1008:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    100a:	6f 81       	ldd	r22, Y+7	; 0x07
    100c:	78 85       	ldd	r23, Y+8	; 0x08
    100e:	89 85       	ldd	r24, Y+9	; 0x09
    1010:	9a 85       	ldd	r25, Y+10	; 0x0a
    1012:	20 e0       	ldi	r18, 0x00	; 0
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	40 e8       	ldi	r20, 0x80	; 128
    1018:	5f e3       	ldi	r21, 0x3F	; 63
    101a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    101e:	88 23       	and	r24, r24
    1020:	2c f4       	brge	.+10     	; 0x102c <OPERATION_II_checkPasswordMatch+0x128>
		__ticks = 1;
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	9e 83       	std	Y+6, r25	; 0x06
    1028:	8d 83       	std	Y+5, r24	; 0x05
    102a:	3f c0       	rjmp	.+126    	; 0x10aa <OPERATION_II_checkPasswordMatch+0x1a6>
	else if (__tmp > 65535)
    102c:	6f 81       	ldd	r22, Y+7	; 0x07
    102e:	78 85       	ldd	r23, Y+8	; 0x08
    1030:	89 85       	ldd	r24, Y+9	; 0x09
    1032:	9a 85       	ldd	r25, Y+10	; 0x0a
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	3f ef       	ldi	r19, 0xFF	; 255
    1038:	4f e7       	ldi	r20, 0x7F	; 127
    103a:	57 e4       	ldi	r21, 0x47	; 71
    103c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1040:	18 16       	cp	r1, r24
    1042:	4c f5       	brge	.+82     	; 0x1096 <OPERATION_II_checkPasswordMatch+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1044:	6b 85       	ldd	r22, Y+11	; 0x0b
    1046:	7c 85       	ldd	r23, Y+12	; 0x0c
    1048:	8d 85       	ldd	r24, Y+13	; 0x0d
    104a:	9e 85       	ldd	r25, Y+14	; 0x0e
    104c:	20 e0       	ldi	r18, 0x00	; 0
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	40 e2       	ldi	r20, 0x20	; 32
    1052:	51 e4       	ldi	r21, 0x41	; 65
    1054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1058:	dc 01       	movw	r26, r24
    105a:	cb 01       	movw	r24, r22
    105c:	bc 01       	movw	r22, r24
    105e:	cd 01       	movw	r24, r26
    1060:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1064:	dc 01       	movw	r26, r24
    1066:	cb 01       	movw	r24, r22
    1068:	9e 83       	std	Y+6, r25	; 0x06
    106a:	8d 83       	std	Y+5, r24	; 0x05
    106c:	0f c0       	rjmp	.+30     	; 0x108c <OPERATION_II_checkPasswordMatch+0x188>
    106e:	88 ec       	ldi	r24, 0xC8	; 200
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	9c 83       	std	Y+4, r25	; 0x04
    1074:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	9c 81       	ldd	r25, Y+4	; 0x04
    107a:	01 97       	sbiw	r24, 0x01	; 1
    107c:	f1 f7       	brne	.-4      	; 0x107a <OPERATION_II_checkPasswordMatch+0x176>
    107e:	9c 83       	std	Y+4, r25	; 0x04
    1080:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1082:	8d 81       	ldd	r24, Y+5	; 0x05
    1084:	9e 81       	ldd	r25, Y+6	; 0x06
    1086:	01 97       	sbiw	r24, 0x01	; 1
    1088:	9e 83       	std	Y+6, r25	; 0x06
    108a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    108c:	8d 81       	ldd	r24, Y+5	; 0x05
    108e:	9e 81       	ldd	r25, Y+6	; 0x06
    1090:	00 97       	sbiw	r24, 0x00	; 0
    1092:	69 f7       	brne	.-38     	; 0x106e <OPERATION_II_checkPasswordMatch+0x16a>
    1094:	14 c0       	rjmp	.+40     	; 0x10be <OPERATION_II_checkPasswordMatch+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1096:	6f 81       	ldd	r22, Y+7	; 0x07
    1098:	78 85       	ldd	r23, Y+8	; 0x08
    109a:	89 85       	ldd	r24, Y+9	; 0x09
    109c:	9a 85       	ldd	r25, Y+10	; 0x0a
    109e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10a2:	dc 01       	movw	r26, r24
    10a4:	cb 01       	movw	r24, r22
    10a6:	9e 83       	std	Y+6, r25	; 0x06
    10a8:	8d 83       	std	Y+5, r24	; 0x05
    10aa:	8d 81       	ldd	r24, Y+5	; 0x05
    10ac:	9e 81       	ldd	r25, Y+6	; 0x06
    10ae:	9a 83       	std	Y+2, r25	; 0x02
    10b0:	89 83       	std	Y+1, r24	; 0x01
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	9a 81       	ldd	r25, Y+2	; 0x02
    10b6:	01 97       	sbiw	r24, 0x01	; 1
    10b8:	f1 f7       	brne	.-4      	; 0x10b6 <OPERATION_II_checkPasswordMatch+0x1b2>
    10ba:	9a 83       	std	Y+2, r25	; 0x02
    10bc:	89 83       	std	Y+1, r24	; 0x01
	    		_delay_ms(10);

	    		  counter ++ ;
    10be:	88 89       	ldd	r24, Y+16	; 0x10
    10c0:	8f 5f       	subi	r24, 0xFF	; 255
    10c2:	88 8b       	std	Y+16, r24	; 0x10

	      /*Matched Case*/

	      /* Go to Main Options*/
	      case 1 :
	    	  while (counter < 5 )
    10c4:	88 89       	ldd	r24, Y+16	; 0x10
    10c6:	85 30       	cpi	r24, 0x05	; 5
    10c8:	08 f4       	brcc	.+2      	; 0x10cc <OPERATION_II_checkPasswordMatch+0x1c8>
    10ca:	79 cf       	rjmp	.-270    	; 0xfbe <OPERATION_II_checkPasswordMatch+0xba>

	    	  /*Start Display Main Options*/
	   }


}
    10cc:	62 96       	adiw	r28, 0x12	; 18
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	de bf       	out	0x3e, r29	; 62
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	cd bf       	out	0x3d, r28	; 61
    10d8:	cf 91       	pop	r28
    10da:	df 91       	pop	r29
    10dc:	08 95       	ret

000010de <OPERATION_II_checkEEPROMMatch>:
* Parameters (out):   None
* Return value:       None
* Description:        Check Password Match EEPROM and Entry
********************************************************************************/
uint8 OPERATION_II_checkEEPROMMatch(void)
{
    10de:	df 93       	push	r29
    10e0:	cf 93       	push	r28
    10e2:	00 d0       	rcall	.+0      	; 0x10e4 <OPERATION_II_checkEEPROMMatch+0x6>
    10e4:	0f 92       	push	r0
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
	   /*counter for while loop*/
	   uint8 counter = 0;
    10ea:	1a 82       	std	Y+2, r1	; 0x02

	   /*flag for matching detection - initially matched*/
	   uint8 flag = 1 ;
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	89 83       	std	Y+1, r24	; 0x01

	   /*Variable to hold the value read from EEPROM*/
       uint8 value = 0;
    10f0:	1b 82       	std	Y+3, r1	; 0x03
    10f2:	18 c0       	rjmp	.+48     	; 0x1124 <OPERATION_II_checkEEPROMMatch+0x46>

	   while (counter < 5 )
	   {
		   /*read Byte from EEPROM*/
		   EEPROM_readByte( (uint16)(EEPROM_ADDRESS + counter), &value);
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	88 2f       	mov	r24, r24
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	9e 01       	movw	r18, r28
    10fc:	2d 5f       	subi	r18, 0xFD	; 253
    10fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1100:	b9 01       	movw	r22, r18
    1102:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <EEPROM_readByte>


		   /*Check if any element is not matched*/
		   if(g_Password_Entry1[counter] != value)
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	88 2f       	mov	r24, r24
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	fc 01       	movw	r30, r24
    110e:	ef 56       	subi	r30, 0x6F	; 111
    1110:	ff 4f       	sbci	r31, 0xFF	; 255
    1112:	90 81       	ld	r25, Z
    1114:	8b 81       	ldd	r24, Y+3	; 0x03
    1116:	98 17       	cp	r25, r24
    1118:	11 f0       	breq	.+4      	; 0x111e <OPERATION_II_checkEEPROMMatch+0x40>
		   {
			   flag = 0;
    111a:	19 82       	std	Y+1, r1	; 0x01
    111c:	06 c0       	rjmp	.+12     	; 0x112a <OPERATION_II_checkEEPROMMatch+0x4c>
			   break;
		   }
		   counter ++ ;
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	8f 5f       	subi	r24, 0xFF	; 255
    1122:	8a 83       	std	Y+2, r24	; 0x02
	   uint8 flag = 1 ;

	   /*Variable to hold the value read from EEPROM*/
       uint8 value = 0;

	   while (counter < 5 )
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	85 30       	cpi	r24, 0x05	; 5
    1128:	28 f3       	brcs	.-54     	; 0x10f4 <OPERATION_II_checkEEPROMMatch+0x16>
			   break;
		   }
		   counter ++ ;
	   }

	   return flag;
    112a:	89 81       	ldd	r24, Y+1	; 0x01
}
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <OPERATIONS_II_Motor>:
* Parameters (out):   None
* Return value:       None
* Description:        Function to be called in the ISR
********************************************************************************/
void OPERATIONS_II_Motor (void)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62

	/*Variable to detect which direction the motor is rotating at*
	 * 0 CW - 1 CCW */
	static uint8 flag = 0;

	counter ++ ;
    1140:	80 91 7e 00 	lds	r24, 0x007E
    1144:	90 91 7f 00 	lds	r25, 0x007F
    1148:	01 96       	adiw	r24, 0x01	; 1
    114a:	90 93 7f 00 	sts	0x007F, r25
    114e:	80 93 7e 00 	sts	0x007E, r24

	/*for 5 seconds*/
	if(counter == g_Interrupts_number && g_Interrupts_number == 461 && flag ==0)
    1152:	20 91 7e 00 	lds	r18, 0x007E
    1156:	30 91 7f 00 	lds	r19, 0x007F
    115a:	80 91 7a 00 	lds	r24, 0x007A
    115e:	90 91 7b 00 	lds	r25, 0x007B
    1162:	28 17       	cp	r18, r24
    1164:	39 07       	cpc	r19, r25
    1166:	f1 f4       	brne	.+60     	; 0x11a4 <OPERATIONS_II_Motor+0x6c>
    1168:	80 91 7a 00 	lds	r24, 0x007A
    116c:	90 91 7b 00 	lds	r25, 0x007B
    1170:	21 e0       	ldi	r18, 0x01	; 1
    1172:	8d 3c       	cpi	r24, 0xCD	; 205
    1174:	92 07       	cpc	r25, r18
    1176:	b1 f4       	brne	.+44     	; 0x11a4 <OPERATIONS_II_Motor+0x6c>
    1178:	80 91 7d 00 	lds	r24, 0x007D
    117c:	88 23       	and	r24, r24
    117e:	91 f4       	brne	.+36     	; 0x11a4 <OPERATIONS_II_Motor+0x6c>
	{
		DC_MOTOR_Rotate(Stop, 0);
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	60 e0       	ldi	r22, 0x00	; 0
    1184:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DC_MOTOR_Rotate>
		counter = 0;
    1188:	10 92 7f 00 	sts	0x007F, r1
    118c:	10 92 7e 00 	sts	0x007E, r1
		/*Get ready for holding motor 3 seconds*/
		g_Interrupts_number = 92;
    1190:	8c e5       	ldi	r24, 0x5C	; 92
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	90 93 7b 00 	sts	0x007B, r25
    1198:	80 93 7a 00 	sts	0x007A, r24
		flag = 1;
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	80 93 7d 00 	sts	0x007D, r24
    11a2:	40 c0       	rjmp	.+128    	; 0x1224 <OPERATIONS_II_Motor+0xec>
	}
	else if (counter == g_Interrupts_number && g_Interrupts_number == 92 )
    11a4:	20 91 7e 00 	lds	r18, 0x007E
    11a8:	30 91 7f 00 	lds	r19, 0x007F
    11ac:	80 91 7a 00 	lds	r24, 0x007A
    11b0:	90 91 7b 00 	lds	r25, 0x007B
    11b4:	28 17       	cp	r18, r24
    11b6:	39 07       	cpc	r19, r25
    11b8:	b1 f4       	brne	.+44     	; 0x11e6 <OPERATIONS_II_Motor+0xae>
    11ba:	80 91 7a 00 	lds	r24, 0x007A
    11be:	90 91 7b 00 	lds	r25, 0x007B
    11c2:	8c 35       	cpi	r24, 0x5C	; 92
    11c4:	91 05       	cpc	r25, r1
    11c6:	79 f4       	brne	.+30     	; 0x11e6 <OPERATIONS_II_Motor+0xae>
	{
		/*after holding motor for 3 seconds , rotate CCW for 5 seconds*/
		DC_MOTOR_Rotate(CCW, 75);
    11c8:	82 e0       	ldi	r24, 0x02	; 2
    11ca:	6b e4       	ldi	r22, 0x4B	; 75
    11cc:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DC_MOTOR_Rotate>
		g_Interrupts_number = 461;
    11d0:	8d ec       	ldi	r24, 0xCD	; 205
    11d2:	91 e0       	ldi	r25, 0x01	; 1
    11d4:	90 93 7b 00 	sts	0x007B, r25
    11d8:	80 93 7a 00 	sts	0x007A, r24
		counter = 0;
    11dc:	10 92 7f 00 	sts	0x007F, r1
    11e0:	10 92 7e 00 	sts	0x007E, r1
    11e4:	1f c0       	rjmp	.+62     	; 0x1224 <OPERATIONS_II_Motor+0xec>
	}
	else if (counter == g_Interrupts_number && g_Interrupts_number == 215 )
    11e6:	20 91 7e 00 	lds	r18, 0x007E
    11ea:	30 91 7f 00 	lds	r19, 0x007F
    11ee:	80 91 7a 00 	lds	r24, 0x007A
    11f2:	90 91 7b 00 	lds	r25, 0x007B
    11f6:	28 17       	cp	r18, r24
    11f8:	39 07       	cpc	r19, r25
    11fa:	a1 f4       	brne	.+40     	; 0x1224 <OPERATIONS_II_Motor+0xec>
    11fc:	80 91 7a 00 	lds	r24, 0x007A
    1200:	90 91 7b 00 	lds	r25, 0x007B
    1204:	87 3d       	cpi	r24, 0xD7	; 215
    1206:	91 05       	cpc	r25, r1
    1208:	69 f4       	brne	.+26     	; 0x1224 <OPERATIONS_II_Motor+0xec>
	{
		/*after 5 seconds stop the motor and display finished*/
		DC_MOTOR_Rotate(Stop, 0);
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	60 e0       	ldi	r22, 0x00	; 0
    120e:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DC_MOTOR_Rotate>
		flag = 0 ;
    1212:	10 92 7d 00 	sts	0x007D, r1
		counter = 0;
    1216:	10 92 7f 00 	sts	0x007F, r1
    121a:	10 92 7e 00 	sts	0x007E, r1
		Timer_Deinit(2);
    121e:	82 e0       	ldi	r24, 0x02	; 2
    1220:	0e 94 c3 0c 	call	0x1986	; 0x1986 <Timer_Deinit>
	}
}
    1224:	cf 91       	pop	r28
    1226:	df 91       	pop	r29
    1228:	08 95       	ret

0000122a <OPERATIONS_II_Buzzer>:
* Parameters (out):   None
* Return value:       None
* Description:        Function to be called in the ISR
********************************************************************************/
void OPERATIONS_II_Buzzer (void)
{
    122a:	df 93       	push	r29
    122c:	cf 93       	push	r28
    122e:	cd b7       	in	r28, 0x3d	; 61
    1230:	de b7       	in	r29, 0x3e	; 62
   static uint16 counter = 0 ;

   counter ++ ;
    1232:	80 91 80 00 	lds	r24, 0x0080
    1236:	90 91 81 00 	lds	r25, 0x0081
    123a:	01 96       	adiw	r24, 0x01	; 1
    123c:	90 93 81 00 	sts	0x0081, r25
    1240:	80 93 80 00 	sts	0x0080, r24

   if(counter == g_Interrupts_number && g_Interrupts_number == 215 )
    1244:	20 91 80 00 	lds	r18, 0x0080
    1248:	30 91 81 00 	lds	r19, 0x0081
    124c:	80 91 7a 00 	lds	r24, 0x007A
    1250:	90 91 7b 00 	lds	r25, 0x007B
    1254:	28 17       	cp	r18, r24
    1256:	39 07       	cpc	r19, r25
    1258:	69 f4       	brne	.+26     	; 0x1274 <OPERATIONS_II_Buzzer+0x4a>
    125a:	80 91 7a 00 	lds	r24, 0x007A
    125e:	90 91 7b 00 	lds	r25, 0x007B
    1262:	87 3d       	cpi	r24, 0xD7	; 215
    1264:	91 05       	cpc	r25, r1
    1266:	31 f4       	brne	.+12     	; 0x1274 <OPERATIONS_II_Buzzer+0x4a>
   {
       BUZZER_OFF();
    1268:	0e 94 cf 05 	call	0xb9e	; 0xb9e <BUZZER_OFF>
       counter = 0 ;
    126c:	10 92 81 00 	sts	0x0081, r1
    1270:	10 92 80 00 	sts	0x0080, r1
   }
}
    1274:	cf 91       	pop	r28
    1276:	df 91       	pop	r29
    1278:	08 95       	ret

0000127a <OPERATIONS_II_Main_Options>:
* Parameters (out):   None
* Return value:       None
* Description:        Function to Handle User Main Option from First MCU
********************************************************************************/
void OPERATIONS_II_Main_Options(void)
{
    127a:	df 93       	push	r29
    127c:	cf 93       	push	r28
    127e:	00 d0       	rcall	.+0      	; 0x1280 <OPERATIONS_II_Main_Options+0x6>
    1280:	00 d0       	rcall	.+0      	; 0x1282 <OPERATIONS_II_Main_Options+0x8>
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
	/*Variable to Hold EEPROM Check*/
	uint8 Motor_Drive_Check = 0;
    1286:	1a 82       	std	Y+2, r1	; 0x02

	/*Variable to hold number of miss matches*/
	 static uint8 missmatch_counter = 0;

	 /*Variable to Hold user input*/
	 uint8 user_input=0;
    1288:	19 82       	std	Y+1, r1	; 0x01

	/*4- Take User option input from first MCU by UART*/
	user_input = UART_receiveByte();
    128a:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <UART_receiveByte>
    128e:	89 83       	std	Y+1, r24	; 0x01

	switch ( user_input)
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	28 2f       	mov	r18, r24
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	3c 83       	std	Y+4, r19	; 0x04
    1298:	2b 83       	std	Y+3, r18	; 0x03
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	9c 81       	ldd	r25, Y+4	; 0x04
    129e:	8b 32       	cpi	r24, 0x2B	; 43
    12a0:	91 05       	cpc	r25, r1
    12a2:	39 f0       	breq	.+14     	; 0x12b2 <OPERATIONS_II_Main_Options+0x38>
    12a4:	2b 81       	ldd	r18, Y+3	; 0x03
    12a6:	3c 81       	ldd	r19, Y+4	; 0x04
    12a8:	2d 32       	cpi	r18, 0x2D	; 45
    12aa:	31 05       	cpc	r19, r1
    12ac:	09 f4       	brne	.+2      	; 0x12b0 <OPERATIONS_II_Main_Options+0x36>
    12ae:	47 c0       	rjmp	.+142    	; 0x133e <OPERATIONS_II_Main_Options+0xc4>
    12b0:	4e c0       	rjmp	.+156    	; 0x134e <OPERATIONS_II_Main_Options+0xd4>
	{

	/* 5- Take Password for  '+' Entry and Compare with EEPROM and Send by UART Results */
	case '+':
		OPERATION_II_ReceivePassword();
    12b2:	0e 94 48 07 	call	0xe90	; 0xe90 <OPERATION_II_ReceivePassword>
		Motor_Drive_Check = OPERATION_II_checkEEPROMMatch();
    12b6:	0e 94 6f 08 	call	0x10de	; 0x10de <OPERATION_II_checkEEPROMMatch>
    12ba:	8a 83       	std	Y+2, r24	; 0x02
		UART_sendByte(Motor_Drive_Check);
    12bc:	8a 81       	ldd	r24, Y+2	; 0x02
    12be:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <UART_sendByte>
    12c2:	24 c0       	rjmp	.+72     	; 0x130c <OPERATIONS_II_Main_Options+0x92>


			while ( Motor_Drive_Check == 0)
			{
				missmatch_counter++;
    12c4:	80 91 82 00 	lds	r24, 0x0082
    12c8:	8f 5f       	subi	r24, 0xFF	; 255
    12ca:	80 93 82 00 	sts	0x0082, r24

				/*if Mismatches are 3 , Buzzer ON*/
				if(missmatch_counter == 3)
    12ce:	80 91 82 00 	lds	r24, 0x0082
    12d2:	83 30       	cpi	r24, 0x03	; 3
    12d4:	99 f4       	brne	.+38     	; 0x12fc <OPERATIONS_II_Main_Options+0x82>
				{
					BUZZER_ON();
    12d6:	0e 94 c0 05 	call	0xb80	; 0xb80 <BUZZER_ON>
            		Timer_init(&TIMER_Config_Struct);
    12da:	88 e6       	ldi	r24, 0x68	; 104
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	0e 94 34 0b 	call	0x1668	; 0x1668 <Timer_init>
            		Timer2_setCallBack(OPERATIONS_II_Buzzer);
    12e2:	85 e1       	ldi	r24, 0x15	; 21
    12e4:	99 e0       	ldi	r25, 0x09	; 9
    12e6:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <Timer2_setCallBack>
            		g_Interrupts_number= 215;
    12ea:	87 ed       	ldi	r24, 0xD7	; 215
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	90 93 7b 00 	sts	0x007B, r25
    12f2:	80 93 7a 00 	sts	0x007A, r24
					missmatch_counter = 0;
    12f6:	10 92 82 00 	sts	0x0082, r1
    12fa:	0b c0       	rjmp	.+22     	; 0x1312 <OPERATIONS_II_Main_Options+0x98>
					break;
				}
                /*Re-Enter Password and Check Again until 3 tries are done*/
				OPERATION_II_ReceivePassword();
    12fc:	0e 94 48 07 	call	0xe90	; 0xe90 <OPERATION_II_ReceivePassword>
				Motor_Drive_Check = OPERATION_II_checkEEPROMMatch();
    1300:	0e 94 6f 08 	call	0x10de	; 0x10de <OPERATION_II_checkEEPROMMatch>
    1304:	8a 83       	std	Y+2, r24	; 0x02
				UART_sendByte(Motor_Drive_Check);
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <UART_sendByte>
		OPERATION_II_ReceivePassword();
		Motor_Drive_Check = OPERATION_II_checkEEPROMMatch();
		UART_sendByte(Motor_Drive_Check);


			while ( Motor_Drive_Check == 0)
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	88 23       	and	r24, r24
    1310:	c9 f2       	breq	.-78     	; 0x12c4 <OPERATIONS_II_Main_Options+0x4a>
				Motor_Drive_Check = OPERATION_II_checkEEPROMMatch();
				UART_sendByte(Motor_Drive_Check);
			}

		/*Matches Case*/
	    if ( Motor_Drive_Check == 1)
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	81 30       	cpi	r24, 0x01	; 1
    1316:	d9 f4       	brne	.+54     	; 0x134e <OPERATIONS_II_Main_Options+0xd4>
		{
			DC_MOTOR_Rotate(CW, 75);
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	6b e4       	ldi	r22, 0x4B	; 75
    131c:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DC_MOTOR_Rotate>
			Timer_init(&TIMER_Config_Struct);
    1320:	88 e6       	ldi	r24, 0x68	; 104
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	0e 94 34 0b 	call	0x1668	; 0x1668 <Timer_init>
			Timer2_setCallBack(OPERATIONS_II_Motor);
    1328:	8c e9       	ldi	r24, 0x9C	; 156
    132a:	98 e0       	ldi	r25, 0x08	; 8
    132c:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <Timer2_setCallBack>
			g_Interrupts_number= 461;
    1330:	8d ec       	ldi	r24, 0xCD	; 205
    1332:	91 e0       	ldi	r25, 0x01	; 1
    1334:	90 93 7b 00 	sts	0x007B, r25
    1338:	80 93 7a 00 	sts	0x007A, r24
    133c:	08 c0       	rjmp	.+16     	; 0x134e <OPERATIONS_II_Main_Options+0xd4>
		}
		         break;


	case '-':    OPERATION_II_ReceivePassword();
    133e:	0e 94 48 07 	call	0xe90	; 0xe90 <OPERATION_II_ReceivePassword>
	             OPERATION_II_ReceiveSecondPassword();
    1342:	0e 94 65 07 	call	0xeca	; 0xeca <OPERATION_II_ReceiveSecondPassword>
	             OPERATION_II_checkPasswordMatch();
    1346:	0e 94 82 07 	call	0xf04	; 0xf04 <OPERATION_II_checkPasswordMatch>
	             OPERATIONS_II_Main_Options();
    134a:	0e 94 3d 09 	call	0x127a	; 0x127a <OPERATIONS_II_Main_Options>
		         break;
	}
}
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	cf 91       	pop	r28
    1358:	df 91       	pop	r29
    135a:	08 95       	ret

0000135c <OPERATIONS_II_UART_HANDLE>:
* Return value:       None
* Description:        Function to be called in main function to handle UART
*                     input from first MCU.
********************************************************************************/
void OPERATIONS_II_UART_HANDLE(const TIMER_ConfigType * TIMER_Config_STRUCT)
{
    135c:	df 93       	push	r29
    135e:	cf 93       	push	r28
    1360:	00 d0       	rcall	.+0      	; 0x1362 <OPERATIONS_II_UART_HANDLE+0x6>
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
    1366:	9a 83       	std	Y+2, r25	; 0x02
    1368:	89 83       	std	Y+1, r24	; 0x01
	 */



	/*  1-Take First Password from First MCU */
	OPERATION_II_ReceivePassword();
    136a:	0e 94 48 07 	call	0xe90	; 0xe90 <OPERATION_II_ReceivePassword>

	/*  2- Take Second Password from second MCU */
	OPERATION_II_ReceiveSecondPassword();
    136e:	0e 94 65 07 	call	0xeca	; 0xeca <OPERATION_II_ReceiveSecondPassword>

	/*  3- Check Password */
	OPERATION_II_checkPasswordMatch();
    1372:	0e 94 82 07 	call	0xf04	; 0xf04 <OPERATION_II_checkPasswordMatch>

	/*  Handle Steps: 4 - 5 -6 */
	OPERATIONS_II_Main_Options();
    1376:	0e 94 3d 09 	call	0x127a	; 0x127a <OPERATIONS_II_Main_Options>


}
    137a:	0f 90       	pop	r0
    137c:	0f 90       	pop	r0
    137e:	cf 91       	pop	r28
    1380:	df 91       	pop	r29
    1382:	08 95       	ret

00001384 <PWM_Timer0_Start>:
* Parameters (out):   None
* Return value:       None
* Description:        Initialize Timer0 and Rotating DC Motor with a defined speed
********************************************************************************/
void PWM_Timer0_Start(uint8 duty_cycle)
{
    1384:	df 93       	push	r29
    1386:	cf 93       	push	r28
    1388:	0f 92       	push	r0
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
    138e:	89 83       	std	Y+1, r24	; 0x01
    /*Fast PWM Mode*/
	SET_BIT(TCCR0,WGM00);
    1390:	a3 e5       	ldi	r26, 0x53	; 83
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	e3 e5       	ldi	r30, 0x53	; 83
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	80 64       	ori	r24, 0x40	; 64
    139c:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
    139e:	a3 e5       	ldi	r26, 0x53	; 83
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	e3 e5       	ldi	r30, 0x53	; 83
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	88 60       	ori	r24, 0x08	; 8
    13aa:	8c 93       	st	X, r24

	/*Non Inverting*/
	SET_BIT(TCCR0,COM01);
    13ac:	a3 e5       	ldi	r26, 0x53	; 83
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	e3 e5       	ldi	r30, 0x53	; 83
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	80 62       	ori	r24, 0x20	; 32
    13b8:	8c 93       	st	X, r24

	/*Prescaler = 8*/
	CLEAR_BIT(TCCR0,CS00);
    13ba:	a3 e5       	ldi	r26, 0x53	; 83
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e3 e5       	ldi	r30, 0x53	; 83
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	8e 7f       	andi	r24, 0xFE	; 254
    13c6:	8c 93       	st	X, r24
    SET_BIT(TCCR0,CS01);
    13c8:	a3 e5       	ldi	r26, 0x53	; 83
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	e3 e5       	ldi	r30, 0x53	; 83
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	82 60       	ori	r24, 0x02	; 2
    13d4:	8c 93       	st	X, r24
    CLEAR_BIT(TCCR0,CS02);
    13d6:	a3 e5       	ldi	r26, 0x53	; 83
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	e3 e5       	ldi	r30, 0x53	; 83
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	8b 7f       	andi	r24, 0xFB	; 251
    13e2:	8c 93       	st	X, r24

    /*Setting OC0 as Output PIN*/
    GPIO_setupPinDirection(PORTB_ID,PIN3_ID,PIN_OUTPUT);
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	63 e0       	ldi	r22, 0x03	; 3
    13e8:	41 e0       	ldi	r20, 0x01	; 1
    13ea:	0e 94 cb 10 	call	0x2196	; 0x2196 <GPIO_setupPinDirection>

    /*Initialize TCNT*/
    TCNT0 = 0;
    13ee:	e2 e5       	ldi	r30, 0x52	; 82
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	10 82       	st	Z, r1

    /*Setting  OCR0 Value*/
    OCR0 = duty_cycle;
    13f4:	ec e5       	ldi	r30, 0x5C	; 92
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
    13fa:	80 83       	st	Z, r24

}
    13fc:	0f 90       	pop	r0
    13fe:	cf 91       	pop	r28
    1400:	df 91       	pop	r29
    1402:	08 95       	ret

00001404 <__vector_9>:
*                                                                              *
*                              Interrupt Service Routines                      *
*                                                                              *
********************************************************************************/
ISR(TIMER0_OVF_vect)
{
    1404:	1f 92       	push	r1
    1406:	0f 92       	push	r0
    1408:	0f b6       	in	r0, 0x3f	; 63
    140a:	0f 92       	push	r0
    140c:	11 24       	eor	r1, r1
    140e:	2f 93       	push	r18
    1410:	3f 93       	push	r19
    1412:	4f 93       	push	r20
    1414:	5f 93       	push	r21
    1416:	6f 93       	push	r22
    1418:	7f 93       	push	r23
    141a:	8f 93       	push	r24
    141c:	9f 93       	push	r25
    141e:	af 93       	push	r26
    1420:	bf 93       	push	r27
    1422:	ef 93       	push	r30
    1424:	ff 93       	push	r31
    1426:	df 93       	push	r29
    1428:	cf 93       	push	r28
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
    if ( g_Timer0_callBackPtr != NULL_PTR)
    142e:	80 91 83 00 	lds	r24, 0x0083
    1432:	90 91 84 00 	lds	r25, 0x0084
    1436:	00 97       	sbiw	r24, 0x00	; 0
    1438:	29 f0       	breq	.+10     	; 0x1444 <__vector_9+0x40>
    {
    	(*g_Timer0_callBackPtr)();
    143a:	e0 91 83 00 	lds	r30, 0x0083
    143e:	f0 91 84 00 	lds	r31, 0x0084
    1442:	09 95       	icall
    }
}
    1444:	cf 91       	pop	r28
    1446:	df 91       	pop	r29
    1448:	ff 91       	pop	r31
    144a:	ef 91       	pop	r30
    144c:	bf 91       	pop	r27
    144e:	af 91       	pop	r26
    1450:	9f 91       	pop	r25
    1452:	8f 91       	pop	r24
    1454:	7f 91       	pop	r23
    1456:	6f 91       	pop	r22
    1458:	5f 91       	pop	r21
    145a:	4f 91       	pop	r20
    145c:	3f 91       	pop	r19
    145e:	2f 91       	pop	r18
    1460:	0f 90       	pop	r0
    1462:	0f be       	out	0x3f, r0	; 63
    1464:	0f 90       	pop	r0
    1466:	1f 90       	pop	r1
    1468:	18 95       	reti

0000146a <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    146a:	1f 92       	push	r1
    146c:	0f 92       	push	r0
    146e:	0f b6       	in	r0, 0x3f	; 63
    1470:	0f 92       	push	r0
    1472:	11 24       	eor	r1, r1
    1474:	2f 93       	push	r18
    1476:	3f 93       	push	r19
    1478:	4f 93       	push	r20
    147a:	5f 93       	push	r21
    147c:	6f 93       	push	r22
    147e:	7f 93       	push	r23
    1480:	8f 93       	push	r24
    1482:	9f 93       	push	r25
    1484:	af 93       	push	r26
    1486:	bf 93       	push	r27
    1488:	ef 93       	push	r30
    148a:	ff 93       	push	r31
    148c:	df 93       	push	r29
    148e:	cf 93       	push	r28
    1490:	cd b7       	in	r28, 0x3d	; 61
    1492:	de b7       	in	r29, 0x3e	; 62
    if ( g_Timer0_callBackPtr != NULL_PTR)
    1494:	80 91 83 00 	lds	r24, 0x0083
    1498:	90 91 84 00 	lds	r25, 0x0084
    149c:	00 97       	sbiw	r24, 0x00	; 0
    149e:	29 f0       	breq	.+10     	; 0x14aa <__vector_19+0x40>
    {
    	(*g_Timer0_callBackPtr)();
    14a0:	e0 91 83 00 	lds	r30, 0x0083
    14a4:	f0 91 84 00 	lds	r31, 0x0084
    14a8:	09 95       	icall
    }
}
    14aa:	cf 91       	pop	r28
    14ac:	df 91       	pop	r29
    14ae:	ff 91       	pop	r31
    14b0:	ef 91       	pop	r30
    14b2:	bf 91       	pop	r27
    14b4:	af 91       	pop	r26
    14b6:	9f 91       	pop	r25
    14b8:	8f 91       	pop	r24
    14ba:	7f 91       	pop	r23
    14bc:	6f 91       	pop	r22
    14be:	5f 91       	pop	r21
    14c0:	4f 91       	pop	r20
    14c2:	3f 91       	pop	r19
    14c4:	2f 91       	pop	r18
    14c6:	0f 90       	pop	r0
    14c8:	0f be       	out	0x3f, r0	; 63
    14ca:	0f 90       	pop	r0
    14cc:	1f 90       	pop	r1
    14ce:	18 95       	reti

000014d0 <__vector_6>:
ISR(TIMER1_COMPA_vect)
{
    14d0:	1f 92       	push	r1
    14d2:	0f 92       	push	r0
    14d4:	0f b6       	in	r0, 0x3f	; 63
    14d6:	0f 92       	push	r0
    14d8:	11 24       	eor	r1, r1
    14da:	2f 93       	push	r18
    14dc:	3f 93       	push	r19
    14de:	4f 93       	push	r20
    14e0:	5f 93       	push	r21
    14e2:	6f 93       	push	r22
    14e4:	7f 93       	push	r23
    14e6:	8f 93       	push	r24
    14e8:	9f 93       	push	r25
    14ea:	af 93       	push	r26
    14ec:	bf 93       	push	r27
    14ee:	ef 93       	push	r30
    14f0:	ff 93       	push	r31
    14f2:	df 93       	push	r29
    14f4:	cf 93       	push	r28
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
    if ( g_Timer1_callBackPtr != NULL_PTR)
    14fa:	80 91 85 00 	lds	r24, 0x0085
    14fe:	90 91 86 00 	lds	r25, 0x0086
    1502:	00 97       	sbiw	r24, 0x00	; 0
    1504:	29 f0       	breq	.+10     	; 0x1510 <__vector_6+0x40>
    {
    	(*g_Timer1_callBackPtr)();
    1506:	e0 91 85 00 	lds	r30, 0x0085
    150a:	f0 91 86 00 	lds	r31, 0x0086
    150e:	09 95       	icall
    }
}
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	ff 91       	pop	r31
    1516:	ef 91       	pop	r30
    1518:	bf 91       	pop	r27
    151a:	af 91       	pop	r26
    151c:	9f 91       	pop	r25
    151e:	8f 91       	pop	r24
    1520:	7f 91       	pop	r23
    1522:	6f 91       	pop	r22
    1524:	5f 91       	pop	r21
    1526:	4f 91       	pop	r20
    1528:	3f 91       	pop	r19
    152a:	2f 91       	pop	r18
    152c:	0f 90       	pop	r0
    152e:	0f be       	out	0x3f, r0	; 63
    1530:	0f 90       	pop	r0
    1532:	1f 90       	pop	r1
    1534:	18 95       	reti

00001536 <__vector_7>:
ISR(TIMER1_COMPB_vect)
{
    1536:	1f 92       	push	r1
    1538:	0f 92       	push	r0
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	0f 92       	push	r0
    153e:	11 24       	eor	r1, r1
    1540:	2f 93       	push	r18
    1542:	3f 93       	push	r19
    1544:	4f 93       	push	r20
    1546:	5f 93       	push	r21
    1548:	6f 93       	push	r22
    154a:	7f 93       	push	r23
    154c:	8f 93       	push	r24
    154e:	9f 93       	push	r25
    1550:	af 93       	push	r26
    1552:	bf 93       	push	r27
    1554:	ef 93       	push	r30
    1556:	ff 93       	push	r31
    1558:	df 93       	push	r29
    155a:	cf 93       	push	r28
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
    if ( g_Timer1_callBackPtr != NULL_PTR)
    1560:	80 91 85 00 	lds	r24, 0x0085
    1564:	90 91 86 00 	lds	r25, 0x0086
    1568:	00 97       	sbiw	r24, 0x00	; 0
    156a:	29 f0       	breq	.+10     	; 0x1576 <__vector_7+0x40>
    {
    	(*g_Timer1_callBackPtr)();
    156c:	e0 91 85 00 	lds	r30, 0x0085
    1570:	f0 91 86 00 	lds	r31, 0x0086
    1574:	09 95       	icall
    }
}
    1576:	cf 91       	pop	r28
    1578:	df 91       	pop	r29
    157a:	ff 91       	pop	r31
    157c:	ef 91       	pop	r30
    157e:	bf 91       	pop	r27
    1580:	af 91       	pop	r26
    1582:	9f 91       	pop	r25
    1584:	8f 91       	pop	r24
    1586:	7f 91       	pop	r23
    1588:	6f 91       	pop	r22
    158a:	5f 91       	pop	r21
    158c:	4f 91       	pop	r20
    158e:	3f 91       	pop	r19
    1590:	2f 91       	pop	r18
    1592:	0f 90       	pop	r0
    1594:	0f be       	out	0x3f, r0	; 63
    1596:	0f 90       	pop	r0
    1598:	1f 90       	pop	r1
    159a:	18 95       	reti

0000159c <__vector_4>:
ISR(TIMER2_OVF_vect)
{
    159c:	1f 92       	push	r1
    159e:	0f 92       	push	r0
    15a0:	0f b6       	in	r0, 0x3f	; 63
    15a2:	0f 92       	push	r0
    15a4:	11 24       	eor	r1, r1
    15a6:	2f 93       	push	r18
    15a8:	3f 93       	push	r19
    15aa:	4f 93       	push	r20
    15ac:	5f 93       	push	r21
    15ae:	6f 93       	push	r22
    15b0:	7f 93       	push	r23
    15b2:	8f 93       	push	r24
    15b4:	9f 93       	push	r25
    15b6:	af 93       	push	r26
    15b8:	bf 93       	push	r27
    15ba:	ef 93       	push	r30
    15bc:	ff 93       	push	r31
    15be:	df 93       	push	r29
    15c0:	cf 93       	push	r28
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
    if ( g_Timer2_callBackPtr != NULL_PTR)
    15c6:	80 91 87 00 	lds	r24, 0x0087
    15ca:	90 91 88 00 	lds	r25, 0x0088
    15ce:	00 97       	sbiw	r24, 0x00	; 0
    15d0:	29 f0       	breq	.+10     	; 0x15dc <__vector_4+0x40>
    {
    	(*g_Timer2_callBackPtr)();
    15d2:	e0 91 87 00 	lds	r30, 0x0087
    15d6:	f0 91 88 00 	lds	r31, 0x0088
    15da:	09 95       	icall
    }
}
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	ff 91       	pop	r31
    15e2:	ef 91       	pop	r30
    15e4:	bf 91       	pop	r27
    15e6:	af 91       	pop	r26
    15e8:	9f 91       	pop	r25
    15ea:	8f 91       	pop	r24
    15ec:	7f 91       	pop	r23
    15ee:	6f 91       	pop	r22
    15f0:	5f 91       	pop	r21
    15f2:	4f 91       	pop	r20
    15f4:	3f 91       	pop	r19
    15f6:	2f 91       	pop	r18
    15f8:	0f 90       	pop	r0
    15fa:	0f be       	out	0x3f, r0	; 63
    15fc:	0f 90       	pop	r0
    15fe:	1f 90       	pop	r1
    1600:	18 95       	reti

00001602 <__vector_3>:
ISR(TIMER2_COMP_vect)
{
    1602:	1f 92       	push	r1
    1604:	0f 92       	push	r0
    1606:	0f b6       	in	r0, 0x3f	; 63
    1608:	0f 92       	push	r0
    160a:	11 24       	eor	r1, r1
    160c:	2f 93       	push	r18
    160e:	3f 93       	push	r19
    1610:	4f 93       	push	r20
    1612:	5f 93       	push	r21
    1614:	6f 93       	push	r22
    1616:	7f 93       	push	r23
    1618:	8f 93       	push	r24
    161a:	9f 93       	push	r25
    161c:	af 93       	push	r26
    161e:	bf 93       	push	r27
    1620:	ef 93       	push	r30
    1622:	ff 93       	push	r31
    1624:	df 93       	push	r29
    1626:	cf 93       	push	r28
    1628:	cd b7       	in	r28, 0x3d	; 61
    162a:	de b7       	in	r29, 0x3e	; 62
    if ( g_Timer2_callBackPtr != NULL_PTR)
    162c:	80 91 87 00 	lds	r24, 0x0087
    1630:	90 91 88 00 	lds	r25, 0x0088
    1634:	00 97       	sbiw	r24, 0x00	; 0
    1636:	29 f0       	breq	.+10     	; 0x1642 <__vector_3+0x40>
    {
    	(*g_Timer2_callBackPtr)();
    1638:	e0 91 87 00 	lds	r30, 0x0087
    163c:	f0 91 88 00 	lds	r31, 0x0088
    1640:	09 95       	icall
    }
}
    1642:	cf 91       	pop	r28
    1644:	df 91       	pop	r29
    1646:	ff 91       	pop	r31
    1648:	ef 91       	pop	r30
    164a:	bf 91       	pop	r27
    164c:	af 91       	pop	r26
    164e:	9f 91       	pop	r25
    1650:	8f 91       	pop	r24
    1652:	7f 91       	pop	r23
    1654:	6f 91       	pop	r22
    1656:	5f 91       	pop	r21
    1658:	4f 91       	pop	r20
    165a:	3f 91       	pop	r19
    165c:	2f 91       	pop	r18
    165e:	0f 90       	pop	r0
    1660:	0f be       	out	0x3f, r0	; 63
    1662:	0f 90       	pop	r0
    1664:	1f 90       	pop	r1
    1666:	18 95       	reti

00001668 <Timer_init>:
* Parameters (out):   None
* Return value:       None
* Description:        Initialize the Selected Timer module.
********************************************************************************/
void Timer_init(const TIMER_ConfigType * Config_Ptr )
{
    1668:	df 93       	push	r29
    166a:	cf 93       	push	r28
    166c:	cd b7       	in	r28, 0x3d	; 61
    166e:	de b7       	in	r29, 0x3e	; 62
    1670:	28 97       	sbiw	r28, 0x08	; 8
    1672:	0f b6       	in	r0, 0x3f	; 63
    1674:	f8 94       	cli
    1676:	de bf       	out	0x3e, r29	; 62
    1678:	0f be       	out	0x3f, r0	; 63
    167a:	cd bf       	out	0x3d, r28	; 61
    167c:	9a 83       	std	Y+2, r25	; 0x02
    167e:	89 83       	std	Y+1, r24	; 0x01
	/*Check Timer Number*/
    switch(Config_Ptr->timer_number)
    1680:	e9 81       	ldd	r30, Y+1	; 0x01
    1682:	fa 81       	ldd	r31, Y+2	; 0x02
    1684:	80 81       	ld	r24, Z
    1686:	28 2f       	mov	r18, r24
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	38 87       	std	Y+8, r19	; 0x08
    168c:	2f 83       	std	Y+7, r18	; 0x07
    168e:	8f 81       	ldd	r24, Y+7	; 0x07
    1690:	98 85       	ldd	r25, Y+8	; 0x08
    1692:	81 30       	cpi	r24, 0x01	; 1
    1694:	91 05       	cpc	r25, r1
    1696:	09 f4       	brne	.+2      	; 0x169a <Timer_init+0x32>
    1698:	6d c1       	rjmp	.+730    	; 0x1974 <Timer_init+0x30c>
    169a:	2f 81       	ldd	r18, Y+7	; 0x07
    169c:	38 85       	ldd	r19, Y+8	; 0x08
    169e:	22 30       	cpi	r18, 0x02	; 2
    16a0:	31 05       	cpc	r19, r1
    16a2:	09 f4       	brne	.+2      	; 0x16a6 <Timer_init+0x3e>
    16a4:	b5 c0       	rjmp	.+362    	; 0x1810 <Timer_init+0x1a8>
    16a6:	8f 81       	ldd	r24, Y+7	; 0x07
    16a8:	98 85       	ldd	r25, Y+8	; 0x08
    16aa:	00 97       	sbiw	r24, 0x00	; 0
    16ac:	09 f0       	breq	.+2      	; 0x16b0 <Timer_init+0x48>
    16ae:	62 c1       	rjmp	.+708    	; 0x1974 <Timer_init+0x30c>
    {
        case Timer_0:
        	           /*Check Timer Mode*/
        	          switch(Config_Ptr->timer_mode)
    16b0:	e9 81       	ldd	r30, Y+1	; 0x01
    16b2:	fa 81       	ldd	r31, Y+2	; 0x02
    16b4:	81 81       	ldd	r24, Z+1	; 0x01
    16b6:	28 2f       	mov	r18, r24
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	3e 83       	std	Y+6, r19	; 0x06
    16bc:	2d 83       	std	Y+5, r18	; 0x05
    16be:	8d 81       	ldd	r24, Y+5	; 0x05
    16c0:	9e 81       	ldd	r25, Y+6	; 0x06
    16c2:	81 30       	cpi	r24, 0x01	; 1
    16c4:	91 05       	cpc	r25, r1
    16c6:	59 f1       	breq	.+86     	; 0x171e <Timer_init+0xb6>
    16c8:	2d 81       	ldd	r18, Y+5	; 0x05
    16ca:	3e 81       	ldd	r19, Y+6	; 0x06
    16cc:	22 30       	cpi	r18, 0x02	; 2
    16ce:	31 05       	cpc	r19, r1
    16d0:	2c f4       	brge	.+10     	; 0x16dc <Timer_init+0x74>
    16d2:	8d 81       	ldd	r24, Y+5	; 0x05
    16d4:	9e 81       	ldd	r25, Y+6	; 0x06
    16d6:	00 97       	sbiw	r24, 0x00	; 0
    16d8:	61 f0       	breq	.+24     	; 0x16f2 <Timer_init+0x8a>
    16da:	54 c0       	rjmp	.+168    	; 0x1784 <Timer_init+0x11c>
    16dc:	2d 81       	ldd	r18, Y+5	; 0x05
    16de:	3e 81       	ldd	r19, Y+6	; 0x06
    16e0:	22 30       	cpi	r18, 0x02	; 2
    16e2:	31 05       	cpc	r19, r1
    16e4:	59 f1       	breq	.+86     	; 0x173c <Timer_init+0xd4>
    16e6:	8d 81       	ldd	r24, Y+5	; 0x05
    16e8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ea:	83 30       	cpi	r24, 0x03	; 3
    16ec:	91 05       	cpc	r25, r1
    16ee:	e1 f1       	breq	.+120    	; 0x1768 <Timer_init+0x100>
    16f0:	49 c0       	rjmp	.+146    	; 0x1784 <Timer_init+0x11c>
        	           {
        	                case Normal:           CLEAR_BIT(TCCR0,WGM00);
    16f2:	a3 e5       	ldi	r26, 0x53	; 83
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	e3 e5       	ldi	r30, 0x53	; 83
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	8f 7b       	andi	r24, 0xBF	; 191
    16fe:	8c 93       	st	X, r24
        	                                       CLEAR_BIT(TCCR0,WGM01);
    1700:	a3 e5       	ldi	r26, 0x53	; 83
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	e3 e5       	ldi	r30, 0x53	; 83
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	87 7f       	andi	r24, 0xF7	; 247
    170c:	8c 93       	st	X, r24
                                                   /*Non-PWM Mode*/
                                                   SET_BIT(TCCR0,FOC0);
    170e:	a3 e5       	ldi	r26, 0x53	; 83
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	e3 e5       	ldi	r30, 0x53	; 83
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	80 68       	ori	r24, 0x80	; 128
    171a:	8c 93       	st	X, r24
    171c:	33 c0       	rjmp	.+102    	; 0x1784 <Timer_init+0x11c>
        	                	                   break;

        	                case PWM_PhaseCorrect: SET_BIT(TCCR0,WGM00);
    171e:	a3 e5       	ldi	r26, 0x53	; 83
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	e3 e5       	ldi	r30, 0x53	; 83
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	80 64       	ori	r24, 0x40	; 64
    172a:	8c 93       	st	X, r24
                                                   CLEAR_BIT(TCCR0,WGM01);
    172c:	a3 e5       	ldi	r26, 0x53	; 83
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	e3 e5       	ldi	r30, 0x53	; 83
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	87 7f       	andi	r24, 0xF7	; 247
    1738:	8c 93       	st	X, r24
    173a:	24 c0       	rjmp	.+72     	; 0x1784 <Timer_init+0x11c>
        	                	                   break;

        	                case CTC:              CLEAR_BIT(TCCR0,WGM00);
    173c:	a3 e5       	ldi	r26, 0x53	; 83
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	e3 e5       	ldi	r30, 0x53	; 83
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	8f 7b       	andi	r24, 0xBF	; 191
    1748:	8c 93       	st	X, r24
                                                   SET_BIT(TCCR0,WGM01);
    174a:	a3 e5       	ldi	r26, 0x53	; 83
    174c:	b0 e0       	ldi	r27, 0x00	; 0
    174e:	e3 e5       	ldi	r30, 0x53	; 83
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	88 60       	ori	r24, 0x08	; 8
    1756:	8c 93       	st	X, r24
                                                   /*Non-PWM Mode*/
                                                   SET_BIT(TCCR0,FOC0);
    1758:	a3 e5       	ldi	r26, 0x53	; 83
    175a:	b0 e0       	ldi	r27, 0x00	; 0
    175c:	e3 e5       	ldi	r30, 0x53	; 83
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	80 68       	ori	r24, 0x80	; 128
    1764:	8c 93       	st	X, r24
    1766:	0e c0       	rjmp	.+28     	; 0x1784 <Timer_init+0x11c>
        	                	                   break;

        	                case PWM_Fast:         SET_BIT(TCCR0,WGM00);
    1768:	a3 e5       	ldi	r26, 0x53	; 83
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	e3 e5       	ldi	r30, 0x53	; 83
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	80 64       	ori	r24, 0x40	; 64
    1774:	8c 93       	st	X, r24
                                                   SET_BIT(TCCR0,WGM01);
    1776:	a3 e5       	ldi	r26, 0x53	; 83
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	e3 e5       	ldi	r30, 0x53	; 83
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	88 60       	ori	r24, 0x08	; 8
    1782:	8c 93       	st	X, r24
        	                	                   break;
        	           }

        	           /*Check OC Pin Mode*/
        	           TCCR0 = (TCCR0 & 0xCF ) | (Config_Ptr->timer_OCPin_mode << 4 ) ;
    1784:	a3 e5       	ldi	r26, 0x53	; 83
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	e3 e5       	ldi	r30, 0x53	; 83
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	28 2f       	mov	r18, r24
    1790:	2f 7c       	andi	r18, 0xCF	; 207
    1792:	e9 81       	ldd	r30, Y+1	; 0x01
    1794:	fa 81       	ldd	r31, Y+2	; 0x02
    1796:	85 81       	ldd	r24, Z+5	; 0x05
    1798:	88 2f       	mov	r24, r24
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	82 95       	swap	r24
    179e:	92 95       	swap	r25
    17a0:	90 7f       	andi	r25, 0xF0	; 240
    17a2:	98 27       	eor	r25, r24
    17a4:	80 7f       	andi	r24, 0xF0	; 240
    17a6:	98 27       	eor	r25, r24
    17a8:	82 2b       	or	r24, r18
    17aa:	8c 93       	st	X, r24

                       /*Check Prescaler*/
                       TCCR0 = (TCCR0 & 0xF8)  | (Config_Ptr->timer_prescaler );
    17ac:	a3 e5       	ldi	r26, 0x53	; 83
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	e3 e5       	ldi	r30, 0x53	; 83
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	98 2f       	mov	r25, r24
    17b8:	98 7f       	andi	r25, 0xF8	; 248
    17ba:	e9 81       	ldd	r30, Y+1	; 0x01
    17bc:	fa 81       	ldd	r31, Y+2	; 0x02
    17be:	82 81       	ldd	r24, Z+2	; 0x02
    17c0:	89 2b       	or	r24, r25
    17c2:	8c 93       	st	X, r24

                       /*TCNT inital Value*/
                       TCNT0 = Config_Ptr->TCNT_value;
    17c4:	a2 e5       	ldi	r26, 0x52	; 82
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	e9 81       	ldd	r30, Y+1	; 0x01
    17ca:	fa 81       	ldd	r31, Y+2	; 0x02
    17cc:	86 81       	ldd	r24, Z+6	; 0x06
    17ce:	97 81       	ldd	r25, Z+7	; 0x07
    17d0:	8c 93       	st	X, r24

                       /*OCR Value*/
                       OCR0 = Config_Ptr->OCR_Value;
    17d2:	ac e5       	ldi	r26, 0x5C	; 92
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	e9 81       	ldd	r30, Y+1	; 0x01
    17d8:	fa 81       	ldd	r31, Y+2	; 0x02
    17da:	80 85       	ldd	r24, Z+8	; 0x08
    17dc:	8c 93       	st	X, r24

                       /*Over Flow interrupt*/
                       TIMSK = (TIMSK & 0xFE) | Config_Ptr->timer_overflowinterrupt;
    17de:	a9 e5       	ldi	r26, 0x59	; 89
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	e9 e5       	ldi	r30, 0x59	; 89
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	98 2f       	mov	r25, r24
    17ea:	9e 7f       	andi	r25, 0xFE	; 254
    17ec:	e9 81       	ldd	r30, Y+1	; 0x01
    17ee:	fa 81       	ldd	r31, Y+2	; 0x02
    17f0:	83 81       	ldd	r24, Z+3	; 0x03
    17f2:	89 2b       	or	r24, r25
    17f4:	8c 93       	st	X, r24

                       /*Output compare  interrupt*/
                       TIMSK = (TIMSK & 0xFD) | Config_Ptr->timer_OTCInterrupt;
    17f6:	a9 e5       	ldi	r26, 0x59	; 89
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	e9 e5       	ldi	r30, 0x59	; 89
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	98 2f       	mov	r25, r24
    1802:	9d 7f       	andi	r25, 0xFD	; 253
    1804:	e9 81       	ldd	r30, Y+1	; 0x01
    1806:	fa 81       	ldd	r31, Y+2	; 0x02
    1808:	84 81       	ldd	r24, Z+4	; 0x04
    180a:	89 2b       	or	r24, r25
    180c:	8c 93       	st	X, r24
    180e:	b2 c0       	rjmp	.+356    	; 0x1974 <Timer_init+0x30c>
        	           break;


        case Timer_2:
        	          /*Check Timer Mode*/
	                  switch(Config_Ptr->timer_mode)
    1810:	e9 81       	ldd	r30, Y+1	; 0x01
    1812:	fa 81       	ldd	r31, Y+2	; 0x02
    1814:	81 81       	ldd	r24, Z+1	; 0x01
    1816:	28 2f       	mov	r18, r24
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	3c 83       	std	Y+4, r19	; 0x04
    181c:	2b 83       	std	Y+3, r18	; 0x03
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	9c 81       	ldd	r25, Y+4	; 0x04
    1822:	81 30       	cpi	r24, 0x01	; 1
    1824:	91 05       	cpc	r25, r1
    1826:	99 f1       	breq	.+102    	; 0x188e <Timer_init+0x226>
    1828:	2b 81       	ldd	r18, Y+3	; 0x03
    182a:	3c 81       	ldd	r19, Y+4	; 0x04
    182c:	22 30       	cpi	r18, 0x02	; 2
    182e:	31 05       	cpc	r19, r1
    1830:	2c f4       	brge	.+10     	; 0x183c <Timer_init+0x1d4>
    1832:	8b 81       	ldd	r24, Y+3	; 0x03
    1834:	9c 81       	ldd	r25, Y+4	; 0x04
    1836:	00 97       	sbiw	r24, 0x00	; 0
    1838:	69 f0       	breq	.+26     	; 0x1854 <Timer_init+0x1ec>
    183a:	63 c0       	rjmp	.+198    	; 0x1902 <Timer_init+0x29a>
    183c:	2b 81       	ldd	r18, Y+3	; 0x03
    183e:	3c 81       	ldd	r19, Y+4	; 0x04
    1840:	22 30       	cpi	r18, 0x02	; 2
    1842:	31 05       	cpc	r19, r1
    1844:	99 f1       	breq	.+102    	; 0x18ac <Timer_init+0x244>
    1846:	8b 81       	ldd	r24, Y+3	; 0x03
    1848:	9c 81       	ldd	r25, Y+4	; 0x04
    184a:	83 30       	cpi	r24, 0x03	; 3
    184c:	91 05       	cpc	r25, r1
    184e:	09 f4       	brne	.+2      	; 0x1852 <Timer_init+0x1ea>
    1850:	4a c0       	rjmp	.+148    	; 0x18e6 <Timer_init+0x27e>
    1852:	57 c0       	rjmp	.+174    	; 0x1902 <Timer_init+0x29a>
	                  {
	                         case Normal:           CLEAR_BIT(TCCR2,WGM20);
    1854:	a5 e4       	ldi	r26, 0x45	; 69
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	e5 e4       	ldi	r30, 0x45	; 69
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	8f 7b       	andi	r24, 0xBF	; 191
    1860:	8c 93       	st	X, r24
	                                                CLEAR_BIT(TCCR2,WGM21);
    1862:	a5 e4       	ldi	r26, 0x45	; 69
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	e5 e4       	ldi	r30, 0x45	; 69
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	87 7f       	andi	r24, 0xF7	; 247
    186e:	8c 93       	st	X, r24
	                                                /*Non-PWM Mode*/
	                                                SET_BIT(TCCR2,FOC2);
    1870:	a5 e4       	ldi	r26, 0x45	; 69
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	e5 e4       	ldi	r30, 0x45	; 69
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	80 68       	ori	r24, 0x80	; 128
    187c:	8c 93       	st	X, r24
	                                                /*Interrupt Enable*/
	                                                CLEAR_BIT(TIMSK,OCIE2);
    187e:	a9 e5       	ldi	r26, 0x59	; 89
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	e9 e5       	ldi	r30, 0x59	; 89
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	8f 77       	andi	r24, 0x7F	; 127
    188a:	8c 93       	st	X, r24
    188c:	3a c0       	rjmp	.+116    	; 0x1902 <Timer_init+0x29a>
	                	                            break;
	                         case PWM_PhaseCorrect: SET_BIT(TCCR2,WGM20);
    188e:	a5 e4       	ldi	r26, 0x45	; 69
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	e5 e4       	ldi	r30, 0x45	; 69
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	80 64       	ori	r24, 0x40	; 64
    189a:	8c 93       	st	X, r24
                                                    CLEAR_BIT(TCCR2,WGM21);
    189c:	a5 e4       	ldi	r26, 0x45	; 69
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	e5 e4       	ldi	r30, 0x45	; 69
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	87 7f       	andi	r24, 0xF7	; 247
    18a8:	8c 93       	st	X, r24
    18aa:	2b c0       	rjmp	.+86     	; 0x1902 <Timer_init+0x29a>
	                	                            break;
	                         case CTC:              CLEAR_BIT(TCCR2,WGM20);
    18ac:	a5 e4       	ldi	r26, 0x45	; 69
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	e5 e4       	ldi	r30, 0x45	; 69
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	8f 7b       	andi	r24, 0xBF	; 191
    18b8:	8c 93       	st	X, r24
                                                    SET_BIT(TCCR2,WGM21);
    18ba:	a5 e4       	ldi	r26, 0x45	; 69
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	e5 e4       	ldi	r30, 0x45	; 69
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	88 60       	ori	r24, 0x08	; 8
    18c6:	8c 93       	st	X, r24
                                                    /*Non-PWM Mode*/
                                                    SET_BIT(TCCR2,FOC2);
    18c8:	a5 e4       	ldi	r26, 0x45	; 69
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	e5 e4       	ldi	r30, 0x45	; 69
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	80 68       	ori	r24, 0x80	; 128
    18d4:	8c 93       	st	X, r24
                                                    /*Interrupt Enable*/
                                                    SET_BIT(TIMSK,OCIE2);
    18d6:	a9 e5       	ldi	r26, 0x59	; 89
    18d8:	b0 e0       	ldi	r27, 0x00	; 0
    18da:	e9 e5       	ldi	r30, 0x59	; 89
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	80 68       	ori	r24, 0x80	; 128
    18e2:	8c 93       	st	X, r24
    18e4:	0e c0       	rjmp	.+28     	; 0x1902 <Timer_init+0x29a>
	                	                            break;
	                         case PWM_Fast:         SET_BIT(TCCR2,WGM20);
    18e6:	a5 e4       	ldi	r26, 0x45	; 69
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	e5 e4       	ldi	r30, 0x45	; 69
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	80 64       	ori	r24, 0x40	; 64
    18f2:	8c 93       	st	X, r24
                                                    SET_BIT(TCCR2,WGM21);
    18f4:	a5 e4       	ldi	r26, 0x45	; 69
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	e5 e4       	ldi	r30, 0x45	; 69
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	88 60       	ori	r24, 0x08	; 8
    1900:	8c 93       	st	X, r24
	                	                            break;
	                 }
       	              /*Check OC Pin Mode*/
       	              TCCR2 = (TCCR2 & 0xCF ) | (Config_Ptr->timer_OCPin_mode << 4 ) ;
    1902:	a5 e4       	ldi	r26, 0x45	; 69
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	e5 e4       	ldi	r30, 0x45	; 69
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	28 2f       	mov	r18, r24
    190e:	2f 7c       	andi	r18, 0xCF	; 207
    1910:	e9 81       	ldd	r30, Y+1	; 0x01
    1912:	fa 81       	ldd	r31, Y+2	; 0x02
    1914:	85 81       	ldd	r24, Z+5	; 0x05
    1916:	88 2f       	mov	r24, r24
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	82 95       	swap	r24
    191c:	92 95       	swap	r25
    191e:	90 7f       	andi	r25, 0xF0	; 240
    1920:	98 27       	eor	r25, r24
    1922:	80 7f       	andi	r24, 0xF0	; 240
    1924:	98 27       	eor	r25, r24
    1926:	82 2b       	or	r24, r18
    1928:	8c 93       	st	X, r24

                      /*Check Prescaler*/
                      TCCR2 = (TCCR2 & 0xF8) | Config_Ptr->timer_prescaler ;
    192a:	a5 e4       	ldi	r26, 0x45	; 69
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	e5 e4       	ldi	r30, 0x45	; 69
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	98 2f       	mov	r25, r24
    1936:	98 7f       	andi	r25, 0xF8	; 248
    1938:	e9 81       	ldd	r30, Y+1	; 0x01
    193a:	fa 81       	ldd	r31, Y+2	; 0x02
    193c:	82 81       	ldd	r24, Z+2	; 0x02
    193e:	89 2b       	or	r24, r25
    1940:	8c 93       	st	X, r24

                      /*TCNT inital Value*/
                      TCNT2 = Config_Ptr->TCNT_value;
    1942:	a4 e4       	ldi	r26, 0x44	; 68
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	e9 81       	ldd	r30, Y+1	; 0x01
    1948:	fa 81       	ldd	r31, Y+2	; 0x02
    194a:	86 81       	ldd	r24, Z+6	; 0x06
    194c:	97 81       	ldd	r25, Z+7	; 0x07
    194e:	8c 93       	st	X, r24

                      /*OCR Value*/
                      OCR2 = Config_Ptr->OCR_Value;
    1950:	a3 e4       	ldi	r26, 0x43	; 67
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	e9 81       	ldd	r30, Y+1	; 0x01
    1956:	fa 81       	ldd	r31, Y+2	; 0x02
    1958:	80 85       	ldd	r24, Z+8	; 0x08
    195a:	8c 93       	st	X, r24

                      /*Over Flow interrupt*/
                      TIMSK = (TIMSK & 0xBF) | Config_Ptr->timer_overflowinterrupt;
    195c:	a9 e5       	ldi	r26, 0x59	; 89
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	e9 e5       	ldi	r30, 0x59	; 89
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	98 2f       	mov	r25, r24
    1968:	9f 7b       	andi	r25, 0xBF	; 191
    196a:	e9 81       	ldd	r30, Y+1	; 0x01
    196c:	fa 81       	ldd	r31, Y+2	; 0x02
    196e:	83 81       	ldd	r24, Z+3	; 0x03
    1970:	89 2b       	or	r24, r25
    1972:	8c 93       	st	X, r24

    	             break;
    }
}
    1974:	28 96       	adiw	r28, 0x08	; 8
    1976:	0f b6       	in	r0, 0x3f	; 63
    1978:	f8 94       	cli
    197a:	de bf       	out	0x3e, r29	; 62
    197c:	0f be       	out	0x3f, r0	; 63
    197e:	cd bf       	out	0x3d, r28	; 61
    1980:	cf 91       	pop	r28
    1982:	df 91       	pop	r29
    1984:	08 95       	ret

00001986 <Timer_Deinit>:
* Parameters (out):   None
* Return value:       None
* Description:        Disable the Selected Timer module.
********************************************************************************/
void Timer_Deinit(uint8 Timer_Number)
{
    1986:	df 93       	push	r29
    1988:	cf 93       	push	r28
    198a:	00 d0       	rcall	.+0      	; 0x198c <Timer_Deinit+0x6>
    198c:	0f 92       	push	r0
    198e:	cd b7       	in	r28, 0x3d	; 61
    1990:	de b7       	in	r29, 0x3e	; 62
    1992:	89 83       	std	Y+1, r24	; 0x01
	/*Check Timer Number, Then we disable the clock of prescaler*/
	switch (Timer_Number)
    1994:	89 81       	ldd	r24, Y+1	; 0x01
    1996:	28 2f       	mov	r18, r24
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	3b 83       	std	Y+3, r19	; 0x03
    199c:	2a 83       	std	Y+2, r18	; 0x02
    199e:	8a 81       	ldd	r24, Y+2	; 0x02
    19a0:	9b 81       	ldd	r25, Y+3	; 0x03
    19a2:	81 30       	cpi	r24, 0x01	; 1
    19a4:	91 05       	cpc	r25, r1
    19a6:	01 f1       	breq	.+64     	; 0x19e8 <Timer_Deinit+0x62>
    19a8:	2a 81       	ldd	r18, Y+2	; 0x02
    19aa:	3b 81       	ldd	r19, Y+3	; 0x03
    19ac:	22 30       	cpi	r18, 0x02	; 2
    19ae:	31 05       	cpc	r19, r1
    19b0:	89 f1       	breq	.+98     	; 0x1a14 <Timer_Deinit+0x8e>
    19b2:	8a 81       	ldd	r24, Y+2	; 0x02
    19b4:	9b 81       	ldd	r25, Y+3	; 0x03
    19b6:	00 97       	sbiw	r24, 0x00	; 0
    19b8:	09 f0       	breq	.+2      	; 0x19bc <Timer_Deinit+0x36>
    19ba:	41 c0       	rjmp	.+130    	; 0x1a3e <Timer_Deinit+0xb8>
	{
	   case Timer_0:   CLEAR_BIT(TCCR0,CS00);
    19bc:	a3 e5       	ldi	r26, 0x53	; 83
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	e3 e5       	ldi	r30, 0x53	; 83
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	8e 7f       	andi	r24, 0xFE	; 254
    19c8:	8c 93       	st	X, r24
	                   CLEAR_BIT(TCCR0,CS01);
    19ca:	a3 e5       	ldi	r26, 0x53	; 83
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	e3 e5       	ldi	r30, 0x53	; 83
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	8d 7f       	andi	r24, 0xFD	; 253
    19d6:	8c 93       	st	X, r24
	                   CLEAR_BIT(TCCR0,CS02);
    19d8:	a3 e5       	ldi	r26, 0x53	; 83
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	e3 e5       	ldi	r30, 0x53	; 83
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	8b 7f       	andi	r24, 0xFB	; 251
    19e4:	8c 93       	st	X, r24
    19e6:	2b c0       	rjmp	.+86     	; 0x1a3e <Timer_Deinit+0xb8>
		               break;
	   case Timer_1:   CLEAR_BIT(TCCR1B,CS10);
    19e8:	ae e4       	ldi	r26, 0x4E	; 78
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	ee e4       	ldi	r30, 0x4E	; 78
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	8e 7f       	andi	r24, 0xFE	; 254
    19f4:	8c 93       	st	X, r24
                       CLEAR_BIT(TCCR1B,CS11);
    19f6:	ae e4       	ldi	r26, 0x4E	; 78
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	ee e4       	ldi	r30, 0x4E	; 78
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	8d 7f       	andi	r24, 0xFD	; 253
    1a02:	8c 93       	st	X, r24
                       CLEAR_BIT(TCCR1B,CS12);
    1a04:	ae e4       	ldi	r26, 0x4E	; 78
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	ee e4       	ldi	r30, 0x4E	; 78
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	8b 7f       	andi	r24, 0xFB	; 251
    1a10:	8c 93       	st	X, r24
    1a12:	15 c0       	rjmp	.+42     	; 0x1a3e <Timer_Deinit+0xb8>
		               break;
	   case Timer_2:   CLEAR_BIT(TCCR2,CS20);
    1a14:	a5 e4       	ldi	r26, 0x45	; 69
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	e5 e4       	ldi	r30, 0x45	; 69
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	8e 7f       	andi	r24, 0xFE	; 254
    1a20:	8c 93       	st	X, r24
                       CLEAR_BIT(TCCR2,CS21);
    1a22:	a5 e4       	ldi	r26, 0x45	; 69
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	e5 e4       	ldi	r30, 0x45	; 69
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	8d 7f       	andi	r24, 0xFD	; 253
    1a2e:	8c 93       	st	X, r24
                       CLEAR_BIT(TCCR2,CS22);
    1a30:	a5 e4       	ldi	r26, 0x45	; 69
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	e5 e4       	ldi	r30, 0x45	; 69
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	8b 7f       	andi	r24, 0xFB	; 251
    1a3c:	8c 93       	st	X, r24
		               break;
	}
}
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	cf 91       	pop	r28
    1a46:	df 91       	pop	r29
    1a48:	08 95       	ret

00001a4a <Timer0_setCallBack>:
* Parameters (out):   None
* Return value:       None
* Description:        Call Back TIMER0 Function.
********************************************************************************/
void Timer0_setCallBack(void(*a_ptr)(void))
{
    1a4a:	df 93       	push	r29
    1a4c:	cf 93       	push	r28
    1a4e:	00 d0       	rcall	.+0      	; 0x1a50 <Timer0_setCallBack+0x6>
    1a50:	cd b7       	in	r28, 0x3d	; 61
    1a52:	de b7       	in	r29, 0x3e	; 62
    1a54:	9a 83       	std	Y+2, r25	; 0x02
    1a56:	89 83       	std	Y+1, r24	; 0x01
   g_Timer0_callBackPtr = a_ptr;
    1a58:	89 81       	ldd	r24, Y+1	; 0x01
    1a5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a5c:	90 93 84 00 	sts	0x0084, r25
    1a60:	80 93 83 00 	sts	0x0083, r24
}
    1a64:	0f 90       	pop	r0
    1a66:	0f 90       	pop	r0
    1a68:	cf 91       	pop	r28
    1a6a:	df 91       	pop	r29
    1a6c:	08 95       	ret

00001a6e <Timer1_setCallBack>:
* Parameters (out):   None
* Return value:       None
* Description:        Call Back TIMER1 Function.
********************************************************************************/
void Timer1_setCallBack(void(*a_ptr)(void))
{
    1a6e:	df 93       	push	r29
    1a70:	cf 93       	push	r28
    1a72:	00 d0       	rcall	.+0      	; 0x1a74 <Timer1_setCallBack+0x6>
    1a74:	cd b7       	in	r28, 0x3d	; 61
    1a76:	de b7       	in	r29, 0x3e	; 62
    1a78:	9a 83       	std	Y+2, r25	; 0x02
    1a7a:	89 83       	std	Y+1, r24	; 0x01
	g_Timer1_callBackPtr = a_ptr;
    1a7c:	89 81       	ldd	r24, Y+1	; 0x01
    1a7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a80:	90 93 86 00 	sts	0x0086, r25
    1a84:	80 93 85 00 	sts	0x0085, r24
}
    1a88:	0f 90       	pop	r0
    1a8a:	0f 90       	pop	r0
    1a8c:	cf 91       	pop	r28
    1a8e:	df 91       	pop	r29
    1a90:	08 95       	ret

00001a92 <Timer2_setCallBack>:
* Parameters (out):   None
* Return value:       None
* Description:        Call Back TIMER2 Function.
********************************************************************************/
void Timer2_setCallBack(void(*a_ptr)(void))
{
    1a92:	df 93       	push	r29
    1a94:	cf 93       	push	r28
    1a96:	00 d0       	rcall	.+0      	; 0x1a98 <Timer2_setCallBack+0x6>
    1a98:	cd b7       	in	r28, 0x3d	; 61
    1a9a:	de b7       	in	r29, 0x3e	; 62
    1a9c:	9a 83       	std	Y+2, r25	; 0x02
    1a9e:	89 83       	std	Y+1, r24	; 0x01
	g_Timer2_callBackPtr = a_ptr;
    1aa0:	89 81       	ldd	r24, Y+1	; 0x01
    1aa2:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa4:	90 93 88 00 	sts	0x0088, r25
    1aa8:	80 93 87 00 	sts	0x0087, r24
}
    1aac:	0f 90       	pop	r0
    1aae:	0f 90       	pop	r0
    1ab0:	cf 91       	pop	r28
    1ab2:	df 91       	pop	r29
    1ab4:	08 95       	ret

00001ab6 <UART_Init>:
* Parameters (out):   None
* Return value:       None
* Description:        Initialize the UART module.
********************************************************************************/
void UART_Init(const UART_ConfigType * Config_Ptr)
{
    1ab6:	df 93       	push	r29
    1ab8:	cf 93       	push	r28
    1aba:	cd b7       	in	r28, 0x3d	; 61
    1abc:	de b7       	in	r29, 0x3e	; 62
    1abe:	60 97       	sbiw	r28, 0x10	; 16
    1ac0:	0f b6       	in	r0, 0x3f	; 63
    1ac2:	f8 94       	cli
    1ac4:	de bf       	out	0x3e, r29	; 62
    1ac6:	0f be       	out	0x3f, r0	; 63
    1ac8:	cd bf       	out	0x3d, r28	; 61
    1aca:	9a 83       	std	Y+2, r25	; 0x02
    1acc:	89 83       	std	Y+1, r24	; 0x01
	/*Config Operation Mode*/
    switch( Config_Ptr ->operation_mode)
    1ace:	e9 81       	ldd	r30, Y+1	; 0x01
    1ad0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ad2:	80 81       	ld	r24, Z
    1ad4:	28 2f       	mov	r18, r24
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	38 8b       	std	Y+16, r19	; 0x10
    1ada:	2f 87       	std	Y+15, r18	; 0x0f
    1adc:	4f 85       	ldd	r20, Y+15	; 0x0f
    1ade:	58 89       	ldd	r21, Y+16	; 0x10
    1ae0:	41 30       	cpi	r20, 0x01	; 1
    1ae2:	51 05       	cpc	r21, r1
    1ae4:	91 f0       	breq	.+36     	; 0x1b0a <UART_Init+0x54>
    1ae6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ae8:	98 89       	ldd	r25, Y+16	; 0x10
    1aea:	82 30       	cpi	r24, 0x02	; 2
    1aec:	91 05       	cpc	r25, r1
    1aee:	a9 f0       	breq	.+42     	; 0x1b1a <UART_Init+0x64>
    1af0:	2f 85       	ldd	r18, Y+15	; 0x0f
    1af2:	38 89       	ldd	r19, Y+16	; 0x10
    1af4:	21 15       	cp	r18, r1
    1af6:	31 05       	cpc	r19, r1
    1af8:	f1 f4       	brne	.+60     	; 0x1b36 <UART_Init+0x80>
    {
      case Receiver:                SET_BIT(UCSRB,RXEN);
    1afa:	aa e2       	ldi	r26, 0x2A	; 42
    1afc:	b0 e0       	ldi	r27, 0x00	; 0
    1afe:	ea e2       	ldi	r30, 0x2A	; 42
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	80 61       	ori	r24, 0x10	; 16
    1b06:	8c 93       	st	X, r24
    1b08:	16 c0       	rjmp	.+44     	; 0x1b36 <UART_Init+0x80>
    	                            break;
      case Transmitter:             SET_BIT(UCSRB,TXEN);
    1b0a:	aa e2       	ldi	r26, 0x2A	; 42
    1b0c:	b0 e0       	ldi	r27, 0x00	; 0
    1b0e:	ea e2       	ldi	r30, 0x2A	; 42
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	88 60       	ori	r24, 0x08	; 8
    1b16:	8c 93       	st	X, r24
    1b18:	0e c0       	rjmp	.+28     	; 0x1b36 <UART_Init+0x80>
    	                            break;
      case Transmitter_Receiver:    SET_BIT(UCSRB,RXEN);
    1b1a:	aa e2       	ldi	r26, 0x2A	; 42
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	ea e2       	ldi	r30, 0x2A	; 42
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	80 61       	ori	r24, 0x10	; 16
    1b26:	8c 93       	st	X, r24
                                    SET_BIT(UCSRB,TXEN);
    1b28:	aa e2       	ldi	r26, 0x2A	; 42
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	ea e2       	ldi	r30, 0x2A	; 42
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	88 60       	ori	r24, 0x08	; 8
    1b34:	8c 93       	st	X, r24
    	                            break;
    }
	/*Config Transmission Speed*/
	switch( Config_Ptr ->speed)
    1b36:	e9 81       	ldd	r30, Y+1	; 0x01
    1b38:	fa 81       	ldd	r31, Y+2	; 0x02
    1b3a:	81 81       	ldd	r24, Z+1	; 0x01
    1b3c:	48 2f       	mov	r20, r24
    1b3e:	50 e0       	ldi	r21, 0x00	; 0
    1b40:	5e 87       	std	Y+14, r21	; 0x0e
    1b42:	4d 87       	std	Y+13, r20	; 0x0d
    1b44:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b46:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b48:	00 97       	sbiw	r24, 0x00	; 0
    1b4a:	31 f0       	breq	.+12     	; 0x1b58 <UART_Init+0xa2>
    1b4c:	2d 85       	ldd	r18, Y+13	; 0x0d
    1b4e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1b50:	21 30       	cpi	r18, 0x01	; 1
    1b52:	31 05       	cpc	r19, r1
    1b54:	61 f0       	breq	.+24     	; 0x1b6e <UART_Init+0xb8>
    1b56:	15 c0       	rjmp	.+42     	; 0x1b82 <UART_Init+0xcc>
	{
	  case Normal_Speed:   CLEAR_BIT(UCSRA,U2X);
    1b58:	ab e2       	ldi	r26, 0x2B	; 43
    1b5a:	b0 e0       	ldi	r27, 0x00	; 0
    1b5c:	eb e2       	ldi	r30, 0x2B	; 43
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	80 81       	ld	r24, Z
    1b62:	8d 7f       	andi	r24, 0xFD	; 253
    1b64:	8c 93       	st	X, r24
	                       g_speed_mode_division_factor = 16;
    1b66:	80 e1       	ldi	r24, 0x10	; 16
    1b68:	80 93 8b 00 	sts	0x008B, r24
    1b6c:	0a c0       	rjmp	.+20     	; 0x1b82 <UART_Init+0xcc>
	 	                   break;
	  case Double_Speed:   SET_BIT(UCSRA,U2X);
    1b6e:	ab e2       	ldi	r26, 0x2B	; 43
    1b70:	b0 e0       	ldi	r27, 0x00	; 0
    1b72:	eb e2       	ldi	r30, 0x2B	; 43
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 81       	ld	r24, Z
    1b78:	82 60       	ori	r24, 0x02	; 2
    1b7a:	8c 93       	st	X, r24
                           g_speed_mode_division_factor = 8;
    1b7c:	88 e0       	ldi	r24, 0x08	; 8
    1b7e:	80 93 8b 00 	sts	0x008B, r24
	  		               break;
	}

	/*Config Synchronization of UART*/
	switch ( Config_Ptr->synchronization)
    1b82:	e9 81       	ldd	r30, Y+1	; 0x01
    1b84:	fa 81       	ldd	r31, Y+2	; 0x02
    1b86:	82 81       	ldd	r24, Z+2	; 0x02
    1b88:	48 2f       	mov	r20, r24
    1b8a:	50 e0       	ldi	r21, 0x00	; 0
    1b8c:	5c 87       	std	Y+12, r21	; 0x0c
    1b8e:	4b 87       	std	Y+11, r20	; 0x0b
    1b90:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b92:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b94:	00 97       	sbiw	r24, 0x00	; 0
    1b96:	31 f0       	breq	.+12     	; 0x1ba4 <UART_Init+0xee>
    1b98:	2b 85       	ldd	r18, Y+11	; 0x0b
    1b9a:	3c 85       	ldd	r19, Y+12	; 0x0c
    1b9c:	21 30       	cpi	r18, 0x01	; 1
    1b9e:	31 05       	cpc	r19, r1
    1ba0:	81 f0       	breq	.+32     	; 0x1bc2 <UART_Init+0x10c>
    1ba2:	1d c0       	rjmp	.+58     	; 0x1bde <UART_Init+0x128>
	{
	 case Asynchronous: SET_BIT(UCSRC,URSEL);
    1ba4:	a0 e4       	ldi	r26, 0x40	; 64
    1ba6:	b0 e0       	ldi	r27, 0x00	; 0
    1ba8:	e0 e4       	ldi	r30, 0x40	; 64
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	80 68       	ori	r24, 0x80	; 128
    1bb0:	8c 93       	st	X, r24
	                    CLEAR_BIT(UCSRC,UMSEL);
    1bb2:	a0 e4       	ldi	r26, 0x40	; 64
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	e0 e4       	ldi	r30, 0x40	; 64
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	80 81       	ld	r24, Z
    1bbc:	8f 7b       	andi	r24, 0xBF	; 191
    1bbe:	8c 93       	st	X, r24
    1bc0:	0e c0       	rjmp	.+28     	; 0x1bde <UART_Init+0x128>
		                break;
	 case Synchronous:  SET_BIT(UCSRC,URSEL);
    1bc2:	a0 e4       	ldi	r26, 0x40	; 64
    1bc4:	b0 e0       	ldi	r27, 0x00	; 0
    1bc6:	e0 e4       	ldi	r30, 0x40	; 64
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	80 81       	ld	r24, Z
    1bcc:	80 68       	ori	r24, 0x80	; 128
    1bce:	8c 93       	st	X, r24
	                    SET_BIT(UCSRC,UMSEL);
    1bd0:	a0 e4       	ldi	r26, 0x40	; 64
    1bd2:	b0 e0       	ldi	r27, 0x00	; 0
    1bd4:	e0 e4       	ldi	r30, 0x40	; 64
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	80 81       	ld	r24, Z
    1bda:	80 64       	ori	r24, 0x40	; 64
    1bdc:	8c 93       	st	X, r24
	 		            break;
	}

	/*Config Parity Bit of UART*/
	switch ( Config_Ptr ->parity)
    1bde:	e9 81       	ldd	r30, Y+1	; 0x01
    1be0:	fa 81       	ldd	r31, Y+2	; 0x02
    1be2:	83 81       	ldd	r24, Z+3	; 0x03
    1be4:	48 2f       	mov	r20, r24
    1be6:	50 e0       	ldi	r21, 0x00	; 0
    1be8:	5a 87       	std	Y+10, r21	; 0x0a
    1bea:	49 87       	std	Y+9, r20	; 0x09
    1bec:	89 85       	ldd	r24, Y+9	; 0x09
    1bee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf0:	81 30       	cpi	r24, 0x01	; 1
    1bf2:	91 05       	cpc	r25, r1
    1bf4:	09 f1       	breq	.+66     	; 0x1c38 <UART_Init+0x182>
    1bf6:	29 85       	ldd	r18, Y+9	; 0x09
    1bf8:	3a 85       	ldd	r19, Y+10	; 0x0a
    1bfa:	22 30       	cpi	r18, 0x02	; 2
    1bfc:	31 05       	cpc	r19, r1
    1bfe:	91 f1       	breq	.+100    	; 0x1c64 <UART_Init+0x1ae>
    1c00:	49 85       	ldd	r20, Y+9	; 0x09
    1c02:	5a 85       	ldd	r21, Y+10	; 0x0a
    1c04:	41 15       	cp	r20, r1
    1c06:	51 05       	cpc	r21, r1
    1c08:	09 f0       	breq	.+2      	; 0x1c0c <UART_Init+0x156>
    1c0a:	41 c0       	rjmp	.+130    	; 0x1c8e <UART_Init+0x1d8>
	{
	  case Parity_Disabled: SET_BIT(UCSRC,URSEL);
    1c0c:	a0 e4       	ldi	r26, 0x40	; 64
    1c0e:	b0 e0       	ldi	r27, 0x00	; 0
    1c10:	e0 e4       	ldi	r30, 0x40	; 64
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	80 81       	ld	r24, Z
    1c16:	80 68       	ori	r24, 0x80	; 128
    1c18:	8c 93       	st	X, r24
		                    CLEAR_BIT(UCSRC,UPM0);
    1c1a:	a0 e4       	ldi	r26, 0x40	; 64
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	e0 e4       	ldi	r30, 0x40	; 64
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	8f 7e       	andi	r24, 0xEF	; 239
    1c26:	8c 93       	st	X, r24
	                        CLEAR_BIT(UCSRC,UPM1);
    1c28:	a0 e4       	ldi	r26, 0x40	; 64
    1c2a:	b0 e0       	ldi	r27, 0x00	; 0
    1c2c:	e0 e4       	ldi	r30, 0x40	; 64
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	80 81       	ld	r24, Z
    1c32:	8f 7d       	andi	r24, 0xDF	; 223
    1c34:	8c 93       	st	X, r24
    1c36:	2b c0       	rjmp	.+86     	; 0x1c8e <UART_Init+0x1d8>
	                        break;
	  case Parity_Odd:      SET_BIT(UCSRC,URSEL);
    1c38:	a0 e4       	ldi	r26, 0x40	; 64
    1c3a:	b0 e0       	ldi	r27, 0x00	; 0
    1c3c:	e0 e4       	ldi	r30, 0x40	; 64
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	80 68       	ori	r24, 0x80	; 128
    1c44:	8c 93       	st	X, r24
		                    SET_BIT(UCSRC,UPM0);
    1c46:	a0 e4       	ldi	r26, 0x40	; 64
    1c48:	b0 e0       	ldi	r27, 0x00	; 0
    1c4a:	e0 e4       	ldi	r30, 0x40	; 64
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	80 81       	ld	r24, Z
    1c50:	80 61       	ori	r24, 0x10	; 16
    1c52:	8c 93       	st	X, r24
                            SET_BIT(UCSRC,UPM1);
    1c54:	a0 e4       	ldi	r26, 0x40	; 64
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	e0 e4       	ldi	r30, 0x40	; 64
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	80 62       	ori	r24, 0x20	; 32
    1c60:	8c 93       	st	X, r24
    1c62:	15 c0       	rjmp	.+42     	; 0x1c8e <UART_Init+0x1d8>
                            break;
	  case Parity_Even:     SET_BIT(UCSRC,URSEL);
    1c64:	a0 e4       	ldi	r26, 0x40	; 64
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	e0 e4       	ldi	r30, 0x40	; 64
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	80 68       	ori	r24, 0x80	; 128
    1c70:	8c 93       	st	X, r24
		                    CLEAR_BIT(UCSRC,UPM0);
    1c72:	a0 e4       	ldi	r26, 0x40	; 64
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	e0 e4       	ldi	r30, 0x40	; 64
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	8f 7e       	andi	r24, 0xEF	; 239
    1c7e:	8c 93       	st	X, r24
                            SET_BIT(UCSRC,UPM1);
    1c80:	a0 e4       	ldi	r26, 0x40	; 64
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	e0 e4       	ldi	r30, 0x40	; 64
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	80 62       	ori	r24, 0x20	; 32
    1c8c:	8c 93       	st	X, r24
                            break;
	}

	/*Config Number of Stop Bits of UART*/
    switch( Config_Ptr ->stop_bit)
    1c8e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c90:	fa 81       	ldd	r31, Y+2	; 0x02
    1c92:	84 81       	ldd	r24, Z+4	; 0x04
    1c94:	28 2f       	mov	r18, r24
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	38 87       	std	Y+8, r19	; 0x08
    1c9a:	2f 83       	std	Y+7, r18	; 0x07
    1c9c:	4f 81       	ldd	r20, Y+7	; 0x07
    1c9e:	58 85       	ldd	r21, Y+8	; 0x08
    1ca0:	41 15       	cp	r20, r1
    1ca2:	51 05       	cpc	r21, r1
    1ca4:	31 f0       	breq	.+12     	; 0x1cb2 <UART_Init+0x1fc>
    1ca6:	8f 81       	ldd	r24, Y+7	; 0x07
    1ca8:	98 85       	ldd	r25, Y+8	; 0x08
    1caa:	81 30       	cpi	r24, 0x01	; 1
    1cac:	91 05       	cpc	r25, r1
    1cae:	49 f0       	breq	.+18     	; 0x1cc2 <UART_Init+0x20c>
    1cb0:	0f c0       	rjmp	.+30     	; 0x1cd0 <UART_Init+0x21a>
    {
    case StopBit_1:  CLEAR_BIT(UCSRC,USBS);
    1cb2:	a0 e4       	ldi	r26, 0x40	; 64
    1cb4:	b0 e0       	ldi	r27, 0x00	; 0
    1cb6:	e0 e4       	ldi	r30, 0x40	; 64
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	80 81       	ld	r24, Z
    1cbc:	87 7f       	andi	r24, 0xF7	; 247
    1cbe:	8c 93       	st	X, r24
    1cc0:	07 c0       	rjmp	.+14     	; 0x1cd0 <UART_Init+0x21a>
    	             break;
    case StopBit_2:  SET_BIT(UCSRC,USBS);
    1cc2:	a0 e4       	ldi	r26, 0x40	; 64
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	e0 e4       	ldi	r30, 0x40	; 64
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	88 60       	ori	r24, 0x08	; 8
    1cce:	8c 93       	st	X, r24
    	             break;
    }

    /*Config Number of Data Frame Bits*/
    switch ( Config_Ptr ->dataframe_bits )
    1cd0:	e9 81       	ldd	r30, Y+1	; 0x01
    1cd2:	fa 81       	ldd	r31, Y+2	; 0x02
    1cd4:	85 81       	ldd	r24, Z+5	; 0x05
    1cd6:	28 2f       	mov	r18, r24
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	3e 83       	std	Y+6, r19	; 0x06
    1cdc:	2d 83       	std	Y+5, r18	; 0x05
    1cde:	4d 81       	ldd	r20, Y+5	; 0x05
    1ce0:	5e 81       	ldd	r21, Y+6	; 0x06
    1ce2:	42 30       	cpi	r20, 0x02	; 2
    1ce4:	51 05       	cpc	r21, r1
    1ce6:	09 f4       	brne	.+2      	; 0x1cea <UART_Init+0x234>
    1ce8:	49 c0       	rjmp	.+146    	; 0x1d7c <UART_Init+0x2c6>
    1cea:	8d 81       	ldd	r24, Y+5	; 0x05
    1cec:	9e 81       	ldd	r25, Y+6	; 0x06
    1cee:	83 30       	cpi	r24, 0x03	; 3
    1cf0:	91 05       	cpc	r25, r1
    1cf2:	5c f4       	brge	.+22     	; 0x1d0a <UART_Init+0x254>
    1cf4:	2d 81       	ldd	r18, Y+5	; 0x05
    1cf6:	3e 81       	ldd	r19, Y+6	; 0x06
    1cf8:	21 15       	cp	r18, r1
    1cfa:	31 05       	cpc	r19, r1
    1cfc:	99 f0       	breq	.+38     	; 0x1d24 <UART_Init+0x26e>
    1cfe:	4d 81       	ldd	r20, Y+5	; 0x05
    1d00:	5e 81       	ldd	r21, Y+6	; 0x06
    1d02:	41 30       	cpi	r20, 0x01	; 1
    1d04:	51 05       	cpc	r21, r1
    1d06:	21 f1       	breq	.+72     	; 0x1d50 <UART_Init+0x29a>
    1d08:	7a c0       	rjmp	.+244    	; 0x1dfe <UART_Init+0x348>
    1d0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d0e:	83 30       	cpi	r24, 0x03	; 3
    1d10:	91 05       	cpc	r25, r1
    1d12:	09 f4       	brne	.+2      	; 0x1d16 <UART_Init+0x260>
    1d14:	49 c0       	rjmp	.+146    	; 0x1da8 <UART_Init+0x2f2>
    1d16:	2d 81       	ldd	r18, Y+5	; 0x05
    1d18:	3e 81       	ldd	r19, Y+6	; 0x06
    1d1a:	27 30       	cpi	r18, 0x07	; 7
    1d1c:	31 05       	cpc	r19, r1
    1d1e:	09 f4       	brne	.+2      	; 0x1d22 <UART_Init+0x26c>
    1d20:	59 c0       	rjmp	.+178    	; 0x1dd4 <UART_Init+0x31e>
    1d22:	6d c0       	rjmp	.+218    	; 0x1dfe <UART_Init+0x348>
    {
    case DataFrame_5Bits:  CLEAR_BIT(UCSRC,UCSZ0);
    1d24:	a0 e4       	ldi	r26, 0x40	; 64
    1d26:	b0 e0       	ldi	r27, 0x00	; 0
    1d28:	e0 e4       	ldi	r30, 0x40	; 64
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	80 81       	ld	r24, Z
    1d2e:	8d 7f       	andi	r24, 0xFD	; 253
    1d30:	8c 93       	st	X, r24
                           CLEAR_BIT(UCSRC,UCSZ1);
    1d32:	a0 e4       	ldi	r26, 0x40	; 64
    1d34:	b0 e0       	ldi	r27, 0x00	; 0
    1d36:	e0 e4       	ldi	r30, 0x40	; 64
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	8b 7f       	andi	r24, 0xFB	; 251
    1d3e:	8c 93       	st	X, r24
                           CLEAR_BIT(UCSRB,UCSZ2);
    1d40:	aa e2       	ldi	r26, 0x2A	; 42
    1d42:	b0 e0       	ldi	r27, 0x00	; 0
    1d44:	ea e2       	ldi	r30, 0x2A	; 42
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	80 81       	ld	r24, Z
    1d4a:	8b 7f       	andi	r24, 0xFB	; 251
    1d4c:	8c 93       	st	X, r24
    1d4e:	57 c0       	rjmp	.+174    	; 0x1dfe <UART_Init+0x348>
    	                   break;
    case DataFrame_6Bits:  SET_BIT(UCSRC,UCSZ0);
    1d50:	a0 e4       	ldi	r26, 0x40	; 64
    1d52:	b0 e0       	ldi	r27, 0x00	; 0
    1d54:	e0 e4       	ldi	r30, 0x40	; 64
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
    1d5a:	82 60       	ori	r24, 0x02	; 2
    1d5c:	8c 93       	st	X, r24
                           CLEAR_BIT(UCSRC,UCSZ1);
    1d5e:	a0 e4       	ldi	r26, 0x40	; 64
    1d60:	b0 e0       	ldi	r27, 0x00	; 0
    1d62:	e0 e4       	ldi	r30, 0x40	; 64
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	80 81       	ld	r24, Z
    1d68:	8b 7f       	andi	r24, 0xFB	; 251
    1d6a:	8c 93       	st	X, r24
                           CLEAR_BIT(UCSRB,UCSZ2);
    1d6c:	aa e2       	ldi	r26, 0x2A	; 42
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	ea e2       	ldi	r30, 0x2A	; 42
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	8b 7f       	andi	r24, 0xFB	; 251
    1d78:	8c 93       	st	X, r24
    1d7a:	41 c0       	rjmp	.+130    	; 0x1dfe <UART_Init+0x348>
    	                   break;
    case DataFrame_7Bits:  CLEAR_BIT(UCSRC,UCSZ0);
    1d7c:	a0 e4       	ldi	r26, 0x40	; 64
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	e0 e4       	ldi	r30, 0x40	; 64
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	8d 7f       	andi	r24, 0xFD	; 253
    1d88:	8c 93       	st	X, r24
                           SET_BIT(UCSRC,UCSZ1);
    1d8a:	a0 e4       	ldi	r26, 0x40	; 64
    1d8c:	b0 e0       	ldi	r27, 0x00	; 0
    1d8e:	e0 e4       	ldi	r30, 0x40	; 64
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	84 60       	ori	r24, 0x04	; 4
    1d96:	8c 93       	st	X, r24
                           CLEAR_BIT(UCSRB,UCSZ2);
    1d98:	aa e2       	ldi	r26, 0x2A	; 42
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	ea e2       	ldi	r30, 0x2A	; 42
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	8b 7f       	andi	r24, 0xFB	; 251
    1da4:	8c 93       	st	X, r24
    1da6:	2b c0       	rjmp	.+86     	; 0x1dfe <UART_Init+0x348>
    	                   break;
    case DataFrame_8Bits:  SET_BIT(UCSRC,UCSZ0);
    1da8:	a0 e4       	ldi	r26, 0x40	; 64
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	e0 e4       	ldi	r30, 0x40	; 64
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	82 60       	ori	r24, 0x02	; 2
    1db4:	8c 93       	st	X, r24
                           SET_BIT(UCSRC,UCSZ1);
    1db6:	a0 e4       	ldi	r26, 0x40	; 64
    1db8:	b0 e0       	ldi	r27, 0x00	; 0
    1dba:	e0 e4       	ldi	r30, 0x40	; 64
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 81       	ld	r24, Z
    1dc0:	84 60       	ori	r24, 0x04	; 4
    1dc2:	8c 93       	st	X, r24
                           CLEAR_BIT(UCSRB,UCSZ2);
    1dc4:	aa e2       	ldi	r26, 0x2A	; 42
    1dc6:	b0 e0       	ldi	r27, 0x00	; 0
    1dc8:	ea e2       	ldi	r30, 0x2A	; 42
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
    1dce:	8b 7f       	andi	r24, 0xFB	; 251
    1dd0:	8c 93       	st	X, r24
    1dd2:	15 c0       	rjmp	.+42     	; 0x1dfe <UART_Init+0x348>
    	                   break;
    case DataFrame_9Bits:  SET_BIT(UCSRC,UCSZ0);
    1dd4:	a0 e4       	ldi	r26, 0x40	; 64
    1dd6:	b0 e0       	ldi	r27, 0x00	; 0
    1dd8:	e0 e4       	ldi	r30, 0x40	; 64
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	82 60       	ori	r24, 0x02	; 2
    1de0:	8c 93       	st	X, r24
                           SET_BIT(UCSRC,UCSZ1);
    1de2:	a0 e4       	ldi	r26, 0x40	; 64
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	e0 e4       	ldi	r30, 0x40	; 64
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	84 60       	ori	r24, 0x04	; 4
    1dee:	8c 93       	st	X, r24
                           SET_BIT(UCSRB,UCSZ2);
    1df0:	aa e2       	ldi	r26, 0x2A	; 42
    1df2:	b0 e0       	ldi	r27, 0x00	; 0
    1df4:	ea e2       	ldi	r30, 0x2A	; 42
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	84 60       	ori	r24, 0x04	; 4
    1dfc:	8c 93       	st	X, r24
    	                   break;
    }


    switch( Config_Ptr ->baud_rate)
    1dfe:	e9 81       	ldd	r30, Y+1	; 0x01
    1e00:	fa 81       	ldd	r31, Y+2	; 0x02
    1e02:	86 81       	ldd	r24, Z+6	; 0x06
    1e04:	48 2f       	mov	r20, r24
    1e06:	50 e0       	ldi	r21, 0x00	; 0
    1e08:	5c 83       	std	Y+4, r21	; 0x04
    1e0a:	4b 83       	std	Y+3, r20	; 0x03
    1e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e10:	81 30       	cpi	r24, 0x01	; 1
    1e12:	91 05       	cpc	r25, r1
    1e14:	f9 f0       	breq	.+62     	; 0x1e54 <UART_Init+0x39e>
    1e16:	2b 81       	ldd	r18, Y+3	; 0x03
    1e18:	3c 81       	ldd	r19, Y+4	; 0x04
    1e1a:	22 30       	cpi	r18, 0x02	; 2
    1e1c:	31 05       	cpc	r19, r1
    1e1e:	34 f4       	brge	.+12     	; 0x1e2c <UART_Init+0x376>
    1e20:	4b 81       	ldd	r20, Y+3	; 0x03
    1e22:	5c 81       	ldd	r21, Y+4	; 0x04
    1e24:	41 15       	cp	r20, r1
    1e26:	51 05       	cpc	r21, r1
    1e28:	69 f0       	breq	.+26     	; 0x1e44 <UART_Init+0x38e>
    1e2a:	79 c0       	rjmp	.+242    	; 0x1f1e <UART_Init+0x468>
    1e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e30:	82 30       	cpi	r24, 0x02	; 2
    1e32:	91 05       	cpc	r25, r1
    1e34:	91 f1       	breq	.+100    	; 0x1e9a <UART_Init+0x3e4>
    1e36:	2b 81       	ldd	r18, Y+3	; 0x03
    1e38:	3c 81       	ldd	r19, Y+4	; 0x04
    1e3a:	23 30       	cpi	r18, 0x03	; 3
    1e3c:	31 05       	cpc	r19, r1
    1e3e:	09 f4       	brne	.+2      	; 0x1e42 <UART_Init+0x38c>
    1e40:	4f c0       	rjmp	.+158    	; 0x1ee0 <UART_Init+0x42a>
    1e42:	6d c0       	rjmp	.+218    	; 0x1f1e <UART_Init+0x468>
    {
    case BaudRate_9600:   /*For 1 MHz  value = 12 , For 8MHz value = 103*/
    	                  UBRRH = 103>>8;
    1e44:	e0 e4       	ldi	r30, 0x40	; 64
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	10 82       	st	Z, r1
                           UBRRL = 103;
    1e4a:	e9 e2       	ldi	r30, 0x29	; 41
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	87 e6       	ldi	r24, 0x67	; 103
    1e50:	80 83       	st	Z, r24
    1e52:	65 c0       	rjmp	.+202    	; 0x1f1e <UART_Init+0x468>
    	                  break;
    	                  /*There is a bug in the equation shown blow */
    case BaudRate_14400:  g_UBRR_value= (uint16)(((F_CPU / (g_speed_mode_division_factor * 14400 )))-1);
    1e54:	80 91 8b 00 	lds	r24, 0x008B
    1e58:	28 2f       	mov	r18, r24
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	80 e4       	ldi	r24, 0x40	; 64
    1e5e:	98 e3       	ldi	r25, 0x38	; 56
    1e60:	ac 01       	movw	r20, r24
    1e62:	24 9f       	mul	r18, r20
    1e64:	c0 01       	movw	r24, r0
    1e66:	25 9f       	mul	r18, r21
    1e68:	90 0d       	add	r25, r0
    1e6a:	34 9f       	mul	r19, r20
    1e6c:	90 0d       	add	r25, r0
    1e6e:	11 24       	eor	r1, r1
    1e70:	9c 01       	movw	r18, r24
    1e72:	44 27       	eor	r20, r20
    1e74:	37 fd       	sbrc	r19, 7
    1e76:	40 95       	com	r20
    1e78:	54 2f       	mov	r21, r20
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	92 e1       	ldi	r25, 0x12	; 18
    1e7e:	aa e7       	ldi	r26, 0x7A	; 122
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	bc 01       	movw	r22, r24
    1e84:	cd 01       	movw	r24, r26
    1e86:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__divmodsi4>
    1e8a:	da 01       	movw	r26, r20
    1e8c:	c9 01       	movw	r24, r18
    1e8e:	01 97       	sbiw	r24, 0x01	; 1
    1e90:	90 93 8a 00 	sts	0x008A, r25
    1e94:	80 93 89 00 	sts	0x0089, r24
    1e98:	42 c0       	rjmp	.+132    	; 0x1f1e <UART_Init+0x468>
    	                  break;
    case BaudRate_19200:  g_UBRR_value= (uint16)(((F_CPU / (g_speed_mode_division_factor * 19200 )))-1);
    1e9a:	80 91 8b 00 	lds	r24, 0x008B
    1e9e:	28 2f       	mov	r18, r24
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	9b e4       	ldi	r25, 0x4B	; 75
    1ea6:	ac 01       	movw	r20, r24
    1ea8:	24 9f       	mul	r18, r20
    1eaa:	c0 01       	movw	r24, r0
    1eac:	25 9f       	mul	r18, r21
    1eae:	90 0d       	add	r25, r0
    1eb0:	34 9f       	mul	r19, r20
    1eb2:	90 0d       	add	r25, r0
    1eb4:	11 24       	eor	r1, r1
    1eb6:	9c 01       	movw	r18, r24
    1eb8:	44 27       	eor	r20, r20
    1eba:	37 fd       	sbrc	r19, 7
    1ebc:	40 95       	com	r20
    1ebe:	54 2f       	mov	r21, r20
    1ec0:	80 e0       	ldi	r24, 0x00	; 0
    1ec2:	92 e1       	ldi	r25, 0x12	; 18
    1ec4:	aa e7       	ldi	r26, 0x7A	; 122
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	bc 01       	movw	r22, r24
    1eca:	cd 01       	movw	r24, r26
    1ecc:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__divmodsi4>
    1ed0:	da 01       	movw	r26, r20
    1ed2:	c9 01       	movw	r24, r18
    1ed4:	01 97       	sbiw	r24, 0x01	; 1
    1ed6:	90 93 8a 00 	sts	0x008A, r25
    1eda:	80 93 89 00 	sts	0x0089, r24
    1ede:	1f c0       	rjmp	.+62     	; 0x1f1e <UART_Init+0x468>
    	                  break;
    case BaudRate_115200: g_UBRR_value= (uint16)(((F_CPU / (g_speed_mode_division_factor * 115200)))-1);
    1ee0:	80 91 8b 00 	lds	r24, 0x008B
    1ee4:	88 2f       	mov	r24, r24
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	a0 e0       	ldi	r26, 0x00	; 0
    1eea:	b0 e0       	ldi	r27, 0x00	; 0
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	32 ec       	ldi	r19, 0xC2	; 194
    1ef0:	41 e0       	ldi	r20, 0x01	; 1
    1ef2:	50 e0       	ldi	r21, 0x00	; 0
    1ef4:	bc 01       	movw	r22, r24
    1ef6:	cd 01       	movw	r24, r26
    1ef8:	0e 94 37 14 	call	0x286e	; 0x286e <__mulsi3>
    1efc:	9b 01       	movw	r18, r22
    1efe:	ac 01       	movw	r20, r24
    1f00:	80 e0       	ldi	r24, 0x00	; 0
    1f02:	92 e1       	ldi	r25, 0x12	; 18
    1f04:	aa e7       	ldi	r26, 0x7A	; 122
    1f06:	b0 e0       	ldi	r27, 0x00	; 0
    1f08:	bc 01       	movw	r22, r24
    1f0a:	cd 01       	movw	r24, r26
    1f0c:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__divmodsi4>
    1f10:	da 01       	movw	r26, r20
    1f12:	c9 01       	movw	r24, r18
    1f14:	01 97       	sbiw	r24, 0x01	; 1
    1f16:	90 93 8a 00 	sts	0x008A, r25
    1f1a:	80 93 89 00 	sts	0x0089, r24
    }




}
    1f1e:	60 96       	adiw	r28, 0x10	; 16
    1f20:	0f b6       	in	r0, 0x3f	; 63
    1f22:	f8 94       	cli
    1f24:	de bf       	out	0x3e, r29	; 62
    1f26:	0f be       	out	0x3f, r0	; 63
    1f28:	cd bf       	out	0x3d, r28	; 61
    1f2a:	cf 91       	pop	r28
    1f2c:	df 91       	pop	r29
    1f2e:	08 95       	ret

00001f30 <UART_sendByte>:
* Parameters (out):   None
* Return value:       None
* Description:        Send a Byte to other devices.
********************************************************************************/
void UART_sendByte( const uint8 data )
{
    1f30:	df 93       	push	r29
    1f32:	cf 93       	push	r28
    1f34:	0f 92       	push	r0
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62
    1f3a:	89 83       	std	Y+1, r24	; 0x01
   /*Wait until Flag = 1 , etc: UDR is empty and ready to be loaded with data*/
   while (BIT_IS_CLEAR(UCSRA,UDRE));
    1f3c:	eb e2       	ldi	r30, 0x2B	; 43
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	80 81       	ld	r24, Z
    1f42:	88 2f       	mov	r24, r24
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	80 72       	andi	r24, 0x20	; 32
    1f48:	90 70       	andi	r25, 0x00	; 0
    1f4a:	00 97       	sbiw	r24, 0x00	; 0
    1f4c:	b9 f3       	breq	.-18     	; 0x1f3c <UART_sendByte+0xc>
   UDR = data;
    1f4e:	ec e2       	ldi	r30, 0x2C	; 44
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	89 81       	ldd	r24, Y+1	; 0x01
    1f54:	80 83       	st	Z, r24
}
    1f56:	0f 90       	pop	r0
    1f58:	cf 91       	pop	r28
    1f5a:	df 91       	pop	r29
    1f5c:	08 95       	ret

00001f5e <UART_receiveByte>:
* Parameters (out):   None
* Return value:       uint8
* Description:        receive a Byte from other devices
********************************************************************************/
uint8 UART_receiveByte (void)
{
    1f5e:	df 93       	push	r29
    1f60:	cf 93       	push	r28
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
	 /*Wait until Flag = 1 , etc: UDR is Loaded with received Data then return UDR*/
	  while (BIT_IS_CLEAR(UCSRA,RXC));
    1f66:	eb e2       	ldi	r30, 0x2B	; 43
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	88 23       	and	r24, r24
    1f6e:	dc f7       	brge	.-10     	; 0x1f66 <UART_receiveByte+0x8>
      return UDR;
    1f70:	ec e2       	ldi	r30, 0x2C	; 44
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	80 81       	ld	r24, Z
}
    1f76:	cf 91       	pop	r28
    1f78:	df 91       	pop	r29
    1f7a:	08 95       	ret

00001f7c <UART_sendString>:
* Parameters (out):   None
* Return value:       None
* Description:        Send a String to other devices.
********************************************************************************/
void UART_sendString( const uint8 * Str)
{
    1f7c:	df 93       	push	r29
    1f7e:	cf 93       	push	r28
    1f80:	00 d0       	rcall	.+0      	; 0x1f82 <UART_sendString+0x6>
    1f82:	0f 92       	push	r0
    1f84:	cd b7       	in	r28, 0x3d	; 61
    1f86:	de b7       	in	r29, 0x3e	; 62
    1f88:	9b 83       	std	Y+3, r25	; 0x03
    1f8a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1f8c:	19 82       	std	Y+1, r1	; 0x01
    1f8e:	0e c0       	rjmp	.+28     	; 0x1fac <UART_sendString+0x30>

		/* Send the whole string */
		while(Str[i] != '\0')
		{
			UART_sendByte(Str[i]);
    1f90:	89 81       	ldd	r24, Y+1	; 0x01
    1f92:	28 2f       	mov	r18, r24
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	8a 81       	ldd	r24, Y+2	; 0x02
    1f98:	9b 81       	ldd	r25, Y+3	; 0x03
    1f9a:	fc 01       	movw	r30, r24
    1f9c:	e2 0f       	add	r30, r18
    1f9e:	f3 1f       	adc	r31, r19
    1fa0:	80 81       	ld	r24, Z
    1fa2:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <UART_sendByte>
			i++;
    1fa6:	89 81       	ldd	r24, Y+1	; 0x01
    1fa8:	8f 5f       	subi	r24, 0xFF	; 255
    1faa:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString( const uint8 * Str)
{
	uint8 i = 0;

		/* Send the whole string */
		while(Str[i] != '\0')
    1fac:	89 81       	ldd	r24, Y+1	; 0x01
    1fae:	28 2f       	mov	r18, r24
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fb6:	fc 01       	movw	r30, r24
    1fb8:	e2 0f       	add	r30, r18
    1fba:	f3 1f       	adc	r31, r19
    1fbc:	80 81       	ld	r24, Z
    1fbe:	88 23       	and	r24, r24
    1fc0:	39 f7       	brne	.-50     	; 0x1f90 <UART_sendString+0x14>
		{
			UART_sendByte(Str[i]);
			i++;
		}
}
    1fc2:	0f 90       	pop	r0
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	cf 91       	pop	r28
    1fca:	df 91       	pop	r29
    1fcc:	08 95       	ret

00001fce <UART_receiveString>:
* Parameters (out):   None
* Return value:       uint8
* Description:        receive a stringfrom other devices
********************************************************************************/
void UART_receiveString (uint8 *Str)
{
    1fce:	0f 93       	push	r16
    1fd0:	1f 93       	push	r17
    1fd2:	df 93       	push	r29
    1fd4:	cf 93       	push	r28
    1fd6:	00 d0       	rcall	.+0      	; 0x1fd8 <UART_receiveString+0xa>
    1fd8:	0f 92       	push	r0
    1fda:	cd b7       	in	r28, 0x3d	; 61
    1fdc:	de b7       	in	r29, 0x3e	; 62
    1fde:	9b 83       	std	Y+3, r25	; 0x03
    1fe0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1fe2:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_receiveByte();
    1fe4:	89 81       	ldd	r24, Y+1	; 0x01
    1fe6:	28 2f       	mov	r18, r24
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	8a 81       	ldd	r24, Y+2	; 0x02
    1fec:	9b 81       	ldd	r25, Y+3	; 0x03
    1fee:	8c 01       	movw	r16, r24
    1ff0:	02 0f       	add	r16, r18
    1ff2:	13 1f       	adc	r17, r19
    1ff4:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <UART_receiveByte>
    1ff8:	f8 01       	movw	r30, r16
    1ffa:	80 83       	st	Z, r24
    1ffc:	0f c0       	rjmp	.+30     	; 0x201c <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
    2000:	8f 5f       	subi	r24, 0xFF	; 255
    2002:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    2004:	89 81       	ldd	r24, Y+1	; 0x01
    2006:	28 2f       	mov	r18, r24
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	8a 81       	ldd	r24, Y+2	; 0x02
    200c:	9b 81       	ldd	r25, Y+3	; 0x03
    200e:	8c 01       	movw	r16, r24
    2010:	02 0f       	add	r16, r18
    2012:	13 1f       	adc	r17, r19
    2014:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <UART_receiveByte>
    2018:	f8 01       	movw	r30, r16
    201a:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_receiveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    201c:	89 81       	ldd	r24, Y+1	; 0x01
    201e:	28 2f       	mov	r18, r24
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	8a 81       	ldd	r24, Y+2	; 0x02
    2024:	9b 81       	ldd	r25, Y+3	; 0x03
    2026:	fc 01       	movw	r30, r24
    2028:	e2 0f       	add	r30, r18
    202a:	f3 1f       	adc	r31, r19
    202c:	80 81       	ld	r24, Z
    202e:	83 32       	cpi	r24, 0x23	; 35
    2030:	31 f7       	brne	.-52     	; 0x1ffe <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2032:	89 81       	ldd	r24, Y+1	; 0x01
    2034:	28 2f       	mov	r18, r24
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	8a 81       	ldd	r24, Y+2	; 0x02
    203a:	9b 81       	ldd	r25, Y+3	; 0x03
    203c:	fc 01       	movw	r30, r24
    203e:	e2 0f       	add	r30, r18
    2040:	f3 1f       	adc	r31, r19
    2042:	10 82       	st	Z, r1
}
    2044:	0f 90       	pop	r0
    2046:	0f 90       	pop	r0
    2048:	0f 90       	pop	r0
    204a:	cf 91       	pop	r28
    204c:	df 91       	pop	r29
    204e:	1f 91       	pop	r17
    2050:	0f 91       	pop	r16
    2052:	08 95       	ret

00002054 <EEPROM_writeByte>:
#include "external_eeprom.h"
//#include "twi.h"
#include "I2C.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    2054:	df 93       	push	r29
    2056:	cf 93       	push	r28
    2058:	00 d0       	rcall	.+0      	; 0x205a <EEPROM_writeByte+0x6>
    205a:	00 d0       	rcall	.+0      	; 0x205c <EEPROM_writeByte+0x8>
    205c:	cd b7       	in	r28, 0x3d	; 61
    205e:	de b7       	in	r29, 0x3e	; 62
    2060:	9a 83       	std	Y+2, r25	; 0x02
    2062:	89 83       	std	Y+1, r24	; 0x01
    2064:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    2066:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    206a:	0e 94 39 07 	call	0xe72	; 0xe72 <TWI_getStatus>
    206e:	88 30       	cpi	r24, 0x08	; 8
    2070:	11 f0       	breq	.+4      	; 0x2076 <EEPROM_writeByte+0x22>
        return ERROR;
    2072:	1c 82       	std	Y+4, r1	; 0x04
    2074:	28 c0       	rjmp	.+80     	; 0x20c6 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    2076:	89 81       	ldd	r24, Y+1	; 0x01
    2078:	9a 81       	ldd	r25, Y+2	; 0x02
    207a:	80 70       	andi	r24, 0x00	; 0
    207c:	97 70       	andi	r25, 0x07	; 7
    207e:	88 0f       	add	r24, r24
    2080:	89 2f       	mov	r24, r25
    2082:	88 1f       	adc	r24, r24
    2084:	99 0b       	sbc	r25, r25
    2086:	91 95       	neg	r25
    2088:	80 6a       	ori	r24, 0xA0	; 160
    208a:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    208e:	0e 94 39 07 	call	0xe72	; 0xe72 <TWI_getStatus>
    2092:	88 31       	cpi	r24, 0x18	; 24
    2094:	11 f0       	breq	.+4      	; 0x209a <EEPROM_writeByte+0x46>
        return ERROR; 
    2096:	1c 82       	std	Y+4, r1	; 0x04
    2098:	16 c0       	rjmp	.+44     	; 0x20c6 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    209a:	89 81       	ldd	r24, Y+1	; 0x01
    209c:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    20a0:	0e 94 39 07 	call	0xe72	; 0xe72 <TWI_getStatus>
    20a4:	88 32       	cpi	r24, 0x28	; 40
    20a6:	11 f0       	breq	.+4      	; 0x20ac <EEPROM_writeByte+0x58>
        return ERROR;
    20a8:	1c 82       	std	Y+4, r1	; 0x04
    20aa:	0d c0       	rjmp	.+26     	; 0x20c6 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    20ac:	8b 81       	ldd	r24, Y+3	; 0x03
    20ae:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    20b2:	0e 94 39 07 	call	0xe72	; 0xe72 <TWI_getStatus>
    20b6:	88 32       	cpi	r24, 0x28	; 40
    20b8:	11 f0       	breq	.+4      	; 0x20be <EEPROM_writeByte+0x6a>
        return ERROR;
    20ba:	1c 82       	std	Y+4, r1	; 0x04
    20bc:	04 c0       	rjmp	.+8      	; 0x20c6 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    20be:	0e 94 f1 06 	call	0xde2	; 0xde2 <TWI_stop>
	
    return SUCCESS;
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	8c 83       	std	Y+4, r24	; 0x04
    20c6:	8c 81       	ldd	r24, Y+4	; 0x04
}
    20c8:	0f 90       	pop	r0
    20ca:	0f 90       	pop	r0
    20cc:	0f 90       	pop	r0
    20ce:	0f 90       	pop	r0
    20d0:	cf 91       	pop	r28
    20d2:	df 91       	pop	r29
    20d4:	08 95       	ret

000020d6 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    20d6:	df 93       	push	r29
    20d8:	cf 93       	push	r28
    20da:	00 d0       	rcall	.+0      	; 0x20dc <EEPROM_readByte+0x6>
    20dc:	00 d0       	rcall	.+0      	; 0x20de <EEPROM_readByte+0x8>
    20de:	0f 92       	push	r0
    20e0:	cd b7       	in	r28, 0x3d	; 61
    20e2:	de b7       	in	r29, 0x3e	; 62
    20e4:	9a 83       	std	Y+2, r25	; 0x02
    20e6:	89 83       	std	Y+1, r24	; 0x01
    20e8:	7c 83       	std	Y+4, r23	; 0x04
    20ea:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    20ec:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    20f0:	0e 94 39 07 	call	0xe72	; 0xe72 <TWI_getStatus>
    20f4:	88 30       	cpi	r24, 0x08	; 8
    20f6:	11 f0       	breq	.+4      	; 0x20fc <EEPROM_readByte+0x26>
        return ERROR;
    20f8:	1d 82       	std	Y+5, r1	; 0x05
    20fa:	44 c0       	rjmp	.+136    	; 0x2184 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    20fc:	89 81       	ldd	r24, Y+1	; 0x01
    20fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2100:	80 70       	andi	r24, 0x00	; 0
    2102:	97 70       	andi	r25, 0x07	; 7
    2104:	88 0f       	add	r24, r24
    2106:	89 2f       	mov	r24, r25
    2108:	88 1f       	adc	r24, r24
    210a:	99 0b       	sbc	r25, r25
    210c:	91 95       	neg	r25
    210e:	80 6a       	ori	r24, 0xA0	; 160
    2110:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    2114:	0e 94 39 07 	call	0xe72	; 0xe72 <TWI_getStatus>
    2118:	88 31       	cpi	r24, 0x18	; 24
    211a:	11 f0       	breq	.+4      	; 0x2120 <EEPROM_readByte+0x4a>
        return ERROR;
    211c:	1d 82       	std	Y+5, r1	; 0x05
    211e:	32 c0       	rjmp	.+100    	; 0x2184 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2126:	0e 94 39 07 	call	0xe72	; 0xe72 <TWI_getStatus>
    212a:	88 32       	cpi	r24, 0x28	; 40
    212c:	11 f0       	breq	.+4      	; 0x2132 <EEPROM_readByte+0x5c>
        return ERROR;
    212e:	1d 82       	std	Y+5, r1	; 0x05
    2130:	29 c0       	rjmp	.+82     	; 0x2184 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    2132:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    2136:	0e 94 39 07 	call	0xe72	; 0xe72 <TWI_getStatus>
    213a:	80 31       	cpi	r24, 0x10	; 16
    213c:	11 f0       	breq	.+4      	; 0x2142 <EEPROM_readByte+0x6c>
        return ERROR;
    213e:	1d 82       	std	Y+5, r1	; 0x05
    2140:	21 c0       	rjmp	.+66     	; 0x2184 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    2142:	89 81       	ldd	r24, Y+1	; 0x01
    2144:	9a 81       	ldd	r25, Y+2	; 0x02
    2146:	80 70       	andi	r24, 0x00	; 0
    2148:	97 70       	andi	r25, 0x07	; 7
    214a:	88 0f       	add	r24, r24
    214c:	89 2f       	mov	r24, r25
    214e:	88 1f       	adc	r24, r24
    2150:	99 0b       	sbc	r25, r25
    2152:	91 95       	neg	r25
    2154:	81 6a       	ori	r24, 0xA1	; 161
    2156:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    215a:	0e 94 39 07 	call	0xe72	; 0xe72 <TWI_getStatus>
    215e:	80 34       	cpi	r24, 0x40	; 64
    2160:	11 f0       	breq	.+4      	; 0x2166 <EEPROM_readByte+0x90>
        return ERROR;
    2162:	1d 82       	std	Y+5, r1	; 0x05
    2164:	0f c0       	rjmp	.+30     	; 0x2184 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    2166:	0e 94 26 07 	call	0xe4c	; 0xe4c <TWI_readByteWithNACK>
    216a:	eb 81       	ldd	r30, Y+3	; 0x03
    216c:	fc 81       	ldd	r31, Y+4	; 0x04
    216e:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    2170:	0e 94 39 07 	call	0xe72	; 0xe72 <TWI_getStatus>
    2174:	88 35       	cpi	r24, 0x58	; 88
    2176:	11 f0       	breq	.+4      	; 0x217c <EEPROM_readByte+0xa6>
        return ERROR;
    2178:	1d 82       	std	Y+5, r1	; 0x05
    217a:	04 c0       	rjmp	.+8      	; 0x2184 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    217c:	0e 94 f1 06 	call	0xde2	; 0xde2 <TWI_stop>

    return SUCCESS;
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	8d 83       	std	Y+5, r24	; 0x05
    2184:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2186:	0f 90       	pop	r0
    2188:	0f 90       	pop	r0
    218a:	0f 90       	pop	r0
    218c:	0f 90       	pop	r0
    218e:	0f 90       	pop	r0
    2190:	cf 91       	pop	r28
    2192:	df 91       	pop	r29
    2194:	08 95       	ret

00002196 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    2196:	df 93       	push	r29
    2198:	cf 93       	push	r28
    219a:	00 d0       	rcall	.+0      	; 0x219c <GPIO_setupPinDirection+0x6>
    219c:	00 d0       	rcall	.+0      	; 0x219e <GPIO_setupPinDirection+0x8>
    219e:	0f 92       	push	r0
    21a0:	cd b7       	in	r28, 0x3d	; 61
    21a2:	de b7       	in	r29, 0x3e	; 62
    21a4:	89 83       	std	Y+1, r24	; 0x01
    21a6:	6a 83       	std	Y+2, r22	; 0x02
    21a8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    21aa:	8a 81       	ldd	r24, Y+2	; 0x02
    21ac:	88 30       	cpi	r24, 0x08	; 8
    21ae:	08 f0       	brcs	.+2      	; 0x21b2 <GPIO_setupPinDirection+0x1c>
    21b0:	d5 c0       	rjmp	.+426    	; 0x235c <GPIO_setupPinDirection+0x1c6>
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
    21b4:	84 30       	cpi	r24, 0x04	; 4
    21b6:	08 f0       	brcs	.+2      	; 0x21ba <GPIO_setupPinDirection+0x24>
    21b8:	d1 c0       	rjmp	.+418    	; 0x235c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    21ba:	89 81       	ldd	r24, Y+1	; 0x01
    21bc:	28 2f       	mov	r18, r24
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	3d 83       	std	Y+5, r19	; 0x05
    21c2:	2c 83       	std	Y+4, r18	; 0x04
    21c4:	8c 81       	ldd	r24, Y+4	; 0x04
    21c6:	9d 81       	ldd	r25, Y+5	; 0x05
    21c8:	81 30       	cpi	r24, 0x01	; 1
    21ca:	91 05       	cpc	r25, r1
    21cc:	09 f4       	brne	.+2      	; 0x21d0 <GPIO_setupPinDirection+0x3a>
    21ce:	43 c0       	rjmp	.+134    	; 0x2256 <GPIO_setupPinDirection+0xc0>
    21d0:	2c 81       	ldd	r18, Y+4	; 0x04
    21d2:	3d 81       	ldd	r19, Y+5	; 0x05
    21d4:	22 30       	cpi	r18, 0x02	; 2
    21d6:	31 05       	cpc	r19, r1
    21d8:	2c f4       	brge	.+10     	; 0x21e4 <GPIO_setupPinDirection+0x4e>
    21da:	8c 81       	ldd	r24, Y+4	; 0x04
    21dc:	9d 81       	ldd	r25, Y+5	; 0x05
    21de:	00 97       	sbiw	r24, 0x00	; 0
    21e0:	71 f0       	breq	.+28     	; 0x21fe <GPIO_setupPinDirection+0x68>
    21e2:	bc c0       	rjmp	.+376    	; 0x235c <GPIO_setupPinDirection+0x1c6>
    21e4:	2c 81       	ldd	r18, Y+4	; 0x04
    21e6:	3d 81       	ldd	r19, Y+5	; 0x05
    21e8:	22 30       	cpi	r18, 0x02	; 2
    21ea:	31 05       	cpc	r19, r1
    21ec:	09 f4       	brne	.+2      	; 0x21f0 <GPIO_setupPinDirection+0x5a>
    21ee:	5f c0       	rjmp	.+190    	; 0x22ae <GPIO_setupPinDirection+0x118>
    21f0:	8c 81       	ldd	r24, Y+4	; 0x04
    21f2:	9d 81       	ldd	r25, Y+5	; 0x05
    21f4:	83 30       	cpi	r24, 0x03	; 3
    21f6:	91 05       	cpc	r25, r1
    21f8:	09 f4       	brne	.+2      	; 0x21fc <GPIO_setupPinDirection+0x66>
    21fa:	85 c0       	rjmp	.+266    	; 0x2306 <GPIO_setupPinDirection+0x170>
    21fc:	af c0       	rjmp	.+350    	; 0x235c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	81 30       	cpi	r24, 0x01	; 1
    2202:	a1 f4       	brne	.+40     	; 0x222c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    2204:	aa e3       	ldi	r26, 0x3A	; 58
    2206:	b0 e0       	ldi	r27, 0x00	; 0
    2208:	ea e3       	ldi	r30, 0x3A	; 58
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	80 81       	ld	r24, Z
    220e:	48 2f       	mov	r20, r24
    2210:	8a 81       	ldd	r24, Y+2	; 0x02
    2212:	28 2f       	mov	r18, r24
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	02 2e       	mov	r0, r18
    221c:	02 c0       	rjmp	.+4      	; 0x2222 <GPIO_setupPinDirection+0x8c>
    221e:	88 0f       	add	r24, r24
    2220:	99 1f       	adc	r25, r25
    2222:	0a 94       	dec	r0
    2224:	e2 f7       	brpl	.-8      	; 0x221e <GPIO_setupPinDirection+0x88>
    2226:	84 2b       	or	r24, r20
    2228:	8c 93       	st	X, r24
    222a:	98 c0       	rjmp	.+304    	; 0x235c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    222c:	aa e3       	ldi	r26, 0x3A	; 58
    222e:	b0 e0       	ldi	r27, 0x00	; 0
    2230:	ea e3       	ldi	r30, 0x3A	; 58
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 81       	ld	r24, Z
    2236:	48 2f       	mov	r20, r24
    2238:	8a 81       	ldd	r24, Y+2	; 0x02
    223a:	28 2f       	mov	r18, r24
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	02 2e       	mov	r0, r18
    2244:	02 c0       	rjmp	.+4      	; 0x224a <GPIO_setupPinDirection+0xb4>
    2246:	88 0f       	add	r24, r24
    2248:	99 1f       	adc	r25, r25
    224a:	0a 94       	dec	r0
    224c:	e2 f7       	brpl	.-8      	; 0x2246 <GPIO_setupPinDirection+0xb0>
    224e:	80 95       	com	r24
    2250:	84 23       	and	r24, r20
    2252:	8c 93       	st	X, r24
    2254:	83 c0       	rjmp	.+262    	; 0x235c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    2256:	8b 81       	ldd	r24, Y+3	; 0x03
    2258:	81 30       	cpi	r24, 0x01	; 1
    225a:	a1 f4       	brne	.+40     	; 0x2284 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    225c:	a7 e3       	ldi	r26, 0x37	; 55
    225e:	b0 e0       	ldi	r27, 0x00	; 0
    2260:	e7 e3       	ldi	r30, 0x37	; 55
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	48 2f       	mov	r20, r24
    2268:	8a 81       	ldd	r24, Y+2	; 0x02
    226a:	28 2f       	mov	r18, r24
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	02 2e       	mov	r0, r18
    2274:	02 c0       	rjmp	.+4      	; 0x227a <GPIO_setupPinDirection+0xe4>
    2276:	88 0f       	add	r24, r24
    2278:	99 1f       	adc	r25, r25
    227a:	0a 94       	dec	r0
    227c:	e2 f7       	brpl	.-8      	; 0x2276 <GPIO_setupPinDirection+0xe0>
    227e:	84 2b       	or	r24, r20
    2280:	8c 93       	st	X, r24
    2282:	6c c0       	rjmp	.+216    	; 0x235c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    2284:	a7 e3       	ldi	r26, 0x37	; 55
    2286:	b0 e0       	ldi	r27, 0x00	; 0
    2288:	e7 e3       	ldi	r30, 0x37	; 55
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	80 81       	ld	r24, Z
    228e:	48 2f       	mov	r20, r24
    2290:	8a 81       	ldd	r24, Y+2	; 0x02
    2292:	28 2f       	mov	r18, r24
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	02 2e       	mov	r0, r18
    229c:	02 c0       	rjmp	.+4      	; 0x22a2 <GPIO_setupPinDirection+0x10c>
    229e:	88 0f       	add	r24, r24
    22a0:	99 1f       	adc	r25, r25
    22a2:	0a 94       	dec	r0
    22a4:	e2 f7       	brpl	.-8      	; 0x229e <GPIO_setupPinDirection+0x108>
    22a6:	80 95       	com	r24
    22a8:	84 23       	and	r24, r20
    22aa:	8c 93       	st	X, r24
    22ac:	57 c0       	rjmp	.+174    	; 0x235c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    22ae:	8b 81       	ldd	r24, Y+3	; 0x03
    22b0:	81 30       	cpi	r24, 0x01	; 1
    22b2:	a1 f4       	brne	.+40     	; 0x22dc <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    22b4:	a4 e3       	ldi	r26, 0x34	; 52
    22b6:	b0 e0       	ldi	r27, 0x00	; 0
    22b8:	e4 e3       	ldi	r30, 0x34	; 52
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	48 2f       	mov	r20, r24
    22c0:	8a 81       	ldd	r24, Y+2	; 0x02
    22c2:	28 2f       	mov	r18, r24
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	02 2e       	mov	r0, r18
    22cc:	02 c0       	rjmp	.+4      	; 0x22d2 <GPIO_setupPinDirection+0x13c>
    22ce:	88 0f       	add	r24, r24
    22d0:	99 1f       	adc	r25, r25
    22d2:	0a 94       	dec	r0
    22d4:	e2 f7       	brpl	.-8      	; 0x22ce <GPIO_setupPinDirection+0x138>
    22d6:	84 2b       	or	r24, r20
    22d8:	8c 93       	st	X, r24
    22da:	40 c0       	rjmp	.+128    	; 0x235c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    22dc:	a4 e3       	ldi	r26, 0x34	; 52
    22de:	b0 e0       	ldi	r27, 0x00	; 0
    22e0:	e4 e3       	ldi	r30, 0x34	; 52
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	80 81       	ld	r24, Z
    22e6:	48 2f       	mov	r20, r24
    22e8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ea:	28 2f       	mov	r18, r24
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	02 2e       	mov	r0, r18
    22f4:	02 c0       	rjmp	.+4      	; 0x22fa <GPIO_setupPinDirection+0x164>
    22f6:	88 0f       	add	r24, r24
    22f8:	99 1f       	adc	r25, r25
    22fa:	0a 94       	dec	r0
    22fc:	e2 f7       	brpl	.-8      	; 0x22f6 <GPIO_setupPinDirection+0x160>
    22fe:	80 95       	com	r24
    2300:	84 23       	and	r24, r20
    2302:	8c 93       	st	X, r24
    2304:	2b c0       	rjmp	.+86     	; 0x235c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    2306:	8b 81       	ldd	r24, Y+3	; 0x03
    2308:	81 30       	cpi	r24, 0x01	; 1
    230a:	a1 f4       	brne	.+40     	; 0x2334 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    230c:	a1 e3       	ldi	r26, 0x31	; 49
    230e:	b0 e0       	ldi	r27, 0x00	; 0
    2310:	e1 e3       	ldi	r30, 0x31	; 49
    2312:	f0 e0       	ldi	r31, 0x00	; 0
    2314:	80 81       	ld	r24, Z
    2316:	48 2f       	mov	r20, r24
    2318:	8a 81       	ldd	r24, Y+2	; 0x02
    231a:	28 2f       	mov	r18, r24
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	02 2e       	mov	r0, r18
    2324:	02 c0       	rjmp	.+4      	; 0x232a <GPIO_setupPinDirection+0x194>
    2326:	88 0f       	add	r24, r24
    2328:	99 1f       	adc	r25, r25
    232a:	0a 94       	dec	r0
    232c:	e2 f7       	brpl	.-8      	; 0x2326 <GPIO_setupPinDirection+0x190>
    232e:	84 2b       	or	r24, r20
    2330:	8c 93       	st	X, r24
    2332:	14 c0       	rjmp	.+40     	; 0x235c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    2334:	a1 e3       	ldi	r26, 0x31	; 49
    2336:	b0 e0       	ldi	r27, 0x00	; 0
    2338:	e1 e3       	ldi	r30, 0x31	; 49
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	80 81       	ld	r24, Z
    233e:	48 2f       	mov	r20, r24
    2340:	8a 81       	ldd	r24, Y+2	; 0x02
    2342:	28 2f       	mov	r18, r24
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	02 2e       	mov	r0, r18
    234c:	02 c0       	rjmp	.+4      	; 0x2352 <GPIO_setupPinDirection+0x1bc>
    234e:	88 0f       	add	r24, r24
    2350:	99 1f       	adc	r25, r25
    2352:	0a 94       	dec	r0
    2354:	e2 f7       	brpl	.-8      	; 0x234e <GPIO_setupPinDirection+0x1b8>
    2356:	80 95       	com	r24
    2358:	84 23       	and	r24, r20
    235a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    235c:	0f 90       	pop	r0
    235e:	0f 90       	pop	r0
    2360:	0f 90       	pop	r0
    2362:	0f 90       	pop	r0
    2364:	0f 90       	pop	r0
    2366:	cf 91       	pop	r28
    2368:	df 91       	pop	r29
    236a:	08 95       	ret

0000236c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    236c:	df 93       	push	r29
    236e:	cf 93       	push	r28
    2370:	00 d0       	rcall	.+0      	; 0x2372 <GPIO_writePin+0x6>
    2372:	00 d0       	rcall	.+0      	; 0x2374 <GPIO_writePin+0x8>
    2374:	0f 92       	push	r0
    2376:	cd b7       	in	r28, 0x3d	; 61
    2378:	de b7       	in	r29, 0x3e	; 62
    237a:	89 83       	std	Y+1, r24	; 0x01
    237c:	6a 83       	std	Y+2, r22	; 0x02
    237e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2380:	8a 81       	ldd	r24, Y+2	; 0x02
    2382:	88 30       	cpi	r24, 0x08	; 8
    2384:	08 f0       	brcs	.+2      	; 0x2388 <GPIO_writePin+0x1c>
    2386:	d5 c0       	rjmp	.+426    	; 0x2532 <GPIO_writePin+0x1c6>
    2388:	89 81       	ldd	r24, Y+1	; 0x01
    238a:	84 30       	cpi	r24, 0x04	; 4
    238c:	08 f0       	brcs	.+2      	; 0x2390 <GPIO_writePin+0x24>
    238e:	d1 c0       	rjmp	.+418    	; 0x2532 <GPIO_writePin+0x1c6>
	{
		/* Do Nothing */
	}
	else
	{
      switch(port_num)
    2390:	89 81       	ldd	r24, Y+1	; 0x01
    2392:	28 2f       	mov	r18, r24
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	3d 83       	std	Y+5, r19	; 0x05
    2398:	2c 83       	std	Y+4, r18	; 0x04
    239a:	8c 81       	ldd	r24, Y+4	; 0x04
    239c:	9d 81       	ldd	r25, Y+5	; 0x05
    239e:	81 30       	cpi	r24, 0x01	; 1
    23a0:	91 05       	cpc	r25, r1
    23a2:	09 f4       	brne	.+2      	; 0x23a6 <GPIO_writePin+0x3a>
    23a4:	43 c0       	rjmp	.+134    	; 0x242c <GPIO_writePin+0xc0>
    23a6:	2c 81       	ldd	r18, Y+4	; 0x04
    23a8:	3d 81       	ldd	r19, Y+5	; 0x05
    23aa:	22 30       	cpi	r18, 0x02	; 2
    23ac:	31 05       	cpc	r19, r1
    23ae:	2c f4       	brge	.+10     	; 0x23ba <GPIO_writePin+0x4e>
    23b0:	8c 81       	ldd	r24, Y+4	; 0x04
    23b2:	9d 81       	ldd	r25, Y+5	; 0x05
    23b4:	00 97       	sbiw	r24, 0x00	; 0
    23b6:	71 f0       	breq	.+28     	; 0x23d4 <GPIO_writePin+0x68>
    23b8:	bc c0       	rjmp	.+376    	; 0x2532 <GPIO_writePin+0x1c6>
    23ba:	2c 81       	ldd	r18, Y+4	; 0x04
    23bc:	3d 81       	ldd	r19, Y+5	; 0x05
    23be:	22 30       	cpi	r18, 0x02	; 2
    23c0:	31 05       	cpc	r19, r1
    23c2:	09 f4       	brne	.+2      	; 0x23c6 <GPIO_writePin+0x5a>
    23c4:	5f c0       	rjmp	.+190    	; 0x2484 <GPIO_writePin+0x118>
    23c6:	8c 81       	ldd	r24, Y+4	; 0x04
    23c8:	9d 81       	ldd	r25, Y+5	; 0x05
    23ca:	83 30       	cpi	r24, 0x03	; 3
    23cc:	91 05       	cpc	r25, r1
    23ce:	09 f4       	brne	.+2      	; 0x23d2 <GPIO_writePin+0x66>
    23d0:	85 c0       	rjmp	.+266    	; 0x24dc <GPIO_writePin+0x170>
    23d2:	af c0       	rjmp	.+350    	; 0x2532 <GPIO_writePin+0x1c6>
      {
         case PORTA_ID:
        	 if ( value == LOGIC_HIGH)
    23d4:	8b 81       	ldd	r24, Y+3	; 0x03
    23d6:	81 30       	cpi	r24, 0x01	; 1
    23d8:	a1 f4       	brne	.+40     	; 0x2402 <GPIO_writePin+0x96>
        	 {
        		 SET_BIT(PORTA, pin_num);
    23da:	ab e3       	ldi	r26, 0x3B	; 59
    23dc:	b0 e0       	ldi	r27, 0x00	; 0
    23de:	eb e3       	ldi	r30, 0x3B	; 59
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	80 81       	ld	r24, Z
    23e4:	48 2f       	mov	r20, r24
    23e6:	8a 81       	ldd	r24, Y+2	; 0x02
    23e8:	28 2f       	mov	r18, r24
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	02 2e       	mov	r0, r18
    23f2:	02 c0       	rjmp	.+4      	; 0x23f8 <GPIO_writePin+0x8c>
    23f4:	88 0f       	add	r24, r24
    23f6:	99 1f       	adc	r25, r25
    23f8:	0a 94       	dec	r0
    23fa:	e2 f7       	brpl	.-8      	; 0x23f4 <GPIO_writePin+0x88>
    23fc:	84 2b       	or	r24, r20
    23fe:	8c 93       	st	X, r24
    2400:	98 c0       	rjmp	.+304    	; 0x2532 <GPIO_writePin+0x1c6>
        	 }
        	 else
        	 {
        		 CLEAR_BIT(PORTA,pin_num);
    2402:	ab e3       	ldi	r26, 0x3B	; 59
    2404:	b0 e0       	ldi	r27, 0x00	; 0
    2406:	eb e3       	ldi	r30, 0x3B	; 59
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	80 81       	ld	r24, Z
    240c:	48 2f       	mov	r20, r24
    240e:	8a 81       	ldd	r24, Y+2	; 0x02
    2410:	28 2f       	mov	r18, r24
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	81 e0       	ldi	r24, 0x01	; 1
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	02 2e       	mov	r0, r18
    241a:	02 c0       	rjmp	.+4      	; 0x2420 <GPIO_writePin+0xb4>
    241c:	88 0f       	add	r24, r24
    241e:	99 1f       	adc	r25, r25
    2420:	0a 94       	dec	r0
    2422:	e2 f7       	brpl	.-8      	; 0x241c <GPIO_writePin+0xb0>
    2424:	80 95       	com	r24
    2426:	84 23       	and	r24, r20
    2428:	8c 93       	st	X, r24
    242a:	83 c0       	rjmp	.+262    	; 0x2532 <GPIO_writePin+0x1c6>
        	 }
        	 break;
         case PORTB_ID:
        	 if ( value == LOGIC_HIGH)
    242c:	8b 81       	ldd	r24, Y+3	; 0x03
    242e:	81 30       	cpi	r24, 0x01	; 1
    2430:	a1 f4       	brne	.+40     	; 0x245a <GPIO_writePin+0xee>
        	 {
        		 SET_BIT(PORTB, pin_num);
    2432:	a8 e3       	ldi	r26, 0x38	; 56
    2434:	b0 e0       	ldi	r27, 0x00	; 0
    2436:	e8 e3       	ldi	r30, 0x38	; 56
    2438:	f0 e0       	ldi	r31, 0x00	; 0
    243a:	80 81       	ld	r24, Z
    243c:	48 2f       	mov	r20, r24
    243e:	8a 81       	ldd	r24, Y+2	; 0x02
    2440:	28 2f       	mov	r18, r24
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	02 2e       	mov	r0, r18
    244a:	02 c0       	rjmp	.+4      	; 0x2450 <GPIO_writePin+0xe4>
    244c:	88 0f       	add	r24, r24
    244e:	99 1f       	adc	r25, r25
    2450:	0a 94       	dec	r0
    2452:	e2 f7       	brpl	.-8      	; 0x244c <GPIO_writePin+0xe0>
    2454:	84 2b       	or	r24, r20
    2456:	8c 93       	st	X, r24
    2458:	6c c0       	rjmp	.+216    	; 0x2532 <GPIO_writePin+0x1c6>
        	 }
        	 else
        	 {
        		 CLEAR_BIT(PORTB,pin_num);
    245a:	a8 e3       	ldi	r26, 0x38	; 56
    245c:	b0 e0       	ldi	r27, 0x00	; 0
    245e:	e8 e3       	ldi	r30, 0x38	; 56
    2460:	f0 e0       	ldi	r31, 0x00	; 0
    2462:	80 81       	ld	r24, Z
    2464:	48 2f       	mov	r20, r24
    2466:	8a 81       	ldd	r24, Y+2	; 0x02
    2468:	28 2f       	mov	r18, r24
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	02 2e       	mov	r0, r18
    2472:	02 c0       	rjmp	.+4      	; 0x2478 <GPIO_writePin+0x10c>
    2474:	88 0f       	add	r24, r24
    2476:	99 1f       	adc	r25, r25
    2478:	0a 94       	dec	r0
    247a:	e2 f7       	brpl	.-8      	; 0x2474 <GPIO_writePin+0x108>
    247c:	80 95       	com	r24
    247e:	84 23       	and	r24, r20
    2480:	8c 93       	st	X, r24
    2482:	57 c0       	rjmp	.+174    	; 0x2532 <GPIO_writePin+0x1c6>
        	 }
        	 break;
         case PORTC_ID:
        	 if ( value == LOGIC_HIGH)
    2484:	8b 81       	ldd	r24, Y+3	; 0x03
    2486:	81 30       	cpi	r24, 0x01	; 1
    2488:	a1 f4       	brne	.+40     	; 0x24b2 <GPIO_writePin+0x146>
        	 {
        		 SET_BIT(PORTC, pin_num);
    248a:	a5 e3       	ldi	r26, 0x35	; 53
    248c:	b0 e0       	ldi	r27, 0x00	; 0
    248e:	e5 e3       	ldi	r30, 0x35	; 53
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	80 81       	ld	r24, Z
    2494:	48 2f       	mov	r20, r24
    2496:	8a 81       	ldd	r24, Y+2	; 0x02
    2498:	28 2f       	mov	r18, r24
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	02 2e       	mov	r0, r18
    24a2:	02 c0       	rjmp	.+4      	; 0x24a8 <GPIO_writePin+0x13c>
    24a4:	88 0f       	add	r24, r24
    24a6:	99 1f       	adc	r25, r25
    24a8:	0a 94       	dec	r0
    24aa:	e2 f7       	brpl	.-8      	; 0x24a4 <GPIO_writePin+0x138>
    24ac:	84 2b       	or	r24, r20
    24ae:	8c 93       	st	X, r24
    24b0:	40 c0       	rjmp	.+128    	; 0x2532 <GPIO_writePin+0x1c6>
        	 }
        	 else
        	 {
        		 CLEAR_BIT(PORTC,pin_num);
    24b2:	a5 e3       	ldi	r26, 0x35	; 53
    24b4:	b0 e0       	ldi	r27, 0x00	; 0
    24b6:	e5 e3       	ldi	r30, 0x35	; 53
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	80 81       	ld	r24, Z
    24bc:	48 2f       	mov	r20, r24
    24be:	8a 81       	ldd	r24, Y+2	; 0x02
    24c0:	28 2f       	mov	r18, r24
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	02 2e       	mov	r0, r18
    24ca:	02 c0       	rjmp	.+4      	; 0x24d0 <GPIO_writePin+0x164>
    24cc:	88 0f       	add	r24, r24
    24ce:	99 1f       	adc	r25, r25
    24d0:	0a 94       	dec	r0
    24d2:	e2 f7       	brpl	.-8      	; 0x24cc <GPIO_writePin+0x160>
    24d4:	80 95       	com	r24
    24d6:	84 23       	and	r24, r20
    24d8:	8c 93       	st	X, r24
    24da:	2b c0       	rjmp	.+86     	; 0x2532 <GPIO_writePin+0x1c6>
        	 }
        	 break;
         case PORTD_ID:
        	 if ( value == LOGIC_HIGH)
    24dc:	8b 81       	ldd	r24, Y+3	; 0x03
    24de:	81 30       	cpi	r24, 0x01	; 1
    24e0:	a1 f4       	brne	.+40     	; 0x250a <GPIO_writePin+0x19e>
        	 {
        		 SET_BIT(PORTD, pin_num);
    24e2:	a2 e3       	ldi	r26, 0x32	; 50
    24e4:	b0 e0       	ldi	r27, 0x00	; 0
    24e6:	e2 e3       	ldi	r30, 0x32	; 50
    24e8:	f0 e0       	ldi	r31, 0x00	; 0
    24ea:	80 81       	ld	r24, Z
    24ec:	48 2f       	mov	r20, r24
    24ee:	8a 81       	ldd	r24, Y+2	; 0x02
    24f0:	28 2f       	mov	r18, r24
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	02 2e       	mov	r0, r18
    24fa:	02 c0       	rjmp	.+4      	; 0x2500 <GPIO_writePin+0x194>
    24fc:	88 0f       	add	r24, r24
    24fe:	99 1f       	adc	r25, r25
    2500:	0a 94       	dec	r0
    2502:	e2 f7       	brpl	.-8      	; 0x24fc <GPIO_writePin+0x190>
    2504:	84 2b       	or	r24, r20
    2506:	8c 93       	st	X, r24
    2508:	14 c0       	rjmp	.+40     	; 0x2532 <GPIO_writePin+0x1c6>
        	 }
        	 else
        	 {
        		 CLEAR_BIT(PORTD,pin_num);
    250a:	a2 e3       	ldi	r26, 0x32	; 50
    250c:	b0 e0       	ldi	r27, 0x00	; 0
    250e:	e2 e3       	ldi	r30, 0x32	; 50
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	80 81       	ld	r24, Z
    2514:	48 2f       	mov	r20, r24
    2516:	8a 81       	ldd	r24, Y+2	; 0x02
    2518:	28 2f       	mov	r18, r24
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	81 e0       	ldi	r24, 0x01	; 1
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	02 2e       	mov	r0, r18
    2522:	02 c0       	rjmp	.+4      	; 0x2528 <GPIO_writePin+0x1bc>
    2524:	88 0f       	add	r24, r24
    2526:	99 1f       	adc	r25, r25
    2528:	0a 94       	dec	r0
    252a:	e2 f7       	brpl	.-8      	; 0x2524 <GPIO_writePin+0x1b8>
    252c:	80 95       	com	r24
    252e:	84 23       	and	r24, r20
    2530:	8c 93       	st	X, r24
        	 }
        	 break;
      }
	}
}
    2532:	0f 90       	pop	r0
    2534:	0f 90       	pop	r0
    2536:	0f 90       	pop	r0
    2538:	0f 90       	pop	r0
    253a:	0f 90       	pop	r0
    253c:	cf 91       	pop	r28
    253e:	df 91       	pop	r29
    2540:	08 95       	ret

00002542 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2542:	df 93       	push	r29
    2544:	cf 93       	push	r28
    2546:	00 d0       	rcall	.+0      	; 0x2548 <GPIO_readPin+0x6>
    2548:	00 d0       	rcall	.+0      	; 0x254a <GPIO_readPin+0x8>
    254a:	0f 92       	push	r0
    254c:	cd b7       	in	r28, 0x3d	; 61
    254e:	de b7       	in	r29, 0x3e	; 62
    2550:	8a 83       	std	Y+2, r24	; 0x02
    2552:	6b 83       	std	Y+3, r22	; 0x03
	uint8 temp=0;
    2554:	19 82       	std	Y+1, r1	; 0x01
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2556:	8b 81       	ldd	r24, Y+3	; 0x03
    2558:	88 30       	cpi	r24, 0x08	; 8
    255a:	18 f4       	brcc	.+6      	; 0x2562 <GPIO_readPin+0x20>
    255c:	8a 81       	ldd	r24, Y+2	; 0x02
    255e:	84 30       	cpi	r24, 0x04	; 4
    2560:	10 f0       	brcs	.+4      	; 0x2566 <GPIO_readPin+0x24>
	{
		temp = 0 ;
    2562:	19 82       	std	Y+1, r1	; 0x01
    2564:	67 c0       	rjmp	.+206    	; 0x2634 <GPIO_readPin+0xf2>
	}
	else
	{
		switch(port_num)
    2566:	8a 81       	ldd	r24, Y+2	; 0x02
    2568:	28 2f       	mov	r18, r24
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	3d 83       	std	Y+5, r19	; 0x05
    256e:	2c 83       	std	Y+4, r18	; 0x04
    2570:	4c 81       	ldd	r20, Y+4	; 0x04
    2572:	5d 81       	ldd	r21, Y+5	; 0x05
    2574:	41 30       	cpi	r20, 0x01	; 1
    2576:	51 05       	cpc	r21, r1
    2578:	41 f1       	breq	.+80     	; 0x25ca <GPIO_readPin+0x88>
    257a:	8c 81       	ldd	r24, Y+4	; 0x04
    257c:	9d 81       	ldd	r25, Y+5	; 0x05
    257e:	82 30       	cpi	r24, 0x02	; 2
    2580:	91 05       	cpc	r25, r1
    2582:	34 f4       	brge	.+12     	; 0x2590 <GPIO_readPin+0x4e>
    2584:	2c 81       	ldd	r18, Y+4	; 0x04
    2586:	3d 81       	ldd	r19, Y+5	; 0x05
    2588:	21 15       	cp	r18, r1
    258a:	31 05       	cpc	r19, r1
    258c:	61 f0       	breq	.+24     	; 0x25a6 <GPIO_readPin+0x64>
    258e:	52 c0       	rjmp	.+164    	; 0x2634 <GPIO_readPin+0xf2>
    2590:	4c 81       	ldd	r20, Y+4	; 0x04
    2592:	5d 81       	ldd	r21, Y+5	; 0x05
    2594:	42 30       	cpi	r20, 0x02	; 2
    2596:	51 05       	cpc	r21, r1
    2598:	51 f1       	breq	.+84     	; 0x25ee <GPIO_readPin+0xac>
    259a:	8c 81       	ldd	r24, Y+4	; 0x04
    259c:	9d 81       	ldd	r25, Y+5	; 0x05
    259e:	83 30       	cpi	r24, 0x03	; 3
    25a0:	91 05       	cpc	r25, r1
    25a2:	b9 f1       	breq	.+110    	; 0x2612 <GPIO_readPin+0xd0>
    25a4:	47 c0       	rjmp	.+142    	; 0x2634 <GPIO_readPin+0xf2>
		{
		case PORTA_ID:
            temp = CHECK_BIT(PINA,pin_num);
    25a6:	e9 e3       	ldi	r30, 0x39	; 57
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	80 81       	ld	r24, Z
    25ac:	28 2f       	mov	r18, r24
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	8b 81       	ldd	r24, Y+3	; 0x03
    25b2:	88 2f       	mov	r24, r24
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	a9 01       	movw	r20, r18
    25b8:	02 c0       	rjmp	.+4      	; 0x25be <GPIO_readPin+0x7c>
    25ba:	55 95       	asr	r21
    25bc:	47 95       	ror	r20
    25be:	8a 95       	dec	r24
    25c0:	e2 f7       	brpl	.-8      	; 0x25ba <GPIO_readPin+0x78>
    25c2:	ca 01       	movw	r24, r20
    25c4:	81 70       	andi	r24, 0x01	; 1
    25c6:	89 83       	std	Y+1, r24	; 0x01
    25c8:	35 c0       	rjmp	.+106    	; 0x2634 <GPIO_readPin+0xf2>
			break;
		case PORTB_ID:
			temp = CHECK_BIT(PINB,pin_num);
    25ca:	e6 e3       	ldi	r30, 0x36	; 54
    25cc:	f0 e0       	ldi	r31, 0x00	; 0
    25ce:	80 81       	ld	r24, Z
    25d0:	28 2f       	mov	r18, r24
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	8b 81       	ldd	r24, Y+3	; 0x03
    25d6:	88 2f       	mov	r24, r24
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	a9 01       	movw	r20, r18
    25dc:	02 c0       	rjmp	.+4      	; 0x25e2 <GPIO_readPin+0xa0>
    25de:	55 95       	asr	r21
    25e0:	47 95       	ror	r20
    25e2:	8a 95       	dec	r24
    25e4:	e2 f7       	brpl	.-8      	; 0x25de <GPIO_readPin+0x9c>
    25e6:	ca 01       	movw	r24, r20
    25e8:	81 70       	andi	r24, 0x01	; 1
    25ea:	89 83       	std	Y+1, r24	; 0x01
    25ec:	23 c0       	rjmp	.+70     	; 0x2634 <GPIO_readPin+0xf2>
			break;
		case PORTC_ID:
			temp = CHECK_BIT(PINC,pin_num);
    25ee:	e3 e3       	ldi	r30, 0x33	; 51
    25f0:	f0 e0       	ldi	r31, 0x00	; 0
    25f2:	80 81       	ld	r24, Z
    25f4:	28 2f       	mov	r18, r24
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	8b 81       	ldd	r24, Y+3	; 0x03
    25fa:	88 2f       	mov	r24, r24
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	a9 01       	movw	r20, r18
    2600:	02 c0       	rjmp	.+4      	; 0x2606 <GPIO_readPin+0xc4>
    2602:	55 95       	asr	r21
    2604:	47 95       	ror	r20
    2606:	8a 95       	dec	r24
    2608:	e2 f7       	brpl	.-8      	; 0x2602 <GPIO_readPin+0xc0>
    260a:	ca 01       	movw	r24, r20
    260c:	81 70       	andi	r24, 0x01	; 1
    260e:	89 83       	std	Y+1, r24	; 0x01
    2610:	11 c0       	rjmp	.+34     	; 0x2634 <GPIO_readPin+0xf2>
			break;
		case PORTD_ID:
			temp = CHECK_BIT(PIND,pin_num);
    2612:	e0 e3       	ldi	r30, 0x30	; 48
    2614:	f0 e0       	ldi	r31, 0x00	; 0
    2616:	80 81       	ld	r24, Z
    2618:	28 2f       	mov	r18, r24
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	8b 81       	ldd	r24, Y+3	; 0x03
    261e:	88 2f       	mov	r24, r24
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	a9 01       	movw	r20, r18
    2624:	02 c0       	rjmp	.+4      	; 0x262a <GPIO_readPin+0xe8>
    2626:	55 95       	asr	r21
    2628:	47 95       	ror	r20
    262a:	8a 95       	dec	r24
    262c:	e2 f7       	brpl	.-8      	; 0x2626 <GPIO_readPin+0xe4>
    262e:	ca 01       	movw	r24, r20
    2630:	81 70       	andi	r24, 0x01	; 1
    2632:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return temp;
    2634:	89 81       	ldd	r24, Y+1	; 0x01
}
    2636:	0f 90       	pop	r0
    2638:	0f 90       	pop	r0
    263a:	0f 90       	pop	r0
    263c:	0f 90       	pop	r0
    263e:	0f 90       	pop	r0
    2640:	cf 91       	pop	r28
    2642:	df 91       	pop	r29
    2644:	08 95       	ret

00002646 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2646:	df 93       	push	r29
    2648:	cf 93       	push	r28
    264a:	00 d0       	rcall	.+0      	; 0x264c <GPIO_setupPortDirection+0x6>
    264c:	00 d0       	rcall	.+0      	; 0x264e <GPIO_setupPortDirection+0x8>
    264e:	cd b7       	in	r28, 0x3d	; 61
    2650:	de b7       	in	r29, 0x3e	; 62
    2652:	89 83       	std	Y+1, r24	; 0x01
    2654:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2656:	89 81       	ldd	r24, Y+1	; 0x01
    2658:	84 30       	cpi	r24, 0x04	; 4
    265a:	90 f5       	brcc	.+100    	; 0x26c0 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    265c:	89 81       	ldd	r24, Y+1	; 0x01
    265e:	28 2f       	mov	r18, r24
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	3c 83       	std	Y+4, r19	; 0x04
    2664:	2b 83       	std	Y+3, r18	; 0x03
    2666:	8b 81       	ldd	r24, Y+3	; 0x03
    2668:	9c 81       	ldd	r25, Y+4	; 0x04
    266a:	81 30       	cpi	r24, 0x01	; 1
    266c:	91 05       	cpc	r25, r1
    266e:	d1 f0       	breq	.+52     	; 0x26a4 <GPIO_setupPortDirection+0x5e>
    2670:	2b 81       	ldd	r18, Y+3	; 0x03
    2672:	3c 81       	ldd	r19, Y+4	; 0x04
    2674:	22 30       	cpi	r18, 0x02	; 2
    2676:	31 05       	cpc	r19, r1
    2678:	2c f4       	brge	.+10     	; 0x2684 <GPIO_setupPortDirection+0x3e>
    267a:	8b 81       	ldd	r24, Y+3	; 0x03
    267c:	9c 81       	ldd	r25, Y+4	; 0x04
    267e:	00 97       	sbiw	r24, 0x00	; 0
    2680:	61 f0       	breq	.+24     	; 0x269a <GPIO_setupPortDirection+0x54>
    2682:	1e c0       	rjmp	.+60     	; 0x26c0 <GPIO_setupPortDirection+0x7a>
    2684:	2b 81       	ldd	r18, Y+3	; 0x03
    2686:	3c 81       	ldd	r19, Y+4	; 0x04
    2688:	22 30       	cpi	r18, 0x02	; 2
    268a:	31 05       	cpc	r19, r1
    268c:	81 f0       	breq	.+32     	; 0x26ae <GPIO_setupPortDirection+0x68>
    268e:	8b 81       	ldd	r24, Y+3	; 0x03
    2690:	9c 81       	ldd	r25, Y+4	; 0x04
    2692:	83 30       	cpi	r24, 0x03	; 3
    2694:	91 05       	cpc	r25, r1
    2696:	81 f0       	breq	.+32     	; 0x26b8 <GPIO_setupPortDirection+0x72>
    2698:	13 c0       	rjmp	.+38     	; 0x26c0 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    269a:	ea e3       	ldi	r30, 0x3A	; 58
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	8a 81       	ldd	r24, Y+2	; 0x02
    26a0:	80 83       	st	Z, r24
    26a2:	0e c0       	rjmp	.+28     	; 0x26c0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    26a4:	e7 e3       	ldi	r30, 0x37	; 55
    26a6:	f0 e0       	ldi	r31, 0x00	; 0
    26a8:	8a 81       	ldd	r24, Y+2	; 0x02
    26aa:	80 83       	st	Z, r24
    26ac:	09 c0       	rjmp	.+18     	; 0x26c0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    26ae:	e4 e3       	ldi	r30, 0x34	; 52
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	8a 81       	ldd	r24, Y+2	; 0x02
    26b4:	80 83       	st	Z, r24
    26b6:	04 c0       	rjmp	.+8      	; 0x26c0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    26b8:	e1 e3       	ldi	r30, 0x31	; 49
    26ba:	f0 e0       	ldi	r31, 0x00	; 0
    26bc:	8a 81       	ldd	r24, Y+2	; 0x02
    26be:	80 83       	st	Z, r24
			break;
		}
	}
}
    26c0:	0f 90       	pop	r0
    26c2:	0f 90       	pop	r0
    26c4:	0f 90       	pop	r0
    26c6:	0f 90       	pop	r0
    26c8:	cf 91       	pop	r28
    26ca:	df 91       	pop	r29
    26cc:	08 95       	ret

000026ce <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    26ce:	df 93       	push	r29
    26d0:	cf 93       	push	r28
    26d2:	00 d0       	rcall	.+0      	; 0x26d4 <GPIO_writePort+0x6>
    26d4:	00 d0       	rcall	.+0      	; 0x26d6 <GPIO_writePort+0x8>
    26d6:	cd b7       	in	r28, 0x3d	; 61
    26d8:	de b7       	in	r29, 0x3e	; 62
    26da:	89 83       	std	Y+1, r24	; 0x01
    26dc:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    26de:	89 81       	ldd	r24, Y+1	; 0x01
    26e0:	84 30       	cpi	r24, 0x04	; 4
    26e2:	90 f5       	brcc	.+100    	; 0x2748 <GPIO_writePort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    26e4:	89 81       	ldd	r24, Y+1	; 0x01
    26e6:	28 2f       	mov	r18, r24
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	3c 83       	std	Y+4, r19	; 0x04
    26ec:	2b 83       	std	Y+3, r18	; 0x03
    26ee:	8b 81       	ldd	r24, Y+3	; 0x03
    26f0:	9c 81       	ldd	r25, Y+4	; 0x04
    26f2:	81 30       	cpi	r24, 0x01	; 1
    26f4:	91 05       	cpc	r25, r1
    26f6:	d1 f0       	breq	.+52     	; 0x272c <GPIO_writePort+0x5e>
    26f8:	2b 81       	ldd	r18, Y+3	; 0x03
    26fa:	3c 81       	ldd	r19, Y+4	; 0x04
    26fc:	22 30       	cpi	r18, 0x02	; 2
    26fe:	31 05       	cpc	r19, r1
    2700:	2c f4       	brge	.+10     	; 0x270c <GPIO_writePort+0x3e>
    2702:	8b 81       	ldd	r24, Y+3	; 0x03
    2704:	9c 81       	ldd	r25, Y+4	; 0x04
    2706:	00 97       	sbiw	r24, 0x00	; 0
    2708:	61 f0       	breq	.+24     	; 0x2722 <GPIO_writePort+0x54>
    270a:	1e c0       	rjmp	.+60     	; 0x2748 <GPIO_writePort+0x7a>
    270c:	2b 81       	ldd	r18, Y+3	; 0x03
    270e:	3c 81       	ldd	r19, Y+4	; 0x04
    2710:	22 30       	cpi	r18, 0x02	; 2
    2712:	31 05       	cpc	r19, r1
    2714:	81 f0       	breq	.+32     	; 0x2736 <GPIO_writePort+0x68>
    2716:	8b 81       	ldd	r24, Y+3	; 0x03
    2718:	9c 81       	ldd	r25, Y+4	; 0x04
    271a:	83 30       	cpi	r24, 0x03	; 3
    271c:	91 05       	cpc	r25, r1
    271e:	81 f0       	breq	.+32     	; 0x2740 <GPIO_writePort+0x72>
    2720:	13 c0       	rjmp	.+38     	; 0x2748 <GPIO_writePort+0x7a>
		{

		case PORTA_ID:
			PORTA=value;
    2722:	eb e3       	ldi	r30, 0x3B	; 59
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	8a 81       	ldd	r24, Y+2	; 0x02
    2728:	80 83       	st	Z, r24
    272a:	0e c0       	rjmp	.+28     	; 0x2748 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB=value;
    272c:	e8 e3       	ldi	r30, 0x38	; 56
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	8a 81       	ldd	r24, Y+2	; 0x02
    2732:	80 83       	st	Z, r24
    2734:	09 c0       	rjmp	.+18     	; 0x2748 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC=value;
    2736:	e5 e3       	ldi	r30, 0x35	; 53
    2738:	f0 e0       	ldi	r31, 0x00	; 0
    273a:	8a 81       	ldd	r24, Y+2	; 0x02
    273c:	80 83       	st	Z, r24
    273e:	04 c0       	rjmp	.+8      	; 0x2748 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD=value;
    2740:	e2 e3       	ldi	r30, 0x32	; 50
    2742:	f0 e0       	ldi	r31, 0x00	; 0
    2744:	8a 81       	ldd	r24, Y+2	; 0x02
    2746:	80 83       	st	Z, r24
			break;

		}
	}
}
    2748:	0f 90       	pop	r0
    274a:	0f 90       	pop	r0
    274c:	0f 90       	pop	r0
    274e:	0f 90       	pop	r0
    2750:	cf 91       	pop	r28
    2752:	df 91       	pop	r29
    2754:	08 95       	ret

00002756 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2756:	df 93       	push	r29
    2758:	cf 93       	push	r28
    275a:	00 d0       	rcall	.+0      	; 0x275c <GPIO_readPort+0x6>
    275c:	00 d0       	rcall	.+0      	; 0x275e <GPIO_readPort+0x8>
    275e:	0f 92       	push	r0
    2760:	cd b7       	in	r28, 0x3d	; 61
    2762:	de b7       	in	r29, 0x3e	; 62
    2764:	8a 83       	std	Y+2, r24	; 0x02
	uint8 temp = 0;
    2766:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
    2768:	8a 81       	ldd	r24, Y+2	; 0x02
    276a:	84 30       	cpi	r24, 0x04	; 4
    276c:	18 f0       	brcs	.+6      	; 0x2774 <GPIO_readPort+0x1e>
	{
		return temp;
    276e:	29 81       	ldd	r18, Y+1	; 0x01
    2770:	2d 83       	std	Y+5, r18	; 0x05
    2772:	34 c0       	rjmp	.+104    	; 0x27dc <GPIO_readPort+0x86>
	}
	else
	{
		switch(port_num)
    2774:	8a 81       	ldd	r24, Y+2	; 0x02
    2776:	28 2f       	mov	r18, r24
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	3c 83       	std	Y+4, r19	; 0x04
    277c:	2b 83       	std	Y+3, r18	; 0x03
    277e:	8b 81       	ldd	r24, Y+3	; 0x03
    2780:	9c 81       	ldd	r25, Y+4	; 0x04
    2782:	81 30       	cpi	r24, 0x01	; 1
    2784:	91 05       	cpc	r25, r1
    2786:	d1 f0       	breq	.+52     	; 0x27bc <GPIO_readPort+0x66>
    2788:	2b 81       	ldd	r18, Y+3	; 0x03
    278a:	3c 81       	ldd	r19, Y+4	; 0x04
    278c:	22 30       	cpi	r18, 0x02	; 2
    278e:	31 05       	cpc	r19, r1
    2790:	2c f4       	brge	.+10     	; 0x279c <GPIO_readPort+0x46>
    2792:	8b 81       	ldd	r24, Y+3	; 0x03
    2794:	9c 81       	ldd	r25, Y+4	; 0x04
    2796:	00 97       	sbiw	r24, 0x00	; 0
    2798:	61 f0       	breq	.+24     	; 0x27b2 <GPIO_readPort+0x5c>
    279a:	1e c0       	rjmp	.+60     	; 0x27d8 <GPIO_readPort+0x82>
    279c:	2b 81       	ldd	r18, Y+3	; 0x03
    279e:	3c 81       	ldd	r19, Y+4	; 0x04
    27a0:	22 30       	cpi	r18, 0x02	; 2
    27a2:	31 05       	cpc	r19, r1
    27a4:	81 f0       	breq	.+32     	; 0x27c6 <GPIO_readPort+0x70>
    27a6:	8b 81       	ldd	r24, Y+3	; 0x03
    27a8:	9c 81       	ldd	r25, Y+4	; 0x04
    27aa:	83 30       	cpi	r24, 0x03	; 3
    27ac:	91 05       	cpc	r25, r1
    27ae:	81 f0       	breq	.+32     	; 0x27d0 <GPIO_readPort+0x7a>
    27b0:	13 c0       	rjmp	.+38     	; 0x27d8 <GPIO_readPort+0x82>
		{

		case PORTA_ID:
            temp = PINA;
    27b2:	e9 e3       	ldi	r30, 0x39	; 57
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	80 81       	ld	r24, Z
    27b8:	89 83       	std	Y+1, r24	; 0x01
    27ba:	0e c0       	rjmp	.+28     	; 0x27d8 <GPIO_readPort+0x82>
			break;
		case PORTB_ID:
			temp = PINB;
    27bc:	e6 e3       	ldi	r30, 0x36	; 54
    27be:	f0 e0       	ldi	r31, 0x00	; 0
    27c0:	80 81       	ld	r24, Z
    27c2:	89 83       	std	Y+1, r24	; 0x01
    27c4:	09 c0       	rjmp	.+18     	; 0x27d8 <GPIO_readPort+0x82>
			break;
		case PORTC_ID:
			temp = PINC;
    27c6:	e3 e3       	ldi	r30, 0x33	; 51
    27c8:	f0 e0       	ldi	r31, 0x00	; 0
    27ca:	80 81       	ld	r24, Z
    27cc:	89 83       	std	Y+1, r24	; 0x01
    27ce:	04 c0       	rjmp	.+8      	; 0x27d8 <GPIO_readPort+0x82>
			break;
		case PORTD_ID:
			temp = PIND;
    27d0:	e0 e3       	ldi	r30, 0x30	; 48
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	80 81       	ld	r24, Z
    27d6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return temp;
    27d8:	99 81       	ldd	r25, Y+1	; 0x01
    27da:	9d 83       	std	Y+5, r25	; 0x05
    27dc:	8d 81       	ldd	r24, Y+5	; 0x05
}
    27de:	0f 90       	pop	r0
    27e0:	0f 90       	pop	r0
    27e2:	0f 90       	pop	r0
    27e4:	0f 90       	pop	r0
    27e6:	0f 90       	pop	r0
    27e8:	cf 91       	pop	r28
    27ea:	df 91       	pop	r29
    27ec:	08 95       	ret

000027ee <main>:

extern uint16 g_Interrupts_number;


int main (void)
{
    27ee:	df 93       	push	r29
    27f0:	cf 93       	push	r28
    27f2:	cd b7       	in	r28, 0x3d	; 61
    27f4:	de b7       	in	r29, 0x3e	; 62
    27f6:	2c 97       	sbiw	r28, 0x0c	; 12
    27f8:	0f b6       	in	r0, 0x3f	; 63
    27fa:	f8 94       	cli
    27fc:	de bf       	out	0x3e, r29	; 62
    27fe:	0f be       	out	0x3f, r0	; 63
    2800:	cd bf       	out	0x3d, r28	; 61
			 Asynchronous,
			 Parity_Disabled,
			 StopBit_1,
			 DataFrame_8Bits,
			 BaudRate_9600
	 };
    2802:	ce 01       	movw	r24, r28
    2804:	01 96       	adiw	r24, 0x01	; 1
    2806:	99 87       	std	Y+9, r25	; 0x09
    2808:	88 87       	std	Y+8, r24	; 0x08
    280a:	e1 e7       	ldi	r30, 0x71	; 113
    280c:	f0 e0       	ldi	r31, 0x00	; 0
    280e:	fb 87       	std	Y+11, r31	; 0x0b
    2810:	ea 87       	std	Y+10, r30	; 0x0a
    2812:	f7 e0       	ldi	r31, 0x07	; 7
    2814:	fc 87       	std	Y+12, r31	; 0x0c
    2816:	ea 85       	ldd	r30, Y+10	; 0x0a
    2818:	fb 85       	ldd	r31, Y+11	; 0x0b
    281a:	00 80       	ld	r0, Z
    281c:	8a 85       	ldd	r24, Y+10	; 0x0a
    281e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2820:	01 96       	adiw	r24, 0x01	; 1
    2822:	9b 87       	std	Y+11, r25	; 0x0b
    2824:	8a 87       	std	Y+10, r24	; 0x0a
    2826:	e8 85       	ldd	r30, Y+8	; 0x08
    2828:	f9 85       	ldd	r31, Y+9	; 0x09
    282a:	00 82       	st	Z, r0
    282c:	88 85       	ldd	r24, Y+8	; 0x08
    282e:	99 85       	ldd	r25, Y+9	; 0x09
    2830:	01 96       	adiw	r24, 0x01	; 1
    2832:	99 87       	std	Y+9, r25	; 0x09
    2834:	88 87       	std	Y+8, r24	; 0x08
    2836:	9c 85       	ldd	r25, Y+12	; 0x0c
    2838:	91 50       	subi	r25, 0x01	; 1
    283a:	9c 87       	std	Y+12, r25	; 0x0c
    283c:	ec 85       	ldd	r30, Y+12	; 0x0c
    283e:	ee 23       	and	r30, r30
    2840:	51 f7       	brne	.-44     	; 0x2816 <main+0x28>

	    /*Init Buzzer*/
	    BUZZER_init(PORTC_ID, PIN2_ID);
    2842:	82 e0       	ldi	r24, 0x02	; 2
    2844:	62 e0       	ldi	r22, 0x02	; 2
    2846:	0e 94 a3 05 	call	0xb46	; 0xb46 <BUZZER_init>

	    /*DC - Motor Init*/
	    DC_MOTOR_Init();
    284a:	0e 94 de 05 	call	0xbbc	; 0xbbc <DC_MOTOR_Init>

	    /*UART Init*/
	    UART_Init(&UART_Config_Struct);
    284e:	ce 01       	movw	r24, r28
    2850:	01 96       	adiw	r24, 0x01	; 1
    2852:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <UART_Init>


	    /*Enable I-Bit*/
	    SET_BIT(SREG,7);
    2856:	af e5       	ldi	r26, 0x5F	; 95
    2858:	b0 e0       	ldi	r27, 0x00	; 0
    285a:	ef e5       	ldi	r30, 0x5F	; 95
    285c:	f0 e0       	ldi	r31, 0x00	; 0
    285e:	80 81       	ld	r24, Z
    2860:	80 68       	ori	r24, 0x80	; 128
    2862:	8c 93       	st	X, r24


	while (1)
	{

		OPERATIONS_II_UART_HANDLE(&TIMER_Config_Struct);
    2864:	88 e6       	ldi	r24, 0x68	; 104
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	0e 94 ae 09 	call	0x135c	; 0x135c <OPERATIONS_II_UART_HANDLE>
    286c:	fb cf       	rjmp	.-10     	; 0x2864 <main+0x76>

0000286e <__mulsi3>:
    286e:	62 9f       	mul	r22, r18
    2870:	d0 01       	movw	r26, r0
    2872:	73 9f       	mul	r23, r19
    2874:	f0 01       	movw	r30, r0
    2876:	82 9f       	mul	r24, r18
    2878:	e0 0d       	add	r30, r0
    287a:	f1 1d       	adc	r31, r1
    287c:	64 9f       	mul	r22, r20
    287e:	e0 0d       	add	r30, r0
    2880:	f1 1d       	adc	r31, r1
    2882:	92 9f       	mul	r25, r18
    2884:	f0 0d       	add	r31, r0
    2886:	83 9f       	mul	r24, r19
    2888:	f0 0d       	add	r31, r0
    288a:	74 9f       	mul	r23, r20
    288c:	f0 0d       	add	r31, r0
    288e:	65 9f       	mul	r22, r21
    2890:	f0 0d       	add	r31, r0
    2892:	99 27       	eor	r25, r25
    2894:	72 9f       	mul	r23, r18
    2896:	b0 0d       	add	r27, r0
    2898:	e1 1d       	adc	r30, r1
    289a:	f9 1f       	adc	r31, r25
    289c:	63 9f       	mul	r22, r19
    289e:	b0 0d       	add	r27, r0
    28a0:	e1 1d       	adc	r30, r1
    28a2:	f9 1f       	adc	r31, r25
    28a4:	bd 01       	movw	r22, r26
    28a6:	cf 01       	movw	r24, r30
    28a8:	11 24       	eor	r1, r1
    28aa:	08 95       	ret

000028ac <__divmodhi4>:
    28ac:	97 fb       	bst	r25, 7
    28ae:	09 2e       	mov	r0, r25
    28b0:	07 26       	eor	r0, r23
    28b2:	0a d0       	rcall	.+20     	; 0x28c8 <__divmodhi4_neg1>
    28b4:	77 fd       	sbrc	r23, 7
    28b6:	04 d0       	rcall	.+8      	; 0x28c0 <__divmodhi4_neg2>
    28b8:	27 d0       	rcall	.+78     	; 0x2908 <__udivmodhi4>
    28ba:	06 d0       	rcall	.+12     	; 0x28c8 <__divmodhi4_neg1>
    28bc:	00 20       	and	r0, r0
    28be:	1a f4       	brpl	.+6      	; 0x28c6 <__divmodhi4_exit>

000028c0 <__divmodhi4_neg2>:
    28c0:	70 95       	com	r23
    28c2:	61 95       	neg	r22
    28c4:	7f 4f       	sbci	r23, 0xFF	; 255

000028c6 <__divmodhi4_exit>:
    28c6:	08 95       	ret

000028c8 <__divmodhi4_neg1>:
    28c8:	f6 f7       	brtc	.-4      	; 0x28c6 <__divmodhi4_exit>
    28ca:	90 95       	com	r25
    28cc:	81 95       	neg	r24
    28ce:	9f 4f       	sbci	r25, 0xFF	; 255
    28d0:	08 95       	ret

000028d2 <__divmodsi4>:
    28d2:	97 fb       	bst	r25, 7
    28d4:	09 2e       	mov	r0, r25
    28d6:	05 26       	eor	r0, r21
    28d8:	0e d0       	rcall	.+28     	; 0x28f6 <__divmodsi4_neg1>
    28da:	57 fd       	sbrc	r21, 7
    28dc:	04 d0       	rcall	.+8      	; 0x28e6 <__divmodsi4_neg2>
    28de:	28 d0       	rcall	.+80     	; 0x2930 <__udivmodsi4>
    28e0:	0a d0       	rcall	.+20     	; 0x28f6 <__divmodsi4_neg1>
    28e2:	00 1c       	adc	r0, r0
    28e4:	38 f4       	brcc	.+14     	; 0x28f4 <__divmodsi4_exit>

000028e6 <__divmodsi4_neg2>:
    28e6:	50 95       	com	r21
    28e8:	40 95       	com	r20
    28ea:	30 95       	com	r19
    28ec:	21 95       	neg	r18
    28ee:	3f 4f       	sbci	r19, 0xFF	; 255
    28f0:	4f 4f       	sbci	r20, 0xFF	; 255
    28f2:	5f 4f       	sbci	r21, 0xFF	; 255

000028f4 <__divmodsi4_exit>:
    28f4:	08 95       	ret

000028f6 <__divmodsi4_neg1>:
    28f6:	f6 f7       	brtc	.-4      	; 0x28f4 <__divmodsi4_exit>
    28f8:	90 95       	com	r25
    28fa:	80 95       	com	r24
    28fc:	70 95       	com	r23
    28fe:	61 95       	neg	r22
    2900:	7f 4f       	sbci	r23, 0xFF	; 255
    2902:	8f 4f       	sbci	r24, 0xFF	; 255
    2904:	9f 4f       	sbci	r25, 0xFF	; 255
    2906:	08 95       	ret

00002908 <__udivmodhi4>:
    2908:	aa 1b       	sub	r26, r26
    290a:	bb 1b       	sub	r27, r27
    290c:	51 e1       	ldi	r21, 0x11	; 17
    290e:	07 c0       	rjmp	.+14     	; 0x291e <__udivmodhi4_ep>

00002910 <__udivmodhi4_loop>:
    2910:	aa 1f       	adc	r26, r26
    2912:	bb 1f       	adc	r27, r27
    2914:	a6 17       	cp	r26, r22
    2916:	b7 07       	cpc	r27, r23
    2918:	10 f0       	brcs	.+4      	; 0x291e <__udivmodhi4_ep>
    291a:	a6 1b       	sub	r26, r22
    291c:	b7 0b       	sbc	r27, r23

0000291e <__udivmodhi4_ep>:
    291e:	88 1f       	adc	r24, r24
    2920:	99 1f       	adc	r25, r25
    2922:	5a 95       	dec	r21
    2924:	a9 f7       	brne	.-22     	; 0x2910 <__udivmodhi4_loop>
    2926:	80 95       	com	r24
    2928:	90 95       	com	r25
    292a:	bc 01       	movw	r22, r24
    292c:	cd 01       	movw	r24, r26
    292e:	08 95       	ret

00002930 <__udivmodsi4>:
    2930:	a1 e2       	ldi	r26, 0x21	; 33
    2932:	1a 2e       	mov	r1, r26
    2934:	aa 1b       	sub	r26, r26
    2936:	bb 1b       	sub	r27, r27
    2938:	fd 01       	movw	r30, r26
    293a:	0d c0       	rjmp	.+26     	; 0x2956 <__udivmodsi4_ep>

0000293c <__udivmodsi4_loop>:
    293c:	aa 1f       	adc	r26, r26
    293e:	bb 1f       	adc	r27, r27
    2940:	ee 1f       	adc	r30, r30
    2942:	ff 1f       	adc	r31, r31
    2944:	a2 17       	cp	r26, r18
    2946:	b3 07       	cpc	r27, r19
    2948:	e4 07       	cpc	r30, r20
    294a:	f5 07       	cpc	r31, r21
    294c:	20 f0       	brcs	.+8      	; 0x2956 <__udivmodsi4_ep>
    294e:	a2 1b       	sub	r26, r18
    2950:	b3 0b       	sbc	r27, r19
    2952:	e4 0b       	sbc	r30, r20
    2954:	f5 0b       	sbc	r31, r21

00002956 <__udivmodsi4_ep>:
    2956:	66 1f       	adc	r22, r22
    2958:	77 1f       	adc	r23, r23
    295a:	88 1f       	adc	r24, r24
    295c:	99 1f       	adc	r25, r25
    295e:	1a 94       	dec	r1
    2960:	69 f7       	brne	.-38     	; 0x293c <__udivmodsi4_loop>
    2962:	60 95       	com	r22
    2964:	70 95       	com	r23
    2966:	80 95       	com	r24
    2968:	90 95       	com	r25
    296a:	9b 01       	movw	r18, r22
    296c:	ac 01       	movw	r20, r24
    296e:	bd 01       	movw	r22, r26
    2970:	cf 01       	movw	r24, r30
    2972:	08 95       	ret

00002974 <__prologue_saves__>:
    2974:	2f 92       	push	r2
    2976:	3f 92       	push	r3
    2978:	4f 92       	push	r4
    297a:	5f 92       	push	r5
    297c:	6f 92       	push	r6
    297e:	7f 92       	push	r7
    2980:	8f 92       	push	r8
    2982:	9f 92       	push	r9
    2984:	af 92       	push	r10
    2986:	bf 92       	push	r11
    2988:	cf 92       	push	r12
    298a:	df 92       	push	r13
    298c:	ef 92       	push	r14
    298e:	ff 92       	push	r15
    2990:	0f 93       	push	r16
    2992:	1f 93       	push	r17
    2994:	cf 93       	push	r28
    2996:	df 93       	push	r29
    2998:	cd b7       	in	r28, 0x3d	; 61
    299a:	de b7       	in	r29, 0x3e	; 62
    299c:	ca 1b       	sub	r28, r26
    299e:	db 0b       	sbc	r29, r27
    29a0:	0f b6       	in	r0, 0x3f	; 63
    29a2:	f8 94       	cli
    29a4:	de bf       	out	0x3e, r29	; 62
    29a6:	0f be       	out	0x3f, r0	; 63
    29a8:	cd bf       	out	0x3d, r28	; 61
    29aa:	09 94       	ijmp

000029ac <__epilogue_restores__>:
    29ac:	2a 88       	ldd	r2, Y+18	; 0x12
    29ae:	39 88       	ldd	r3, Y+17	; 0x11
    29b0:	48 88       	ldd	r4, Y+16	; 0x10
    29b2:	5f 84       	ldd	r5, Y+15	; 0x0f
    29b4:	6e 84       	ldd	r6, Y+14	; 0x0e
    29b6:	7d 84       	ldd	r7, Y+13	; 0x0d
    29b8:	8c 84       	ldd	r8, Y+12	; 0x0c
    29ba:	9b 84       	ldd	r9, Y+11	; 0x0b
    29bc:	aa 84       	ldd	r10, Y+10	; 0x0a
    29be:	b9 84       	ldd	r11, Y+9	; 0x09
    29c0:	c8 84       	ldd	r12, Y+8	; 0x08
    29c2:	df 80       	ldd	r13, Y+7	; 0x07
    29c4:	ee 80       	ldd	r14, Y+6	; 0x06
    29c6:	fd 80       	ldd	r15, Y+5	; 0x05
    29c8:	0c 81       	ldd	r16, Y+4	; 0x04
    29ca:	1b 81       	ldd	r17, Y+3	; 0x03
    29cc:	aa 81       	ldd	r26, Y+2	; 0x02
    29ce:	b9 81       	ldd	r27, Y+1	; 0x01
    29d0:	ce 0f       	add	r28, r30
    29d2:	d1 1d       	adc	r29, r1
    29d4:	0f b6       	in	r0, 0x3f	; 63
    29d6:	f8 94       	cli
    29d8:	de bf       	out	0x3e, r29	; 62
    29da:	0f be       	out	0x3f, r0	; 63
    29dc:	cd bf       	out	0x3d, r28	; 61
    29de:	ed 01       	movw	r28, r26
    29e0:	08 95       	ret

000029e2 <_exit>:
    29e2:	f8 94       	cli

000029e4 <__stop_program>:
    29e4:	ff cf       	rjmp	.-2      	; 0x29e4 <__stop_program>
