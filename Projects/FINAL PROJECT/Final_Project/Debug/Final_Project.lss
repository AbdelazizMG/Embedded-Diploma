
Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003418  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008a  00800060  00003418  000034ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  008000ea  008000ea  00003536  2**0
                  ALLOC
  3 .stab         00003420  00000000  00000000  00003538  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000186b  00000000  00000000  00006958  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000081c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008303  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008473  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a0bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000afa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bd54  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000beb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c141  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c90f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 d5 09 	jmp	0x13aa	; 0x13aa <__vector_3>
      10:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <__vector_6>
      1c:	0c 94 6f 09 	jmp	0x12de	; 0x12de <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 d6 08 	jmp	0x11ac	; 0x11ac <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 09 09 	jmp	0x1212	; 0x1212 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e1       	ldi	r30, 0x18	; 24
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3e       	cpi	r26, 0xEA	; 234
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa ee       	ldi	r26, 0xEA	; 234
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3f       	cpi	r26, 0xFD	; 253
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <main>
      8a:	0c 94 0a 1a 	jmp	0x3414	; 0x3414 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8e 19 	jmp	0x331c	; 0x331c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 ed       	ldi	r26, 0xD2	; 210
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 aa 19 	jmp	0x3354	; 0x3354 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9a 19 	jmp	0x3334	; 0x3334 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b6 19 	jmp	0x336c	; 0x336c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9a 19 	jmp	0x3334	; 0x3334 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b6 19 	jmp	0x336c	; 0x336c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8e 19 	jmp	0x331c	; 0x331c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	82 ed       	ldi	r24, 0xD2	; 210
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 aa 19 	jmp	0x3354	; 0x3354 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9a 19 	jmp	0x3334	; 0x3334 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b6 19 	jmp	0x336c	; 0x336c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 9a 19 	jmp	0x3334	; 0x3334 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b6 19 	jmp	0x336c	; 0x336c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 9a 19 	jmp	0x3334	; 0x3334 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b6 19 	jmp	0x336c	; 0x336c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 9e 19 	jmp	0x333c	; 0x333c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ba 19 	jmp	0x3374	; 0x3374 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <BUZZER_init>:
* Return value:       None
* Description:        Define buzzer pin as output pin
*                     Saves port and pin in global variables defined above
********************************************************************************/
void BUZZER_init(uint8 port , uint8 pin)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <BUZZER_init+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	89 83       	std	Y+1, r24	; 0x01
     b52:	6a 83       	std	Y+2, r22	; 0x02
	/*User Error*/
    if( port > 3 || pin > 7 )
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	84 30       	cpi	r24, 0x04	; 4
     b58:	70 f4       	brcc	.+28     	; 0xb76 <BUZZER_init+0x30>
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	58 f4       	brcc	.+22     	; 0xb76 <BUZZER_init+0x30>

    }
    else
    {
       /*Setup Pin direction as output pin*/
       GPIO_setupPinDirection(port, pin, PIN_OUTPUT);
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	6a 81       	ldd	r22, Y+2	; 0x02
     b64:	41 e0       	ldi	r20, 0x01	; 1
     b66:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <GPIO_setupPinDirection>

       /*Saves the port and pin in global variables to be used in functions below*/
       g_buzzer_port = port;
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	80 93 ea 00 	sts	0x00EA, r24
       g_buzzer_pin = pin;
     b70:	8a 81       	ldd	r24, Y+2	; 0x02
     b72:	80 93 eb 00 	sts	0x00EB, r24
    }
}
     b76:	0f 90       	pop	r0
     b78:	0f 90       	pop	r0
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <BUZZER_ON>:
* Parameters (out):   None
* Return value:       None
* Description:        Make The Buzzer Beebs
********************************************************************************/
void BUZZER_ON(void)
{
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
   /*Make the Buzzer Beebs*/
   GPIO_writePin(g_buzzer_port, g_buzzer_pin, LOGIC_HIGH);
     b88:	80 91 ea 00 	lds	r24, 0x00EA
     b8c:	90 91 eb 00 	lds	r25, 0x00EB
     b90:	69 2f       	mov	r22, r25
     b92:	41 e0       	ldi	r20, 0x01	; 1
     b94:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <GPIO_writePin>
}
     b98:	cf 91       	pop	r28
     b9a:	df 91       	pop	r29
     b9c:	08 95       	ret

00000b9e <BUZZER_OFF>:
* Parameters (out):   None
* Return value:       None
* Description:        Make The Buzzer Stop
********************************************************************************/
void BUZZER_OFF(void)
{
     b9e:	df 93       	push	r29
     ba0:	cf 93       	push	r28
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
	/*Make the Buzzer Stops*/
	 GPIO_writePin(g_buzzer_port, g_buzzer_pin, LOGIC_LOW);
     ba6:	80 91 ea 00 	lds	r24, 0x00EA
     baa:	90 91 eb 00 	lds	r25, 0x00EB
     bae:	69 2f       	mov	r22, r25
     bb0:	40 e0       	ldi	r20, 0x00	; 0
     bb2:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <GPIO_writePin>
}
     bb6:	cf 91       	pop	r28
     bb8:	df 91       	pop	r29
     bba:	08 95       	ret

00000bbc <OPERATION_EnterPassword>:
* Parameters (out):   None
* Return value:       None
* Description:        Ask user to enter the password
********************************************************************************/
void OPERATION_EnterPassword(void)
{
     bbc:	df 93       	push	r29
     bbe:	cf 93       	push	r28
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
     bc4:	60 97       	sbiw	r28, 0x10	; 16
     bc6:	0f b6       	in	r0, 0x3f	; 63
     bc8:	f8 94       	cli
     bca:	de bf       	out	0x3e, r29	; 62
     bcc:	0f be       	out	0x3f, r0	; 63
     bce:	cd bf       	out	0x3d, r28	; 61
	/*Clear Screen from prvious operation*/
	LCD_clearScreen();
     bd0:	0e 94 d5 17 	call	0x2faa	; 0x2faa <LCD_clearScreen>

   /*Variable to hold keypadd press*/
	uint8 key1;

   /*counter for while loop*/
    uint8 counter = 0;
     bd4:	1f 86       	std	Y+15, r1	; 0x0f

   /*Actual Operation*/
   LCD_displayString("Enter Password:");
     bd6:	80 e6       	ldi	r24, 0x60	; 96
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <LCD_displayString>
   LCD_moveCursor(1, 0);
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	60 e0       	ldi	r22, 0x00	; 0
     be2:	0e 94 57 17 	call	0x2eae	; 0x2eae <LCD_moveCursor>
     be6:	7e c0       	rjmp	.+252    	; 0xce4 <OPERATION_EnterPassword+0x128>

   while ( counter < 5)
   {
	   /*Get Keypress from the user*/
	   key1 = KEYPAD_getPressedKey();
     be8:	0e 94 2a 12 	call	0x2454	; 0x2454 <KEYPAD_getPressedKey>
     bec:	88 8b       	std	Y+16, r24	; 0x10

	   /*Display Key Press on LCD */
	 //  LCD_intgerToString(key1);

	   LCD_displayCharacter('*');
     bee:	8a e2       	ldi	r24, 0x2A	; 42
     bf0:	0e 94 39 15 	call	0x2a72	; 0x2a72 <LCD_displayCharacter>
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	a8 e4       	ldi	r26, 0x48	; 72
     bfa:	b4 e4       	ldi	r27, 0x44	; 68
     bfc:	8b 87       	std	Y+11, r24	; 0x0b
     bfe:	9c 87       	std	Y+12, r25	; 0x0c
     c00:	ad 87       	std	Y+13, r26	; 0x0d
     c02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c04:	6b 85       	ldd	r22, Y+11	; 0x0b
     c06:	7c 85       	ldd	r23, Y+12	; 0x0c
     c08:	8d 85       	ldd	r24, Y+13	; 0x0d
     c0a:	9e 85       	ldd	r25, Y+14	; 0x0e
     c0c:	20 e0       	ldi	r18, 0x00	; 0
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	4a ef       	ldi	r20, 0xFA	; 250
     c12:	54 e4       	ldi	r21, 0x44	; 68
     c14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c18:	dc 01       	movw	r26, r24
     c1a:	cb 01       	movw	r24, r22
     c1c:	8f 83       	std	Y+7, r24	; 0x07
     c1e:	98 87       	std	Y+8, r25	; 0x08
     c20:	a9 87       	std	Y+9, r26	; 0x09
     c22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c24:	6f 81       	ldd	r22, Y+7	; 0x07
     c26:	78 85       	ldd	r23, Y+8	; 0x08
     c28:	89 85       	ldd	r24, Y+9	; 0x09
     c2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c2c:	20 e0       	ldi	r18, 0x00	; 0
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	40 e8       	ldi	r20, 0x80	; 128
     c32:	5f e3       	ldi	r21, 0x3F	; 63
     c34:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c38:	88 23       	and	r24, r24
     c3a:	2c f4       	brge	.+10     	; 0xc46 <OPERATION_EnterPassword+0x8a>
		__ticks = 1;
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	9e 83       	std	Y+6, r25	; 0x06
     c42:	8d 83       	std	Y+5, r24	; 0x05
     c44:	3f c0       	rjmp	.+126    	; 0xcc4 <OPERATION_EnterPassword+0x108>
	else if (__tmp > 65535)
     c46:	6f 81       	ldd	r22, Y+7	; 0x07
     c48:	78 85       	ldd	r23, Y+8	; 0x08
     c4a:	89 85       	ldd	r24, Y+9	; 0x09
     c4c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c4e:	20 e0       	ldi	r18, 0x00	; 0
     c50:	3f ef       	ldi	r19, 0xFF	; 255
     c52:	4f e7       	ldi	r20, 0x7F	; 127
     c54:	57 e4       	ldi	r21, 0x47	; 71
     c56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c5a:	18 16       	cp	r1, r24
     c5c:	4c f5       	brge	.+82     	; 0xcb0 <OPERATION_EnterPassword+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c5e:	6b 85       	ldd	r22, Y+11	; 0x0b
     c60:	7c 85       	ldd	r23, Y+12	; 0x0c
     c62:	8d 85       	ldd	r24, Y+13	; 0x0d
     c64:	9e 85       	ldd	r25, Y+14	; 0x0e
     c66:	20 e0       	ldi	r18, 0x00	; 0
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	40 e2       	ldi	r20, 0x20	; 32
     c6c:	51 e4       	ldi	r21, 0x41	; 65
     c6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c72:	dc 01       	movw	r26, r24
     c74:	cb 01       	movw	r24, r22
     c76:	bc 01       	movw	r22, r24
     c78:	cd 01       	movw	r24, r26
     c7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c7e:	dc 01       	movw	r26, r24
     c80:	cb 01       	movw	r24, r22
     c82:	9e 83       	std	Y+6, r25	; 0x06
     c84:	8d 83       	std	Y+5, r24	; 0x05
     c86:	0f c0       	rjmp	.+30     	; 0xca6 <OPERATION_EnterPassword+0xea>
     c88:	88 ec       	ldi	r24, 0xC8	; 200
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	9c 83       	std	Y+4, r25	; 0x04
     c8e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c90:	8b 81       	ldd	r24, Y+3	; 0x03
     c92:	9c 81       	ldd	r25, Y+4	; 0x04
     c94:	01 97       	sbiw	r24, 0x01	; 1
     c96:	f1 f7       	brne	.-4      	; 0xc94 <OPERATION_EnterPassword+0xd8>
     c98:	9c 83       	std	Y+4, r25	; 0x04
     c9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c9c:	8d 81       	ldd	r24, Y+5	; 0x05
     c9e:	9e 81       	ldd	r25, Y+6	; 0x06
     ca0:	01 97       	sbiw	r24, 0x01	; 1
     ca2:	9e 83       	std	Y+6, r25	; 0x06
     ca4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ca6:	8d 81       	ldd	r24, Y+5	; 0x05
     ca8:	9e 81       	ldd	r25, Y+6	; 0x06
     caa:	00 97       	sbiw	r24, 0x00	; 0
     cac:	69 f7       	brne	.-38     	; 0xc88 <OPERATION_EnterPassword+0xcc>
     cae:	14 c0       	rjmp	.+40     	; 0xcd8 <OPERATION_EnterPassword+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cb0:	6f 81       	ldd	r22, Y+7	; 0x07
     cb2:	78 85       	ldd	r23, Y+8	; 0x08
     cb4:	89 85       	ldd	r24, Y+9	; 0x09
     cb6:	9a 85       	ldd	r25, Y+10	; 0x0a
     cb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cbc:	dc 01       	movw	r26, r24
     cbe:	cb 01       	movw	r24, r22
     cc0:	9e 83       	std	Y+6, r25	; 0x06
     cc2:	8d 83       	std	Y+5, r24	; 0x05
     cc4:	8d 81       	ldd	r24, Y+5	; 0x05
     cc6:	9e 81       	ldd	r25, Y+6	; 0x06
     cc8:	9a 83       	std	Y+2, r25	; 0x02
     cca:	89 83       	std	Y+1, r24	; 0x01
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	9a 81       	ldd	r25, Y+2	; 0x02
     cd0:	01 97       	sbiw	r24, 0x01	; 1
     cd2:	f1 f7       	brne	.-4      	; 0xcd0 <OPERATION_EnterPassword+0x114>
     cd4:	9a 83       	std	Y+2, r25	; 0x02
     cd6:	89 83       	std	Y+1, r24	; 0x01
	   _delay_ms(800);

	   /*Send First Digit by UART*/
	   UART_sendByte(key1);
     cd8:	88 89       	ldd	r24, Y+16	; 0x10
     cda:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <UART_sendByte>

	   /*Increament counter*/
	   counter ++;
     cde:	8f 85       	ldd	r24, Y+15	; 0x0f
     ce0:	8f 5f       	subi	r24, 0xFF	; 255
     ce2:	8f 87       	std	Y+15, r24	; 0x0f

   /*Actual Operation*/
   LCD_displayString("Enter Password:");
   LCD_moveCursor(1, 0);

   while ( counter < 5)
     ce4:	8f 85       	ldd	r24, Y+15	; 0x0f
     ce6:	85 30       	cpi	r24, 0x05	; 5
     ce8:	08 f4       	brcc	.+2      	; 0xcec <OPERATION_EnterPassword+0x130>
     cea:	7e cf       	rjmp	.-260    	; 0xbe8 <OPERATION_EnterPassword+0x2c>
	   /*Increament counter*/
	   counter ++;
   }


}
     cec:	60 96       	adiw	r28, 0x10	; 16
     cee:	0f b6       	in	r0, 0x3f	; 63
     cf0:	f8 94       	cli
     cf2:	de bf       	out	0x3e, r29	; 62
     cf4:	0f be       	out	0x3f, r0	; 63
     cf6:	cd bf       	out	0x3d, r28	; 61
     cf8:	cf 91       	pop	r28
     cfa:	df 91       	pop	r29
     cfc:	08 95       	ret

00000cfe <OPERATION_reEnterPassword>:
* Parameters (out):   None
* Return value:       None
* Description:        Ask useer to re-enter the password
********************************************************************************/
void OPERATION_reEnterPassword(void)
{
     cfe:	df 93       	push	r29
     d00:	cf 93       	push	r28
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
     d06:	60 97       	sbiw	r28, 0x10	; 16
     d08:	0f b6       	in	r0, 0x3f	; 63
     d0a:	f8 94       	cli
     d0c:	de bf       	out	0x3e, r29	; 62
     d0e:	0f be       	out	0x3f, r0	; 63
     d10:	cd bf       	out	0x3d, r28	; 61
    /*Clear screen from previous operation*/
	LCD_clearScreen();
     d12:	0e 94 d5 17 	call	0x2faa	; 0x2faa <LCD_clearScreen>

   /*Variable to hold keypad press*/
	uint8 key;

   /*counter for while loop*/
    uint8 counter = 0;
     d16:	1f 86       	std	Y+15, r1	; 0x0f

   /*Actual Operation*/
   LCD_displayString("Re Enter Pass:");
     d18:	80 e7       	ldi	r24, 0x70	; 112
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <LCD_displayString>
   LCD_moveCursor(1, 0);
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	60 e0       	ldi	r22, 0x00	; 0
     d24:	0e 94 57 17 	call	0x2eae	; 0x2eae <LCD_moveCursor>
     d28:	7e c0       	rjmp	.+252    	; 0xe26 <OPERATION_reEnterPassword+0x128>

   /*Take 5 digits from the user*/
   while ( counter < 5)
   {
	   /*Get Key press from the user*/
	   key = KEYPAD_getPressedKey();
     d2a:	0e 94 2a 12 	call	0x2454	; 0x2454 <KEYPAD_getPressedKey>
     d2e:	88 8b       	std	Y+16, r24	; 0x10

	   /*Display Key Press on LCD*/
	   //LCD_intgerToString(key);

	   LCD_displayCharacter('*');
     d30:	8a e2       	ldi	r24, 0x2A	; 42
     d32:	0e 94 39 15 	call	0x2a72	; 0x2a72 <LCD_displayCharacter>
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	a8 e4       	ldi	r26, 0x48	; 72
     d3c:	b4 e4       	ldi	r27, 0x44	; 68
     d3e:	8b 87       	std	Y+11, r24	; 0x0b
     d40:	9c 87       	std	Y+12, r25	; 0x0c
     d42:	ad 87       	std	Y+13, r26	; 0x0d
     d44:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d46:	6b 85       	ldd	r22, Y+11	; 0x0b
     d48:	7c 85       	ldd	r23, Y+12	; 0x0c
     d4a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d4c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d4e:	20 e0       	ldi	r18, 0x00	; 0
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	4a ef       	ldi	r20, 0xFA	; 250
     d54:	54 e4       	ldi	r21, 0x44	; 68
     d56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d5a:	dc 01       	movw	r26, r24
     d5c:	cb 01       	movw	r24, r22
     d5e:	8f 83       	std	Y+7, r24	; 0x07
     d60:	98 87       	std	Y+8, r25	; 0x08
     d62:	a9 87       	std	Y+9, r26	; 0x09
     d64:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d66:	6f 81       	ldd	r22, Y+7	; 0x07
     d68:	78 85       	ldd	r23, Y+8	; 0x08
     d6a:	89 85       	ldd	r24, Y+9	; 0x09
     d6c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	40 e8       	ldi	r20, 0x80	; 128
     d74:	5f e3       	ldi	r21, 0x3F	; 63
     d76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d7a:	88 23       	and	r24, r24
     d7c:	2c f4       	brge	.+10     	; 0xd88 <OPERATION_reEnterPassword+0x8a>
		__ticks = 1;
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	9e 83       	std	Y+6, r25	; 0x06
     d84:	8d 83       	std	Y+5, r24	; 0x05
     d86:	3f c0       	rjmp	.+126    	; 0xe06 <OPERATION_reEnterPassword+0x108>
	else if (__tmp > 65535)
     d88:	6f 81       	ldd	r22, Y+7	; 0x07
     d8a:	78 85       	ldd	r23, Y+8	; 0x08
     d8c:	89 85       	ldd	r24, Y+9	; 0x09
     d8e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d90:	20 e0       	ldi	r18, 0x00	; 0
     d92:	3f ef       	ldi	r19, 0xFF	; 255
     d94:	4f e7       	ldi	r20, 0x7F	; 127
     d96:	57 e4       	ldi	r21, 0x47	; 71
     d98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d9c:	18 16       	cp	r1, r24
     d9e:	4c f5       	brge	.+82     	; 0xdf2 <OPERATION_reEnterPassword+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     da0:	6b 85       	ldd	r22, Y+11	; 0x0b
     da2:	7c 85       	ldd	r23, Y+12	; 0x0c
     da4:	8d 85       	ldd	r24, Y+13	; 0x0d
     da6:	9e 85       	ldd	r25, Y+14	; 0x0e
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	40 e2       	ldi	r20, 0x20	; 32
     dae:	51 e4       	ldi	r21, 0x41	; 65
     db0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     db4:	dc 01       	movw	r26, r24
     db6:	cb 01       	movw	r24, r22
     db8:	bc 01       	movw	r22, r24
     dba:	cd 01       	movw	r24, r26
     dbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dc0:	dc 01       	movw	r26, r24
     dc2:	cb 01       	movw	r24, r22
     dc4:	9e 83       	std	Y+6, r25	; 0x06
     dc6:	8d 83       	std	Y+5, r24	; 0x05
     dc8:	0f c0       	rjmp	.+30     	; 0xde8 <OPERATION_reEnterPassword+0xea>
     dca:	88 ec       	ldi	r24, 0xC8	; 200
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	9c 83       	std	Y+4, r25	; 0x04
     dd0:	8b 83       	std	Y+3, r24	; 0x03
     dd2:	8b 81       	ldd	r24, Y+3	; 0x03
     dd4:	9c 81       	ldd	r25, Y+4	; 0x04
     dd6:	01 97       	sbiw	r24, 0x01	; 1
     dd8:	f1 f7       	brne	.-4      	; 0xdd6 <OPERATION_reEnterPassword+0xd8>
     dda:	9c 83       	std	Y+4, r25	; 0x04
     ddc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dde:	8d 81       	ldd	r24, Y+5	; 0x05
     de0:	9e 81       	ldd	r25, Y+6	; 0x06
     de2:	01 97       	sbiw	r24, 0x01	; 1
     de4:	9e 83       	std	Y+6, r25	; 0x06
     de6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     de8:	8d 81       	ldd	r24, Y+5	; 0x05
     dea:	9e 81       	ldd	r25, Y+6	; 0x06
     dec:	00 97       	sbiw	r24, 0x00	; 0
     dee:	69 f7       	brne	.-38     	; 0xdca <OPERATION_reEnterPassword+0xcc>
     df0:	14 c0       	rjmp	.+40     	; 0xe1a <OPERATION_reEnterPassword+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     df2:	6f 81       	ldd	r22, Y+7	; 0x07
     df4:	78 85       	ldd	r23, Y+8	; 0x08
     df6:	89 85       	ldd	r24, Y+9	; 0x09
     df8:	9a 85       	ldd	r25, Y+10	; 0x0a
     dfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dfe:	dc 01       	movw	r26, r24
     e00:	cb 01       	movw	r24, r22
     e02:	9e 83       	std	Y+6, r25	; 0x06
     e04:	8d 83       	std	Y+5, r24	; 0x05
     e06:	8d 81       	ldd	r24, Y+5	; 0x05
     e08:	9e 81       	ldd	r25, Y+6	; 0x06
     e0a:	9a 83       	std	Y+2, r25	; 0x02
     e0c:	89 83       	std	Y+1, r24	; 0x01
     e0e:	89 81       	ldd	r24, Y+1	; 0x01
     e10:	9a 81       	ldd	r25, Y+2	; 0x02
     e12:	01 97       	sbiw	r24, 0x01	; 1
     e14:	f1 f7       	brne	.-4      	; 0xe12 <OPERATION_reEnterPassword+0x114>
     e16:	9a 83       	std	Y+2, r25	; 0x02
     e18:	89 83       	std	Y+1, r24	; 0x01
	   _delay_ms(800);

	   /*Send First Digit by UART*/
	   UART_sendByte(key);
     e1a:	88 89       	ldd	r24, Y+16	; 0x10
     e1c:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <UART_sendByte>

	   /*Increament counter*/
	   counter ++;
     e20:	8f 85       	ldd	r24, Y+15	; 0x0f
     e22:	8f 5f       	subi	r24, 0xFF	; 255
     e24:	8f 87       	std	Y+15, r24	; 0x0f
   /*Actual Operation*/
   LCD_displayString("Re Enter Pass:");
   LCD_moveCursor(1, 0);

   /*Take 5 digits from the user*/
   while ( counter < 5)
     e26:	8f 85       	ldd	r24, Y+15	; 0x0f
     e28:	85 30       	cpi	r24, 0x05	; 5
     e2a:	08 f4       	brcc	.+2      	; 0xe2e <OPERATION_reEnterPassword+0x130>
     e2c:	7e cf       	rjmp	.-260    	; 0xd2a <OPERATION_reEnterPassword+0x2c>
	   /*Increament counter*/
	   counter ++;
   }


}
     e2e:	60 96       	adiw	r28, 0x10	; 16
     e30:	0f b6       	in	r0, 0x3f	; 63
     e32:	f8 94       	cli
     e34:	de bf       	out	0x3e, r29	; 62
     e36:	0f be       	out	0x3f, r0	; 63
     e38:	cd bf       	out	0x3d, r28	; 61
     e3a:	cf 91       	pop	r28
     e3c:	df 91       	pop	r29
     e3e:	08 95       	ret

00000e40 <OPERATION_ReceivecheckPasswordMatch>:
* Return value:       None
* Description:        Receive Password Match Check from Second MCU and start
*                     Taking action on displaing depending on the value received
********************************************************************************/
void OPERATION_ReceivecheckPasswordMatch(void)
{
     e40:	df 93       	push	r29
     e42:	cf 93       	push	r28
     e44:	00 d0       	rcall	.+0      	; 0xe46 <OPERATION_ReceivecheckPasswordMatch+0x6>
     e46:	0f 92       	push	r0
     e48:	cd b7       	in	r28, 0x3d	; 61
     e4a:	de b7       	in	r29, 0x3e	; 62
   /*flag for matching detection - if 0 missmatch - if 1 matched*/
   uint8 flag = 5 ;
     e4c:	85 e0       	ldi	r24, 0x05	; 5
     e4e:	89 83       	std	Y+1, r24	; 0x01

   /*Variable to hold number of miss matches*/
   static uint8 missmatch_counter = 0;

   /*Take Response from Second MCU - if 0 missmatch - if 1 matched */
   flag = UART_receiveByte();
     e50:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <UART_receiveByte>
     e54:	89 83       	std	Y+1, r24	; 0x01

   switch (flag)
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	3b 83       	std	Y+3, r19	; 0x03
     e5e:	2a 83       	std	Y+2, r18	; 0x02
     e60:	8a 81       	ldd	r24, Y+2	; 0x02
     e62:	9b 81       	ldd	r25, Y+3	; 0x03
     e64:	00 97       	sbiw	r24, 0x00	; 0
     e66:	31 f0       	breq	.+12     	; 0xe74 <OPERATION_ReceivecheckPasswordMatch+0x34>
     e68:	2a 81       	ldd	r18, Y+2	; 0x02
     e6a:	3b 81       	ldd	r19, Y+3	; 0x03
     e6c:	21 30       	cpi	r18, 0x01	; 1
     e6e:	31 05       	cpc	r19, r1
     e70:	f1 f0       	breq	.+60     	; 0xeae <OPERATION_ReceivecheckPasswordMatch+0x6e>
     e72:	22 c0       	rjmp	.+68     	; 0xeb8 <OPERATION_ReceivecheckPasswordMatch+0x78>
   {
      /*Missmatched Case*/
      /*Repeat Step 1 */
      case 0 :  missmatch_counter++;
     e74:	80 91 ee 00 	lds	r24, 0x00EE
     e78:	8f 5f       	subi	r24, 0xFF	; 255
     e7a:	80 93 ee 00 	sts	0x00EE, r24

               _7seg_Write(missmatch_counter);
     e7e:	80 91 ee 00 	lds	r24, 0x00EE
     e82:	0e 94 9e 18 	call	0x313c	; 0x313c <_7seg_Write>
                if(missmatch_counter== 3)
     e86:	80 91 ee 00 	lds	r24, 0x00EE
     e8a:	83 30       	cpi	r24, 0x03	; 3
     e8c:	49 f4       	brne	.+18     	; 0xea0 <OPERATION_ReceivecheckPasswordMatch+0x60>
                {

                	LCD_clearScreen();
     e8e:	0e 94 d5 17 	call	0x2faa	; 0x2faa <LCD_clearScreen>
                	LCD_displayString("Error");
     e92:	8f e7       	ldi	r24, 0x7F	; 127
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <LCD_displayString>
                	missmatch_counter = 0;
     e9a:	10 92 ee 00 	sts	0x00EE, r1
     e9e:	0c c0       	rjmp	.+24     	; 0xeb8 <OPERATION_ReceivecheckPasswordMatch+0x78>
                }
                else
                {
                	OPERATION_EnterPassword();
     ea0:	0e 94 de 05 	call	0xbbc	; 0xbbc <OPERATION_EnterPassword>
                	OPERATION_reEnterPassword();
     ea4:	0e 94 7f 06 	call	0xcfe	; 0xcfe <OPERATION_reEnterPassword>
                	OPERATION_ReceivecheckPasswordMatch();
     ea8:	0e 94 20 07 	call	0xe40	; 0xe40 <OPERATION_ReceivecheckPasswordMatch>
     eac:	05 c0       	rjmp	.+10     	; 0xeb8 <OPERATION_ReceivecheckPasswordMatch+0x78>
    	        break;

      /* Go to Main Options*/
      case 1 :

    	  _7seg_Write(0);
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	0e 94 9e 18 	call	0x313c	; 0x313c <_7seg_Write>

    	        /*Go to Main Options*/
    	        OPERATION_MainOptions();
     eb4:	0e 94 62 07 	call	0xec4	; 0xec4 <OPERATION_MainOptions>
    	        break;
   }
}
     eb8:	0f 90       	pop	r0
     eba:	0f 90       	pop	r0
     ebc:	0f 90       	pop	r0
     ebe:	cf 91       	pop	r28
     ec0:	df 91       	pop	r29
     ec2:	08 95       	ret

00000ec4 <OPERATION_MainOptions>:
* Parameters (out):   None
* Return value:       None
* Description:        Display Main Options for user
********************************************************************************/
void OPERATION_MainOptions(void)
{
     ec4:	df 93       	push	r29
     ec6:	cf 93       	push	r28
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
     ecc:	62 97       	sbiw	r28, 0x12	; 18
     ece:	0f b6       	in	r0, 0x3f	; 63
     ed0:	f8 94       	cli
     ed2:	de bf       	out	0x3e, r29	; 62
     ed4:	0f be       	out	0x3f, r0	; 63
     ed6:	cd bf       	out	0x3d, r28	; 61
    /*Clear screen from previous operation*/
	LCD_clearScreen();
     ed8:	0e 94 d5 17 	call	0x2faa	; 0x2faa <LCD_clearScreen>

	/*variable to hold keypad press*/
	uint8 key;

	/*Variable to check Driving Motor*/
	uint8 Motor_Drive_Check = 0;
     edc:	1f 86       	std	Y+15, r1	; 0x0f

	/*Variable to hold number of miss matches*/
	 static uint8 missmatch_counter = 0;

	/*Actual Operation*/
	LCD_displayString("+: Open Door");
     ede:	85 e8       	ldi	r24, 0x85	; 133
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <LCD_displayString>
	LCD_moveCursor(1, 0);
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	60 e0       	ldi	r22, 0x00	; 0
     eea:	0e 94 57 17 	call	0x2eae	; 0x2eae <LCD_moveCursor>
	LCD_displayString("-: Change Pass");
     eee:	82 e9       	ldi	r24, 0x92	; 146
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <LCD_displayString>

	/*Get Key Press */
	key = KEYPAD_getPressedKey();
     ef6:	0e 94 2a 12 	call	0x2454	; 0x2454 <KEYPAD_getPressedKey>
     efa:	88 8b       	std	Y+16, r24	; 0x10
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	a8 e4       	ldi	r26, 0x48	; 72
     f02:	b4 e4       	ldi	r27, 0x44	; 68
     f04:	8b 87       	std	Y+11, r24	; 0x0b
     f06:	9c 87       	std	Y+12, r25	; 0x0c
     f08:	ad 87       	std	Y+13, r26	; 0x0d
     f0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f0c:	6b 85       	ldd	r22, Y+11	; 0x0b
     f0e:	7c 85       	ldd	r23, Y+12	; 0x0c
     f10:	8d 85       	ldd	r24, Y+13	; 0x0d
     f12:	9e 85       	ldd	r25, Y+14	; 0x0e
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	4a ef       	ldi	r20, 0xFA	; 250
     f1a:	54 e4       	ldi	r21, 0x44	; 68
     f1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f20:	dc 01       	movw	r26, r24
     f22:	cb 01       	movw	r24, r22
     f24:	8f 83       	std	Y+7, r24	; 0x07
     f26:	98 87       	std	Y+8, r25	; 0x08
     f28:	a9 87       	std	Y+9, r26	; 0x09
     f2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f2c:	6f 81       	ldd	r22, Y+7	; 0x07
     f2e:	78 85       	ldd	r23, Y+8	; 0x08
     f30:	89 85       	ldd	r24, Y+9	; 0x09
     f32:	9a 85       	ldd	r25, Y+10	; 0x0a
     f34:	20 e0       	ldi	r18, 0x00	; 0
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	40 e8       	ldi	r20, 0x80	; 128
     f3a:	5f e3       	ldi	r21, 0x3F	; 63
     f3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f40:	88 23       	and	r24, r24
     f42:	2c f4       	brge	.+10     	; 0xf4e <OPERATION_MainOptions+0x8a>
		__ticks = 1;
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	9e 83       	std	Y+6, r25	; 0x06
     f4a:	8d 83       	std	Y+5, r24	; 0x05
     f4c:	3f c0       	rjmp	.+126    	; 0xfcc <OPERATION_MainOptions+0x108>
	else if (__tmp > 65535)
     f4e:	6f 81       	ldd	r22, Y+7	; 0x07
     f50:	78 85       	ldd	r23, Y+8	; 0x08
     f52:	89 85       	ldd	r24, Y+9	; 0x09
     f54:	9a 85       	ldd	r25, Y+10	; 0x0a
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	3f ef       	ldi	r19, 0xFF	; 255
     f5a:	4f e7       	ldi	r20, 0x7F	; 127
     f5c:	57 e4       	ldi	r21, 0x47	; 71
     f5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f62:	18 16       	cp	r1, r24
     f64:	4c f5       	brge	.+82     	; 0xfb8 <OPERATION_MainOptions+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f66:	6b 85       	ldd	r22, Y+11	; 0x0b
     f68:	7c 85       	ldd	r23, Y+12	; 0x0c
     f6a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f6c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	40 e2       	ldi	r20, 0x20	; 32
     f74:	51 e4       	ldi	r21, 0x41	; 65
     f76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f7a:	dc 01       	movw	r26, r24
     f7c:	cb 01       	movw	r24, r22
     f7e:	bc 01       	movw	r22, r24
     f80:	cd 01       	movw	r24, r26
     f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f86:	dc 01       	movw	r26, r24
     f88:	cb 01       	movw	r24, r22
     f8a:	9e 83       	std	Y+6, r25	; 0x06
     f8c:	8d 83       	std	Y+5, r24	; 0x05
     f8e:	0f c0       	rjmp	.+30     	; 0xfae <OPERATION_MainOptions+0xea>
     f90:	88 ec       	ldi	r24, 0xC8	; 200
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	9c 83       	std	Y+4, r25	; 0x04
     f96:	8b 83       	std	Y+3, r24	; 0x03
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	9c 81       	ldd	r25, Y+4	; 0x04
     f9c:	01 97       	sbiw	r24, 0x01	; 1
     f9e:	f1 f7       	brne	.-4      	; 0xf9c <OPERATION_MainOptions+0xd8>
     fa0:	9c 83       	std	Y+4, r25	; 0x04
     fa2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fa4:	8d 81       	ldd	r24, Y+5	; 0x05
     fa6:	9e 81       	ldd	r25, Y+6	; 0x06
     fa8:	01 97       	sbiw	r24, 0x01	; 1
     faa:	9e 83       	std	Y+6, r25	; 0x06
     fac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fae:	8d 81       	ldd	r24, Y+5	; 0x05
     fb0:	9e 81       	ldd	r25, Y+6	; 0x06
     fb2:	00 97       	sbiw	r24, 0x00	; 0
     fb4:	69 f7       	brne	.-38     	; 0xf90 <OPERATION_MainOptions+0xcc>
     fb6:	14 c0       	rjmp	.+40     	; 0xfe0 <OPERATION_MainOptions+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fb8:	6f 81       	ldd	r22, Y+7	; 0x07
     fba:	78 85       	ldd	r23, Y+8	; 0x08
     fbc:	89 85       	ldd	r24, Y+9	; 0x09
     fbe:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fc4:	dc 01       	movw	r26, r24
     fc6:	cb 01       	movw	r24, r22
     fc8:	9e 83       	std	Y+6, r25	; 0x06
     fca:	8d 83       	std	Y+5, r24	; 0x05
     fcc:	8d 81       	ldd	r24, Y+5	; 0x05
     fce:	9e 81       	ldd	r25, Y+6	; 0x06
     fd0:	9a 83       	std	Y+2, r25	; 0x02
     fd2:	89 83       	std	Y+1, r24	; 0x01
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	9a 81       	ldd	r25, Y+2	; 0x02
     fd8:	01 97       	sbiw	r24, 0x01	; 1
     fda:	f1 f7       	brne	.-4      	; 0xfd8 <OPERATION_MainOptions+0x114>
     fdc:	9a 83       	std	Y+2, r25	; 0x02
     fde:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(800);

	/*Send User option input by UART*/
	 UART_sendByte(key);
     fe0:	88 89       	ldd	r24, Y+16	; 0x10
     fe2:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <UART_sendByte>

	switch (key)
     fe6:	88 89       	ldd	r24, Y+16	; 0x10
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	3a 8b       	std	Y+18, r19	; 0x12
     fee:	29 8b       	std	Y+17, r18	; 0x11
     ff0:	89 89       	ldd	r24, Y+17	; 0x11
     ff2:	9a 89       	ldd	r25, Y+18	; 0x12
     ff4:	8b 32       	cpi	r24, 0x2B	; 43
     ff6:	91 05       	cpc	r25, r1
     ff8:	39 f0       	breq	.+14     	; 0x1008 <OPERATION_MainOptions+0x144>
     ffa:	29 89       	ldd	r18, Y+17	; 0x11
     ffc:	3a 89       	ldd	r19, Y+18	; 0x12
     ffe:	2d 32       	cpi	r18, 0x2D	; 45
    1000:	31 05       	cpc	r19, r1
    1002:	09 f4       	brne	.+2      	; 0x1006 <OPERATION_MainOptions+0x142>
    1004:	47 c0       	rjmp	.+142    	; 0x1094 <OPERATION_MainOptions+0x1d0>
    1006:	4c c0       	rjmp	.+152    	; 0x10a0 <OPERATION_MainOptions+0x1dc>
	{
	  /*Motor Drive Case*/
	  case '+' :
		           /*Enter Password*/
		          OPERATION_EnterPassword();
    1008:	0e 94 de 05 	call	0xbbc	; 0xbbc <OPERATION_EnterPassword>

	             /*IF matched with password saved in EEPROM - Drive Motor*/
	             Motor_Drive_Check = UART_receiveByte();
    100c:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <UART_receiveByte>
    1010:	8f 87       	std	Y+15, r24	; 0x0f
    1012:	1b c0       	rjmp	.+54     	; 0x104a <OPERATION_MainOptions+0x186>

	             /*Miss Matched Case*/

	            	 while ( Motor_Drive_Check != 1 )
	            	 {
	            		 missmatch_counter++;
    1014:	80 91 ef 00 	lds	r24, 0x00EF
    1018:	8f 5f       	subi	r24, 0xFF	; 255
    101a:	80 93 ef 00 	sts	0x00EF, r24

	            		 _7seg_Write(missmatch_counter);
    101e:	80 91 ef 00 	lds	r24, 0x00EF
    1022:	0e 94 9e 18 	call	0x313c	; 0x313c <_7seg_Write>

		            	 if(missmatch_counter == 3)
    1026:	80 91 ef 00 	lds	r24, 0x00EF
    102a:	83 30       	cpi	r24, 0x03	; 3
    102c:	49 f4       	brne	.+18     	; 0x1040 <OPERATION_MainOptions+0x17c>
		            	 {
		                 	LCD_clearScreen();
    102e:	0e 94 d5 17 	call	0x2faa	; 0x2faa <LCD_clearScreen>
		                 	LCD_displayString("Error");
    1032:	8f e7       	ldi	r24, 0x7F	; 127
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <LCD_displayString>
		                 	missmatch_counter = 0;
    103a:	10 92 ef 00 	sts	0x00EF, r1
    103e:	08 c0       	rjmp	.+16     	; 0x1050 <OPERATION_MainOptions+0x18c>
		                 	break;
		            	 }

	            		 /*Enter Password*/
	            		 OPERATION_EnterPassword();
    1040:	0e 94 de 05 	call	0xbbc	; 0xbbc <OPERATION_EnterPassword>
	            		 Motor_Drive_Check = UART_receiveByte();
    1044:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <UART_receiveByte>
    1048:	8f 87       	std	Y+15, r24	; 0x0f
	             /*IF matched with password saved in EEPROM - Drive Motor*/
	             Motor_Drive_Check = UART_receiveByte();

	             /*Miss Matched Case*/

	            	 while ( Motor_Drive_Check != 1 )
    104a:	8f 85       	ldd	r24, Y+15	; 0x0f
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	11 f7       	brne	.-60     	; 0x1014 <OPERATION_MainOptions+0x150>
	            		 Motor_Drive_Check = UART_receiveByte();

	            	 }

	             /*Matched Case*/
	             if(Motor_Drive_Check == 1)
    1050:	8f 85       	ldd	r24, Y+15	; 0x0f
    1052:	81 30       	cpi	r24, 0x01	; 1
    1054:	29 f5       	brne	.+74     	; 0x10a0 <OPERATION_MainOptions+0x1dc>
	             {
	            	 _7seg_Write(0);
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	0e 94 9e 18 	call	0x313c	; 0x313c <_7seg_Write>
	            	 /*Init Timer*/
	            	 Timer_init(&Config_Struct);
    105c:	8a ed       	ldi	r24, 0xDA	; 218
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	0e 94 08 0a 	call	0x1410	; 0x1410 <Timer_init>

	            	 /*I-Bit*/
	            	 SET_BIT(SREG,7);
    1064:	af e5       	ldi	r26, 0x5F	; 95
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	ef e5       	ldi	r30, 0x5F	; 95
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	80 68       	ori	r24, 0x80	; 128
    1070:	8c 93       	st	X, r24

	            	 LCD_clearScreen();
    1072:	0e 94 d5 17 	call	0x2faa	; 0x2faa <LCD_clearScreen>
	            	 LCD_displayString("Opening Door");
    1076:	81 ea       	ldi	r24, 0xA1	; 161
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <LCD_displayString>

	            	 /*Setting Time for 15 seconds*/
	            	 g_Interrupt_Number=461;
    107e:	8d ec       	ldi	r24, 0xCD	; 205
    1080:	91 e0       	ldi	r25, 0x01	; 1
    1082:	90 93 ed 00 	sts	0x00ED, r25
    1086:	80 93 ec 00 	sts	0x00EC, r24

	            	 /*Start Taking ACTION in ISR*/
	           	     Timer0_setCallBack(OPERATION_LCD_Control);
    108a:	89 e5       	ldi	r24, 0x59	; 89
    108c:	98 e0       	ldi	r25, 0x08	; 8
    108e:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <Timer0_setCallBack>
    1092:	06 c0       	rjmp	.+12     	; 0x10a0 <OPERATION_MainOptions+0x1dc>
	             break;

	 /*Change Password Case*/
	  case '-' :
		         /*repeat step 1*/
    	         OPERATION_EnterPassword();
    1094:	0e 94 de 05 	call	0xbbc	; 0xbbc <OPERATION_EnterPassword>
    	         OPERATION_reEnterPassword();
    1098:	0e 94 7f 06 	call	0xcfe	; 0xcfe <OPERATION_reEnterPassword>
    	         OPERATION_ReceivecheckPasswordMatch();
    109c:	0e 94 20 07 	call	0xe40	; 0xe40 <OPERATION_ReceivecheckPasswordMatch>

	             break;
	  default:
		         break;
	}
}
    10a0:	62 96       	adiw	r28, 0x12	; 18
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	f8 94       	cli
    10a6:	de bf       	out	0x3e, r29	; 62
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	cd bf       	out	0x3d, r28	; 61
    10ac:	cf 91       	pop	r28
    10ae:	df 91       	pop	r29
    10b0:	08 95       	ret

000010b2 <OPERATION_LCD_Control>:
* Parameters (out):   None
* Return value:       uint8
* Description:        Function to be called when ISR happens
********************************************************************************/
void OPERATION_LCD_Control(void)
{
    10b2:	df 93       	push	r29
    10b4:	cf 93       	push	r28
    10b6:	cd b7       	in	r28, 0x3d	; 61
    10b8:	de b7       	in	r29, 0x3e	; 62
	 * 0 indicated CW , 1 indicates CCW
	 */

	static uint8 flag = 0;

	counter ++ ;
    10ba:	80 91 f1 00 	lds	r24, 0x00F1
    10be:	90 91 f2 00 	lds	r25, 0x00F2
    10c2:	01 96       	adiw	r24, 0x01	; 1
    10c4:	90 93 f2 00 	sts	0x00F2, r25
    10c8:	80 93 f1 00 	sts	0x00F1, r24

	/*Holdind Motor for three seconds perparing for second rotation*/
	if(counter ==  g_Interrupt_Number && g_Interrupt_Number == 461 && flag ==0)
    10cc:	20 91 f1 00 	lds	r18, 0x00F1
    10d0:	30 91 f2 00 	lds	r19, 0x00F2
    10d4:	80 91 ec 00 	lds	r24, 0x00EC
    10d8:	90 91 ed 00 	lds	r25, 0x00ED
    10dc:	28 17       	cp	r18, r24
    10de:	39 07       	cpc	r19, r25
    10e0:	01 f5       	brne	.+64     	; 0x1122 <OPERATION_LCD_Control+0x70>
    10e2:	80 91 ec 00 	lds	r24, 0x00EC
    10e6:	90 91 ed 00 	lds	r25, 0x00ED
    10ea:	21 e0       	ldi	r18, 0x01	; 1
    10ec:	8d 3c       	cpi	r24, 0xCD	; 205
    10ee:	92 07       	cpc	r25, r18
    10f0:	c1 f4       	brne	.+48     	; 0x1122 <OPERATION_LCD_Control+0x70>
    10f2:	80 91 f0 00 	lds	r24, 0x00F0
    10f6:	88 23       	and	r24, r24
    10f8:	a1 f4       	brne	.+40     	; 0x1122 <OPERATION_LCD_Control+0x70>
	{
		LCD_clearScreen();
    10fa:	0e 94 d5 17 	call	0x2faa	; 0x2faa <LCD_clearScreen>
		LCD_displayString("Holding Motor");
    10fe:	8e ea       	ldi	r24, 0xAE	; 174
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <LCD_displayString>
   	    g_Interrupt_Number=92;
    1106:	8c e5       	ldi	r24, 0x5C	; 92
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	90 93 ed 00 	sts	0x00ED, r25
    110e:	80 93 ec 00 	sts	0x00EC, r24
		counter=0;
    1112:	10 92 f2 00 	sts	0x00F2, r1
    1116:	10 92 f1 00 	sts	0x00F1, r1
		flag = 1;
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	80 93 f0 00 	sts	0x00F0, r24
    1120:	42 c0       	rjmp	.+132    	; 0x11a6 <OPERATION_LCD_Control+0xf4>
	}
	/*Rotating Motor in CCW Direction*/
	else if (counter ==  g_Interrupt_Number && g_Interrupt_Number == 92)
    1122:	20 91 f1 00 	lds	r18, 0x00F1
    1126:	30 91 f2 00 	lds	r19, 0x00F2
    112a:	80 91 ec 00 	lds	r24, 0x00EC
    112e:	90 91 ed 00 	lds	r25, 0x00ED
    1132:	28 17       	cp	r18, r24
    1134:	39 07       	cpc	r19, r25
    1136:	c1 f4       	brne	.+48     	; 0x1168 <OPERATION_LCD_Control+0xb6>
    1138:	80 91 ec 00 	lds	r24, 0x00EC
    113c:	90 91 ed 00 	lds	r25, 0x00ED
    1140:	8c 35       	cpi	r24, 0x5C	; 92
    1142:	91 05       	cpc	r25, r1
    1144:	89 f4       	brne	.+34     	; 0x1168 <OPERATION_LCD_Control+0xb6>
	{
   	      LCD_clearScreen();
    1146:	0e 94 d5 17 	call	0x2faa	; 0x2faa <LCD_clearScreen>
   	      LCD_displayString("Closing Door");
    114a:	8c eb       	ldi	r24, 0xBC	; 188
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <LCD_displayString>
   	      g_Interrupt_Number=215;
    1152:	87 ed       	ldi	r24, 0xD7	; 215
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	90 93 ed 00 	sts	0x00ED, r25
    115a:	80 93 ec 00 	sts	0x00EC, r24
   	      counter = 0;
    115e:	10 92 f2 00 	sts	0x00F2, r1
    1162:	10 92 f1 00 	sts	0x00F1, r1
    1166:	1f c0       	rjmp	.+62     	; 0x11a6 <OPERATION_LCD_Control+0xf4>
	}
	/*after 5 seconds stop the timer*/
	else if(counter ==  g_Interrupt_Number && g_Interrupt_Number == 215 && flag ==1)
    1168:	20 91 f1 00 	lds	r18, 0x00F1
    116c:	30 91 f2 00 	lds	r19, 0x00F2
    1170:	80 91 ec 00 	lds	r24, 0x00EC
    1174:	90 91 ed 00 	lds	r25, 0x00ED
    1178:	28 17       	cp	r18, r24
    117a:	39 07       	cpc	r19, r25
    117c:	a1 f4       	brne	.+40     	; 0x11a6 <OPERATION_LCD_Control+0xf4>
    117e:	80 91 ec 00 	lds	r24, 0x00EC
    1182:	90 91 ed 00 	lds	r25, 0x00ED
    1186:	87 3d       	cpi	r24, 0xD7	; 215
    1188:	91 05       	cpc	r25, r1
    118a:	69 f4       	brne	.+26     	; 0x11a6 <OPERATION_LCD_Control+0xf4>
    118c:	80 91 f0 00 	lds	r24, 0x00F0
    1190:	81 30       	cpi	r24, 0x01	; 1
    1192:	49 f4       	brne	.+18     	; 0x11a6 <OPERATION_LCD_Control+0xf4>
	{
 	    LCD_clearScreen();
    1194:	0e 94 d5 17 	call	0x2faa	; 0x2faa <LCD_clearScreen>
 	    LCD_displayString("Finished");
    1198:	89 ec       	ldi	r24, 0xC9	; 201
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <LCD_displayString>
		Timer_Deinit(0);
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	0e 94 97 0b 	call	0x172e	; 0x172e <Timer_Deinit>

	}

}
    11a6:	cf 91       	pop	r28
    11a8:	df 91       	pop	r29
    11aa:	08 95       	ret

000011ac <__vector_9>:
*                                                                              *
*                              Interrupt Service Routines                      *
*                                                                              *
********************************************************************************/
ISR(TIMER0_OVF_vect)
{
    11ac:	1f 92       	push	r1
    11ae:	0f 92       	push	r0
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	0f 92       	push	r0
    11b4:	11 24       	eor	r1, r1
    11b6:	2f 93       	push	r18
    11b8:	3f 93       	push	r19
    11ba:	4f 93       	push	r20
    11bc:	5f 93       	push	r21
    11be:	6f 93       	push	r22
    11c0:	7f 93       	push	r23
    11c2:	8f 93       	push	r24
    11c4:	9f 93       	push	r25
    11c6:	af 93       	push	r26
    11c8:	bf 93       	push	r27
    11ca:	ef 93       	push	r30
    11cc:	ff 93       	push	r31
    11ce:	df 93       	push	r29
    11d0:	cf 93       	push	r28
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
    if ( g_Timer0_callBackPtr != NULL_PTR)
    11d6:	80 91 f3 00 	lds	r24, 0x00F3
    11da:	90 91 f4 00 	lds	r25, 0x00F4
    11de:	00 97       	sbiw	r24, 0x00	; 0
    11e0:	29 f0       	breq	.+10     	; 0x11ec <__vector_9+0x40>
    {
    	(*g_Timer0_callBackPtr)();
    11e2:	e0 91 f3 00 	lds	r30, 0x00F3
    11e6:	f0 91 f4 00 	lds	r31, 0x00F4
    11ea:	09 95       	icall
    }
}
    11ec:	cf 91       	pop	r28
    11ee:	df 91       	pop	r29
    11f0:	ff 91       	pop	r31
    11f2:	ef 91       	pop	r30
    11f4:	bf 91       	pop	r27
    11f6:	af 91       	pop	r26
    11f8:	9f 91       	pop	r25
    11fa:	8f 91       	pop	r24
    11fc:	7f 91       	pop	r23
    11fe:	6f 91       	pop	r22
    1200:	5f 91       	pop	r21
    1202:	4f 91       	pop	r20
    1204:	3f 91       	pop	r19
    1206:	2f 91       	pop	r18
    1208:	0f 90       	pop	r0
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	0f 90       	pop	r0
    120e:	1f 90       	pop	r1
    1210:	18 95       	reti

00001212 <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    1212:	1f 92       	push	r1
    1214:	0f 92       	push	r0
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	0f 92       	push	r0
    121a:	11 24       	eor	r1, r1
    121c:	2f 93       	push	r18
    121e:	3f 93       	push	r19
    1220:	4f 93       	push	r20
    1222:	5f 93       	push	r21
    1224:	6f 93       	push	r22
    1226:	7f 93       	push	r23
    1228:	8f 93       	push	r24
    122a:	9f 93       	push	r25
    122c:	af 93       	push	r26
    122e:	bf 93       	push	r27
    1230:	ef 93       	push	r30
    1232:	ff 93       	push	r31
    1234:	df 93       	push	r29
    1236:	cf 93       	push	r28
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
    if ( g_Timer0_callBackPtr != NULL_PTR)
    123c:	80 91 f3 00 	lds	r24, 0x00F3
    1240:	90 91 f4 00 	lds	r25, 0x00F4
    1244:	00 97       	sbiw	r24, 0x00	; 0
    1246:	29 f0       	breq	.+10     	; 0x1252 <__vector_19+0x40>
    {
    	(*g_Timer0_callBackPtr)();
    1248:	e0 91 f3 00 	lds	r30, 0x00F3
    124c:	f0 91 f4 00 	lds	r31, 0x00F4
    1250:	09 95       	icall
    }
}
    1252:	cf 91       	pop	r28
    1254:	df 91       	pop	r29
    1256:	ff 91       	pop	r31
    1258:	ef 91       	pop	r30
    125a:	bf 91       	pop	r27
    125c:	af 91       	pop	r26
    125e:	9f 91       	pop	r25
    1260:	8f 91       	pop	r24
    1262:	7f 91       	pop	r23
    1264:	6f 91       	pop	r22
    1266:	5f 91       	pop	r21
    1268:	4f 91       	pop	r20
    126a:	3f 91       	pop	r19
    126c:	2f 91       	pop	r18
    126e:	0f 90       	pop	r0
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	0f 90       	pop	r0
    1274:	1f 90       	pop	r1
    1276:	18 95       	reti

00001278 <__vector_6>:
ISR(TIMER1_COMPA_vect)
{
    1278:	1f 92       	push	r1
    127a:	0f 92       	push	r0
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	0f 92       	push	r0
    1280:	11 24       	eor	r1, r1
    1282:	2f 93       	push	r18
    1284:	3f 93       	push	r19
    1286:	4f 93       	push	r20
    1288:	5f 93       	push	r21
    128a:	6f 93       	push	r22
    128c:	7f 93       	push	r23
    128e:	8f 93       	push	r24
    1290:	9f 93       	push	r25
    1292:	af 93       	push	r26
    1294:	bf 93       	push	r27
    1296:	ef 93       	push	r30
    1298:	ff 93       	push	r31
    129a:	df 93       	push	r29
    129c:	cf 93       	push	r28
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
    if ( g_Timer1_callBackPtr != NULL_PTR)
    12a2:	80 91 f5 00 	lds	r24, 0x00F5
    12a6:	90 91 f6 00 	lds	r25, 0x00F6
    12aa:	00 97       	sbiw	r24, 0x00	; 0
    12ac:	29 f0       	breq	.+10     	; 0x12b8 <__vector_6+0x40>
    {
    	(*g_Timer1_callBackPtr)();
    12ae:	e0 91 f5 00 	lds	r30, 0x00F5
    12b2:	f0 91 f6 00 	lds	r31, 0x00F6
    12b6:	09 95       	icall
    }
}
    12b8:	cf 91       	pop	r28
    12ba:	df 91       	pop	r29
    12bc:	ff 91       	pop	r31
    12be:	ef 91       	pop	r30
    12c0:	bf 91       	pop	r27
    12c2:	af 91       	pop	r26
    12c4:	9f 91       	pop	r25
    12c6:	8f 91       	pop	r24
    12c8:	7f 91       	pop	r23
    12ca:	6f 91       	pop	r22
    12cc:	5f 91       	pop	r21
    12ce:	4f 91       	pop	r20
    12d0:	3f 91       	pop	r19
    12d2:	2f 91       	pop	r18
    12d4:	0f 90       	pop	r0
    12d6:	0f be       	out	0x3f, r0	; 63
    12d8:	0f 90       	pop	r0
    12da:	1f 90       	pop	r1
    12dc:	18 95       	reti

000012de <__vector_7>:
ISR(TIMER1_COMPB_vect)
{
    12de:	1f 92       	push	r1
    12e0:	0f 92       	push	r0
    12e2:	0f b6       	in	r0, 0x3f	; 63
    12e4:	0f 92       	push	r0
    12e6:	11 24       	eor	r1, r1
    12e8:	2f 93       	push	r18
    12ea:	3f 93       	push	r19
    12ec:	4f 93       	push	r20
    12ee:	5f 93       	push	r21
    12f0:	6f 93       	push	r22
    12f2:	7f 93       	push	r23
    12f4:	8f 93       	push	r24
    12f6:	9f 93       	push	r25
    12f8:	af 93       	push	r26
    12fa:	bf 93       	push	r27
    12fc:	ef 93       	push	r30
    12fe:	ff 93       	push	r31
    1300:	df 93       	push	r29
    1302:	cf 93       	push	r28
    1304:	cd b7       	in	r28, 0x3d	; 61
    1306:	de b7       	in	r29, 0x3e	; 62
    if ( g_Timer1_callBackPtr != NULL_PTR)
    1308:	80 91 f5 00 	lds	r24, 0x00F5
    130c:	90 91 f6 00 	lds	r25, 0x00F6
    1310:	00 97       	sbiw	r24, 0x00	; 0
    1312:	29 f0       	breq	.+10     	; 0x131e <__vector_7+0x40>
    {
    	(*g_Timer1_callBackPtr)();
    1314:	e0 91 f5 00 	lds	r30, 0x00F5
    1318:	f0 91 f6 00 	lds	r31, 0x00F6
    131c:	09 95       	icall
    }
}
    131e:	cf 91       	pop	r28
    1320:	df 91       	pop	r29
    1322:	ff 91       	pop	r31
    1324:	ef 91       	pop	r30
    1326:	bf 91       	pop	r27
    1328:	af 91       	pop	r26
    132a:	9f 91       	pop	r25
    132c:	8f 91       	pop	r24
    132e:	7f 91       	pop	r23
    1330:	6f 91       	pop	r22
    1332:	5f 91       	pop	r21
    1334:	4f 91       	pop	r20
    1336:	3f 91       	pop	r19
    1338:	2f 91       	pop	r18
    133a:	0f 90       	pop	r0
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	0f 90       	pop	r0
    1340:	1f 90       	pop	r1
    1342:	18 95       	reti

00001344 <__vector_4>:
ISR(TIMER2_OVF_vect)
{
    1344:	1f 92       	push	r1
    1346:	0f 92       	push	r0
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	0f 92       	push	r0
    134c:	11 24       	eor	r1, r1
    134e:	2f 93       	push	r18
    1350:	3f 93       	push	r19
    1352:	4f 93       	push	r20
    1354:	5f 93       	push	r21
    1356:	6f 93       	push	r22
    1358:	7f 93       	push	r23
    135a:	8f 93       	push	r24
    135c:	9f 93       	push	r25
    135e:	af 93       	push	r26
    1360:	bf 93       	push	r27
    1362:	ef 93       	push	r30
    1364:	ff 93       	push	r31
    1366:	df 93       	push	r29
    1368:	cf 93       	push	r28
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62
    if ( g_Timer2_callBackPtr != NULL_PTR)
    136e:	80 91 f7 00 	lds	r24, 0x00F7
    1372:	90 91 f8 00 	lds	r25, 0x00F8
    1376:	00 97       	sbiw	r24, 0x00	; 0
    1378:	29 f0       	breq	.+10     	; 0x1384 <__vector_4+0x40>
    {
    	(*g_Timer2_callBackPtr)();
    137a:	e0 91 f7 00 	lds	r30, 0x00F7
    137e:	f0 91 f8 00 	lds	r31, 0x00F8
    1382:	09 95       	icall
    }
}
    1384:	cf 91       	pop	r28
    1386:	df 91       	pop	r29
    1388:	ff 91       	pop	r31
    138a:	ef 91       	pop	r30
    138c:	bf 91       	pop	r27
    138e:	af 91       	pop	r26
    1390:	9f 91       	pop	r25
    1392:	8f 91       	pop	r24
    1394:	7f 91       	pop	r23
    1396:	6f 91       	pop	r22
    1398:	5f 91       	pop	r21
    139a:	4f 91       	pop	r20
    139c:	3f 91       	pop	r19
    139e:	2f 91       	pop	r18
    13a0:	0f 90       	pop	r0
    13a2:	0f be       	out	0x3f, r0	; 63
    13a4:	0f 90       	pop	r0
    13a6:	1f 90       	pop	r1
    13a8:	18 95       	reti

000013aa <__vector_3>:
ISR(TIMER2_COMP_vect)
{
    13aa:	1f 92       	push	r1
    13ac:	0f 92       	push	r0
    13ae:	0f b6       	in	r0, 0x3f	; 63
    13b0:	0f 92       	push	r0
    13b2:	11 24       	eor	r1, r1
    13b4:	2f 93       	push	r18
    13b6:	3f 93       	push	r19
    13b8:	4f 93       	push	r20
    13ba:	5f 93       	push	r21
    13bc:	6f 93       	push	r22
    13be:	7f 93       	push	r23
    13c0:	8f 93       	push	r24
    13c2:	9f 93       	push	r25
    13c4:	af 93       	push	r26
    13c6:	bf 93       	push	r27
    13c8:	ef 93       	push	r30
    13ca:	ff 93       	push	r31
    13cc:	df 93       	push	r29
    13ce:	cf 93       	push	r28
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    if ( g_Timer2_callBackPtr != NULL_PTR)
    13d4:	80 91 f7 00 	lds	r24, 0x00F7
    13d8:	90 91 f8 00 	lds	r25, 0x00F8
    13dc:	00 97       	sbiw	r24, 0x00	; 0
    13de:	29 f0       	breq	.+10     	; 0x13ea <__vector_3+0x40>
    {
    	(*g_Timer2_callBackPtr)();
    13e0:	e0 91 f7 00 	lds	r30, 0x00F7
    13e4:	f0 91 f8 00 	lds	r31, 0x00F8
    13e8:	09 95       	icall
    }
}
    13ea:	cf 91       	pop	r28
    13ec:	df 91       	pop	r29
    13ee:	ff 91       	pop	r31
    13f0:	ef 91       	pop	r30
    13f2:	bf 91       	pop	r27
    13f4:	af 91       	pop	r26
    13f6:	9f 91       	pop	r25
    13f8:	8f 91       	pop	r24
    13fa:	7f 91       	pop	r23
    13fc:	6f 91       	pop	r22
    13fe:	5f 91       	pop	r21
    1400:	4f 91       	pop	r20
    1402:	3f 91       	pop	r19
    1404:	2f 91       	pop	r18
    1406:	0f 90       	pop	r0
    1408:	0f be       	out	0x3f, r0	; 63
    140a:	0f 90       	pop	r0
    140c:	1f 90       	pop	r1
    140e:	18 95       	reti

00001410 <Timer_init>:
* Parameters (out):   None
* Return value:       None
* Description:        Initialize the Selected Timer module.
********************************************************************************/
void Timer_init(const TIMER_ConfigType * Config_Ptr )
{
    1410:	df 93       	push	r29
    1412:	cf 93       	push	r28
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
    1418:	28 97       	sbiw	r28, 0x08	; 8
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	f8 94       	cli
    141e:	de bf       	out	0x3e, r29	; 62
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	cd bf       	out	0x3d, r28	; 61
    1424:	9a 83       	std	Y+2, r25	; 0x02
    1426:	89 83       	std	Y+1, r24	; 0x01
	/*Check Timer Number*/
    switch(Config_Ptr->timer_number)
    1428:	e9 81       	ldd	r30, Y+1	; 0x01
    142a:	fa 81       	ldd	r31, Y+2	; 0x02
    142c:	80 81       	ld	r24, Z
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	38 87       	std	Y+8, r19	; 0x08
    1434:	2f 83       	std	Y+7, r18	; 0x07
    1436:	8f 81       	ldd	r24, Y+7	; 0x07
    1438:	98 85       	ldd	r25, Y+8	; 0x08
    143a:	81 30       	cpi	r24, 0x01	; 1
    143c:	91 05       	cpc	r25, r1
    143e:	09 f4       	brne	.+2      	; 0x1442 <Timer_init+0x32>
    1440:	6d c1       	rjmp	.+730    	; 0x171c <Timer_init+0x30c>
    1442:	2f 81       	ldd	r18, Y+7	; 0x07
    1444:	38 85       	ldd	r19, Y+8	; 0x08
    1446:	22 30       	cpi	r18, 0x02	; 2
    1448:	31 05       	cpc	r19, r1
    144a:	09 f4       	brne	.+2      	; 0x144e <Timer_init+0x3e>
    144c:	b5 c0       	rjmp	.+362    	; 0x15b8 <Timer_init+0x1a8>
    144e:	8f 81       	ldd	r24, Y+7	; 0x07
    1450:	98 85       	ldd	r25, Y+8	; 0x08
    1452:	00 97       	sbiw	r24, 0x00	; 0
    1454:	09 f0       	breq	.+2      	; 0x1458 <Timer_init+0x48>
    1456:	62 c1       	rjmp	.+708    	; 0x171c <Timer_init+0x30c>
    {
        case Timer_0:
        	           /*Check Timer Mode*/
        	          switch(Config_Ptr->timer_mode)
    1458:	e9 81       	ldd	r30, Y+1	; 0x01
    145a:	fa 81       	ldd	r31, Y+2	; 0x02
    145c:	81 81       	ldd	r24, Z+1	; 0x01
    145e:	28 2f       	mov	r18, r24
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	3e 83       	std	Y+6, r19	; 0x06
    1464:	2d 83       	std	Y+5, r18	; 0x05
    1466:	8d 81       	ldd	r24, Y+5	; 0x05
    1468:	9e 81       	ldd	r25, Y+6	; 0x06
    146a:	81 30       	cpi	r24, 0x01	; 1
    146c:	91 05       	cpc	r25, r1
    146e:	59 f1       	breq	.+86     	; 0x14c6 <Timer_init+0xb6>
    1470:	2d 81       	ldd	r18, Y+5	; 0x05
    1472:	3e 81       	ldd	r19, Y+6	; 0x06
    1474:	22 30       	cpi	r18, 0x02	; 2
    1476:	31 05       	cpc	r19, r1
    1478:	2c f4       	brge	.+10     	; 0x1484 <Timer_init+0x74>
    147a:	8d 81       	ldd	r24, Y+5	; 0x05
    147c:	9e 81       	ldd	r25, Y+6	; 0x06
    147e:	00 97       	sbiw	r24, 0x00	; 0
    1480:	61 f0       	breq	.+24     	; 0x149a <Timer_init+0x8a>
    1482:	54 c0       	rjmp	.+168    	; 0x152c <Timer_init+0x11c>
    1484:	2d 81       	ldd	r18, Y+5	; 0x05
    1486:	3e 81       	ldd	r19, Y+6	; 0x06
    1488:	22 30       	cpi	r18, 0x02	; 2
    148a:	31 05       	cpc	r19, r1
    148c:	59 f1       	breq	.+86     	; 0x14e4 <Timer_init+0xd4>
    148e:	8d 81       	ldd	r24, Y+5	; 0x05
    1490:	9e 81       	ldd	r25, Y+6	; 0x06
    1492:	83 30       	cpi	r24, 0x03	; 3
    1494:	91 05       	cpc	r25, r1
    1496:	e1 f1       	breq	.+120    	; 0x1510 <Timer_init+0x100>
    1498:	49 c0       	rjmp	.+146    	; 0x152c <Timer_init+0x11c>
        	           {
        	                case Normal:           CLEAR_BIT(TCCR0,WGM00);
    149a:	a3 e5       	ldi	r26, 0x53	; 83
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	e3 e5       	ldi	r30, 0x53	; 83
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	8f 7b       	andi	r24, 0xBF	; 191
    14a6:	8c 93       	st	X, r24
        	                                       CLEAR_BIT(TCCR0,WGM01);
    14a8:	a3 e5       	ldi	r26, 0x53	; 83
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	e3 e5       	ldi	r30, 0x53	; 83
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	87 7f       	andi	r24, 0xF7	; 247
    14b4:	8c 93       	st	X, r24
                                                   /*Non-PWM Mode*/
                                                   SET_BIT(TCCR0,FOC0);
    14b6:	a3 e5       	ldi	r26, 0x53	; 83
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e3 e5       	ldi	r30, 0x53	; 83
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	80 68       	ori	r24, 0x80	; 128
    14c2:	8c 93       	st	X, r24
    14c4:	33 c0       	rjmp	.+102    	; 0x152c <Timer_init+0x11c>
        	                	                   break;

        	                case PWM_PhaseCorrect: SET_BIT(TCCR0,WGM00);
    14c6:	a3 e5       	ldi	r26, 0x53	; 83
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	e3 e5       	ldi	r30, 0x53	; 83
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	80 64       	ori	r24, 0x40	; 64
    14d2:	8c 93       	st	X, r24
                                                   CLEAR_BIT(TCCR0,WGM01);
    14d4:	a3 e5       	ldi	r26, 0x53	; 83
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	e3 e5       	ldi	r30, 0x53	; 83
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	87 7f       	andi	r24, 0xF7	; 247
    14e0:	8c 93       	st	X, r24
    14e2:	24 c0       	rjmp	.+72     	; 0x152c <Timer_init+0x11c>
        	                	                   break;

        	                case CTC:              CLEAR_BIT(TCCR0,WGM00);
    14e4:	a3 e5       	ldi	r26, 0x53	; 83
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e3 e5       	ldi	r30, 0x53	; 83
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	8f 7b       	andi	r24, 0xBF	; 191
    14f0:	8c 93       	st	X, r24
                                                   SET_BIT(TCCR0,WGM01);
    14f2:	a3 e5       	ldi	r26, 0x53	; 83
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	e3 e5       	ldi	r30, 0x53	; 83
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	88 60       	ori	r24, 0x08	; 8
    14fe:	8c 93       	st	X, r24
                                                   /*Non-PWM Mode*/
                                                   SET_BIT(TCCR0,FOC0);
    1500:	a3 e5       	ldi	r26, 0x53	; 83
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	e3 e5       	ldi	r30, 0x53	; 83
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	80 68       	ori	r24, 0x80	; 128
    150c:	8c 93       	st	X, r24
    150e:	0e c0       	rjmp	.+28     	; 0x152c <Timer_init+0x11c>
        	                	                   break;

        	                case PWM_Fast:         SET_BIT(TCCR0,WGM00);
    1510:	a3 e5       	ldi	r26, 0x53	; 83
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	e3 e5       	ldi	r30, 0x53	; 83
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	80 64       	ori	r24, 0x40	; 64
    151c:	8c 93       	st	X, r24
                                                   SET_BIT(TCCR0,WGM01);
    151e:	a3 e5       	ldi	r26, 0x53	; 83
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	e3 e5       	ldi	r30, 0x53	; 83
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	88 60       	ori	r24, 0x08	; 8
    152a:	8c 93       	st	X, r24
        	                	                   break;
        	           }

        	           /*Check OC Pin Mode*/
        	           TCCR0 = (TCCR0 & 0xCF ) | (Config_Ptr->timer_OCPin_mode << 4 ) ;
    152c:	a3 e5       	ldi	r26, 0x53	; 83
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	e3 e5       	ldi	r30, 0x53	; 83
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	28 2f       	mov	r18, r24
    1538:	2f 7c       	andi	r18, 0xCF	; 207
    153a:	e9 81       	ldd	r30, Y+1	; 0x01
    153c:	fa 81       	ldd	r31, Y+2	; 0x02
    153e:	85 81       	ldd	r24, Z+5	; 0x05
    1540:	88 2f       	mov	r24, r24
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	82 95       	swap	r24
    1546:	92 95       	swap	r25
    1548:	90 7f       	andi	r25, 0xF0	; 240
    154a:	98 27       	eor	r25, r24
    154c:	80 7f       	andi	r24, 0xF0	; 240
    154e:	98 27       	eor	r25, r24
    1550:	82 2b       	or	r24, r18
    1552:	8c 93       	st	X, r24

                       /*Check Prescaler*/
                       TCCR0 = (TCCR0 & 0xF8)  | (Config_Ptr->timer_prescaler );
    1554:	a3 e5       	ldi	r26, 0x53	; 83
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	e3 e5       	ldi	r30, 0x53	; 83
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	98 2f       	mov	r25, r24
    1560:	98 7f       	andi	r25, 0xF8	; 248
    1562:	e9 81       	ldd	r30, Y+1	; 0x01
    1564:	fa 81       	ldd	r31, Y+2	; 0x02
    1566:	82 81       	ldd	r24, Z+2	; 0x02
    1568:	89 2b       	or	r24, r25
    156a:	8c 93       	st	X, r24

                       /*TCNT inital Value*/
                       TCNT0 = Config_Ptr->TCNT_value;
    156c:	a2 e5       	ldi	r26, 0x52	; 82
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	e9 81       	ldd	r30, Y+1	; 0x01
    1572:	fa 81       	ldd	r31, Y+2	; 0x02
    1574:	86 81       	ldd	r24, Z+6	; 0x06
    1576:	97 81       	ldd	r25, Z+7	; 0x07
    1578:	8c 93       	st	X, r24

                       /*OCR Value*/
                       OCR0 = Config_Ptr->OCR_Value;
    157a:	ac e5       	ldi	r26, 0x5C	; 92
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	e9 81       	ldd	r30, Y+1	; 0x01
    1580:	fa 81       	ldd	r31, Y+2	; 0x02
    1582:	80 85       	ldd	r24, Z+8	; 0x08
    1584:	8c 93       	st	X, r24

                       /*Over Flow interrupt*/
                       TIMSK = (TIMSK & 0xFE) | Config_Ptr->timer_overflowinterrupt;
    1586:	a9 e5       	ldi	r26, 0x59	; 89
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	e9 e5       	ldi	r30, 0x59	; 89
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	98 2f       	mov	r25, r24
    1592:	9e 7f       	andi	r25, 0xFE	; 254
    1594:	e9 81       	ldd	r30, Y+1	; 0x01
    1596:	fa 81       	ldd	r31, Y+2	; 0x02
    1598:	83 81       	ldd	r24, Z+3	; 0x03
    159a:	89 2b       	or	r24, r25
    159c:	8c 93       	st	X, r24

                       /*Output compare  interrupt*/
                       TIMSK = (TIMSK & 0xFD) | Config_Ptr->timer_OTCInterrupt;
    159e:	a9 e5       	ldi	r26, 0x59	; 89
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e9 e5       	ldi	r30, 0x59	; 89
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	98 2f       	mov	r25, r24
    15aa:	9d 7f       	andi	r25, 0xFD	; 253
    15ac:	e9 81       	ldd	r30, Y+1	; 0x01
    15ae:	fa 81       	ldd	r31, Y+2	; 0x02
    15b0:	84 81       	ldd	r24, Z+4	; 0x04
    15b2:	89 2b       	or	r24, r25
    15b4:	8c 93       	st	X, r24
    15b6:	b2 c0       	rjmp	.+356    	; 0x171c <Timer_init+0x30c>
        	           break;


        case Timer_2:
        	          /*Check Timer Mode*/
	                  switch(Config_Ptr->timer_mode)
    15b8:	e9 81       	ldd	r30, Y+1	; 0x01
    15ba:	fa 81       	ldd	r31, Y+2	; 0x02
    15bc:	81 81       	ldd	r24, Z+1	; 0x01
    15be:	28 2f       	mov	r18, r24
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	3c 83       	std	Y+4, r19	; 0x04
    15c4:	2b 83       	std	Y+3, r18	; 0x03
    15c6:	8b 81       	ldd	r24, Y+3	; 0x03
    15c8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ca:	81 30       	cpi	r24, 0x01	; 1
    15cc:	91 05       	cpc	r25, r1
    15ce:	99 f1       	breq	.+102    	; 0x1636 <Timer_init+0x226>
    15d0:	2b 81       	ldd	r18, Y+3	; 0x03
    15d2:	3c 81       	ldd	r19, Y+4	; 0x04
    15d4:	22 30       	cpi	r18, 0x02	; 2
    15d6:	31 05       	cpc	r19, r1
    15d8:	2c f4       	brge	.+10     	; 0x15e4 <Timer_init+0x1d4>
    15da:	8b 81       	ldd	r24, Y+3	; 0x03
    15dc:	9c 81       	ldd	r25, Y+4	; 0x04
    15de:	00 97       	sbiw	r24, 0x00	; 0
    15e0:	69 f0       	breq	.+26     	; 0x15fc <Timer_init+0x1ec>
    15e2:	63 c0       	rjmp	.+198    	; 0x16aa <Timer_init+0x29a>
    15e4:	2b 81       	ldd	r18, Y+3	; 0x03
    15e6:	3c 81       	ldd	r19, Y+4	; 0x04
    15e8:	22 30       	cpi	r18, 0x02	; 2
    15ea:	31 05       	cpc	r19, r1
    15ec:	99 f1       	breq	.+102    	; 0x1654 <Timer_init+0x244>
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	9c 81       	ldd	r25, Y+4	; 0x04
    15f2:	83 30       	cpi	r24, 0x03	; 3
    15f4:	91 05       	cpc	r25, r1
    15f6:	09 f4       	brne	.+2      	; 0x15fa <Timer_init+0x1ea>
    15f8:	4a c0       	rjmp	.+148    	; 0x168e <Timer_init+0x27e>
    15fa:	57 c0       	rjmp	.+174    	; 0x16aa <Timer_init+0x29a>
	                  {
	                         case Normal:           CLEAR_BIT(TCCR2,WGM20);
    15fc:	a5 e4       	ldi	r26, 0x45	; 69
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	e5 e4       	ldi	r30, 0x45	; 69
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	8f 7b       	andi	r24, 0xBF	; 191
    1608:	8c 93       	st	X, r24
	                                                CLEAR_BIT(TCCR2,WGM21);
    160a:	a5 e4       	ldi	r26, 0x45	; 69
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	e5 e4       	ldi	r30, 0x45	; 69
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	87 7f       	andi	r24, 0xF7	; 247
    1616:	8c 93       	st	X, r24
	                                                /*Non-PWM Mode*/
	                                                SET_BIT(TCCR2,FOC2);
    1618:	a5 e4       	ldi	r26, 0x45	; 69
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	e5 e4       	ldi	r30, 0x45	; 69
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	80 68       	ori	r24, 0x80	; 128
    1624:	8c 93       	st	X, r24
	                                                /*Interrupt Enable*/
	                                                CLEAR_BIT(TIMSK,OCIE2);
    1626:	a9 e5       	ldi	r26, 0x59	; 89
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	e9 e5       	ldi	r30, 0x59	; 89
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	8f 77       	andi	r24, 0x7F	; 127
    1632:	8c 93       	st	X, r24
    1634:	3a c0       	rjmp	.+116    	; 0x16aa <Timer_init+0x29a>
	                	                            break;
	                         case PWM_PhaseCorrect: SET_BIT(TCCR2,WGM20);
    1636:	a5 e4       	ldi	r26, 0x45	; 69
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	e5 e4       	ldi	r30, 0x45	; 69
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	80 64       	ori	r24, 0x40	; 64
    1642:	8c 93       	st	X, r24
                                                    CLEAR_BIT(TCCR2,WGM21);
    1644:	a5 e4       	ldi	r26, 0x45	; 69
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	e5 e4       	ldi	r30, 0x45	; 69
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	87 7f       	andi	r24, 0xF7	; 247
    1650:	8c 93       	st	X, r24
    1652:	2b c0       	rjmp	.+86     	; 0x16aa <Timer_init+0x29a>
	                	                            break;
	                         case CTC:              CLEAR_BIT(TCCR2,WGM20);
    1654:	a5 e4       	ldi	r26, 0x45	; 69
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	e5 e4       	ldi	r30, 0x45	; 69
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	8f 7b       	andi	r24, 0xBF	; 191
    1660:	8c 93       	st	X, r24
                                                    SET_BIT(TCCR2,WGM21);
    1662:	a5 e4       	ldi	r26, 0x45	; 69
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	e5 e4       	ldi	r30, 0x45	; 69
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	88 60       	ori	r24, 0x08	; 8
    166e:	8c 93       	st	X, r24
                                                    /*Non-PWM Mode*/
                                                    SET_BIT(TCCR2,FOC2);
    1670:	a5 e4       	ldi	r26, 0x45	; 69
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	e5 e4       	ldi	r30, 0x45	; 69
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	80 68       	ori	r24, 0x80	; 128
    167c:	8c 93       	st	X, r24
                                                    /*Interrupt Enable*/
                                                    SET_BIT(TIMSK,OCIE2);
    167e:	a9 e5       	ldi	r26, 0x59	; 89
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e9 e5       	ldi	r30, 0x59	; 89
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	80 68       	ori	r24, 0x80	; 128
    168a:	8c 93       	st	X, r24
    168c:	0e c0       	rjmp	.+28     	; 0x16aa <Timer_init+0x29a>
	                	                            break;
	                         case PWM_Fast:         SET_BIT(TCCR2,WGM20);
    168e:	a5 e4       	ldi	r26, 0x45	; 69
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	e5 e4       	ldi	r30, 0x45	; 69
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	80 64       	ori	r24, 0x40	; 64
    169a:	8c 93       	st	X, r24
                                                    SET_BIT(TCCR2,WGM21);
    169c:	a5 e4       	ldi	r26, 0x45	; 69
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	e5 e4       	ldi	r30, 0x45	; 69
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	88 60       	ori	r24, 0x08	; 8
    16a8:	8c 93       	st	X, r24
	                	                            break;
	                 }
       	              /*Check OC Pin Mode*/
       	              TCCR2 = (TCCR2 & 0xCF ) | (Config_Ptr->timer_OCPin_mode << 4 ) ;
    16aa:	a5 e4       	ldi	r26, 0x45	; 69
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e5 e4       	ldi	r30, 0x45	; 69
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	28 2f       	mov	r18, r24
    16b6:	2f 7c       	andi	r18, 0xCF	; 207
    16b8:	e9 81       	ldd	r30, Y+1	; 0x01
    16ba:	fa 81       	ldd	r31, Y+2	; 0x02
    16bc:	85 81       	ldd	r24, Z+5	; 0x05
    16be:	88 2f       	mov	r24, r24
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	82 95       	swap	r24
    16c4:	92 95       	swap	r25
    16c6:	90 7f       	andi	r25, 0xF0	; 240
    16c8:	98 27       	eor	r25, r24
    16ca:	80 7f       	andi	r24, 0xF0	; 240
    16cc:	98 27       	eor	r25, r24
    16ce:	82 2b       	or	r24, r18
    16d0:	8c 93       	st	X, r24

                      /*Check Prescaler*/
                      TCCR2 = (TCCR2 & 0xF8) | Config_Ptr->timer_prescaler ;
    16d2:	a5 e4       	ldi	r26, 0x45	; 69
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e5 e4       	ldi	r30, 0x45	; 69
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	98 2f       	mov	r25, r24
    16de:	98 7f       	andi	r25, 0xF8	; 248
    16e0:	e9 81       	ldd	r30, Y+1	; 0x01
    16e2:	fa 81       	ldd	r31, Y+2	; 0x02
    16e4:	82 81       	ldd	r24, Z+2	; 0x02
    16e6:	89 2b       	or	r24, r25
    16e8:	8c 93       	st	X, r24

                      /*TCNT inital Value*/
                      TCNT2 = Config_Ptr->TCNT_value;
    16ea:	a4 e4       	ldi	r26, 0x44	; 68
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	e9 81       	ldd	r30, Y+1	; 0x01
    16f0:	fa 81       	ldd	r31, Y+2	; 0x02
    16f2:	86 81       	ldd	r24, Z+6	; 0x06
    16f4:	97 81       	ldd	r25, Z+7	; 0x07
    16f6:	8c 93       	st	X, r24

                      /*OCR Value*/
                      OCR2 = Config_Ptr->OCR_Value;
    16f8:	a3 e4       	ldi	r26, 0x43	; 67
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	e9 81       	ldd	r30, Y+1	; 0x01
    16fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1700:	80 85       	ldd	r24, Z+8	; 0x08
    1702:	8c 93       	st	X, r24

                      /*Over Flow interrupt*/
                      TIMSK = (TIMSK & 0xBF) | Config_Ptr->timer_overflowinterrupt;
    1704:	a9 e5       	ldi	r26, 0x59	; 89
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	e9 e5       	ldi	r30, 0x59	; 89
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	98 2f       	mov	r25, r24
    1710:	9f 7b       	andi	r25, 0xBF	; 191
    1712:	e9 81       	ldd	r30, Y+1	; 0x01
    1714:	fa 81       	ldd	r31, Y+2	; 0x02
    1716:	83 81       	ldd	r24, Z+3	; 0x03
    1718:	89 2b       	or	r24, r25
    171a:	8c 93       	st	X, r24

    	             break;
    }
}
    171c:	28 96       	adiw	r28, 0x08	; 8
    171e:	0f b6       	in	r0, 0x3f	; 63
    1720:	f8 94       	cli
    1722:	de bf       	out	0x3e, r29	; 62
    1724:	0f be       	out	0x3f, r0	; 63
    1726:	cd bf       	out	0x3d, r28	; 61
    1728:	cf 91       	pop	r28
    172a:	df 91       	pop	r29
    172c:	08 95       	ret

0000172e <Timer_Deinit>:
* Parameters (out):   None
* Return value:       None
* Description:        Disable the Selected Timer module.
********************************************************************************/
void Timer_Deinit(uint8 Timer_Number)
{
    172e:	df 93       	push	r29
    1730:	cf 93       	push	r28
    1732:	00 d0       	rcall	.+0      	; 0x1734 <Timer_Deinit+0x6>
    1734:	0f 92       	push	r0
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
    173a:	89 83       	std	Y+1, r24	; 0x01
	/*Check Timer Number, Then we disable the clock of prescaler*/
	switch (Timer_Number)
    173c:	89 81       	ldd	r24, Y+1	; 0x01
    173e:	28 2f       	mov	r18, r24
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	3b 83       	std	Y+3, r19	; 0x03
    1744:	2a 83       	std	Y+2, r18	; 0x02
    1746:	8a 81       	ldd	r24, Y+2	; 0x02
    1748:	9b 81       	ldd	r25, Y+3	; 0x03
    174a:	81 30       	cpi	r24, 0x01	; 1
    174c:	91 05       	cpc	r25, r1
    174e:	01 f1       	breq	.+64     	; 0x1790 <Timer_Deinit+0x62>
    1750:	2a 81       	ldd	r18, Y+2	; 0x02
    1752:	3b 81       	ldd	r19, Y+3	; 0x03
    1754:	22 30       	cpi	r18, 0x02	; 2
    1756:	31 05       	cpc	r19, r1
    1758:	89 f1       	breq	.+98     	; 0x17bc <Timer_Deinit+0x8e>
    175a:	8a 81       	ldd	r24, Y+2	; 0x02
    175c:	9b 81       	ldd	r25, Y+3	; 0x03
    175e:	00 97       	sbiw	r24, 0x00	; 0
    1760:	09 f0       	breq	.+2      	; 0x1764 <Timer_Deinit+0x36>
    1762:	41 c0       	rjmp	.+130    	; 0x17e6 <Timer_Deinit+0xb8>
	{
	   case Timer_0:   CLEAR_BIT(TCCR0,CS00);
    1764:	a3 e5       	ldi	r26, 0x53	; 83
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	e3 e5       	ldi	r30, 0x53	; 83
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	8e 7f       	andi	r24, 0xFE	; 254
    1770:	8c 93       	st	X, r24
	                   CLEAR_BIT(TCCR0,CS01);
    1772:	a3 e5       	ldi	r26, 0x53	; 83
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	e3 e5       	ldi	r30, 0x53	; 83
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	8d 7f       	andi	r24, 0xFD	; 253
    177e:	8c 93       	st	X, r24
	                   CLEAR_BIT(TCCR0,CS02);
    1780:	a3 e5       	ldi	r26, 0x53	; 83
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	e3 e5       	ldi	r30, 0x53	; 83
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	8b 7f       	andi	r24, 0xFB	; 251
    178c:	8c 93       	st	X, r24
    178e:	2b c0       	rjmp	.+86     	; 0x17e6 <Timer_Deinit+0xb8>
		               break;
	   case Timer_1:   CLEAR_BIT(TCCR1B,CS10);
    1790:	ae e4       	ldi	r26, 0x4E	; 78
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	ee e4       	ldi	r30, 0x4E	; 78
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	8e 7f       	andi	r24, 0xFE	; 254
    179c:	8c 93       	st	X, r24
                       CLEAR_BIT(TCCR1B,CS11);
    179e:	ae e4       	ldi	r26, 0x4E	; 78
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	ee e4       	ldi	r30, 0x4E	; 78
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	8d 7f       	andi	r24, 0xFD	; 253
    17aa:	8c 93       	st	X, r24
                       CLEAR_BIT(TCCR1B,CS12);
    17ac:	ae e4       	ldi	r26, 0x4E	; 78
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	ee e4       	ldi	r30, 0x4E	; 78
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	8b 7f       	andi	r24, 0xFB	; 251
    17b8:	8c 93       	st	X, r24
    17ba:	15 c0       	rjmp	.+42     	; 0x17e6 <Timer_Deinit+0xb8>
		               break;
	   case Timer_2:   CLEAR_BIT(TCCR2,CS20);
    17bc:	a5 e4       	ldi	r26, 0x45	; 69
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	e5 e4       	ldi	r30, 0x45	; 69
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	8e 7f       	andi	r24, 0xFE	; 254
    17c8:	8c 93       	st	X, r24
                       CLEAR_BIT(TCCR2,CS21);
    17ca:	a5 e4       	ldi	r26, 0x45	; 69
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	e5 e4       	ldi	r30, 0x45	; 69
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	8d 7f       	andi	r24, 0xFD	; 253
    17d6:	8c 93       	st	X, r24
                       CLEAR_BIT(TCCR2,CS22);
    17d8:	a5 e4       	ldi	r26, 0x45	; 69
    17da:	b0 e0       	ldi	r27, 0x00	; 0
    17dc:	e5 e4       	ldi	r30, 0x45	; 69
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	8b 7f       	andi	r24, 0xFB	; 251
    17e4:	8c 93       	st	X, r24
		               break;
	}
}
    17e6:	0f 90       	pop	r0
    17e8:	0f 90       	pop	r0
    17ea:	0f 90       	pop	r0
    17ec:	cf 91       	pop	r28
    17ee:	df 91       	pop	r29
    17f0:	08 95       	ret

000017f2 <Timer0_setCallBack>:
* Parameters (out):   None
* Return value:       None
* Description:        Call Back TIMER0 Function.
********************************************************************************/
void Timer0_setCallBack(void(*a_ptr)(void))
{
    17f2:	df 93       	push	r29
    17f4:	cf 93       	push	r28
    17f6:	00 d0       	rcall	.+0      	; 0x17f8 <Timer0_setCallBack+0x6>
    17f8:	cd b7       	in	r28, 0x3d	; 61
    17fa:	de b7       	in	r29, 0x3e	; 62
    17fc:	9a 83       	std	Y+2, r25	; 0x02
    17fe:	89 83       	std	Y+1, r24	; 0x01
   g_Timer0_callBackPtr = a_ptr;
    1800:	89 81       	ldd	r24, Y+1	; 0x01
    1802:	9a 81       	ldd	r25, Y+2	; 0x02
    1804:	90 93 f4 00 	sts	0x00F4, r25
    1808:	80 93 f3 00 	sts	0x00F3, r24
}
    180c:	0f 90       	pop	r0
    180e:	0f 90       	pop	r0
    1810:	cf 91       	pop	r28
    1812:	df 91       	pop	r29
    1814:	08 95       	ret

00001816 <Timer1_setCallBack>:
* Parameters (out):   None
* Return value:       None
* Description:        Call Back TIMER1 Function.
********************************************************************************/
void Timer1_setCallBack(void(*a_ptr)(void))
{
    1816:	df 93       	push	r29
    1818:	cf 93       	push	r28
    181a:	00 d0       	rcall	.+0      	; 0x181c <Timer1_setCallBack+0x6>
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
    1820:	9a 83       	std	Y+2, r25	; 0x02
    1822:	89 83       	std	Y+1, r24	; 0x01
	g_Timer1_callBackPtr = a_ptr;
    1824:	89 81       	ldd	r24, Y+1	; 0x01
    1826:	9a 81       	ldd	r25, Y+2	; 0x02
    1828:	90 93 f6 00 	sts	0x00F6, r25
    182c:	80 93 f5 00 	sts	0x00F5, r24
}
    1830:	0f 90       	pop	r0
    1832:	0f 90       	pop	r0
    1834:	cf 91       	pop	r28
    1836:	df 91       	pop	r29
    1838:	08 95       	ret

0000183a <Timer2_setCallBack>:
* Parameters (out):   None
* Return value:       None
* Description:        Call Back TIMER2 Function.
********************************************************************************/
void Timer2_setCallBack(void(*a_ptr)(void))
{
    183a:	df 93       	push	r29
    183c:	cf 93       	push	r28
    183e:	00 d0       	rcall	.+0      	; 0x1840 <Timer2_setCallBack+0x6>
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
    1844:	9a 83       	std	Y+2, r25	; 0x02
    1846:	89 83       	std	Y+1, r24	; 0x01
	g_Timer2_callBackPtr = a_ptr;
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	9a 81       	ldd	r25, Y+2	; 0x02
    184c:	90 93 f8 00 	sts	0x00F8, r25
    1850:	80 93 f7 00 	sts	0x00F7, r24
}
    1854:	0f 90       	pop	r0
    1856:	0f 90       	pop	r0
    1858:	cf 91       	pop	r28
    185a:	df 91       	pop	r29
    185c:	08 95       	ret

0000185e <UART_Init>:
* Parameters (out):   None
* Return value:       None
* Description:        Initialize the UART module.
********************************************************************************/
void UART_Init(const UART_ConfigType * Config_Ptr)
{
    185e:	df 93       	push	r29
    1860:	cf 93       	push	r28
    1862:	cd b7       	in	r28, 0x3d	; 61
    1864:	de b7       	in	r29, 0x3e	; 62
    1866:	60 97       	sbiw	r28, 0x10	; 16
    1868:	0f b6       	in	r0, 0x3f	; 63
    186a:	f8 94       	cli
    186c:	de bf       	out	0x3e, r29	; 62
    186e:	0f be       	out	0x3f, r0	; 63
    1870:	cd bf       	out	0x3d, r28	; 61
    1872:	9a 83       	std	Y+2, r25	; 0x02
    1874:	89 83       	std	Y+1, r24	; 0x01
	/*Config Operation Mode*/
    switch( Config_Ptr ->operation_mode)
    1876:	e9 81       	ldd	r30, Y+1	; 0x01
    1878:	fa 81       	ldd	r31, Y+2	; 0x02
    187a:	80 81       	ld	r24, Z
    187c:	28 2f       	mov	r18, r24
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	38 8b       	std	Y+16, r19	; 0x10
    1882:	2f 87       	std	Y+15, r18	; 0x0f
    1884:	4f 85       	ldd	r20, Y+15	; 0x0f
    1886:	58 89       	ldd	r21, Y+16	; 0x10
    1888:	41 30       	cpi	r20, 0x01	; 1
    188a:	51 05       	cpc	r21, r1
    188c:	91 f0       	breq	.+36     	; 0x18b2 <UART_Init+0x54>
    188e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1890:	98 89       	ldd	r25, Y+16	; 0x10
    1892:	82 30       	cpi	r24, 0x02	; 2
    1894:	91 05       	cpc	r25, r1
    1896:	a9 f0       	breq	.+42     	; 0x18c2 <UART_Init+0x64>
    1898:	2f 85       	ldd	r18, Y+15	; 0x0f
    189a:	38 89       	ldd	r19, Y+16	; 0x10
    189c:	21 15       	cp	r18, r1
    189e:	31 05       	cpc	r19, r1
    18a0:	f1 f4       	brne	.+60     	; 0x18de <UART_Init+0x80>
    {
      case Receiver:                SET_BIT(UCSRB,RXEN);
    18a2:	aa e2       	ldi	r26, 0x2A	; 42
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	ea e2       	ldi	r30, 0x2A	; 42
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	80 61       	ori	r24, 0x10	; 16
    18ae:	8c 93       	st	X, r24
    18b0:	16 c0       	rjmp	.+44     	; 0x18de <UART_Init+0x80>
    	                            break;
      case Transmitter:             SET_BIT(UCSRB,TXEN);
    18b2:	aa e2       	ldi	r26, 0x2A	; 42
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	ea e2       	ldi	r30, 0x2A	; 42
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	88 60       	ori	r24, 0x08	; 8
    18be:	8c 93       	st	X, r24
    18c0:	0e c0       	rjmp	.+28     	; 0x18de <UART_Init+0x80>
    	                            break;
      case Transmitter_Receiver:    SET_BIT(UCSRB,RXEN);
    18c2:	aa e2       	ldi	r26, 0x2A	; 42
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	ea e2       	ldi	r30, 0x2A	; 42
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	80 61       	ori	r24, 0x10	; 16
    18ce:	8c 93       	st	X, r24
                                    SET_BIT(UCSRB,TXEN);
    18d0:	aa e2       	ldi	r26, 0x2A	; 42
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	ea e2       	ldi	r30, 0x2A	; 42
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	88 60       	ori	r24, 0x08	; 8
    18dc:	8c 93       	st	X, r24
    	                            break;
    }
	/*Config Transmission Speed*/
	switch( Config_Ptr ->speed)
    18de:	e9 81       	ldd	r30, Y+1	; 0x01
    18e0:	fa 81       	ldd	r31, Y+2	; 0x02
    18e2:	81 81       	ldd	r24, Z+1	; 0x01
    18e4:	48 2f       	mov	r20, r24
    18e6:	50 e0       	ldi	r21, 0x00	; 0
    18e8:	5e 87       	std	Y+14, r21	; 0x0e
    18ea:	4d 87       	std	Y+13, r20	; 0x0d
    18ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    18ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    18f0:	00 97       	sbiw	r24, 0x00	; 0
    18f2:	31 f0       	breq	.+12     	; 0x1900 <UART_Init+0xa2>
    18f4:	2d 85       	ldd	r18, Y+13	; 0x0d
    18f6:	3e 85       	ldd	r19, Y+14	; 0x0e
    18f8:	21 30       	cpi	r18, 0x01	; 1
    18fa:	31 05       	cpc	r19, r1
    18fc:	61 f0       	breq	.+24     	; 0x1916 <UART_Init+0xb8>
    18fe:	15 c0       	rjmp	.+42     	; 0x192a <UART_Init+0xcc>
	{
	  case Normal_Speed:   CLEAR_BIT(UCSRA,U2X);
    1900:	ab e2       	ldi	r26, 0x2B	; 43
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	eb e2       	ldi	r30, 0x2B	; 43
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	8d 7f       	andi	r24, 0xFD	; 253
    190c:	8c 93       	st	X, r24
	                       g_speed_mode_division_factor = 16;
    190e:	80 e1       	ldi	r24, 0x10	; 16
    1910:	80 93 fb 00 	sts	0x00FB, r24
    1914:	0a c0       	rjmp	.+20     	; 0x192a <UART_Init+0xcc>
	 	                   break;
	  case Double_Speed:   SET_BIT(UCSRA,U2X);
    1916:	ab e2       	ldi	r26, 0x2B	; 43
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	eb e2       	ldi	r30, 0x2B	; 43
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	82 60       	ori	r24, 0x02	; 2
    1922:	8c 93       	st	X, r24
                           g_speed_mode_division_factor = 8;
    1924:	88 e0       	ldi	r24, 0x08	; 8
    1926:	80 93 fb 00 	sts	0x00FB, r24
	  		               break;
	}

	/*Config Synchronization of UART*/
	switch ( Config_Ptr->synchronization)
    192a:	e9 81       	ldd	r30, Y+1	; 0x01
    192c:	fa 81       	ldd	r31, Y+2	; 0x02
    192e:	82 81       	ldd	r24, Z+2	; 0x02
    1930:	48 2f       	mov	r20, r24
    1932:	50 e0       	ldi	r21, 0x00	; 0
    1934:	5c 87       	std	Y+12, r21	; 0x0c
    1936:	4b 87       	std	Y+11, r20	; 0x0b
    1938:	8b 85       	ldd	r24, Y+11	; 0x0b
    193a:	9c 85       	ldd	r25, Y+12	; 0x0c
    193c:	00 97       	sbiw	r24, 0x00	; 0
    193e:	31 f0       	breq	.+12     	; 0x194c <UART_Init+0xee>
    1940:	2b 85       	ldd	r18, Y+11	; 0x0b
    1942:	3c 85       	ldd	r19, Y+12	; 0x0c
    1944:	21 30       	cpi	r18, 0x01	; 1
    1946:	31 05       	cpc	r19, r1
    1948:	81 f0       	breq	.+32     	; 0x196a <UART_Init+0x10c>
    194a:	1d c0       	rjmp	.+58     	; 0x1986 <UART_Init+0x128>
	{
	 case Asynchronous: SET_BIT(UCSRC,URSEL);
    194c:	a0 e4       	ldi	r26, 0x40	; 64
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	e0 e4       	ldi	r30, 0x40	; 64
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	80 68       	ori	r24, 0x80	; 128
    1958:	8c 93       	st	X, r24
	                    CLEAR_BIT(UCSRC,UMSEL);
    195a:	a0 e4       	ldi	r26, 0x40	; 64
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	e0 e4       	ldi	r30, 0x40	; 64
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	8f 7b       	andi	r24, 0xBF	; 191
    1966:	8c 93       	st	X, r24
    1968:	0e c0       	rjmp	.+28     	; 0x1986 <UART_Init+0x128>
		                break;
	 case Synchronous:  SET_BIT(UCSRC,URSEL);
    196a:	a0 e4       	ldi	r26, 0x40	; 64
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	e0 e4       	ldi	r30, 0x40	; 64
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	80 68       	ori	r24, 0x80	; 128
    1976:	8c 93       	st	X, r24
	                    SET_BIT(UCSRC,UMSEL);
    1978:	a0 e4       	ldi	r26, 0x40	; 64
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	e0 e4       	ldi	r30, 0x40	; 64
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	80 64       	ori	r24, 0x40	; 64
    1984:	8c 93       	st	X, r24
	 		            break;
	}

	/*Config Parity Bit of UART*/
	switch ( Config_Ptr ->parity)
    1986:	e9 81       	ldd	r30, Y+1	; 0x01
    1988:	fa 81       	ldd	r31, Y+2	; 0x02
    198a:	83 81       	ldd	r24, Z+3	; 0x03
    198c:	48 2f       	mov	r20, r24
    198e:	50 e0       	ldi	r21, 0x00	; 0
    1990:	5a 87       	std	Y+10, r21	; 0x0a
    1992:	49 87       	std	Y+9, r20	; 0x09
    1994:	89 85       	ldd	r24, Y+9	; 0x09
    1996:	9a 85       	ldd	r25, Y+10	; 0x0a
    1998:	81 30       	cpi	r24, 0x01	; 1
    199a:	91 05       	cpc	r25, r1
    199c:	09 f1       	breq	.+66     	; 0x19e0 <UART_Init+0x182>
    199e:	29 85       	ldd	r18, Y+9	; 0x09
    19a0:	3a 85       	ldd	r19, Y+10	; 0x0a
    19a2:	22 30       	cpi	r18, 0x02	; 2
    19a4:	31 05       	cpc	r19, r1
    19a6:	91 f1       	breq	.+100    	; 0x1a0c <UART_Init+0x1ae>
    19a8:	49 85       	ldd	r20, Y+9	; 0x09
    19aa:	5a 85       	ldd	r21, Y+10	; 0x0a
    19ac:	41 15       	cp	r20, r1
    19ae:	51 05       	cpc	r21, r1
    19b0:	09 f0       	breq	.+2      	; 0x19b4 <UART_Init+0x156>
    19b2:	41 c0       	rjmp	.+130    	; 0x1a36 <UART_Init+0x1d8>
	{
	  case Parity_Disabled: SET_BIT(UCSRC,URSEL);
    19b4:	a0 e4       	ldi	r26, 0x40	; 64
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	e0 e4       	ldi	r30, 0x40	; 64
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	80 68       	ori	r24, 0x80	; 128
    19c0:	8c 93       	st	X, r24
		                    CLEAR_BIT(UCSRC,UPM0);
    19c2:	a0 e4       	ldi	r26, 0x40	; 64
    19c4:	b0 e0       	ldi	r27, 0x00	; 0
    19c6:	e0 e4       	ldi	r30, 0x40	; 64
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	80 81       	ld	r24, Z
    19cc:	8f 7e       	andi	r24, 0xEF	; 239
    19ce:	8c 93       	st	X, r24
	                        CLEAR_BIT(UCSRC,UPM1);
    19d0:	a0 e4       	ldi	r26, 0x40	; 64
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	e0 e4       	ldi	r30, 0x40	; 64
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	8f 7d       	andi	r24, 0xDF	; 223
    19dc:	8c 93       	st	X, r24
    19de:	2b c0       	rjmp	.+86     	; 0x1a36 <UART_Init+0x1d8>
	                        break;
	  case Parity_Odd:      SET_BIT(UCSRC,URSEL);
    19e0:	a0 e4       	ldi	r26, 0x40	; 64
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	e0 e4       	ldi	r30, 0x40	; 64
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	80 68       	ori	r24, 0x80	; 128
    19ec:	8c 93       	st	X, r24
		                    SET_BIT(UCSRC,UPM0);
    19ee:	a0 e4       	ldi	r26, 0x40	; 64
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	e0 e4       	ldi	r30, 0x40	; 64
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	80 61       	ori	r24, 0x10	; 16
    19fa:	8c 93       	st	X, r24
                            SET_BIT(UCSRC,UPM1);
    19fc:	a0 e4       	ldi	r26, 0x40	; 64
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	e0 e4       	ldi	r30, 0x40	; 64
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	80 62       	ori	r24, 0x20	; 32
    1a08:	8c 93       	st	X, r24
    1a0a:	15 c0       	rjmp	.+42     	; 0x1a36 <UART_Init+0x1d8>
                            break;
	  case Parity_Even:     SET_BIT(UCSRC,URSEL);
    1a0c:	a0 e4       	ldi	r26, 0x40	; 64
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	e0 e4       	ldi	r30, 0x40	; 64
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 81       	ld	r24, Z
    1a16:	80 68       	ori	r24, 0x80	; 128
    1a18:	8c 93       	st	X, r24
		                    CLEAR_BIT(UCSRC,UPM0);
    1a1a:	a0 e4       	ldi	r26, 0x40	; 64
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	e0 e4       	ldi	r30, 0x40	; 64
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	8f 7e       	andi	r24, 0xEF	; 239
    1a26:	8c 93       	st	X, r24
                            SET_BIT(UCSRC,UPM1);
    1a28:	a0 e4       	ldi	r26, 0x40	; 64
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	e0 e4       	ldi	r30, 0x40	; 64
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	80 62       	ori	r24, 0x20	; 32
    1a34:	8c 93       	st	X, r24
                            break;
	}

	/*Config Number of Stop Bits of UART*/
    switch( Config_Ptr ->stop_bit)
    1a36:	e9 81       	ldd	r30, Y+1	; 0x01
    1a38:	fa 81       	ldd	r31, Y+2	; 0x02
    1a3a:	84 81       	ldd	r24, Z+4	; 0x04
    1a3c:	28 2f       	mov	r18, r24
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	38 87       	std	Y+8, r19	; 0x08
    1a42:	2f 83       	std	Y+7, r18	; 0x07
    1a44:	4f 81       	ldd	r20, Y+7	; 0x07
    1a46:	58 85       	ldd	r21, Y+8	; 0x08
    1a48:	41 15       	cp	r20, r1
    1a4a:	51 05       	cpc	r21, r1
    1a4c:	31 f0       	breq	.+12     	; 0x1a5a <UART_Init+0x1fc>
    1a4e:	8f 81       	ldd	r24, Y+7	; 0x07
    1a50:	98 85       	ldd	r25, Y+8	; 0x08
    1a52:	81 30       	cpi	r24, 0x01	; 1
    1a54:	91 05       	cpc	r25, r1
    1a56:	49 f0       	breq	.+18     	; 0x1a6a <UART_Init+0x20c>
    1a58:	0f c0       	rjmp	.+30     	; 0x1a78 <UART_Init+0x21a>
    {
    case StopBit_1:  CLEAR_BIT(UCSRC,USBS);
    1a5a:	a0 e4       	ldi	r26, 0x40	; 64
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	e0 e4       	ldi	r30, 0x40	; 64
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	87 7f       	andi	r24, 0xF7	; 247
    1a66:	8c 93       	st	X, r24
    1a68:	07 c0       	rjmp	.+14     	; 0x1a78 <UART_Init+0x21a>
    	             break;
    case StopBit_2:  SET_BIT(UCSRC,USBS);
    1a6a:	a0 e4       	ldi	r26, 0x40	; 64
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	e0 e4       	ldi	r30, 0x40	; 64
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	88 60       	ori	r24, 0x08	; 8
    1a76:	8c 93       	st	X, r24
    	             break;
    }

    /*Config Number of Data Frame Bits*/
    switch ( Config_Ptr ->dataframe_bits )
    1a78:	e9 81       	ldd	r30, Y+1	; 0x01
    1a7a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a7c:	85 81       	ldd	r24, Z+5	; 0x05
    1a7e:	28 2f       	mov	r18, r24
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	3e 83       	std	Y+6, r19	; 0x06
    1a84:	2d 83       	std	Y+5, r18	; 0x05
    1a86:	4d 81       	ldd	r20, Y+5	; 0x05
    1a88:	5e 81       	ldd	r21, Y+6	; 0x06
    1a8a:	42 30       	cpi	r20, 0x02	; 2
    1a8c:	51 05       	cpc	r21, r1
    1a8e:	09 f4       	brne	.+2      	; 0x1a92 <UART_Init+0x234>
    1a90:	49 c0       	rjmp	.+146    	; 0x1b24 <UART_Init+0x2c6>
    1a92:	8d 81       	ldd	r24, Y+5	; 0x05
    1a94:	9e 81       	ldd	r25, Y+6	; 0x06
    1a96:	83 30       	cpi	r24, 0x03	; 3
    1a98:	91 05       	cpc	r25, r1
    1a9a:	5c f4       	brge	.+22     	; 0x1ab2 <UART_Init+0x254>
    1a9c:	2d 81       	ldd	r18, Y+5	; 0x05
    1a9e:	3e 81       	ldd	r19, Y+6	; 0x06
    1aa0:	21 15       	cp	r18, r1
    1aa2:	31 05       	cpc	r19, r1
    1aa4:	99 f0       	breq	.+38     	; 0x1acc <UART_Init+0x26e>
    1aa6:	4d 81       	ldd	r20, Y+5	; 0x05
    1aa8:	5e 81       	ldd	r21, Y+6	; 0x06
    1aaa:	41 30       	cpi	r20, 0x01	; 1
    1aac:	51 05       	cpc	r21, r1
    1aae:	21 f1       	breq	.+72     	; 0x1af8 <UART_Init+0x29a>
    1ab0:	7a c0       	rjmp	.+244    	; 0x1ba6 <UART_Init+0x348>
    1ab2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab6:	83 30       	cpi	r24, 0x03	; 3
    1ab8:	91 05       	cpc	r25, r1
    1aba:	09 f4       	brne	.+2      	; 0x1abe <UART_Init+0x260>
    1abc:	49 c0       	rjmp	.+146    	; 0x1b50 <UART_Init+0x2f2>
    1abe:	2d 81       	ldd	r18, Y+5	; 0x05
    1ac0:	3e 81       	ldd	r19, Y+6	; 0x06
    1ac2:	27 30       	cpi	r18, 0x07	; 7
    1ac4:	31 05       	cpc	r19, r1
    1ac6:	09 f4       	brne	.+2      	; 0x1aca <UART_Init+0x26c>
    1ac8:	59 c0       	rjmp	.+178    	; 0x1b7c <UART_Init+0x31e>
    1aca:	6d c0       	rjmp	.+218    	; 0x1ba6 <UART_Init+0x348>
    {
    case DataFrame_5Bits:  CLEAR_BIT(UCSRC,UCSZ0);
    1acc:	a0 e4       	ldi	r26, 0x40	; 64
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	e0 e4       	ldi	r30, 0x40	; 64
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	8d 7f       	andi	r24, 0xFD	; 253
    1ad8:	8c 93       	st	X, r24
                           CLEAR_BIT(UCSRC,UCSZ1);
    1ada:	a0 e4       	ldi	r26, 0x40	; 64
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	e0 e4       	ldi	r30, 0x40	; 64
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	8b 7f       	andi	r24, 0xFB	; 251
    1ae6:	8c 93       	st	X, r24
                           CLEAR_BIT(UCSRB,UCSZ2);
    1ae8:	aa e2       	ldi	r26, 0x2A	; 42
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	ea e2       	ldi	r30, 0x2A	; 42
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	8b 7f       	andi	r24, 0xFB	; 251
    1af4:	8c 93       	st	X, r24
    1af6:	57 c0       	rjmp	.+174    	; 0x1ba6 <UART_Init+0x348>
    	                   break;
    case DataFrame_6Bits:  SET_BIT(UCSRC,UCSZ0);
    1af8:	a0 e4       	ldi	r26, 0x40	; 64
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	e0 e4       	ldi	r30, 0x40	; 64
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	82 60       	ori	r24, 0x02	; 2
    1b04:	8c 93       	st	X, r24
                           CLEAR_BIT(UCSRC,UCSZ1);
    1b06:	a0 e4       	ldi	r26, 0x40	; 64
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	e0 e4       	ldi	r30, 0x40	; 64
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	8b 7f       	andi	r24, 0xFB	; 251
    1b12:	8c 93       	st	X, r24
                           CLEAR_BIT(UCSRB,UCSZ2);
    1b14:	aa e2       	ldi	r26, 0x2A	; 42
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	ea e2       	ldi	r30, 0x2A	; 42
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	8b 7f       	andi	r24, 0xFB	; 251
    1b20:	8c 93       	st	X, r24
    1b22:	41 c0       	rjmp	.+130    	; 0x1ba6 <UART_Init+0x348>
    	                   break;
    case DataFrame_7Bits:  CLEAR_BIT(UCSRC,UCSZ0);
    1b24:	a0 e4       	ldi	r26, 0x40	; 64
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	e0 e4       	ldi	r30, 0x40	; 64
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	8d 7f       	andi	r24, 0xFD	; 253
    1b30:	8c 93       	st	X, r24
                           SET_BIT(UCSRC,UCSZ1);
    1b32:	a0 e4       	ldi	r26, 0x40	; 64
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	e0 e4       	ldi	r30, 0x40	; 64
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	84 60       	ori	r24, 0x04	; 4
    1b3e:	8c 93       	st	X, r24
                           CLEAR_BIT(UCSRB,UCSZ2);
    1b40:	aa e2       	ldi	r26, 0x2A	; 42
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	ea e2       	ldi	r30, 0x2A	; 42
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	8b 7f       	andi	r24, 0xFB	; 251
    1b4c:	8c 93       	st	X, r24
    1b4e:	2b c0       	rjmp	.+86     	; 0x1ba6 <UART_Init+0x348>
    	                   break;
    case DataFrame_8Bits:  SET_BIT(UCSRC,UCSZ0);
    1b50:	a0 e4       	ldi	r26, 0x40	; 64
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	e0 e4       	ldi	r30, 0x40	; 64
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	82 60       	ori	r24, 0x02	; 2
    1b5c:	8c 93       	st	X, r24
                           SET_BIT(UCSRC,UCSZ1);
    1b5e:	a0 e4       	ldi	r26, 0x40	; 64
    1b60:	b0 e0       	ldi	r27, 0x00	; 0
    1b62:	e0 e4       	ldi	r30, 0x40	; 64
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	80 81       	ld	r24, Z
    1b68:	84 60       	ori	r24, 0x04	; 4
    1b6a:	8c 93       	st	X, r24
                           CLEAR_BIT(UCSRB,UCSZ2);
    1b6c:	aa e2       	ldi	r26, 0x2A	; 42
    1b6e:	b0 e0       	ldi	r27, 0x00	; 0
    1b70:	ea e2       	ldi	r30, 0x2A	; 42
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	8b 7f       	andi	r24, 0xFB	; 251
    1b78:	8c 93       	st	X, r24
    1b7a:	15 c0       	rjmp	.+42     	; 0x1ba6 <UART_Init+0x348>
    	                   break;
    case DataFrame_9Bits:  SET_BIT(UCSRC,UCSZ0);
    1b7c:	a0 e4       	ldi	r26, 0x40	; 64
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	e0 e4       	ldi	r30, 0x40	; 64
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	82 60       	ori	r24, 0x02	; 2
    1b88:	8c 93       	st	X, r24
                           SET_BIT(UCSRC,UCSZ1);
    1b8a:	a0 e4       	ldi	r26, 0x40	; 64
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	e0 e4       	ldi	r30, 0x40	; 64
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	84 60       	ori	r24, 0x04	; 4
    1b96:	8c 93       	st	X, r24
                           SET_BIT(UCSRB,UCSZ2);
    1b98:	aa e2       	ldi	r26, 0x2A	; 42
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	ea e2       	ldi	r30, 0x2A	; 42
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	84 60       	ori	r24, 0x04	; 4
    1ba4:	8c 93       	st	X, r24
    	                   break;
    }


    switch( Config_Ptr ->baud_rate)
    1ba6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ba8:	fa 81       	ldd	r31, Y+2	; 0x02
    1baa:	86 81       	ldd	r24, Z+6	; 0x06
    1bac:	48 2f       	mov	r20, r24
    1bae:	50 e0       	ldi	r21, 0x00	; 0
    1bb0:	5c 83       	std	Y+4, r21	; 0x04
    1bb2:	4b 83       	std	Y+3, r20	; 0x03
    1bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb8:	81 30       	cpi	r24, 0x01	; 1
    1bba:	91 05       	cpc	r25, r1
    1bbc:	f9 f0       	breq	.+62     	; 0x1bfc <UART_Init+0x39e>
    1bbe:	2b 81       	ldd	r18, Y+3	; 0x03
    1bc0:	3c 81       	ldd	r19, Y+4	; 0x04
    1bc2:	22 30       	cpi	r18, 0x02	; 2
    1bc4:	31 05       	cpc	r19, r1
    1bc6:	34 f4       	brge	.+12     	; 0x1bd4 <UART_Init+0x376>
    1bc8:	4b 81       	ldd	r20, Y+3	; 0x03
    1bca:	5c 81       	ldd	r21, Y+4	; 0x04
    1bcc:	41 15       	cp	r20, r1
    1bce:	51 05       	cpc	r21, r1
    1bd0:	69 f0       	breq	.+26     	; 0x1bec <UART_Init+0x38e>
    1bd2:	79 c0       	rjmp	.+242    	; 0x1cc6 <UART_Init+0x468>
    1bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd8:	82 30       	cpi	r24, 0x02	; 2
    1bda:	91 05       	cpc	r25, r1
    1bdc:	91 f1       	breq	.+100    	; 0x1c42 <UART_Init+0x3e4>
    1bde:	2b 81       	ldd	r18, Y+3	; 0x03
    1be0:	3c 81       	ldd	r19, Y+4	; 0x04
    1be2:	23 30       	cpi	r18, 0x03	; 3
    1be4:	31 05       	cpc	r19, r1
    1be6:	09 f4       	brne	.+2      	; 0x1bea <UART_Init+0x38c>
    1be8:	4f c0       	rjmp	.+158    	; 0x1c88 <UART_Init+0x42a>
    1bea:	6d c0       	rjmp	.+218    	; 0x1cc6 <UART_Init+0x468>
    {
    case BaudRate_9600:   /*UBBR = 12 for 1MHz , UBBR = 103 for 8MHz*/
    	                  UBRRH = 103>>8;
    1bec:	e0 e4       	ldi	r30, 0x40	; 64
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	10 82       	st	Z, r1
                           UBRRL = 103;
    1bf2:	e9 e2       	ldi	r30, 0x29	; 41
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	87 e6       	ldi	r24, 0x67	; 103
    1bf8:	80 83       	st	Z, r24
    1bfa:	65 c0       	rjmp	.+202    	; 0x1cc6 <UART_Init+0x468>
    	                  break;
    	                  /*There is a bug in the equation shown blow */
    case BaudRate_14400:  g_UBRR_value= (uint16)(((F_CPU / (g_speed_mode_division_factor * 14400 )))-1);
    1bfc:	80 91 fb 00 	lds	r24, 0x00FB
    1c00:	28 2f       	mov	r18, r24
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	80 e4       	ldi	r24, 0x40	; 64
    1c06:	98 e3       	ldi	r25, 0x38	; 56
    1c08:	ac 01       	movw	r20, r24
    1c0a:	24 9f       	mul	r18, r20
    1c0c:	c0 01       	movw	r24, r0
    1c0e:	25 9f       	mul	r18, r21
    1c10:	90 0d       	add	r25, r0
    1c12:	34 9f       	mul	r19, r20
    1c14:	90 0d       	add	r25, r0
    1c16:	11 24       	eor	r1, r1
    1c18:	9c 01       	movw	r18, r24
    1c1a:	44 27       	eor	r20, r20
    1c1c:	37 fd       	sbrc	r19, 7
    1c1e:	40 95       	com	r20
    1c20:	54 2f       	mov	r21, r20
    1c22:	80 e0       	ldi	r24, 0x00	; 0
    1c24:	92 e1       	ldi	r25, 0x12	; 18
    1c26:	aa e7       	ldi	r26, 0x7A	; 122
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	bc 01       	movw	r22, r24
    1c2c:	cd 01       	movw	r24, r26
    1c2e:	0e 94 51 19 	call	0x32a2	; 0x32a2 <__divmodsi4>
    1c32:	da 01       	movw	r26, r20
    1c34:	c9 01       	movw	r24, r18
    1c36:	01 97       	sbiw	r24, 0x01	; 1
    1c38:	90 93 fa 00 	sts	0x00FA, r25
    1c3c:	80 93 f9 00 	sts	0x00F9, r24
    1c40:	42 c0       	rjmp	.+132    	; 0x1cc6 <UART_Init+0x468>
    	                  break;
    case BaudRate_19200:  g_UBRR_value= (uint16)(((F_CPU / (g_speed_mode_division_factor * 19200 )))-1);
    1c42:	80 91 fb 00 	lds	r24, 0x00FB
    1c46:	28 2f       	mov	r18, r24
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
    1c4c:	9b e4       	ldi	r25, 0x4B	; 75
    1c4e:	ac 01       	movw	r20, r24
    1c50:	24 9f       	mul	r18, r20
    1c52:	c0 01       	movw	r24, r0
    1c54:	25 9f       	mul	r18, r21
    1c56:	90 0d       	add	r25, r0
    1c58:	34 9f       	mul	r19, r20
    1c5a:	90 0d       	add	r25, r0
    1c5c:	11 24       	eor	r1, r1
    1c5e:	9c 01       	movw	r18, r24
    1c60:	44 27       	eor	r20, r20
    1c62:	37 fd       	sbrc	r19, 7
    1c64:	40 95       	com	r20
    1c66:	54 2f       	mov	r21, r20
    1c68:	80 e0       	ldi	r24, 0x00	; 0
    1c6a:	92 e1       	ldi	r25, 0x12	; 18
    1c6c:	aa e7       	ldi	r26, 0x7A	; 122
    1c6e:	b0 e0       	ldi	r27, 0x00	; 0
    1c70:	bc 01       	movw	r22, r24
    1c72:	cd 01       	movw	r24, r26
    1c74:	0e 94 51 19 	call	0x32a2	; 0x32a2 <__divmodsi4>
    1c78:	da 01       	movw	r26, r20
    1c7a:	c9 01       	movw	r24, r18
    1c7c:	01 97       	sbiw	r24, 0x01	; 1
    1c7e:	90 93 fa 00 	sts	0x00FA, r25
    1c82:	80 93 f9 00 	sts	0x00F9, r24
    1c86:	1f c0       	rjmp	.+62     	; 0x1cc6 <UART_Init+0x468>
    	                  break;
    case BaudRate_115200: g_UBRR_value= (uint16)(((F_CPU / (g_speed_mode_division_factor * 115200)))-1);
    1c88:	80 91 fb 00 	lds	r24, 0x00FB
    1c8c:	88 2f       	mov	r24, r24
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	a0 e0       	ldi	r26, 0x00	; 0
    1c92:	b0 e0       	ldi	r27, 0x00	; 0
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	32 ec       	ldi	r19, 0xC2	; 194
    1c98:	41 e0       	ldi	r20, 0x01	; 1
    1c9a:	50 e0       	ldi	r21, 0x00	; 0
    1c9c:	bc 01       	movw	r22, r24
    1c9e:	cd 01       	movw	r24, r26
    1ca0:	0e 94 32 19 	call	0x3264	; 0x3264 <__mulsi3>
    1ca4:	9b 01       	movw	r18, r22
    1ca6:	ac 01       	movw	r20, r24
    1ca8:	80 e0       	ldi	r24, 0x00	; 0
    1caa:	92 e1       	ldi	r25, 0x12	; 18
    1cac:	aa e7       	ldi	r26, 0x7A	; 122
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	bc 01       	movw	r22, r24
    1cb2:	cd 01       	movw	r24, r26
    1cb4:	0e 94 51 19 	call	0x32a2	; 0x32a2 <__divmodsi4>
    1cb8:	da 01       	movw	r26, r20
    1cba:	c9 01       	movw	r24, r18
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	90 93 fa 00 	sts	0x00FA, r25
    1cc2:	80 93 f9 00 	sts	0x00F9, r24
    }




}
    1cc6:	60 96       	adiw	r28, 0x10	; 16
    1cc8:	0f b6       	in	r0, 0x3f	; 63
    1cca:	f8 94       	cli
    1ccc:	de bf       	out	0x3e, r29	; 62
    1cce:	0f be       	out	0x3f, r0	; 63
    1cd0:	cd bf       	out	0x3d, r28	; 61
    1cd2:	cf 91       	pop	r28
    1cd4:	df 91       	pop	r29
    1cd6:	08 95       	ret

00001cd8 <UART_sendByte>:
* Parameters (out):   None
* Return value:       None
* Description:        Send a Byte to other devices.
********************************************************************************/
void UART_sendByte( const uint8 data )
{
    1cd8:	df 93       	push	r29
    1cda:	cf 93       	push	r28
    1cdc:	0f 92       	push	r0
    1cde:	cd b7       	in	r28, 0x3d	; 61
    1ce0:	de b7       	in	r29, 0x3e	; 62
    1ce2:	89 83       	std	Y+1, r24	; 0x01
   /*Wait until Flag = 1 , etc: UDR is empty and ready to be loaded with data*/
   while (BIT_IS_CLEAR(UCSRA,UDRE));
    1ce4:	eb e2       	ldi	r30, 0x2B	; 43
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	88 2f       	mov	r24, r24
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	80 72       	andi	r24, 0x20	; 32
    1cf0:	90 70       	andi	r25, 0x00	; 0
    1cf2:	00 97       	sbiw	r24, 0x00	; 0
    1cf4:	b9 f3       	breq	.-18     	; 0x1ce4 <UART_sendByte+0xc>
   UDR = data;
    1cf6:	ec e2       	ldi	r30, 0x2C	; 44
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	89 81       	ldd	r24, Y+1	; 0x01
    1cfc:	80 83       	st	Z, r24
}
    1cfe:	0f 90       	pop	r0
    1d00:	cf 91       	pop	r28
    1d02:	df 91       	pop	r29
    1d04:	08 95       	ret

00001d06 <UART_receiveByte>:
* Parameters (out):   None
* Return value:       uint8
* Description:        receive a Byte from other devices
********************************************************************************/
uint8 UART_receiveByte (void)
{
    1d06:	df 93       	push	r29
    1d08:	cf 93       	push	r28
    1d0a:	cd b7       	in	r28, 0x3d	; 61
    1d0c:	de b7       	in	r29, 0x3e	; 62
	 /*Wait until Flag = 1 , etc: UDR is Loaded with received Data then return UDR*/
	  while (BIT_IS_CLEAR(UCSRA,RXC));
    1d0e:	eb e2       	ldi	r30, 0x2B	; 43
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	80 81       	ld	r24, Z
    1d14:	88 23       	and	r24, r24
    1d16:	dc f7       	brge	.-10     	; 0x1d0e <UART_receiveByte+0x8>
      return UDR;
    1d18:	ec e2       	ldi	r30, 0x2C	; 44
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	80 81       	ld	r24, Z
}
    1d1e:	cf 91       	pop	r28
    1d20:	df 91       	pop	r29
    1d22:	08 95       	ret

00001d24 <UART_sendString>:
* Parameters (out):   None
* Return value:       None
* Description:        Send a String to other devices.
********************************************************************************/
void UART_sendString( const uint8 * Str)
{
    1d24:	df 93       	push	r29
    1d26:	cf 93       	push	r28
    1d28:	00 d0       	rcall	.+0      	; 0x1d2a <UART_sendString+0x6>
    1d2a:	0f 92       	push	r0
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
    1d30:	9b 83       	std	Y+3, r25	; 0x03
    1d32:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1d34:	19 82       	std	Y+1, r1	; 0x01
    1d36:	0e c0       	rjmp	.+28     	; 0x1d54 <UART_sendString+0x30>

		/* Send the whole string */
		while(Str[i] != '\0')
		{
			UART_sendByte(Str[i]);
    1d38:	89 81       	ldd	r24, Y+1	; 0x01
    1d3a:	28 2f       	mov	r18, r24
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d40:	9b 81       	ldd	r25, Y+3	; 0x03
    1d42:	fc 01       	movw	r30, r24
    1d44:	e2 0f       	add	r30, r18
    1d46:	f3 1f       	adc	r31, r19
    1d48:	80 81       	ld	r24, Z
    1d4a:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <UART_sendByte>
			i++;
    1d4e:	89 81       	ldd	r24, Y+1	; 0x01
    1d50:	8f 5f       	subi	r24, 0xFF	; 255
    1d52:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString( const uint8 * Str)
{
	uint8 i = 0;

		/* Send the whole string */
		while(Str[i] != '\0')
    1d54:	89 81       	ldd	r24, Y+1	; 0x01
    1d56:	28 2f       	mov	r18, r24
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d5e:	fc 01       	movw	r30, r24
    1d60:	e2 0f       	add	r30, r18
    1d62:	f3 1f       	adc	r31, r19
    1d64:	80 81       	ld	r24, Z
    1d66:	88 23       	and	r24, r24
    1d68:	39 f7       	brne	.-50     	; 0x1d38 <UART_sendString+0x14>
		{
			UART_sendByte(Str[i]);
			i++;
		}
}
    1d6a:	0f 90       	pop	r0
    1d6c:	0f 90       	pop	r0
    1d6e:	0f 90       	pop	r0
    1d70:	cf 91       	pop	r28
    1d72:	df 91       	pop	r29
    1d74:	08 95       	ret

00001d76 <UART_receiveString>:
* Parameters (out):   None
* Return value:       uint8
* Description:        receive a stringfrom other devices
********************************************************************************/
void UART_receiveString (uint8 *Str)
{
    1d76:	0f 93       	push	r16
    1d78:	1f 93       	push	r17
    1d7a:	df 93       	push	r29
    1d7c:	cf 93       	push	r28
    1d7e:	00 d0       	rcall	.+0      	; 0x1d80 <UART_receiveString+0xa>
    1d80:	0f 92       	push	r0
    1d82:	cd b7       	in	r28, 0x3d	; 61
    1d84:	de b7       	in	r29, 0x3e	; 62
    1d86:	9b 83       	std	Y+3, r25	; 0x03
    1d88:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1d8a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_receiveByte();
    1d8c:	89 81       	ldd	r24, Y+1	; 0x01
    1d8e:	28 2f       	mov	r18, r24
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	8a 81       	ldd	r24, Y+2	; 0x02
    1d94:	9b 81       	ldd	r25, Y+3	; 0x03
    1d96:	8c 01       	movw	r16, r24
    1d98:	02 0f       	add	r16, r18
    1d9a:	13 1f       	adc	r17, r19
    1d9c:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <UART_receiveByte>
    1da0:	f8 01       	movw	r30, r16
    1da2:	80 83       	st	Z, r24
    1da4:	0f c0       	rjmp	.+30     	; 0x1dc4 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    1da6:	89 81       	ldd	r24, Y+1	; 0x01
    1da8:	8f 5f       	subi	r24, 0xFF	; 255
    1daa:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    1dac:	89 81       	ldd	r24, Y+1	; 0x01
    1dae:	28 2f       	mov	r18, r24
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	8a 81       	ldd	r24, Y+2	; 0x02
    1db4:	9b 81       	ldd	r25, Y+3	; 0x03
    1db6:	8c 01       	movw	r16, r24
    1db8:	02 0f       	add	r16, r18
    1dba:	13 1f       	adc	r17, r19
    1dbc:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <UART_receiveByte>
    1dc0:	f8 01       	movw	r30, r16
    1dc2:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_receiveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    1dc4:	89 81       	ldd	r24, Y+1	; 0x01
    1dc6:	28 2f       	mov	r18, r24
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	8a 81       	ldd	r24, Y+2	; 0x02
    1dcc:	9b 81       	ldd	r25, Y+3	; 0x03
    1dce:	fc 01       	movw	r30, r24
    1dd0:	e2 0f       	add	r30, r18
    1dd2:	f3 1f       	adc	r31, r19
    1dd4:	80 81       	ld	r24, Z
    1dd6:	83 32       	cpi	r24, 0x23	; 35
    1dd8:	31 f7       	brne	.-52     	; 0x1da6 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1dda:	89 81       	ldd	r24, Y+1	; 0x01
    1ddc:	28 2f       	mov	r18, r24
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	8a 81       	ldd	r24, Y+2	; 0x02
    1de2:	9b 81       	ldd	r25, Y+3	; 0x03
    1de4:	fc 01       	movw	r30, r24
    1de6:	e2 0f       	add	r30, r18
    1de8:	f3 1f       	adc	r31, r19
    1dea:	10 82       	st	Z, r1
}
    1dec:	0f 90       	pop	r0
    1dee:	0f 90       	pop	r0
    1df0:	0f 90       	pop	r0
    1df2:	cf 91       	pop	r28
    1df4:	df 91       	pop	r29
    1df6:	1f 91       	pop	r17
    1df8:	0f 91       	pop	r16
    1dfa:	08 95       	ret

00001dfc <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1dfc:	df 93       	push	r29
    1dfe:	cf 93       	push	r28
    1e00:	00 d0       	rcall	.+0      	; 0x1e02 <GPIO_setupPinDirection+0x6>
    1e02:	00 d0       	rcall	.+0      	; 0x1e04 <GPIO_setupPinDirection+0x8>
    1e04:	0f 92       	push	r0
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
    1e0a:	89 83       	std	Y+1, r24	; 0x01
    1e0c:	6a 83       	std	Y+2, r22	; 0x02
    1e0e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1e10:	8a 81       	ldd	r24, Y+2	; 0x02
    1e12:	88 30       	cpi	r24, 0x08	; 8
    1e14:	08 f0       	brcs	.+2      	; 0x1e18 <GPIO_setupPinDirection+0x1c>
    1e16:	d5 c0       	rjmp	.+426    	; 0x1fc2 <GPIO_setupPinDirection+0x1c6>
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
    1e1a:	84 30       	cpi	r24, 0x04	; 4
    1e1c:	08 f0       	brcs	.+2      	; 0x1e20 <GPIO_setupPinDirection+0x24>
    1e1e:	d1 c0       	rjmp	.+418    	; 0x1fc2 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1e20:	89 81       	ldd	r24, Y+1	; 0x01
    1e22:	28 2f       	mov	r18, r24
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	3d 83       	std	Y+5, r19	; 0x05
    1e28:	2c 83       	std	Y+4, r18	; 0x04
    1e2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e2c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e2e:	81 30       	cpi	r24, 0x01	; 1
    1e30:	91 05       	cpc	r25, r1
    1e32:	09 f4       	brne	.+2      	; 0x1e36 <GPIO_setupPinDirection+0x3a>
    1e34:	43 c0       	rjmp	.+134    	; 0x1ebc <GPIO_setupPinDirection+0xc0>
    1e36:	2c 81       	ldd	r18, Y+4	; 0x04
    1e38:	3d 81       	ldd	r19, Y+5	; 0x05
    1e3a:	22 30       	cpi	r18, 0x02	; 2
    1e3c:	31 05       	cpc	r19, r1
    1e3e:	2c f4       	brge	.+10     	; 0x1e4a <GPIO_setupPinDirection+0x4e>
    1e40:	8c 81       	ldd	r24, Y+4	; 0x04
    1e42:	9d 81       	ldd	r25, Y+5	; 0x05
    1e44:	00 97       	sbiw	r24, 0x00	; 0
    1e46:	71 f0       	breq	.+28     	; 0x1e64 <GPIO_setupPinDirection+0x68>
    1e48:	bc c0       	rjmp	.+376    	; 0x1fc2 <GPIO_setupPinDirection+0x1c6>
    1e4a:	2c 81       	ldd	r18, Y+4	; 0x04
    1e4c:	3d 81       	ldd	r19, Y+5	; 0x05
    1e4e:	22 30       	cpi	r18, 0x02	; 2
    1e50:	31 05       	cpc	r19, r1
    1e52:	09 f4       	brne	.+2      	; 0x1e56 <GPIO_setupPinDirection+0x5a>
    1e54:	5f c0       	rjmp	.+190    	; 0x1f14 <GPIO_setupPinDirection+0x118>
    1e56:	8c 81       	ldd	r24, Y+4	; 0x04
    1e58:	9d 81       	ldd	r25, Y+5	; 0x05
    1e5a:	83 30       	cpi	r24, 0x03	; 3
    1e5c:	91 05       	cpc	r25, r1
    1e5e:	09 f4       	brne	.+2      	; 0x1e62 <GPIO_setupPinDirection+0x66>
    1e60:	85 c0       	rjmp	.+266    	; 0x1f6c <GPIO_setupPinDirection+0x170>
    1e62:	af c0       	rjmp	.+350    	; 0x1fc2 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1e64:	8b 81       	ldd	r24, Y+3	; 0x03
    1e66:	81 30       	cpi	r24, 0x01	; 1
    1e68:	a1 f4       	brne	.+40     	; 0x1e92 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1e6a:	aa e3       	ldi	r26, 0x3A	; 58
    1e6c:	b0 e0       	ldi	r27, 0x00	; 0
    1e6e:	ea e3       	ldi	r30, 0x3A	; 58
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	80 81       	ld	r24, Z
    1e74:	48 2f       	mov	r20, r24
    1e76:	8a 81       	ldd	r24, Y+2	; 0x02
    1e78:	28 2f       	mov	r18, r24
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	02 2e       	mov	r0, r18
    1e82:	02 c0       	rjmp	.+4      	; 0x1e88 <GPIO_setupPinDirection+0x8c>
    1e84:	88 0f       	add	r24, r24
    1e86:	99 1f       	adc	r25, r25
    1e88:	0a 94       	dec	r0
    1e8a:	e2 f7       	brpl	.-8      	; 0x1e84 <GPIO_setupPinDirection+0x88>
    1e8c:	84 2b       	or	r24, r20
    1e8e:	8c 93       	st	X, r24
    1e90:	98 c0       	rjmp	.+304    	; 0x1fc2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1e92:	aa e3       	ldi	r26, 0x3A	; 58
    1e94:	b0 e0       	ldi	r27, 0x00	; 0
    1e96:	ea e3       	ldi	r30, 0x3A	; 58
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	80 81       	ld	r24, Z
    1e9c:	48 2f       	mov	r20, r24
    1e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea0:	28 2f       	mov	r18, r24
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	02 2e       	mov	r0, r18
    1eaa:	02 c0       	rjmp	.+4      	; 0x1eb0 <GPIO_setupPinDirection+0xb4>
    1eac:	88 0f       	add	r24, r24
    1eae:	99 1f       	adc	r25, r25
    1eb0:	0a 94       	dec	r0
    1eb2:	e2 f7       	brpl	.-8      	; 0x1eac <GPIO_setupPinDirection+0xb0>
    1eb4:	80 95       	com	r24
    1eb6:	84 23       	and	r24, r20
    1eb8:	8c 93       	st	X, r24
    1eba:	83 c0       	rjmp	.+262    	; 0x1fc2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1ebc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebe:	81 30       	cpi	r24, 0x01	; 1
    1ec0:	a1 f4       	brne	.+40     	; 0x1eea <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1ec2:	a7 e3       	ldi	r26, 0x37	; 55
    1ec4:	b0 e0       	ldi	r27, 0x00	; 0
    1ec6:	e7 e3       	ldi	r30, 0x37	; 55
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	80 81       	ld	r24, Z
    1ecc:	48 2f       	mov	r20, r24
    1ece:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed0:	28 2f       	mov	r18, r24
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	02 2e       	mov	r0, r18
    1eda:	02 c0       	rjmp	.+4      	; 0x1ee0 <GPIO_setupPinDirection+0xe4>
    1edc:	88 0f       	add	r24, r24
    1ede:	99 1f       	adc	r25, r25
    1ee0:	0a 94       	dec	r0
    1ee2:	e2 f7       	brpl	.-8      	; 0x1edc <GPIO_setupPinDirection+0xe0>
    1ee4:	84 2b       	or	r24, r20
    1ee6:	8c 93       	st	X, r24
    1ee8:	6c c0       	rjmp	.+216    	; 0x1fc2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1eea:	a7 e3       	ldi	r26, 0x37	; 55
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	e7 e3       	ldi	r30, 0x37	; 55
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	48 2f       	mov	r20, r24
    1ef6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef8:	28 2f       	mov	r18, r24
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	02 2e       	mov	r0, r18
    1f02:	02 c0       	rjmp	.+4      	; 0x1f08 <GPIO_setupPinDirection+0x10c>
    1f04:	88 0f       	add	r24, r24
    1f06:	99 1f       	adc	r25, r25
    1f08:	0a 94       	dec	r0
    1f0a:	e2 f7       	brpl	.-8      	; 0x1f04 <GPIO_setupPinDirection+0x108>
    1f0c:	80 95       	com	r24
    1f0e:	84 23       	and	r24, r20
    1f10:	8c 93       	st	X, r24
    1f12:	57 c0       	rjmp	.+174    	; 0x1fc2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1f14:	8b 81       	ldd	r24, Y+3	; 0x03
    1f16:	81 30       	cpi	r24, 0x01	; 1
    1f18:	a1 f4       	brne	.+40     	; 0x1f42 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1f1a:	a4 e3       	ldi	r26, 0x34	; 52
    1f1c:	b0 e0       	ldi	r27, 0x00	; 0
    1f1e:	e4 e3       	ldi	r30, 0x34	; 52
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	80 81       	ld	r24, Z
    1f24:	48 2f       	mov	r20, r24
    1f26:	8a 81       	ldd	r24, Y+2	; 0x02
    1f28:	28 2f       	mov	r18, r24
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	02 2e       	mov	r0, r18
    1f32:	02 c0       	rjmp	.+4      	; 0x1f38 <GPIO_setupPinDirection+0x13c>
    1f34:	88 0f       	add	r24, r24
    1f36:	99 1f       	adc	r25, r25
    1f38:	0a 94       	dec	r0
    1f3a:	e2 f7       	brpl	.-8      	; 0x1f34 <GPIO_setupPinDirection+0x138>
    1f3c:	84 2b       	or	r24, r20
    1f3e:	8c 93       	st	X, r24
    1f40:	40 c0       	rjmp	.+128    	; 0x1fc2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1f42:	a4 e3       	ldi	r26, 0x34	; 52
    1f44:	b0 e0       	ldi	r27, 0x00	; 0
    1f46:	e4 e3       	ldi	r30, 0x34	; 52
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	80 81       	ld	r24, Z
    1f4c:	48 2f       	mov	r20, r24
    1f4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f50:	28 2f       	mov	r18, r24
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	02 2e       	mov	r0, r18
    1f5a:	02 c0       	rjmp	.+4      	; 0x1f60 <GPIO_setupPinDirection+0x164>
    1f5c:	88 0f       	add	r24, r24
    1f5e:	99 1f       	adc	r25, r25
    1f60:	0a 94       	dec	r0
    1f62:	e2 f7       	brpl	.-8      	; 0x1f5c <GPIO_setupPinDirection+0x160>
    1f64:	80 95       	com	r24
    1f66:	84 23       	and	r24, r20
    1f68:	8c 93       	st	X, r24
    1f6a:	2b c0       	rjmp	.+86     	; 0x1fc2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1f6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6e:	81 30       	cpi	r24, 0x01	; 1
    1f70:	a1 f4       	brne	.+40     	; 0x1f9a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1f72:	a1 e3       	ldi	r26, 0x31	; 49
    1f74:	b0 e0       	ldi	r27, 0x00	; 0
    1f76:	e1 e3       	ldi	r30, 0x31	; 49
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	80 81       	ld	r24, Z
    1f7c:	48 2f       	mov	r20, r24
    1f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f80:	28 2f       	mov	r18, r24
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	02 2e       	mov	r0, r18
    1f8a:	02 c0       	rjmp	.+4      	; 0x1f90 <GPIO_setupPinDirection+0x194>
    1f8c:	88 0f       	add	r24, r24
    1f8e:	99 1f       	adc	r25, r25
    1f90:	0a 94       	dec	r0
    1f92:	e2 f7       	brpl	.-8      	; 0x1f8c <GPIO_setupPinDirection+0x190>
    1f94:	84 2b       	or	r24, r20
    1f96:	8c 93       	st	X, r24
    1f98:	14 c0       	rjmp	.+40     	; 0x1fc2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1f9a:	a1 e3       	ldi	r26, 0x31	; 49
    1f9c:	b0 e0       	ldi	r27, 0x00	; 0
    1f9e:	e1 e3       	ldi	r30, 0x31	; 49
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	80 81       	ld	r24, Z
    1fa4:	48 2f       	mov	r20, r24
    1fa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa8:	28 2f       	mov	r18, r24
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	02 2e       	mov	r0, r18
    1fb2:	02 c0       	rjmp	.+4      	; 0x1fb8 <GPIO_setupPinDirection+0x1bc>
    1fb4:	88 0f       	add	r24, r24
    1fb6:	99 1f       	adc	r25, r25
    1fb8:	0a 94       	dec	r0
    1fba:	e2 f7       	brpl	.-8      	; 0x1fb4 <GPIO_setupPinDirection+0x1b8>
    1fbc:	80 95       	com	r24
    1fbe:	84 23       	and	r24, r20
    1fc0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1fc2:	0f 90       	pop	r0
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	0f 90       	pop	r0
    1fca:	0f 90       	pop	r0
    1fcc:	cf 91       	pop	r28
    1fce:	df 91       	pop	r29
    1fd0:	08 95       	ret

00001fd2 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1fd2:	df 93       	push	r29
    1fd4:	cf 93       	push	r28
    1fd6:	00 d0       	rcall	.+0      	; 0x1fd8 <GPIO_writePin+0x6>
    1fd8:	00 d0       	rcall	.+0      	; 0x1fda <GPIO_writePin+0x8>
    1fda:	0f 92       	push	r0
    1fdc:	cd b7       	in	r28, 0x3d	; 61
    1fde:	de b7       	in	r29, 0x3e	; 62
    1fe0:	89 83       	std	Y+1, r24	; 0x01
    1fe2:	6a 83       	std	Y+2, r22	; 0x02
    1fe4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1fe6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe8:	88 30       	cpi	r24, 0x08	; 8
    1fea:	08 f0       	brcs	.+2      	; 0x1fee <GPIO_writePin+0x1c>
    1fec:	d5 c0       	rjmp	.+426    	; 0x2198 <GPIO_writePin+0x1c6>
    1fee:	89 81       	ldd	r24, Y+1	; 0x01
    1ff0:	84 30       	cpi	r24, 0x04	; 4
    1ff2:	08 f0       	brcs	.+2      	; 0x1ff6 <GPIO_writePin+0x24>
    1ff4:	d1 c0       	rjmp	.+418    	; 0x2198 <GPIO_writePin+0x1c6>
	{
		/* Do Nothing */
	}
	else
	{
      switch(port_num)
    1ff6:	89 81       	ldd	r24, Y+1	; 0x01
    1ff8:	28 2f       	mov	r18, r24
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	3d 83       	std	Y+5, r19	; 0x05
    1ffe:	2c 83       	std	Y+4, r18	; 0x04
    2000:	8c 81       	ldd	r24, Y+4	; 0x04
    2002:	9d 81       	ldd	r25, Y+5	; 0x05
    2004:	81 30       	cpi	r24, 0x01	; 1
    2006:	91 05       	cpc	r25, r1
    2008:	09 f4       	brne	.+2      	; 0x200c <GPIO_writePin+0x3a>
    200a:	43 c0       	rjmp	.+134    	; 0x2092 <GPIO_writePin+0xc0>
    200c:	2c 81       	ldd	r18, Y+4	; 0x04
    200e:	3d 81       	ldd	r19, Y+5	; 0x05
    2010:	22 30       	cpi	r18, 0x02	; 2
    2012:	31 05       	cpc	r19, r1
    2014:	2c f4       	brge	.+10     	; 0x2020 <GPIO_writePin+0x4e>
    2016:	8c 81       	ldd	r24, Y+4	; 0x04
    2018:	9d 81       	ldd	r25, Y+5	; 0x05
    201a:	00 97       	sbiw	r24, 0x00	; 0
    201c:	71 f0       	breq	.+28     	; 0x203a <GPIO_writePin+0x68>
    201e:	bc c0       	rjmp	.+376    	; 0x2198 <GPIO_writePin+0x1c6>
    2020:	2c 81       	ldd	r18, Y+4	; 0x04
    2022:	3d 81       	ldd	r19, Y+5	; 0x05
    2024:	22 30       	cpi	r18, 0x02	; 2
    2026:	31 05       	cpc	r19, r1
    2028:	09 f4       	brne	.+2      	; 0x202c <GPIO_writePin+0x5a>
    202a:	5f c0       	rjmp	.+190    	; 0x20ea <GPIO_writePin+0x118>
    202c:	8c 81       	ldd	r24, Y+4	; 0x04
    202e:	9d 81       	ldd	r25, Y+5	; 0x05
    2030:	83 30       	cpi	r24, 0x03	; 3
    2032:	91 05       	cpc	r25, r1
    2034:	09 f4       	brne	.+2      	; 0x2038 <GPIO_writePin+0x66>
    2036:	85 c0       	rjmp	.+266    	; 0x2142 <GPIO_writePin+0x170>
    2038:	af c0       	rjmp	.+350    	; 0x2198 <GPIO_writePin+0x1c6>
      {
         case PORTA_ID:
        	 if ( value == LOGIC_HIGH)
    203a:	8b 81       	ldd	r24, Y+3	; 0x03
    203c:	81 30       	cpi	r24, 0x01	; 1
    203e:	a1 f4       	brne	.+40     	; 0x2068 <GPIO_writePin+0x96>
        	 {
        		 SET_BIT(PORTA, pin_num);
    2040:	ab e3       	ldi	r26, 0x3B	; 59
    2042:	b0 e0       	ldi	r27, 0x00	; 0
    2044:	eb e3       	ldi	r30, 0x3B	; 59
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	48 2f       	mov	r20, r24
    204c:	8a 81       	ldd	r24, Y+2	; 0x02
    204e:	28 2f       	mov	r18, r24
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	02 2e       	mov	r0, r18
    2058:	02 c0       	rjmp	.+4      	; 0x205e <GPIO_writePin+0x8c>
    205a:	88 0f       	add	r24, r24
    205c:	99 1f       	adc	r25, r25
    205e:	0a 94       	dec	r0
    2060:	e2 f7       	brpl	.-8      	; 0x205a <GPIO_writePin+0x88>
    2062:	84 2b       	or	r24, r20
    2064:	8c 93       	st	X, r24
    2066:	98 c0       	rjmp	.+304    	; 0x2198 <GPIO_writePin+0x1c6>
        	 }
        	 else
        	 {
        		 CLEAR_BIT(PORTA,pin_num);
    2068:	ab e3       	ldi	r26, 0x3B	; 59
    206a:	b0 e0       	ldi	r27, 0x00	; 0
    206c:	eb e3       	ldi	r30, 0x3B	; 59
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	80 81       	ld	r24, Z
    2072:	48 2f       	mov	r20, r24
    2074:	8a 81       	ldd	r24, Y+2	; 0x02
    2076:	28 2f       	mov	r18, r24
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	02 2e       	mov	r0, r18
    2080:	02 c0       	rjmp	.+4      	; 0x2086 <GPIO_writePin+0xb4>
    2082:	88 0f       	add	r24, r24
    2084:	99 1f       	adc	r25, r25
    2086:	0a 94       	dec	r0
    2088:	e2 f7       	brpl	.-8      	; 0x2082 <GPIO_writePin+0xb0>
    208a:	80 95       	com	r24
    208c:	84 23       	and	r24, r20
    208e:	8c 93       	st	X, r24
    2090:	83 c0       	rjmp	.+262    	; 0x2198 <GPIO_writePin+0x1c6>
        	 }
        	 break;
         case PORTB_ID:
        	 if ( value == LOGIC_HIGH)
    2092:	8b 81       	ldd	r24, Y+3	; 0x03
    2094:	81 30       	cpi	r24, 0x01	; 1
    2096:	a1 f4       	brne	.+40     	; 0x20c0 <GPIO_writePin+0xee>
        	 {
        		 SET_BIT(PORTB, pin_num);
    2098:	a8 e3       	ldi	r26, 0x38	; 56
    209a:	b0 e0       	ldi	r27, 0x00	; 0
    209c:	e8 e3       	ldi	r30, 0x38	; 56
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	80 81       	ld	r24, Z
    20a2:	48 2f       	mov	r20, r24
    20a4:	8a 81       	ldd	r24, Y+2	; 0x02
    20a6:	28 2f       	mov	r18, r24
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	02 2e       	mov	r0, r18
    20b0:	02 c0       	rjmp	.+4      	; 0x20b6 <GPIO_writePin+0xe4>
    20b2:	88 0f       	add	r24, r24
    20b4:	99 1f       	adc	r25, r25
    20b6:	0a 94       	dec	r0
    20b8:	e2 f7       	brpl	.-8      	; 0x20b2 <GPIO_writePin+0xe0>
    20ba:	84 2b       	or	r24, r20
    20bc:	8c 93       	st	X, r24
    20be:	6c c0       	rjmp	.+216    	; 0x2198 <GPIO_writePin+0x1c6>
        	 }
        	 else
        	 {
        		 CLEAR_BIT(PORTB,pin_num);
    20c0:	a8 e3       	ldi	r26, 0x38	; 56
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	e8 e3       	ldi	r30, 0x38	; 56
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	48 2f       	mov	r20, r24
    20cc:	8a 81       	ldd	r24, Y+2	; 0x02
    20ce:	28 2f       	mov	r18, r24
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	02 2e       	mov	r0, r18
    20d8:	02 c0       	rjmp	.+4      	; 0x20de <GPIO_writePin+0x10c>
    20da:	88 0f       	add	r24, r24
    20dc:	99 1f       	adc	r25, r25
    20de:	0a 94       	dec	r0
    20e0:	e2 f7       	brpl	.-8      	; 0x20da <GPIO_writePin+0x108>
    20e2:	80 95       	com	r24
    20e4:	84 23       	and	r24, r20
    20e6:	8c 93       	st	X, r24
    20e8:	57 c0       	rjmp	.+174    	; 0x2198 <GPIO_writePin+0x1c6>
        	 }
        	 break;
         case PORTC_ID:
        	 if ( value == LOGIC_HIGH)
    20ea:	8b 81       	ldd	r24, Y+3	; 0x03
    20ec:	81 30       	cpi	r24, 0x01	; 1
    20ee:	a1 f4       	brne	.+40     	; 0x2118 <GPIO_writePin+0x146>
        	 {
        		 SET_BIT(PORTC, pin_num);
    20f0:	a5 e3       	ldi	r26, 0x35	; 53
    20f2:	b0 e0       	ldi	r27, 0x00	; 0
    20f4:	e5 e3       	ldi	r30, 0x35	; 53
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	80 81       	ld	r24, Z
    20fa:	48 2f       	mov	r20, r24
    20fc:	8a 81       	ldd	r24, Y+2	; 0x02
    20fe:	28 2f       	mov	r18, r24
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	02 2e       	mov	r0, r18
    2108:	02 c0       	rjmp	.+4      	; 0x210e <GPIO_writePin+0x13c>
    210a:	88 0f       	add	r24, r24
    210c:	99 1f       	adc	r25, r25
    210e:	0a 94       	dec	r0
    2110:	e2 f7       	brpl	.-8      	; 0x210a <GPIO_writePin+0x138>
    2112:	84 2b       	or	r24, r20
    2114:	8c 93       	st	X, r24
    2116:	40 c0       	rjmp	.+128    	; 0x2198 <GPIO_writePin+0x1c6>
        	 }
        	 else
        	 {
        		 CLEAR_BIT(PORTC,pin_num);
    2118:	a5 e3       	ldi	r26, 0x35	; 53
    211a:	b0 e0       	ldi	r27, 0x00	; 0
    211c:	e5 e3       	ldi	r30, 0x35	; 53
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	48 2f       	mov	r20, r24
    2124:	8a 81       	ldd	r24, Y+2	; 0x02
    2126:	28 2f       	mov	r18, r24
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	02 2e       	mov	r0, r18
    2130:	02 c0       	rjmp	.+4      	; 0x2136 <GPIO_writePin+0x164>
    2132:	88 0f       	add	r24, r24
    2134:	99 1f       	adc	r25, r25
    2136:	0a 94       	dec	r0
    2138:	e2 f7       	brpl	.-8      	; 0x2132 <GPIO_writePin+0x160>
    213a:	80 95       	com	r24
    213c:	84 23       	and	r24, r20
    213e:	8c 93       	st	X, r24
    2140:	2b c0       	rjmp	.+86     	; 0x2198 <GPIO_writePin+0x1c6>
        	 }
        	 break;
         case PORTD_ID:
        	 if ( value == LOGIC_HIGH)
    2142:	8b 81       	ldd	r24, Y+3	; 0x03
    2144:	81 30       	cpi	r24, 0x01	; 1
    2146:	a1 f4       	brne	.+40     	; 0x2170 <GPIO_writePin+0x19e>
        	 {
        		 SET_BIT(PORTD, pin_num);
    2148:	a2 e3       	ldi	r26, 0x32	; 50
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	e2 e3       	ldi	r30, 0x32	; 50
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	48 2f       	mov	r20, r24
    2154:	8a 81       	ldd	r24, Y+2	; 0x02
    2156:	28 2f       	mov	r18, r24
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	02 2e       	mov	r0, r18
    2160:	02 c0       	rjmp	.+4      	; 0x2166 <GPIO_writePin+0x194>
    2162:	88 0f       	add	r24, r24
    2164:	99 1f       	adc	r25, r25
    2166:	0a 94       	dec	r0
    2168:	e2 f7       	brpl	.-8      	; 0x2162 <GPIO_writePin+0x190>
    216a:	84 2b       	or	r24, r20
    216c:	8c 93       	st	X, r24
    216e:	14 c0       	rjmp	.+40     	; 0x2198 <GPIO_writePin+0x1c6>
        	 }
        	 else
        	 {
        		 CLEAR_BIT(PORTD,pin_num);
    2170:	a2 e3       	ldi	r26, 0x32	; 50
    2172:	b0 e0       	ldi	r27, 0x00	; 0
    2174:	e2 e3       	ldi	r30, 0x32	; 50
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
    217a:	48 2f       	mov	r20, r24
    217c:	8a 81       	ldd	r24, Y+2	; 0x02
    217e:	28 2f       	mov	r18, r24
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	02 2e       	mov	r0, r18
    2188:	02 c0       	rjmp	.+4      	; 0x218e <GPIO_writePin+0x1bc>
    218a:	88 0f       	add	r24, r24
    218c:	99 1f       	adc	r25, r25
    218e:	0a 94       	dec	r0
    2190:	e2 f7       	brpl	.-8      	; 0x218a <GPIO_writePin+0x1b8>
    2192:	80 95       	com	r24
    2194:	84 23       	and	r24, r20
    2196:	8c 93       	st	X, r24
        	 }
        	 break;
      }
	}
}
    2198:	0f 90       	pop	r0
    219a:	0f 90       	pop	r0
    219c:	0f 90       	pop	r0
    219e:	0f 90       	pop	r0
    21a0:	0f 90       	pop	r0
    21a2:	cf 91       	pop	r28
    21a4:	df 91       	pop	r29
    21a6:	08 95       	ret

000021a8 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    21a8:	df 93       	push	r29
    21aa:	cf 93       	push	r28
    21ac:	00 d0       	rcall	.+0      	; 0x21ae <GPIO_readPin+0x6>
    21ae:	00 d0       	rcall	.+0      	; 0x21b0 <GPIO_readPin+0x8>
    21b0:	0f 92       	push	r0
    21b2:	cd b7       	in	r28, 0x3d	; 61
    21b4:	de b7       	in	r29, 0x3e	; 62
    21b6:	8a 83       	std	Y+2, r24	; 0x02
    21b8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 temp=0;
    21ba:	19 82       	std	Y+1, r1	; 0x01
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    21bc:	8b 81       	ldd	r24, Y+3	; 0x03
    21be:	88 30       	cpi	r24, 0x08	; 8
    21c0:	18 f4       	brcc	.+6      	; 0x21c8 <GPIO_readPin+0x20>
    21c2:	8a 81       	ldd	r24, Y+2	; 0x02
    21c4:	84 30       	cpi	r24, 0x04	; 4
    21c6:	10 f0       	brcs	.+4      	; 0x21cc <GPIO_readPin+0x24>
	{
		temp = 0 ;
    21c8:	19 82       	std	Y+1, r1	; 0x01
    21ca:	67 c0       	rjmp	.+206    	; 0x229a <GPIO_readPin+0xf2>
	}
	else
	{
		switch(port_num)
    21cc:	8a 81       	ldd	r24, Y+2	; 0x02
    21ce:	28 2f       	mov	r18, r24
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	3d 83       	std	Y+5, r19	; 0x05
    21d4:	2c 83       	std	Y+4, r18	; 0x04
    21d6:	4c 81       	ldd	r20, Y+4	; 0x04
    21d8:	5d 81       	ldd	r21, Y+5	; 0x05
    21da:	41 30       	cpi	r20, 0x01	; 1
    21dc:	51 05       	cpc	r21, r1
    21de:	41 f1       	breq	.+80     	; 0x2230 <GPIO_readPin+0x88>
    21e0:	8c 81       	ldd	r24, Y+4	; 0x04
    21e2:	9d 81       	ldd	r25, Y+5	; 0x05
    21e4:	82 30       	cpi	r24, 0x02	; 2
    21e6:	91 05       	cpc	r25, r1
    21e8:	34 f4       	brge	.+12     	; 0x21f6 <GPIO_readPin+0x4e>
    21ea:	2c 81       	ldd	r18, Y+4	; 0x04
    21ec:	3d 81       	ldd	r19, Y+5	; 0x05
    21ee:	21 15       	cp	r18, r1
    21f0:	31 05       	cpc	r19, r1
    21f2:	61 f0       	breq	.+24     	; 0x220c <GPIO_readPin+0x64>
    21f4:	52 c0       	rjmp	.+164    	; 0x229a <GPIO_readPin+0xf2>
    21f6:	4c 81       	ldd	r20, Y+4	; 0x04
    21f8:	5d 81       	ldd	r21, Y+5	; 0x05
    21fa:	42 30       	cpi	r20, 0x02	; 2
    21fc:	51 05       	cpc	r21, r1
    21fe:	51 f1       	breq	.+84     	; 0x2254 <GPIO_readPin+0xac>
    2200:	8c 81       	ldd	r24, Y+4	; 0x04
    2202:	9d 81       	ldd	r25, Y+5	; 0x05
    2204:	83 30       	cpi	r24, 0x03	; 3
    2206:	91 05       	cpc	r25, r1
    2208:	b9 f1       	breq	.+110    	; 0x2278 <GPIO_readPin+0xd0>
    220a:	47 c0       	rjmp	.+142    	; 0x229a <GPIO_readPin+0xf2>
		{
		case PORTA_ID:
            temp = CHECK_BIT(PINA,pin_num);
    220c:	e9 e3       	ldi	r30, 0x39	; 57
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	80 81       	ld	r24, Z
    2212:	28 2f       	mov	r18, r24
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	8b 81       	ldd	r24, Y+3	; 0x03
    2218:	88 2f       	mov	r24, r24
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	a9 01       	movw	r20, r18
    221e:	02 c0       	rjmp	.+4      	; 0x2224 <GPIO_readPin+0x7c>
    2220:	55 95       	asr	r21
    2222:	47 95       	ror	r20
    2224:	8a 95       	dec	r24
    2226:	e2 f7       	brpl	.-8      	; 0x2220 <GPIO_readPin+0x78>
    2228:	ca 01       	movw	r24, r20
    222a:	81 70       	andi	r24, 0x01	; 1
    222c:	89 83       	std	Y+1, r24	; 0x01
    222e:	35 c0       	rjmp	.+106    	; 0x229a <GPIO_readPin+0xf2>
			break;
		case PORTB_ID:
			temp = CHECK_BIT(PINB,pin_num);
    2230:	e6 e3       	ldi	r30, 0x36	; 54
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 81       	ld	r24, Z
    2236:	28 2f       	mov	r18, r24
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	8b 81       	ldd	r24, Y+3	; 0x03
    223c:	88 2f       	mov	r24, r24
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	a9 01       	movw	r20, r18
    2242:	02 c0       	rjmp	.+4      	; 0x2248 <GPIO_readPin+0xa0>
    2244:	55 95       	asr	r21
    2246:	47 95       	ror	r20
    2248:	8a 95       	dec	r24
    224a:	e2 f7       	brpl	.-8      	; 0x2244 <GPIO_readPin+0x9c>
    224c:	ca 01       	movw	r24, r20
    224e:	81 70       	andi	r24, 0x01	; 1
    2250:	89 83       	std	Y+1, r24	; 0x01
    2252:	23 c0       	rjmp	.+70     	; 0x229a <GPIO_readPin+0xf2>
			break;
		case PORTC_ID:
			temp = CHECK_BIT(PINC,pin_num);
    2254:	e3 e3       	ldi	r30, 0x33	; 51
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	28 2f       	mov	r18, r24
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	8b 81       	ldd	r24, Y+3	; 0x03
    2260:	88 2f       	mov	r24, r24
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	a9 01       	movw	r20, r18
    2266:	02 c0       	rjmp	.+4      	; 0x226c <GPIO_readPin+0xc4>
    2268:	55 95       	asr	r21
    226a:	47 95       	ror	r20
    226c:	8a 95       	dec	r24
    226e:	e2 f7       	brpl	.-8      	; 0x2268 <GPIO_readPin+0xc0>
    2270:	ca 01       	movw	r24, r20
    2272:	81 70       	andi	r24, 0x01	; 1
    2274:	89 83       	std	Y+1, r24	; 0x01
    2276:	11 c0       	rjmp	.+34     	; 0x229a <GPIO_readPin+0xf2>
			break;
		case PORTD_ID:
			temp = CHECK_BIT(PIND,pin_num);
    2278:	e0 e3       	ldi	r30, 0x30	; 48
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	80 81       	ld	r24, Z
    227e:	28 2f       	mov	r18, r24
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	8b 81       	ldd	r24, Y+3	; 0x03
    2284:	88 2f       	mov	r24, r24
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	a9 01       	movw	r20, r18
    228a:	02 c0       	rjmp	.+4      	; 0x2290 <GPIO_readPin+0xe8>
    228c:	55 95       	asr	r21
    228e:	47 95       	ror	r20
    2290:	8a 95       	dec	r24
    2292:	e2 f7       	brpl	.-8      	; 0x228c <GPIO_readPin+0xe4>
    2294:	ca 01       	movw	r24, r20
    2296:	81 70       	andi	r24, 0x01	; 1
    2298:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return temp;
    229a:	89 81       	ldd	r24, Y+1	; 0x01
}
    229c:	0f 90       	pop	r0
    229e:	0f 90       	pop	r0
    22a0:	0f 90       	pop	r0
    22a2:	0f 90       	pop	r0
    22a4:	0f 90       	pop	r0
    22a6:	cf 91       	pop	r28
    22a8:	df 91       	pop	r29
    22aa:	08 95       	ret

000022ac <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    22ac:	df 93       	push	r29
    22ae:	cf 93       	push	r28
    22b0:	00 d0       	rcall	.+0      	; 0x22b2 <GPIO_setupPortDirection+0x6>
    22b2:	00 d0       	rcall	.+0      	; 0x22b4 <GPIO_setupPortDirection+0x8>
    22b4:	cd b7       	in	r28, 0x3d	; 61
    22b6:	de b7       	in	r29, 0x3e	; 62
    22b8:	89 83       	std	Y+1, r24	; 0x01
    22ba:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    22bc:	89 81       	ldd	r24, Y+1	; 0x01
    22be:	84 30       	cpi	r24, 0x04	; 4
    22c0:	90 f5       	brcc	.+100    	; 0x2326 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    22c2:	89 81       	ldd	r24, Y+1	; 0x01
    22c4:	28 2f       	mov	r18, r24
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	3c 83       	std	Y+4, r19	; 0x04
    22ca:	2b 83       	std	Y+3, r18	; 0x03
    22cc:	8b 81       	ldd	r24, Y+3	; 0x03
    22ce:	9c 81       	ldd	r25, Y+4	; 0x04
    22d0:	81 30       	cpi	r24, 0x01	; 1
    22d2:	91 05       	cpc	r25, r1
    22d4:	d1 f0       	breq	.+52     	; 0x230a <GPIO_setupPortDirection+0x5e>
    22d6:	2b 81       	ldd	r18, Y+3	; 0x03
    22d8:	3c 81       	ldd	r19, Y+4	; 0x04
    22da:	22 30       	cpi	r18, 0x02	; 2
    22dc:	31 05       	cpc	r19, r1
    22de:	2c f4       	brge	.+10     	; 0x22ea <GPIO_setupPortDirection+0x3e>
    22e0:	8b 81       	ldd	r24, Y+3	; 0x03
    22e2:	9c 81       	ldd	r25, Y+4	; 0x04
    22e4:	00 97       	sbiw	r24, 0x00	; 0
    22e6:	61 f0       	breq	.+24     	; 0x2300 <GPIO_setupPortDirection+0x54>
    22e8:	1e c0       	rjmp	.+60     	; 0x2326 <GPIO_setupPortDirection+0x7a>
    22ea:	2b 81       	ldd	r18, Y+3	; 0x03
    22ec:	3c 81       	ldd	r19, Y+4	; 0x04
    22ee:	22 30       	cpi	r18, 0x02	; 2
    22f0:	31 05       	cpc	r19, r1
    22f2:	81 f0       	breq	.+32     	; 0x2314 <GPIO_setupPortDirection+0x68>
    22f4:	8b 81       	ldd	r24, Y+3	; 0x03
    22f6:	9c 81       	ldd	r25, Y+4	; 0x04
    22f8:	83 30       	cpi	r24, 0x03	; 3
    22fa:	91 05       	cpc	r25, r1
    22fc:	81 f0       	breq	.+32     	; 0x231e <GPIO_setupPortDirection+0x72>
    22fe:	13 c0       	rjmp	.+38     	; 0x2326 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2300:	ea e3       	ldi	r30, 0x3A	; 58
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	8a 81       	ldd	r24, Y+2	; 0x02
    2306:	80 83       	st	Z, r24
    2308:	0e c0       	rjmp	.+28     	; 0x2326 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    230a:	e7 e3       	ldi	r30, 0x37	; 55
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	8a 81       	ldd	r24, Y+2	; 0x02
    2310:	80 83       	st	Z, r24
    2312:	09 c0       	rjmp	.+18     	; 0x2326 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2314:	e4 e3       	ldi	r30, 0x34	; 52
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	8a 81       	ldd	r24, Y+2	; 0x02
    231a:	80 83       	st	Z, r24
    231c:	04 c0       	rjmp	.+8      	; 0x2326 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    231e:	e1 e3       	ldi	r30, 0x31	; 49
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	8a 81       	ldd	r24, Y+2	; 0x02
    2324:	80 83       	st	Z, r24
			break;
		}
	}
}
    2326:	0f 90       	pop	r0
    2328:	0f 90       	pop	r0
    232a:	0f 90       	pop	r0
    232c:	0f 90       	pop	r0
    232e:	cf 91       	pop	r28
    2330:	df 91       	pop	r29
    2332:	08 95       	ret

00002334 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2334:	df 93       	push	r29
    2336:	cf 93       	push	r28
    2338:	00 d0       	rcall	.+0      	; 0x233a <GPIO_writePort+0x6>
    233a:	00 d0       	rcall	.+0      	; 0x233c <GPIO_writePort+0x8>
    233c:	cd b7       	in	r28, 0x3d	; 61
    233e:	de b7       	in	r29, 0x3e	; 62
    2340:	89 83       	std	Y+1, r24	; 0x01
    2342:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    2344:	89 81       	ldd	r24, Y+1	; 0x01
    2346:	84 30       	cpi	r24, 0x04	; 4
    2348:	90 f5       	brcc	.+100    	; 0x23ae <GPIO_writePort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    234a:	89 81       	ldd	r24, Y+1	; 0x01
    234c:	28 2f       	mov	r18, r24
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	3c 83       	std	Y+4, r19	; 0x04
    2352:	2b 83       	std	Y+3, r18	; 0x03
    2354:	8b 81       	ldd	r24, Y+3	; 0x03
    2356:	9c 81       	ldd	r25, Y+4	; 0x04
    2358:	81 30       	cpi	r24, 0x01	; 1
    235a:	91 05       	cpc	r25, r1
    235c:	d1 f0       	breq	.+52     	; 0x2392 <GPIO_writePort+0x5e>
    235e:	2b 81       	ldd	r18, Y+3	; 0x03
    2360:	3c 81       	ldd	r19, Y+4	; 0x04
    2362:	22 30       	cpi	r18, 0x02	; 2
    2364:	31 05       	cpc	r19, r1
    2366:	2c f4       	brge	.+10     	; 0x2372 <GPIO_writePort+0x3e>
    2368:	8b 81       	ldd	r24, Y+3	; 0x03
    236a:	9c 81       	ldd	r25, Y+4	; 0x04
    236c:	00 97       	sbiw	r24, 0x00	; 0
    236e:	61 f0       	breq	.+24     	; 0x2388 <GPIO_writePort+0x54>
    2370:	1e c0       	rjmp	.+60     	; 0x23ae <GPIO_writePort+0x7a>
    2372:	2b 81       	ldd	r18, Y+3	; 0x03
    2374:	3c 81       	ldd	r19, Y+4	; 0x04
    2376:	22 30       	cpi	r18, 0x02	; 2
    2378:	31 05       	cpc	r19, r1
    237a:	81 f0       	breq	.+32     	; 0x239c <GPIO_writePort+0x68>
    237c:	8b 81       	ldd	r24, Y+3	; 0x03
    237e:	9c 81       	ldd	r25, Y+4	; 0x04
    2380:	83 30       	cpi	r24, 0x03	; 3
    2382:	91 05       	cpc	r25, r1
    2384:	81 f0       	breq	.+32     	; 0x23a6 <GPIO_writePort+0x72>
    2386:	13 c0       	rjmp	.+38     	; 0x23ae <GPIO_writePort+0x7a>
		{

		case PORTA_ID:
			PORTA=value;
    2388:	eb e3       	ldi	r30, 0x3B	; 59
    238a:	f0 e0       	ldi	r31, 0x00	; 0
    238c:	8a 81       	ldd	r24, Y+2	; 0x02
    238e:	80 83       	st	Z, r24
    2390:	0e c0       	rjmp	.+28     	; 0x23ae <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB=value;
    2392:	e8 e3       	ldi	r30, 0x38	; 56
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	8a 81       	ldd	r24, Y+2	; 0x02
    2398:	80 83       	st	Z, r24
    239a:	09 c0       	rjmp	.+18     	; 0x23ae <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC=value;
    239c:	e5 e3       	ldi	r30, 0x35	; 53
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	8a 81       	ldd	r24, Y+2	; 0x02
    23a2:	80 83       	st	Z, r24
    23a4:	04 c0       	rjmp	.+8      	; 0x23ae <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD=value;
    23a6:	e2 e3       	ldi	r30, 0x32	; 50
    23a8:	f0 e0       	ldi	r31, 0x00	; 0
    23aa:	8a 81       	ldd	r24, Y+2	; 0x02
    23ac:	80 83       	st	Z, r24
			break;

		}
	}
}
    23ae:	0f 90       	pop	r0
    23b0:	0f 90       	pop	r0
    23b2:	0f 90       	pop	r0
    23b4:	0f 90       	pop	r0
    23b6:	cf 91       	pop	r28
    23b8:	df 91       	pop	r29
    23ba:	08 95       	ret

000023bc <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    23bc:	df 93       	push	r29
    23be:	cf 93       	push	r28
    23c0:	00 d0       	rcall	.+0      	; 0x23c2 <GPIO_readPort+0x6>
    23c2:	00 d0       	rcall	.+0      	; 0x23c4 <GPIO_readPort+0x8>
    23c4:	0f 92       	push	r0
    23c6:	cd b7       	in	r28, 0x3d	; 61
    23c8:	de b7       	in	r29, 0x3e	; 62
    23ca:	8a 83       	std	Y+2, r24	; 0x02
	uint8 temp = 0;
    23cc:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
    23ce:	8a 81       	ldd	r24, Y+2	; 0x02
    23d0:	84 30       	cpi	r24, 0x04	; 4
    23d2:	18 f0       	brcs	.+6      	; 0x23da <GPIO_readPort+0x1e>
	{
		return temp;
    23d4:	29 81       	ldd	r18, Y+1	; 0x01
    23d6:	2d 83       	std	Y+5, r18	; 0x05
    23d8:	34 c0       	rjmp	.+104    	; 0x2442 <GPIO_readPort+0x86>
	}
	else
	{
		switch(port_num)
    23da:	8a 81       	ldd	r24, Y+2	; 0x02
    23dc:	28 2f       	mov	r18, r24
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	3c 83       	std	Y+4, r19	; 0x04
    23e2:	2b 83       	std	Y+3, r18	; 0x03
    23e4:	8b 81       	ldd	r24, Y+3	; 0x03
    23e6:	9c 81       	ldd	r25, Y+4	; 0x04
    23e8:	81 30       	cpi	r24, 0x01	; 1
    23ea:	91 05       	cpc	r25, r1
    23ec:	d1 f0       	breq	.+52     	; 0x2422 <GPIO_readPort+0x66>
    23ee:	2b 81       	ldd	r18, Y+3	; 0x03
    23f0:	3c 81       	ldd	r19, Y+4	; 0x04
    23f2:	22 30       	cpi	r18, 0x02	; 2
    23f4:	31 05       	cpc	r19, r1
    23f6:	2c f4       	brge	.+10     	; 0x2402 <GPIO_readPort+0x46>
    23f8:	8b 81       	ldd	r24, Y+3	; 0x03
    23fa:	9c 81       	ldd	r25, Y+4	; 0x04
    23fc:	00 97       	sbiw	r24, 0x00	; 0
    23fe:	61 f0       	breq	.+24     	; 0x2418 <GPIO_readPort+0x5c>
    2400:	1e c0       	rjmp	.+60     	; 0x243e <GPIO_readPort+0x82>
    2402:	2b 81       	ldd	r18, Y+3	; 0x03
    2404:	3c 81       	ldd	r19, Y+4	; 0x04
    2406:	22 30       	cpi	r18, 0x02	; 2
    2408:	31 05       	cpc	r19, r1
    240a:	81 f0       	breq	.+32     	; 0x242c <GPIO_readPort+0x70>
    240c:	8b 81       	ldd	r24, Y+3	; 0x03
    240e:	9c 81       	ldd	r25, Y+4	; 0x04
    2410:	83 30       	cpi	r24, 0x03	; 3
    2412:	91 05       	cpc	r25, r1
    2414:	81 f0       	breq	.+32     	; 0x2436 <GPIO_readPort+0x7a>
    2416:	13 c0       	rjmp	.+38     	; 0x243e <GPIO_readPort+0x82>
		{

		case PORTA_ID:
            temp = PINA;
    2418:	e9 e3       	ldi	r30, 0x39	; 57
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	80 81       	ld	r24, Z
    241e:	89 83       	std	Y+1, r24	; 0x01
    2420:	0e c0       	rjmp	.+28     	; 0x243e <GPIO_readPort+0x82>
			break;
		case PORTB_ID:
			temp = PINB;
    2422:	e6 e3       	ldi	r30, 0x36	; 54
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	80 81       	ld	r24, Z
    2428:	89 83       	std	Y+1, r24	; 0x01
    242a:	09 c0       	rjmp	.+18     	; 0x243e <GPIO_readPort+0x82>
			break;
		case PORTC_ID:
			temp = PINC;
    242c:	e3 e3       	ldi	r30, 0x33	; 51
    242e:	f0 e0       	ldi	r31, 0x00	; 0
    2430:	80 81       	ld	r24, Z
    2432:	89 83       	std	Y+1, r24	; 0x01
    2434:	04 c0       	rjmp	.+8      	; 0x243e <GPIO_readPort+0x82>
			break;
		case PORTD_ID:
			temp = PIND;
    2436:	e0 e3       	ldi	r30, 0x30	; 48
    2438:	f0 e0       	ldi	r31, 0x00	; 0
    243a:	80 81       	ld	r24, Z
    243c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return temp;
    243e:	99 81       	ldd	r25, Y+1	; 0x01
    2440:	9d 83       	std	Y+5, r25	; 0x05
    2442:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2444:	0f 90       	pop	r0
    2446:	0f 90       	pop	r0
    2448:	0f 90       	pop	r0
    244a:	0f 90       	pop	r0
    244c:	0f 90       	pop	r0
    244e:	cf 91       	pop	r28
    2450:	df 91       	pop	r29
    2452:	08 95       	ret

00002454 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    2454:	df 93       	push	r29
    2456:	cf 93       	push	r28
    2458:	00 d0       	rcall	.+0      	; 0x245a <KEYPAD_getPressedKey+0x6>
    245a:	0f 92       	push	r0
    245c:	cd b7       	in	r28, 0x3d	; 61
    245e:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    2460:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2462:	1b 82       	std	Y+3, r1	; 0x03
    2464:	42 c0       	rjmp	.+132    	; 0x24ea <KEYPAD_getPressedKey+0x96>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    2466:	82 e0       	ldi	r24, 0x02	; 2
    2468:	60 e0       	ldi	r22, 0x00	; 0
    246a:	0e 94 56 11 	call	0x22ac	; 0x22ac <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    246e:	8b 81       	ldd	r24, Y+3	; 0x03
    2470:	98 2f       	mov	r25, r24
    2472:	9c 5f       	subi	r25, 0xFC	; 252
    2474:	82 e0       	ldi	r24, 0x02	; 2
    2476:	69 2f       	mov	r22, r25
    2478:	41 e0       	ldi	r20, 0x01	; 1
    247a:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <GPIO_setupPinDirection>
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    247e:	8b 81       	ldd	r24, Y+3	; 0x03
    2480:	88 2f       	mov	r24, r24
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	9c 01       	movw	r18, r24
    2486:	2c 5f       	subi	r18, 0xFC	; 252
    2488:	3f 4f       	sbci	r19, 0xFF	; 255
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	02 c0       	rjmp	.+4      	; 0x2494 <KEYPAD_getPressedKey+0x40>
    2490:	88 0f       	add	r24, r24
    2492:	99 1f       	adc	r25, r25
    2494:	2a 95       	dec	r18
    2496:	e2 f7       	brpl	.-8      	; 0x2490 <KEYPAD_getPressedKey+0x3c>
    2498:	89 83       	std	Y+1, r24	; 0x01
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    249a:	82 e0       	ldi	r24, 0x02	; 2
    249c:	69 81       	ldd	r22, Y+1	; 0x01
    249e:	0e 94 9a 11 	call	0x2334	; 0x2334 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    24a2:	1a 82       	std	Y+2, r1	; 0x02
    24a4:	1c c0       	rjmp	.+56     	; 0x24de <KEYPAD_getPressedKey+0x8a>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    24a6:	82 e0       	ldi	r24, 0x02	; 2
    24a8:	6a 81       	ldd	r22, Y+2	; 0x02
    24aa:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <GPIO_readPin>
    24ae:	81 30       	cpi	r24, 0x01	; 1
    24b0:	99 f4       	brne	.+38     	; 0x24d8 <KEYPAD_getPressedKey+0x84>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    24b2:	8a 81       	ldd	r24, Y+2	; 0x02
    24b4:	88 2f       	mov	r24, r24
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	88 0f       	add	r24, r24
    24ba:	99 1f       	adc	r25, r25
    24bc:	88 0f       	add	r24, r24
    24be:	99 1f       	adc	r25, r25
    24c0:	98 2f       	mov	r25, r24
    24c2:	8b 81       	ldd	r24, Y+3	; 0x03
    24c4:	89 0f       	add	r24, r25
    24c6:	8f 5f       	subi	r24, 0xFF	; 255
    24c8:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    24cc:	0f 90       	pop	r0
    24ce:	0f 90       	pop	r0
    24d0:	0f 90       	pop	r0
    24d2:	cf 91       	pop	r28
    24d4:	df 91       	pop	r29
    24d6:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    24d8:	8a 81       	ldd	r24, Y+2	; 0x02
    24da:	8f 5f       	subi	r24, 0xFF	; 255
    24dc:	8a 83       	std	Y+2, r24	; 0x02
    24de:	8a 81       	ldd	r24, Y+2	; 0x02
    24e0:	84 30       	cpi	r24, 0x04	; 4
    24e2:	08 f3       	brcs	.-62     	; 0x24a6 <KEYPAD_getPressedKey+0x52>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    24e4:	8b 81       	ldd	r24, Y+3	; 0x03
    24e6:	8f 5f       	subi	r24, 0xFF	; 255
    24e8:	8b 83       	std	Y+3, r24	; 0x03
    24ea:	8b 81       	ldd	r24, Y+3	; 0x03
    24ec:	84 30       	cpi	r24, 0x04	; 4
    24ee:	08 f4       	brcc	.+2      	; 0x24f2 <KEYPAD_getPressedKey+0x9e>
    24f0:	ba cf       	rjmp	.-140    	; 0x2466 <KEYPAD_getPressedKey+0x12>
    24f2:	b7 cf       	rjmp	.-146    	; 0x2462 <KEYPAD_getPressedKey+0xe>

000024f4 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    24f4:	df 93       	push	r29
    24f6:	cf 93       	push	r28
    24f8:	00 d0       	rcall	.+0      	; 0x24fa <KEYPAD_4x4_adjustKeyNumber+0x6>
    24fa:	00 d0       	rcall	.+0      	; 0x24fc <KEYPAD_4x4_adjustKeyNumber+0x8>
    24fc:	cd b7       	in	r28, 0x3d	; 61
    24fe:	de b7       	in	r29, 0x3e	; 62
    2500:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2502:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2504:	8a 81       	ldd	r24, Y+2	; 0x02
    2506:	28 2f       	mov	r18, r24
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	3c 83       	std	Y+4, r19	; 0x04
    250c:	2b 83       	std	Y+3, r18	; 0x03
    250e:	8b 81       	ldd	r24, Y+3	; 0x03
    2510:	9c 81       	ldd	r25, Y+4	; 0x04
    2512:	88 30       	cpi	r24, 0x08	; 8
    2514:	91 05       	cpc	r25, r1
    2516:	09 f4       	brne	.+2      	; 0x251a <KEYPAD_4x4_adjustKeyNumber+0x26>
    2518:	70 c0       	rjmp	.+224    	; 0x25fa <KEYPAD_4x4_adjustKeyNumber+0x106>
    251a:	2b 81       	ldd	r18, Y+3	; 0x03
    251c:	3c 81       	ldd	r19, Y+4	; 0x04
    251e:	29 30       	cpi	r18, 0x09	; 9
    2520:	31 05       	cpc	r19, r1
    2522:	5c f5       	brge	.+86     	; 0x257a <KEYPAD_4x4_adjustKeyNumber+0x86>
    2524:	8b 81       	ldd	r24, Y+3	; 0x03
    2526:	9c 81       	ldd	r25, Y+4	; 0x04
    2528:	84 30       	cpi	r24, 0x04	; 4
    252a:	91 05       	cpc	r25, r1
    252c:	09 f4       	brne	.+2      	; 0x2530 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    252e:	59 c0       	rjmp	.+178    	; 0x25e2 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2530:	2b 81       	ldd	r18, Y+3	; 0x03
    2532:	3c 81       	ldd	r19, Y+4	; 0x04
    2534:	25 30       	cpi	r18, 0x05	; 5
    2536:	31 05       	cpc	r19, r1
    2538:	9c f4       	brge	.+38     	; 0x2560 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    253a:	8b 81       	ldd	r24, Y+3	; 0x03
    253c:	9c 81       	ldd	r25, Y+4	; 0x04
    253e:	82 30       	cpi	r24, 0x02	; 2
    2540:	91 05       	cpc	r25, r1
    2542:	09 f4       	brne	.+2      	; 0x2546 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2544:	48 c0       	rjmp	.+144    	; 0x25d6 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2546:	2b 81       	ldd	r18, Y+3	; 0x03
    2548:	3c 81       	ldd	r19, Y+4	; 0x04
    254a:	23 30       	cpi	r18, 0x03	; 3
    254c:	31 05       	cpc	r19, r1
    254e:	0c f0       	brlt	.+2      	; 0x2552 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2550:	45 c0       	rjmp	.+138    	; 0x25dc <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2552:	8b 81       	ldd	r24, Y+3	; 0x03
    2554:	9c 81       	ldd	r25, Y+4	; 0x04
    2556:	81 30       	cpi	r24, 0x01	; 1
    2558:	91 05       	cpc	r25, r1
    255a:	09 f4       	brne	.+2      	; 0x255e <KEYPAD_4x4_adjustKeyNumber+0x6a>
    255c:	39 c0       	rjmp	.+114    	; 0x25d0 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    255e:	67 c0       	rjmp	.+206    	; 0x262e <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2560:	2b 81       	ldd	r18, Y+3	; 0x03
    2562:	3c 81       	ldd	r19, Y+4	; 0x04
    2564:	26 30       	cpi	r18, 0x06	; 6
    2566:	31 05       	cpc	r19, r1
    2568:	09 f4       	brne	.+2      	; 0x256c <KEYPAD_4x4_adjustKeyNumber+0x78>
    256a:	41 c0       	rjmp	.+130    	; 0x25ee <KEYPAD_4x4_adjustKeyNumber+0xfa>
    256c:	8b 81       	ldd	r24, Y+3	; 0x03
    256e:	9c 81       	ldd	r25, Y+4	; 0x04
    2570:	87 30       	cpi	r24, 0x07	; 7
    2572:	91 05       	cpc	r25, r1
    2574:	0c f0       	brlt	.+2      	; 0x2578 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2576:	3e c0       	rjmp	.+124    	; 0x25f4 <KEYPAD_4x4_adjustKeyNumber+0x100>
    2578:	37 c0       	rjmp	.+110    	; 0x25e8 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    257a:	2b 81       	ldd	r18, Y+3	; 0x03
    257c:	3c 81       	ldd	r19, Y+4	; 0x04
    257e:	2c 30       	cpi	r18, 0x0C	; 12
    2580:	31 05       	cpc	r19, r1
    2582:	09 f4       	brne	.+2      	; 0x2586 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2584:	46 c0       	rjmp	.+140    	; 0x2612 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2586:	8b 81       	ldd	r24, Y+3	; 0x03
    2588:	9c 81       	ldd	r25, Y+4	; 0x04
    258a:	8d 30       	cpi	r24, 0x0D	; 13
    258c:	91 05       	cpc	r25, r1
    258e:	5c f4       	brge	.+22     	; 0x25a6 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2590:	2b 81       	ldd	r18, Y+3	; 0x03
    2592:	3c 81       	ldd	r19, Y+4	; 0x04
    2594:	2a 30       	cpi	r18, 0x0A	; 10
    2596:	31 05       	cpc	r19, r1
    2598:	b1 f1       	breq	.+108    	; 0x2606 <KEYPAD_4x4_adjustKeyNumber+0x112>
    259a:	8b 81       	ldd	r24, Y+3	; 0x03
    259c:	9c 81       	ldd	r25, Y+4	; 0x04
    259e:	8b 30       	cpi	r24, 0x0B	; 11
    25a0:	91 05       	cpc	r25, r1
    25a2:	a4 f5       	brge	.+104    	; 0x260c <KEYPAD_4x4_adjustKeyNumber+0x118>
    25a4:	2d c0       	rjmp	.+90     	; 0x2600 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    25a6:	2b 81       	ldd	r18, Y+3	; 0x03
    25a8:	3c 81       	ldd	r19, Y+4	; 0x04
    25aa:	2e 30       	cpi	r18, 0x0E	; 14
    25ac:	31 05       	cpc	r19, r1
    25ae:	b9 f1       	breq	.+110    	; 0x261e <KEYPAD_4x4_adjustKeyNumber+0x12a>
    25b0:	8b 81       	ldd	r24, Y+3	; 0x03
    25b2:	9c 81       	ldd	r25, Y+4	; 0x04
    25b4:	8e 30       	cpi	r24, 0x0E	; 14
    25b6:	91 05       	cpc	r25, r1
    25b8:	7c f1       	brlt	.+94     	; 0x2618 <KEYPAD_4x4_adjustKeyNumber+0x124>
    25ba:	2b 81       	ldd	r18, Y+3	; 0x03
    25bc:	3c 81       	ldd	r19, Y+4	; 0x04
    25be:	2f 30       	cpi	r18, 0x0F	; 15
    25c0:	31 05       	cpc	r19, r1
    25c2:	79 f1       	breq	.+94     	; 0x2622 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    25c4:	8b 81       	ldd	r24, Y+3	; 0x03
    25c6:	9c 81       	ldd	r25, Y+4	; 0x04
    25c8:	80 31       	cpi	r24, 0x10	; 16
    25ca:	91 05       	cpc	r25, r1
    25cc:	69 f1       	breq	.+90     	; 0x2628 <KEYPAD_4x4_adjustKeyNumber+0x134>
    25ce:	2f c0       	rjmp	.+94     	; 0x262e <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    25d0:	87 e0       	ldi	r24, 0x07	; 7
    25d2:	89 83       	std	Y+1, r24	; 0x01
    25d4:	2e c0       	rjmp	.+92     	; 0x2632 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    25d6:	88 e0       	ldi	r24, 0x08	; 8
    25d8:	89 83       	std	Y+1, r24	; 0x01
    25da:	2b c0       	rjmp	.+86     	; 0x2632 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    25dc:	89 e0       	ldi	r24, 0x09	; 9
    25de:	89 83       	std	Y+1, r24	; 0x01
    25e0:	28 c0       	rjmp	.+80     	; 0x2632 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    25e2:	85 e2       	ldi	r24, 0x25	; 37
    25e4:	89 83       	std	Y+1, r24	; 0x01
    25e6:	25 c0       	rjmp	.+74     	; 0x2632 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    25e8:	84 e0       	ldi	r24, 0x04	; 4
    25ea:	89 83       	std	Y+1, r24	; 0x01
    25ec:	22 c0       	rjmp	.+68     	; 0x2632 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    25ee:	85 e0       	ldi	r24, 0x05	; 5
    25f0:	89 83       	std	Y+1, r24	; 0x01
    25f2:	1f c0       	rjmp	.+62     	; 0x2632 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    25f4:	86 e0       	ldi	r24, 0x06	; 6
    25f6:	89 83       	std	Y+1, r24	; 0x01
    25f8:	1c c0       	rjmp	.+56     	; 0x2632 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    25fa:	8a e2       	ldi	r24, 0x2A	; 42
    25fc:	89 83       	std	Y+1, r24	; 0x01
    25fe:	19 c0       	rjmp	.+50     	; 0x2632 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2600:	81 e0       	ldi	r24, 0x01	; 1
    2602:	89 83       	std	Y+1, r24	; 0x01
    2604:	16 c0       	rjmp	.+44     	; 0x2632 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2606:	82 e0       	ldi	r24, 0x02	; 2
    2608:	89 83       	std	Y+1, r24	; 0x01
    260a:	13 c0       	rjmp	.+38     	; 0x2632 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    260c:	83 e0       	ldi	r24, 0x03	; 3
    260e:	89 83       	std	Y+1, r24	; 0x01
    2610:	10 c0       	rjmp	.+32     	; 0x2632 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2612:	8d e2       	ldi	r24, 0x2D	; 45
    2614:	89 83       	std	Y+1, r24	; 0x01
    2616:	0d c0       	rjmp	.+26     	; 0x2632 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2618:	8d e0       	ldi	r24, 0x0D	; 13
    261a:	89 83       	std	Y+1, r24	; 0x01
    261c:	0a c0       	rjmp	.+20     	; 0x2632 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    261e:	19 82       	std	Y+1, r1	; 0x01
    2620:	08 c0       	rjmp	.+16     	; 0x2632 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2622:	8d e3       	ldi	r24, 0x3D	; 61
    2624:	89 83       	std	Y+1, r24	; 0x01
    2626:	05 c0       	rjmp	.+10     	; 0x2632 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2628:	8b e2       	ldi	r24, 0x2B	; 43
    262a:	89 83       	std	Y+1, r24	; 0x01
    262c:	02 c0       	rjmp	.+4      	; 0x2632 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    262e:	8a 81       	ldd	r24, Y+2	; 0x02
    2630:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2632:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2634:	0f 90       	pop	r0
    2636:	0f 90       	pop	r0
    2638:	0f 90       	pop	r0
    263a:	0f 90       	pop	r0
    263c:	cf 91       	pop	r28
    263e:	df 91       	pop	r29
    2640:	08 95       	ret

00002642 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2642:	df 93       	push	r29
    2644:	cf 93       	push	r28
    2646:	cd b7       	in	r28, 0x3d	; 61
    2648:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	60 e0       	ldi	r22, 0x00	; 0
    264e:	41 e0       	ldi	r20, 0x01	; 1
    2650:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    2654:	81 e0       	ldi	r24, 0x01	; 1
    2656:	61 e0       	ldi	r22, 0x01	; 1
    2658:	41 e0       	ldi	r20, 0x01	; 1
    265a:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	62 e0       	ldi	r22, 0x02	; 2
    2662:	41 e0       	ldi	r20, 0x01	; 1
    2664:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2668:	80 e0       	ldi	r24, 0x00	; 0
    266a:	6f ef       	ldi	r22, 0xFF	; 255
    266c:	0e 94 56 11 	call	0x22ac	; 0x22ac <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    2670:	88 e3       	ldi	r24, 0x38	; 56
    2672:	0e 94 44 13 	call	0x2688	; 0x2688 <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2676:	8c e0       	ldi	r24, 0x0C	; 12
    2678:	0e 94 44 13 	call	0x2688	; 0x2688 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    267c:	81 e0       	ldi	r24, 0x01	; 1
    267e:	0e 94 44 13 	call	0x2688	; 0x2688 <LCD_sendCommand>
}
    2682:	cf 91       	pop	r28
    2684:	df 91       	pop	r29
    2686:	08 95       	ret

00002688 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2688:	df 93       	push	r29
    268a:	cf 93       	push	r28
    268c:	cd b7       	in	r28, 0x3d	; 61
    268e:	de b7       	in	r29, 0x3e	; 62
    2690:	ea 97       	sbiw	r28, 0x3a	; 58
    2692:	0f b6       	in	r0, 0x3f	; 63
    2694:	f8 94       	cli
    2696:	de bf       	out	0x3e, r29	; 62
    2698:	0f be       	out	0x3f, r0	; 63
    269a:	cd bf       	out	0x3d, r28	; 61
    269c:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    269e:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	60 e0       	ldi	r22, 0x00	; 0
    26a4:	40 e0       	ldi	r20, 0x00	; 0
    26a6:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    26aa:	81 e0       	ldi	r24, 0x01	; 1
    26ac:	61 e0       	ldi	r22, 0x01	; 1
    26ae:	40 e0       	ldi	r20, 0x00	; 0
    26b0:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <GPIO_writePin>
    26b4:	80 e0       	ldi	r24, 0x00	; 0
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	a0 e8       	ldi	r26, 0x80	; 128
    26ba:	bf e3       	ldi	r27, 0x3F	; 63
    26bc:	8d ab       	std	Y+53, r24	; 0x35
    26be:	9e ab       	std	Y+54, r25	; 0x36
    26c0:	af ab       	std	Y+55, r26	; 0x37
    26c2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26c4:	6d a9       	ldd	r22, Y+53	; 0x35
    26c6:	7e a9       	ldd	r23, Y+54	; 0x36
    26c8:	8f a9       	ldd	r24, Y+55	; 0x37
    26ca:	98 ad       	ldd	r25, Y+56	; 0x38
    26cc:	20 e0       	ldi	r18, 0x00	; 0
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	4a ef       	ldi	r20, 0xFA	; 250
    26d2:	54 e4       	ldi	r21, 0x44	; 68
    26d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d8:	dc 01       	movw	r26, r24
    26da:	cb 01       	movw	r24, r22
    26dc:	89 ab       	std	Y+49, r24	; 0x31
    26de:	9a ab       	std	Y+50, r25	; 0x32
    26e0:	ab ab       	std	Y+51, r26	; 0x33
    26e2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    26e4:	69 a9       	ldd	r22, Y+49	; 0x31
    26e6:	7a a9       	ldd	r23, Y+50	; 0x32
    26e8:	8b a9       	ldd	r24, Y+51	; 0x33
    26ea:	9c a9       	ldd	r25, Y+52	; 0x34
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	40 e8       	ldi	r20, 0x80	; 128
    26f2:	5f e3       	ldi	r21, 0x3F	; 63
    26f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26f8:	88 23       	and	r24, r24
    26fa:	2c f4       	brge	.+10     	; 0x2706 <LCD_sendCommand+0x7e>
		__ticks = 1;
    26fc:	81 e0       	ldi	r24, 0x01	; 1
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	98 ab       	std	Y+48, r25	; 0x30
    2702:	8f a7       	std	Y+47, r24	; 0x2f
    2704:	3f c0       	rjmp	.+126    	; 0x2784 <LCD_sendCommand+0xfc>
	else if (__tmp > 65535)
    2706:	69 a9       	ldd	r22, Y+49	; 0x31
    2708:	7a a9       	ldd	r23, Y+50	; 0x32
    270a:	8b a9       	ldd	r24, Y+51	; 0x33
    270c:	9c a9       	ldd	r25, Y+52	; 0x34
    270e:	20 e0       	ldi	r18, 0x00	; 0
    2710:	3f ef       	ldi	r19, 0xFF	; 255
    2712:	4f e7       	ldi	r20, 0x7F	; 127
    2714:	57 e4       	ldi	r21, 0x47	; 71
    2716:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    271a:	18 16       	cp	r1, r24
    271c:	4c f5       	brge	.+82     	; 0x2770 <LCD_sendCommand+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    271e:	6d a9       	ldd	r22, Y+53	; 0x35
    2720:	7e a9       	ldd	r23, Y+54	; 0x36
    2722:	8f a9       	ldd	r24, Y+55	; 0x37
    2724:	98 ad       	ldd	r25, Y+56	; 0x38
    2726:	20 e0       	ldi	r18, 0x00	; 0
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	40 e2       	ldi	r20, 0x20	; 32
    272c:	51 e4       	ldi	r21, 0x41	; 65
    272e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	bc 01       	movw	r22, r24
    2738:	cd 01       	movw	r24, r26
    273a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    273e:	dc 01       	movw	r26, r24
    2740:	cb 01       	movw	r24, r22
    2742:	98 ab       	std	Y+48, r25	; 0x30
    2744:	8f a7       	std	Y+47, r24	; 0x2f
    2746:	0f c0       	rjmp	.+30     	; 0x2766 <LCD_sendCommand+0xde>
    2748:	88 ec       	ldi	r24, 0xC8	; 200
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	9e a7       	std	Y+46, r25	; 0x2e
    274e:	8d a7       	std	Y+45, r24	; 0x2d
    2750:	8d a5       	ldd	r24, Y+45	; 0x2d
    2752:	9e a5       	ldd	r25, Y+46	; 0x2e
    2754:	01 97       	sbiw	r24, 0x01	; 1
    2756:	f1 f7       	brne	.-4      	; 0x2754 <LCD_sendCommand+0xcc>
    2758:	9e a7       	std	Y+46, r25	; 0x2e
    275a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    275c:	8f a5       	ldd	r24, Y+47	; 0x2f
    275e:	98 a9       	ldd	r25, Y+48	; 0x30
    2760:	01 97       	sbiw	r24, 0x01	; 1
    2762:	98 ab       	std	Y+48, r25	; 0x30
    2764:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2766:	8f a5       	ldd	r24, Y+47	; 0x2f
    2768:	98 a9       	ldd	r25, Y+48	; 0x30
    276a:	00 97       	sbiw	r24, 0x00	; 0
    276c:	69 f7       	brne	.-38     	; 0x2748 <LCD_sendCommand+0xc0>
    276e:	14 c0       	rjmp	.+40     	; 0x2798 <LCD_sendCommand+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2770:	69 a9       	ldd	r22, Y+49	; 0x31
    2772:	7a a9       	ldd	r23, Y+50	; 0x32
    2774:	8b a9       	ldd	r24, Y+51	; 0x33
    2776:	9c a9       	ldd	r25, Y+52	; 0x34
    2778:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    277c:	dc 01       	movw	r26, r24
    277e:	cb 01       	movw	r24, r22
    2780:	98 ab       	std	Y+48, r25	; 0x30
    2782:	8f a7       	std	Y+47, r24	; 0x2f
    2784:	8f a5       	ldd	r24, Y+47	; 0x2f
    2786:	98 a9       	ldd	r25, Y+48	; 0x30
    2788:	9c a7       	std	Y+44, r25	; 0x2c
    278a:	8b a7       	std	Y+43, r24	; 0x2b
    278c:	8b a5       	ldd	r24, Y+43	; 0x2b
    278e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2790:	01 97       	sbiw	r24, 0x01	; 1
    2792:	f1 f7       	brne	.-4      	; 0x2790 <LCD_sendCommand+0x108>
    2794:	9c a7       	std	Y+44, r25	; 0x2c
    2796:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	62 e0       	ldi	r22, 0x02	; 2
    279c:	41 e0       	ldi	r20, 0x01	; 1
    279e:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <GPIO_writePin>
    27a2:	80 e0       	ldi	r24, 0x00	; 0
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	a0 e8       	ldi	r26, 0x80	; 128
    27a8:	bf e3       	ldi	r27, 0x3F	; 63
    27aa:	8f a3       	std	Y+39, r24	; 0x27
    27ac:	98 a7       	std	Y+40, r25	; 0x28
    27ae:	a9 a7       	std	Y+41, r26	; 0x29
    27b0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27b2:	6f a1       	ldd	r22, Y+39	; 0x27
    27b4:	78 a5       	ldd	r23, Y+40	; 0x28
    27b6:	89 a5       	ldd	r24, Y+41	; 0x29
    27b8:	9a a5       	ldd	r25, Y+42	; 0x2a
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	4a ef       	ldi	r20, 0xFA	; 250
    27c0:	54 e4       	ldi	r21, 0x44	; 68
    27c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c6:	dc 01       	movw	r26, r24
    27c8:	cb 01       	movw	r24, r22
    27ca:	8b a3       	std	Y+35, r24	; 0x23
    27cc:	9c a3       	std	Y+36, r25	; 0x24
    27ce:	ad a3       	std	Y+37, r26	; 0x25
    27d0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    27d2:	6b a1       	ldd	r22, Y+35	; 0x23
    27d4:	7c a1       	ldd	r23, Y+36	; 0x24
    27d6:	8d a1       	ldd	r24, Y+37	; 0x25
    27d8:	9e a1       	ldd	r25, Y+38	; 0x26
    27da:	20 e0       	ldi	r18, 0x00	; 0
    27dc:	30 e0       	ldi	r19, 0x00	; 0
    27de:	40 e8       	ldi	r20, 0x80	; 128
    27e0:	5f e3       	ldi	r21, 0x3F	; 63
    27e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27e6:	88 23       	and	r24, r24
    27e8:	2c f4       	brge	.+10     	; 0x27f4 <LCD_sendCommand+0x16c>
		__ticks = 1;
    27ea:	81 e0       	ldi	r24, 0x01	; 1
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	9a a3       	std	Y+34, r25	; 0x22
    27f0:	89 a3       	std	Y+33, r24	; 0x21
    27f2:	3f c0       	rjmp	.+126    	; 0x2872 <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    27f4:	6b a1       	ldd	r22, Y+35	; 0x23
    27f6:	7c a1       	ldd	r23, Y+36	; 0x24
    27f8:	8d a1       	ldd	r24, Y+37	; 0x25
    27fa:	9e a1       	ldd	r25, Y+38	; 0x26
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	3f ef       	ldi	r19, 0xFF	; 255
    2800:	4f e7       	ldi	r20, 0x7F	; 127
    2802:	57 e4       	ldi	r21, 0x47	; 71
    2804:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2808:	18 16       	cp	r1, r24
    280a:	4c f5       	brge	.+82     	; 0x285e <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    280c:	6f a1       	ldd	r22, Y+39	; 0x27
    280e:	78 a5       	ldd	r23, Y+40	; 0x28
    2810:	89 a5       	ldd	r24, Y+41	; 0x29
    2812:	9a a5       	ldd	r25, Y+42	; 0x2a
    2814:	20 e0       	ldi	r18, 0x00	; 0
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	40 e2       	ldi	r20, 0x20	; 32
    281a:	51 e4       	ldi	r21, 0x41	; 65
    281c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2820:	dc 01       	movw	r26, r24
    2822:	cb 01       	movw	r24, r22
    2824:	bc 01       	movw	r22, r24
    2826:	cd 01       	movw	r24, r26
    2828:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    282c:	dc 01       	movw	r26, r24
    282e:	cb 01       	movw	r24, r22
    2830:	9a a3       	std	Y+34, r25	; 0x22
    2832:	89 a3       	std	Y+33, r24	; 0x21
    2834:	0f c0       	rjmp	.+30     	; 0x2854 <LCD_sendCommand+0x1cc>
    2836:	88 ec       	ldi	r24, 0xC8	; 200
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	98 a3       	std	Y+32, r25	; 0x20
    283c:	8f 8f       	std	Y+31, r24	; 0x1f
    283e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2840:	98 a1       	ldd	r25, Y+32	; 0x20
    2842:	01 97       	sbiw	r24, 0x01	; 1
    2844:	f1 f7       	brne	.-4      	; 0x2842 <LCD_sendCommand+0x1ba>
    2846:	98 a3       	std	Y+32, r25	; 0x20
    2848:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    284a:	89 a1       	ldd	r24, Y+33	; 0x21
    284c:	9a a1       	ldd	r25, Y+34	; 0x22
    284e:	01 97       	sbiw	r24, 0x01	; 1
    2850:	9a a3       	std	Y+34, r25	; 0x22
    2852:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2854:	89 a1       	ldd	r24, Y+33	; 0x21
    2856:	9a a1       	ldd	r25, Y+34	; 0x22
    2858:	00 97       	sbiw	r24, 0x00	; 0
    285a:	69 f7       	brne	.-38     	; 0x2836 <LCD_sendCommand+0x1ae>
    285c:	14 c0       	rjmp	.+40     	; 0x2886 <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    285e:	6b a1       	ldd	r22, Y+35	; 0x23
    2860:	7c a1       	ldd	r23, Y+36	; 0x24
    2862:	8d a1       	ldd	r24, Y+37	; 0x25
    2864:	9e a1       	ldd	r25, Y+38	; 0x26
    2866:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	9a a3       	std	Y+34, r25	; 0x22
    2870:	89 a3       	std	Y+33, r24	; 0x21
    2872:	89 a1       	ldd	r24, Y+33	; 0x21
    2874:	9a a1       	ldd	r25, Y+34	; 0x22
    2876:	9e 8f       	std	Y+30, r25	; 0x1e
    2878:	8d 8f       	std	Y+29, r24	; 0x1d
    287a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    287c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    287e:	01 97       	sbiw	r24, 0x01	; 1
    2880:	f1 f7       	brne	.-4      	; 0x287e <LCD_sendCommand+0x1f6>
    2882:	9e 8f       	std	Y+30, r25	; 0x1e
    2884:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2886:	80 e0       	ldi	r24, 0x00	; 0
    2888:	6a ad       	ldd	r22, Y+58	; 0x3a
    288a:	0e 94 9a 11 	call	0x2334	; 0x2334 <GPIO_writePort>
    288e:	80 e0       	ldi	r24, 0x00	; 0
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	a0 e8       	ldi	r26, 0x80	; 128
    2894:	bf e3       	ldi	r27, 0x3F	; 63
    2896:	89 8f       	std	Y+25, r24	; 0x19
    2898:	9a 8f       	std	Y+26, r25	; 0x1a
    289a:	ab 8f       	std	Y+27, r26	; 0x1b
    289c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    289e:	69 8d       	ldd	r22, Y+25	; 0x19
    28a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	4a ef       	ldi	r20, 0xFA	; 250
    28ac:	54 e4       	ldi	r21, 0x44	; 68
    28ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	8d 8b       	std	Y+21, r24	; 0x15
    28b8:	9e 8b       	std	Y+22, r25	; 0x16
    28ba:	af 8b       	std	Y+23, r26	; 0x17
    28bc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28be:	6d 89       	ldd	r22, Y+21	; 0x15
    28c0:	7e 89       	ldd	r23, Y+22	; 0x16
    28c2:	8f 89       	ldd	r24, Y+23	; 0x17
    28c4:	98 8d       	ldd	r25, Y+24	; 0x18
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	40 e8       	ldi	r20, 0x80	; 128
    28cc:	5f e3       	ldi	r21, 0x3F	; 63
    28ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28d2:	88 23       	and	r24, r24
    28d4:	2c f4       	brge	.+10     	; 0x28e0 <LCD_sendCommand+0x258>
		__ticks = 1;
    28d6:	81 e0       	ldi	r24, 0x01	; 1
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	9c 8b       	std	Y+20, r25	; 0x14
    28dc:	8b 8b       	std	Y+19, r24	; 0x13
    28de:	3f c0       	rjmp	.+126    	; 0x295e <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    28e0:	6d 89       	ldd	r22, Y+21	; 0x15
    28e2:	7e 89       	ldd	r23, Y+22	; 0x16
    28e4:	8f 89       	ldd	r24, Y+23	; 0x17
    28e6:	98 8d       	ldd	r25, Y+24	; 0x18
    28e8:	20 e0       	ldi	r18, 0x00	; 0
    28ea:	3f ef       	ldi	r19, 0xFF	; 255
    28ec:	4f e7       	ldi	r20, 0x7F	; 127
    28ee:	57 e4       	ldi	r21, 0x47	; 71
    28f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28f4:	18 16       	cp	r1, r24
    28f6:	4c f5       	brge	.+82     	; 0x294a <LCD_sendCommand+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28f8:	69 8d       	ldd	r22, Y+25	; 0x19
    28fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	40 e2       	ldi	r20, 0x20	; 32
    2906:	51 e4       	ldi	r21, 0x41	; 65
    2908:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    290c:	dc 01       	movw	r26, r24
    290e:	cb 01       	movw	r24, r22
    2910:	bc 01       	movw	r22, r24
    2912:	cd 01       	movw	r24, r26
    2914:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2918:	dc 01       	movw	r26, r24
    291a:	cb 01       	movw	r24, r22
    291c:	9c 8b       	std	Y+20, r25	; 0x14
    291e:	8b 8b       	std	Y+19, r24	; 0x13
    2920:	0f c0       	rjmp	.+30     	; 0x2940 <LCD_sendCommand+0x2b8>
    2922:	88 ec       	ldi	r24, 0xC8	; 200
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	9a 8b       	std	Y+18, r25	; 0x12
    2928:	89 8b       	std	Y+17, r24	; 0x11
    292a:	89 89       	ldd	r24, Y+17	; 0x11
    292c:	9a 89       	ldd	r25, Y+18	; 0x12
    292e:	01 97       	sbiw	r24, 0x01	; 1
    2930:	f1 f7       	brne	.-4      	; 0x292e <LCD_sendCommand+0x2a6>
    2932:	9a 8b       	std	Y+18, r25	; 0x12
    2934:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2936:	8b 89       	ldd	r24, Y+19	; 0x13
    2938:	9c 89       	ldd	r25, Y+20	; 0x14
    293a:	01 97       	sbiw	r24, 0x01	; 1
    293c:	9c 8b       	std	Y+20, r25	; 0x14
    293e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2940:	8b 89       	ldd	r24, Y+19	; 0x13
    2942:	9c 89       	ldd	r25, Y+20	; 0x14
    2944:	00 97       	sbiw	r24, 0x00	; 0
    2946:	69 f7       	brne	.-38     	; 0x2922 <LCD_sendCommand+0x29a>
    2948:	14 c0       	rjmp	.+40     	; 0x2972 <LCD_sendCommand+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    294a:	6d 89       	ldd	r22, Y+21	; 0x15
    294c:	7e 89       	ldd	r23, Y+22	; 0x16
    294e:	8f 89       	ldd	r24, Y+23	; 0x17
    2950:	98 8d       	ldd	r25, Y+24	; 0x18
    2952:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2956:	dc 01       	movw	r26, r24
    2958:	cb 01       	movw	r24, r22
    295a:	9c 8b       	std	Y+20, r25	; 0x14
    295c:	8b 8b       	std	Y+19, r24	; 0x13
    295e:	8b 89       	ldd	r24, Y+19	; 0x13
    2960:	9c 89       	ldd	r25, Y+20	; 0x14
    2962:	98 8b       	std	Y+16, r25	; 0x10
    2964:	8f 87       	std	Y+15, r24	; 0x0f
    2966:	8f 85       	ldd	r24, Y+15	; 0x0f
    2968:	98 89       	ldd	r25, Y+16	; 0x10
    296a:	01 97       	sbiw	r24, 0x01	; 1
    296c:	f1 f7       	brne	.-4      	; 0x296a <LCD_sendCommand+0x2e2>
    296e:	98 8b       	std	Y+16, r25	; 0x10
    2970:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2972:	81 e0       	ldi	r24, 0x01	; 1
    2974:	62 e0       	ldi	r22, 0x02	; 2
    2976:	40 e0       	ldi	r20, 0x00	; 0
    2978:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <GPIO_writePin>
    297c:	80 e0       	ldi	r24, 0x00	; 0
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	a0 e8       	ldi	r26, 0x80	; 128
    2982:	bf e3       	ldi	r27, 0x3F	; 63
    2984:	8b 87       	std	Y+11, r24	; 0x0b
    2986:	9c 87       	std	Y+12, r25	; 0x0c
    2988:	ad 87       	std	Y+13, r26	; 0x0d
    298a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    298c:	6b 85       	ldd	r22, Y+11	; 0x0b
    298e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2990:	8d 85       	ldd	r24, Y+13	; 0x0d
    2992:	9e 85       	ldd	r25, Y+14	; 0x0e
    2994:	20 e0       	ldi	r18, 0x00	; 0
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	4a ef       	ldi	r20, 0xFA	; 250
    299a:	54 e4       	ldi	r21, 0x44	; 68
    299c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a0:	dc 01       	movw	r26, r24
    29a2:	cb 01       	movw	r24, r22
    29a4:	8f 83       	std	Y+7, r24	; 0x07
    29a6:	98 87       	std	Y+8, r25	; 0x08
    29a8:	a9 87       	std	Y+9, r26	; 0x09
    29aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29ac:	6f 81       	ldd	r22, Y+7	; 0x07
    29ae:	78 85       	ldd	r23, Y+8	; 0x08
    29b0:	89 85       	ldd	r24, Y+9	; 0x09
    29b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29b4:	20 e0       	ldi	r18, 0x00	; 0
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	40 e8       	ldi	r20, 0x80	; 128
    29ba:	5f e3       	ldi	r21, 0x3F	; 63
    29bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29c0:	88 23       	and	r24, r24
    29c2:	2c f4       	brge	.+10     	; 0x29ce <LCD_sendCommand+0x346>
		__ticks = 1;
    29c4:	81 e0       	ldi	r24, 0x01	; 1
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	9e 83       	std	Y+6, r25	; 0x06
    29ca:	8d 83       	std	Y+5, r24	; 0x05
    29cc:	3f c0       	rjmp	.+126    	; 0x2a4c <LCD_sendCommand+0x3c4>
	else if (__tmp > 65535)
    29ce:	6f 81       	ldd	r22, Y+7	; 0x07
    29d0:	78 85       	ldd	r23, Y+8	; 0x08
    29d2:	89 85       	ldd	r24, Y+9	; 0x09
    29d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d6:	20 e0       	ldi	r18, 0x00	; 0
    29d8:	3f ef       	ldi	r19, 0xFF	; 255
    29da:	4f e7       	ldi	r20, 0x7F	; 127
    29dc:	57 e4       	ldi	r21, 0x47	; 71
    29de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29e2:	18 16       	cp	r1, r24
    29e4:	4c f5       	brge	.+82     	; 0x2a38 <LCD_sendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    29e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    29ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    29ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ee:	20 e0       	ldi	r18, 0x00	; 0
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	40 e2       	ldi	r20, 0x20	; 32
    29f4:	51 e4       	ldi	r21, 0x41	; 65
    29f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29fa:	dc 01       	movw	r26, r24
    29fc:	cb 01       	movw	r24, r22
    29fe:	bc 01       	movw	r22, r24
    2a00:	cd 01       	movw	r24, r26
    2a02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a06:	dc 01       	movw	r26, r24
    2a08:	cb 01       	movw	r24, r22
    2a0a:	9e 83       	std	Y+6, r25	; 0x06
    2a0c:	8d 83       	std	Y+5, r24	; 0x05
    2a0e:	0f c0       	rjmp	.+30     	; 0x2a2e <LCD_sendCommand+0x3a6>
    2a10:	88 ec       	ldi	r24, 0xC8	; 200
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	9c 83       	std	Y+4, r25	; 0x04
    2a16:	8b 83       	std	Y+3, r24	; 0x03
    2a18:	8b 81       	ldd	r24, Y+3	; 0x03
    2a1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a1c:	01 97       	sbiw	r24, 0x01	; 1
    2a1e:	f1 f7       	brne	.-4      	; 0x2a1c <LCD_sendCommand+0x394>
    2a20:	9c 83       	std	Y+4, r25	; 0x04
    2a22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a24:	8d 81       	ldd	r24, Y+5	; 0x05
    2a26:	9e 81       	ldd	r25, Y+6	; 0x06
    2a28:	01 97       	sbiw	r24, 0x01	; 1
    2a2a:	9e 83       	std	Y+6, r25	; 0x06
    2a2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a30:	9e 81       	ldd	r25, Y+6	; 0x06
    2a32:	00 97       	sbiw	r24, 0x00	; 0
    2a34:	69 f7       	brne	.-38     	; 0x2a10 <LCD_sendCommand+0x388>
    2a36:	14 c0       	rjmp	.+40     	; 0x2a60 <LCD_sendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a38:	6f 81       	ldd	r22, Y+7	; 0x07
    2a3a:	78 85       	ldd	r23, Y+8	; 0x08
    2a3c:	89 85       	ldd	r24, Y+9	; 0x09
    2a3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a44:	dc 01       	movw	r26, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	9e 83       	std	Y+6, r25	; 0x06
    2a4a:	8d 83       	std	Y+5, r24	; 0x05
    2a4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a50:	9a 83       	std	Y+2, r25	; 0x02
    2a52:	89 83       	std	Y+1, r24	; 0x01
    2a54:	89 81       	ldd	r24, Y+1	; 0x01
    2a56:	9a 81       	ldd	r25, Y+2	; 0x02
    2a58:	01 97       	sbiw	r24, 0x01	; 1
    2a5a:	f1 f7       	brne	.-4      	; 0x2a58 <LCD_sendCommand+0x3d0>
    2a5c:	9a 83       	std	Y+2, r25	; 0x02
    2a5e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2a60:	ea 96       	adiw	r28, 0x3a	; 58
    2a62:	0f b6       	in	r0, 0x3f	; 63
    2a64:	f8 94       	cli
    2a66:	de bf       	out	0x3e, r29	; 62
    2a68:	0f be       	out	0x3f, r0	; 63
    2a6a:	cd bf       	out	0x3d, r28	; 61
    2a6c:	cf 91       	pop	r28
    2a6e:	df 91       	pop	r29
    2a70:	08 95       	ret

00002a72 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2a72:	df 93       	push	r29
    2a74:	cf 93       	push	r28
    2a76:	cd b7       	in	r28, 0x3d	; 61
    2a78:	de b7       	in	r29, 0x3e	; 62
    2a7a:	ea 97       	sbiw	r28, 0x3a	; 58
    2a7c:	0f b6       	in	r0, 0x3f	; 63
    2a7e:	f8 94       	cli
    2a80:	de bf       	out	0x3e, r29	; 62
    2a82:	0f be       	out	0x3f, r0	; 63
    2a84:	cd bf       	out	0x3d, r28	; 61
    2a86:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    2a88:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2a8a:	81 e0       	ldi	r24, 0x01	; 1
    2a8c:	60 e0       	ldi	r22, 0x00	; 0
    2a8e:	41 e0       	ldi	r20, 0x01	; 1
    2a90:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2a94:	81 e0       	ldi	r24, 0x01	; 1
    2a96:	61 e0       	ldi	r22, 0x01	; 1
    2a98:	40 e0       	ldi	r20, 0x00	; 0
    2a9a:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <GPIO_writePin>
    2a9e:	80 e0       	ldi	r24, 0x00	; 0
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	a0 e8       	ldi	r26, 0x80	; 128
    2aa4:	bf e3       	ldi	r27, 0x3F	; 63
    2aa6:	8d ab       	std	Y+53, r24	; 0x35
    2aa8:	9e ab       	std	Y+54, r25	; 0x36
    2aaa:	af ab       	std	Y+55, r26	; 0x37
    2aac:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aae:	6d a9       	ldd	r22, Y+53	; 0x35
    2ab0:	7e a9       	ldd	r23, Y+54	; 0x36
    2ab2:	8f a9       	ldd	r24, Y+55	; 0x37
    2ab4:	98 ad       	ldd	r25, Y+56	; 0x38
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	4a ef       	ldi	r20, 0xFA	; 250
    2abc:	54 e4       	ldi	r21, 0x44	; 68
    2abe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac2:	dc 01       	movw	r26, r24
    2ac4:	cb 01       	movw	r24, r22
    2ac6:	89 ab       	std	Y+49, r24	; 0x31
    2ac8:	9a ab       	std	Y+50, r25	; 0x32
    2aca:	ab ab       	std	Y+51, r26	; 0x33
    2acc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2ace:	69 a9       	ldd	r22, Y+49	; 0x31
    2ad0:	7a a9       	ldd	r23, Y+50	; 0x32
    2ad2:	8b a9       	ldd	r24, Y+51	; 0x33
    2ad4:	9c a9       	ldd	r25, Y+52	; 0x34
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	40 e8       	ldi	r20, 0x80	; 128
    2adc:	5f e3       	ldi	r21, 0x3F	; 63
    2ade:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ae2:	88 23       	and	r24, r24
    2ae4:	2c f4       	brge	.+10     	; 0x2af0 <LCD_displayCharacter+0x7e>
		__ticks = 1;
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	98 ab       	std	Y+48, r25	; 0x30
    2aec:	8f a7       	std	Y+47, r24	; 0x2f
    2aee:	3f c0       	rjmp	.+126    	; 0x2b6e <LCD_displayCharacter+0xfc>
	else if (__tmp > 65535)
    2af0:	69 a9       	ldd	r22, Y+49	; 0x31
    2af2:	7a a9       	ldd	r23, Y+50	; 0x32
    2af4:	8b a9       	ldd	r24, Y+51	; 0x33
    2af6:	9c a9       	ldd	r25, Y+52	; 0x34
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	3f ef       	ldi	r19, 0xFF	; 255
    2afc:	4f e7       	ldi	r20, 0x7F	; 127
    2afe:	57 e4       	ldi	r21, 0x47	; 71
    2b00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b04:	18 16       	cp	r1, r24
    2b06:	4c f5       	brge	.+82     	; 0x2b5a <LCD_displayCharacter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b08:	6d a9       	ldd	r22, Y+53	; 0x35
    2b0a:	7e a9       	ldd	r23, Y+54	; 0x36
    2b0c:	8f a9       	ldd	r24, Y+55	; 0x37
    2b0e:	98 ad       	ldd	r25, Y+56	; 0x38
    2b10:	20 e0       	ldi	r18, 0x00	; 0
    2b12:	30 e0       	ldi	r19, 0x00	; 0
    2b14:	40 e2       	ldi	r20, 0x20	; 32
    2b16:	51 e4       	ldi	r21, 0x41	; 65
    2b18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b1c:	dc 01       	movw	r26, r24
    2b1e:	cb 01       	movw	r24, r22
    2b20:	bc 01       	movw	r22, r24
    2b22:	cd 01       	movw	r24, r26
    2b24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b28:	dc 01       	movw	r26, r24
    2b2a:	cb 01       	movw	r24, r22
    2b2c:	98 ab       	std	Y+48, r25	; 0x30
    2b2e:	8f a7       	std	Y+47, r24	; 0x2f
    2b30:	0f c0       	rjmp	.+30     	; 0x2b50 <LCD_displayCharacter+0xde>
    2b32:	88 ec       	ldi	r24, 0xC8	; 200
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	9e a7       	std	Y+46, r25	; 0x2e
    2b38:	8d a7       	std	Y+45, r24	; 0x2d
    2b3a:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b3c:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b3e:	01 97       	sbiw	r24, 0x01	; 1
    2b40:	f1 f7       	brne	.-4      	; 0x2b3e <LCD_displayCharacter+0xcc>
    2b42:	9e a7       	std	Y+46, r25	; 0x2e
    2b44:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b46:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b48:	98 a9       	ldd	r25, Y+48	; 0x30
    2b4a:	01 97       	sbiw	r24, 0x01	; 1
    2b4c:	98 ab       	std	Y+48, r25	; 0x30
    2b4e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b50:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b52:	98 a9       	ldd	r25, Y+48	; 0x30
    2b54:	00 97       	sbiw	r24, 0x00	; 0
    2b56:	69 f7       	brne	.-38     	; 0x2b32 <LCD_displayCharacter+0xc0>
    2b58:	14 c0       	rjmp	.+40     	; 0x2b82 <LCD_displayCharacter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b5a:	69 a9       	ldd	r22, Y+49	; 0x31
    2b5c:	7a a9       	ldd	r23, Y+50	; 0x32
    2b5e:	8b a9       	ldd	r24, Y+51	; 0x33
    2b60:	9c a9       	ldd	r25, Y+52	; 0x34
    2b62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	98 ab       	std	Y+48, r25	; 0x30
    2b6c:	8f a7       	std	Y+47, r24	; 0x2f
    2b6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b70:	98 a9       	ldd	r25, Y+48	; 0x30
    2b72:	9c a7       	std	Y+44, r25	; 0x2c
    2b74:	8b a7       	std	Y+43, r24	; 0x2b
    2b76:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b78:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b7a:	01 97       	sbiw	r24, 0x01	; 1
    2b7c:	f1 f7       	brne	.-4      	; 0x2b7a <LCD_displayCharacter+0x108>
    2b7e:	9c a7       	std	Y+44, r25	; 0x2c
    2b80:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2b82:	81 e0       	ldi	r24, 0x01	; 1
    2b84:	62 e0       	ldi	r22, 0x02	; 2
    2b86:	41 e0       	ldi	r20, 0x01	; 1
    2b88:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <GPIO_writePin>
    2b8c:	80 e0       	ldi	r24, 0x00	; 0
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	a0 e8       	ldi	r26, 0x80	; 128
    2b92:	bf e3       	ldi	r27, 0x3F	; 63
    2b94:	8f a3       	std	Y+39, r24	; 0x27
    2b96:	98 a7       	std	Y+40, r25	; 0x28
    2b98:	a9 a7       	std	Y+41, r26	; 0x29
    2b9a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b9c:	6f a1       	ldd	r22, Y+39	; 0x27
    2b9e:	78 a5       	ldd	r23, Y+40	; 0x28
    2ba0:	89 a5       	ldd	r24, Y+41	; 0x29
    2ba2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ba4:	20 e0       	ldi	r18, 0x00	; 0
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	4a ef       	ldi	r20, 0xFA	; 250
    2baa:	54 e4       	ldi	r21, 0x44	; 68
    2bac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb0:	dc 01       	movw	r26, r24
    2bb2:	cb 01       	movw	r24, r22
    2bb4:	8b a3       	std	Y+35, r24	; 0x23
    2bb6:	9c a3       	std	Y+36, r25	; 0x24
    2bb8:	ad a3       	std	Y+37, r26	; 0x25
    2bba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2bbc:	6b a1       	ldd	r22, Y+35	; 0x23
    2bbe:	7c a1       	ldd	r23, Y+36	; 0x24
    2bc0:	8d a1       	ldd	r24, Y+37	; 0x25
    2bc2:	9e a1       	ldd	r25, Y+38	; 0x26
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	40 e8       	ldi	r20, 0x80	; 128
    2bca:	5f e3       	ldi	r21, 0x3F	; 63
    2bcc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bd0:	88 23       	and	r24, r24
    2bd2:	2c f4       	brge	.+10     	; 0x2bde <LCD_displayCharacter+0x16c>
		__ticks = 1;
    2bd4:	81 e0       	ldi	r24, 0x01	; 1
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	9a a3       	std	Y+34, r25	; 0x22
    2bda:	89 a3       	std	Y+33, r24	; 0x21
    2bdc:	3f c0       	rjmp	.+126    	; 0x2c5c <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    2bde:	6b a1       	ldd	r22, Y+35	; 0x23
    2be0:	7c a1       	ldd	r23, Y+36	; 0x24
    2be2:	8d a1       	ldd	r24, Y+37	; 0x25
    2be4:	9e a1       	ldd	r25, Y+38	; 0x26
    2be6:	20 e0       	ldi	r18, 0x00	; 0
    2be8:	3f ef       	ldi	r19, 0xFF	; 255
    2bea:	4f e7       	ldi	r20, 0x7F	; 127
    2bec:	57 e4       	ldi	r21, 0x47	; 71
    2bee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bf2:	18 16       	cp	r1, r24
    2bf4:	4c f5       	brge	.+82     	; 0x2c48 <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bf6:	6f a1       	ldd	r22, Y+39	; 0x27
    2bf8:	78 a5       	ldd	r23, Y+40	; 0x28
    2bfa:	89 a5       	ldd	r24, Y+41	; 0x29
    2bfc:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bfe:	20 e0       	ldi	r18, 0x00	; 0
    2c00:	30 e0       	ldi	r19, 0x00	; 0
    2c02:	40 e2       	ldi	r20, 0x20	; 32
    2c04:	51 e4       	ldi	r21, 0x41	; 65
    2c06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c0a:	dc 01       	movw	r26, r24
    2c0c:	cb 01       	movw	r24, r22
    2c0e:	bc 01       	movw	r22, r24
    2c10:	cd 01       	movw	r24, r26
    2c12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c16:	dc 01       	movw	r26, r24
    2c18:	cb 01       	movw	r24, r22
    2c1a:	9a a3       	std	Y+34, r25	; 0x22
    2c1c:	89 a3       	std	Y+33, r24	; 0x21
    2c1e:	0f c0       	rjmp	.+30     	; 0x2c3e <LCD_displayCharacter+0x1cc>
    2c20:	88 ec       	ldi	r24, 0xC8	; 200
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	98 a3       	std	Y+32, r25	; 0x20
    2c26:	8f 8f       	std	Y+31, r24	; 0x1f
    2c28:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c2a:	98 a1       	ldd	r25, Y+32	; 0x20
    2c2c:	01 97       	sbiw	r24, 0x01	; 1
    2c2e:	f1 f7       	brne	.-4      	; 0x2c2c <LCD_displayCharacter+0x1ba>
    2c30:	98 a3       	std	Y+32, r25	; 0x20
    2c32:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c34:	89 a1       	ldd	r24, Y+33	; 0x21
    2c36:	9a a1       	ldd	r25, Y+34	; 0x22
    2c38:	01 97       	sbiw	r24, 0x01	; 1
    2c3a:	9a a3       	std	Y+34, r25	; 0x22
    2c3c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c3e:	89 a1       	ldd	r24, Y+33	; 0x21
    2c40:	9a a1       	ldd	r25, Y+34	; 0x22
    2c42:	00 97       	sbiw	r24, 0x00	; 0
    2c44:	69 f7       	brne	.-38     	; 0x2c20 <LCD_displayCharacter+0x1ae>
    2c46:	14 c0       	rjmp	.+40     	; 0x2c70 <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c48:	6b a1       	ldd	r22, Y+35	; 0x23
    2c4a:	7c a1       	ldd	r23, Y+36	; 0x24
    2c4c:	8d a1       	ldd	r24, Y+37	; 0x25
    2c4e:	9e a1       	ldd	r25, Y+38	; 0x26
    2c50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c54:	dc 01       	movw	r26, r24
    2c56:	cb 01       	movw	r24, r22
    2c58:	9a a3       	std	Y+34, r25	; 0x22
    2c5a:	89 a3       	std	Y+33, r24	; 0x21
    2c5c:	89 a1       	ldd	r24, Y+33	; 0x21
    2c5e:	9a a1       	ldd	r25, Y+34	; 0x22
    2c60:	9e 8f       	std	Y+30, r25	; 0x1e
    2c62:	8d 8f       	std	Y+29, r24	; 0x1d
    2c64:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c66:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c68:	01 97       	sbiw	r24, 0x01	; 1
    2c6a:	f1 f7       	brne	.-4      	; 0x2c68 <LCD_displayCharacter+0x1f6>
    2c6c:	9e 8f       	std	Y+30, r25	; 0x1e
    2c6e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    2c70:	80 e0       	ldi	r24, 0x00	; 0
    2c72:	6a ad       	ldd	r22, Y+58	; 0x3a
    2c74:	0e 94 9a 11 	call	0x2334	; 0x2334 <GPIO_writePort>
    2c78:	80 e0       	ldi	r24, 0x00	; 0
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	a0 e8       	ldi	r26, 0x80	; 128
    2c7e:	bf e3       	ldi	r27, 0x3F	; 63
    2c80:	89 8f       	std	Y+25, r24	; 0x19
    2c82:	9a 8f       	std	Y+26, r25	; 0x1a
    2c84:	ab 8f       	std	Y+27, r26	; 0x1b
    2c86:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c88:	69 8d       	ldd	r22, Y+25	; 0x19
    2c8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c90:	20 e0       	ldi	r18, 0x00	; 0
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	4a ef       	ldi	r20, 0xFA	; 250
    2c96:	54 e4       	ldi	r21, 0x44	; 68
    2c98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	8d 8b       	std	Y+21, r24	; 0x15
    2ca2:	9e 8b       	std	Y+22, r25	; 0x16
    2ca4:	af 8b       	std	Y+23, r26	; 0x17
    2ca6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ca8:	6d 89       	ldd	r22, Y+21	; 0x15
    2caa:	7e 89       	ldd	r23, Y+22	; 0x16
    2cac:	8f 89       	ldd	r24, Y+23	; 0x17
    2cae:	98 8d       	ldd	r25, Y+24	; 0x18
    2cb0:	20 e0       	ldi	r18, 0x00	; 0
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	40 e8       	ldi	r20, 0x80	; 128
    2cb6:	5f e3       	ldi	r21, 0x3F	; 63
    2cb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cbc:	88 23       	and	r24, r24
    2cbe:	2c f4       	brge	.+10     	; 0x2cca <LCD_displayCharacter+0x258>
		__ticks = 1;
    2cc0:	81 e0       	ldi	r24, 0x01	; 1
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	9c 8b       	std	Y+20, r25	; 0x14
    2cc6:	8b 8b       	std	Y+19, r24	; 0x13
    2cc8:	3f c0       	rjmp	.+126    	; 0x2d48 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2cca:	6d 89       	ldd	r22, Y+21	; 0x15
    2ccc:	7e 89       	ldd	r23, Y+22	; 0x16
    2cce:	8f 89       	ldd	r24, Y+23	; 0x17
    2cd0:	98 8d       	ldd	r25, Y+24	; 0x18
    2cd2:	20 e0       	ldi	r18, 0x00	; 0
    2cd4:	3f ef       	ldi	r19, 0xFF	; 255
    2cd6:	4f e7       	ldi	r20, 0x7F	; 127
    2cd8:	57 e4       	ldi	r21, 0x47	; 71
    2cda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cde:	18 16       	cp	r1, r24
    2ce0:	4c f5       	brge	.+82     	; 0x2d34 <LCD_displayCharacter+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ce2:	69 8d       	ldd	r22, Y+25	; 0x19
    2ce4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ce6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ce8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cea:	20 e0       	ldi	r18, 0x00	; 0
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	40 e2       	ldi	r20, 0x20	; 32
    2cf0:	51 e4       	ldi	r21, 0x41	; 65
    2cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf6:	dc 01       	movw	r26, r24
    2cf8:	cb 01       	movw	r24, r22
    2cfa:	bc 01       	movw	r22, r24
    2cfc:	cd 01       	movw	r24, r26
    2cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	9c 8b       	std	Y+20, r25	; 0x14
    2d08:	8b 8b       	std	Y+19, r24	; 0x13
    2d0a:	0f c0       	rjmp	.+30     	; 0x2d2a <LCD_displayCharacter+0x2b8>
    2d0c:	88 ec       	ldi	r24, 0xC8	; 200
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	9a 8b       	std	Y+18, r25	; 0x12
    2d12:	89 8b       	std	Y+17, r24	; 0x11
    2d14:	89 89       	ldd	r24, Y+17	; 0x11
    2d16:	9a 89       	ldd	r25, Y+18	; 0x12
    2d18:	01 97       	sbiw	r24, 0x01	; 1
    2d1a:	f1 f7       	brne	.-4      	; 0x2d18 <LCD_displayCharacter+0x2a6>
    2d1c:	9a 8b       	std	Y+18, r25	; 0x12
    2d1e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d20:	8b 89       	ldd	r24, Y+19	; 0x13
    2d22:	9c 89       	ldd	r25, Y+20	; 0x14
    2d24:	01 97       	sbiw	r24, 0x01	; 1
    2d26:	9c 8b       	std	Y+20, r25	; 0x14
    2d28:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d2a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d2c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d2e:	00 97       	sbiw	r24, 0x00	; 0
    2d30:	69 f7       	brne	.-38     	; 0x2d0c <LCD_displayCharacter+0x29a>
    2d32:	14 c0       	rjmp	.+40     	; 0x2d5c <LCD_displayCharacter+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d34:	6d 89       	ldd	r22, Y+21	; 0x15
    2d36:	7e 89       	ldd	r23, Y+22	; 0x16
    2d38:	8f 89       	ldd	r24, Y+23	; 0x17
    2d3a:	98 8d       	ldd	r25, Y+24	; 0x18
    2d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d40:	dc 01       	movw	r26, r24
    2d42:	cb 01       	movw	r24, r22
    2d44:	9c 8b       	std	Y+20, r25	; 0x14
    2d46:	8b 8b       	std	Y+19, r24	; 0x13
    2d48:	8b 89       	ldd	r24, Y+19	; 0x13
    2d4a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d4c:	98 8b       	std	Y+16, r25	; 0x10
    2d4e:	8f 87       	std	Y+15, r24	; 0x0f
    2d50:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d52:	98 89       	ldd	r25, Y+16	; 0x10
    2d54:	01 97       	sbiw	r24, 0x01	; 1
    2d56:	f1 f7       	brne	.-4      	; 0x2d54 <LCD_displayCharacter+0x2e2>
    2d58:	98 8b       	std	Y+16, r25	; 0x10
    2d5a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2d5c:	81 e0       	ldi	r24, 0x01	; 1
    2d5e:	62 e0       	ldi	r22, 0x02	; 2
    2d60:	40 e0       	ldi	r20, 0x00	; 0
    2d62:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <GPIO_writePin>
    2d66:	80 e0       	ldi	r24, 0x00	; 0
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	a0 e8       	ldi	r26, 0x80	; 128
    2d6c:	bf e3       	ldi	r27, 0x3F	; 63
    2d6e:	8b 87       	std	Y+11, r24	; 0x0b
    2d70:	9c 87       	std	Y+12, r25	; 0x0c
    2d72:	ad 87       	std	Y+13, r26	; 0x0d
    2d74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d76:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d78:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d7e:	20 e0       	ldi	r18, 0x00	; 0
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	4a ef       	ldi	r20, 0xFA	; 250
    2d84:	54 e4       	ldi	r21, 0x44	; 68
    2d86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d8a:	dc 01       	movw	r26, r24
    2d8c:	cb 01       	movw	r24, r22
    2d8e:	8f 83       	std	Y+7, r24	; 0x07
    2d90:	98 87       	std	Y+8, r25	; 0x08
    2d92:	a9 87       	std	Y+9, r26	; 0x09
    2d94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d96:	6f 81       	ldd	r22, Y+7	; 0x07
    2d98:	78 85       	ldd	r23, Y+8	; 0x08
    2d9a:	89 85       	ldd	r24, Y+9	; 0x09
    2d9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d9e:	20 e0       	ldi	r18, 0x00	; 0
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	40 e8       	ldi	r20, 0x80	; 128
    2da4:	5f e3       	ldi	r21, 0x3F	; 63
    2da6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2daa:	88 23       	and	r24, r24
    2dac:	2c f4       	brge	.+10     	; 0x2db8 <LCD_displayCharacter+0x346>
		__ticks = 1;
    2dae:	81 e0       	ldi	r24, 0x01	; 1
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	9e 83       	std	Y+6, r25	; 0x06
    2db4:	8d 83       	std	Y+5, r24	; 0x05
    2db6:	3f c0       	rjmp	.+126    	; 0x2e36 <LCD_displayCharacter+0x3c4>
	else if (__tmp > 65535)
    2db8:	6f 81       	ldd	r22, Y+7	; 0x07
    2dba:	78 85       	ldd	r23, Y+8	; 0x08
    2dbc:	89 85       	ldd	r24, Y+9	; 0x09
    2dbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dc0:	20 e0       	ldi	r18, 0x00	; 0
    2dc2:	3f ef       	ldi	r19, 0xFF	; 255
    2dc4:	4f e7       	ldi	r20, 0x7F	; 127
    2dc6:	57 e4       	ldi	r21, 0x47	; 71
    2dc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dcc:	18 16       	cp	r1, r24
    2dce:	4c f5       	brge	.+82     	; 0x2e22 <LCD_displayCharacter+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dd8:	20 e0       	ldi	r18, 0x00	; 0
    2dda:	30 e0       	ldi	r19, 0x00	; 0
    2ddc:	40 e2       	ldi	r20, 0x20	; 32
    2dde:	51 e4       	ldi	r21, 0x41	; 65
    2de0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de4:	dc 01       	movw	r26, r24
    2de6:	cb 01       	movw	r24, r22
    2de8:	bc 01       	movw	r22, r24
    2dea:	cd 01       	movw	r24, r26
    2dec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df0:	dc 01       	movw	r26, r24
    2df2:	cb 01       	movw	r24, r22
    2df4:	9e 83       	std	Y+6, r25	; 0x06
    2df6:	8d 83       	std	Y+5, r24	; 0x05
    2df8:	0f c0       	rjmp	.+30     	; 0x2e18 <LCD_displayCharacter+0x3a6>
    2dfa:	88 ec       	ldi	r24, 0xC8	; 200
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	9c 83       	std	Y+4, r25	; 0x04
    2e00:	8b 83       	std	Y+3, r24	; 0x03
    2e02:	8b 81       	ldd	r24, Y+3	; 0x03
    2e04:	9c 81       	ldd	r25, Y+4	; 0x04
    2e06:	01 97       	sbiw	r24, 0x01	; 1
    2e08:	f1 f7       	brne	.-4      	; 0x2e06 <LCD_displayCharacter+0x394>
    2e0a:	9c 83       	std	Y+4, r25	; 0x04
    2e0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e10:	9e 81       	ldd	r25, Y+6	; 0x06
    2e12:	01 97       	sbiw	r24, 0x01	; 1
    2e14:	9e 83       	std	Y+6, r25	; 0x06
    2e16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e18:	8d 81       	ldd	r24, Y+5	; 0x05
    2e1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e1c:	00 97       	sbiw	r24, 0x00	; 0
    2e1e:	69 f7       	brne	.-38     	; 0x2dfa <LCD_displayCharacter+0x388>
    2e20:	14 c0       	rjmp	.+40     	; 0x2e4a <LCD_displayCharacter+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e22:	6f 81       	ldd	r22, Y+7	; 0x07
    2e24:	78 85       	ldd	r23, Y+8	; 0x08
    2e26:	89 85       	ldd	r24, Y+9	; 0x09
    2e28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e2e:	dc 01       	movw	r26, r24
    2e30:	cb 01       	movw	r24, r22
    2e32:	9e 83       	std	Y+6, r25	; 0x06
    2e34:	8d 83       	std	Y+5, r24	; 0x05
    2e36:	8d 81       	ldd	r24, Y+5	; 0x05
    2e38:	9e 81       	ldd	r25, Y+6	; 0x06
    2e3a:	9a 83       	std	Y+2, r25	; 0x02
    2e3c:	89 83       	std	Y+1, r24	; 0x01
    2e3e:	89 81       	ldd	r24, Y+1	; 0x01
    2e40:	9a 81       	ldd	r25, Y+2	; 0x02
    2e42:	01 97       	sbiw	r24, 0x01	; 1
    2e44:	f1 f7       	brne	.-4      	; 0x2e42 <LCD_displayCharacter+0x3d0>
    2e46:	9a 83       	std	Y+2, r25	; 0x02
    2e48:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2e4a:	ea 96       	adiw	r28, 0x3a	; 58
    2e4c:	0f b6       	in	r0, 0x3f	; 63
    2e4e:	f8 94       	cli
    2e50:	de bf       	out	0x3e, r29	; 62
    2e52:	0f be       	out	0x3f, r0	; 63
    2e54:	cd bf       	out	0x3d, r28	; 61
    2e56:	cf 91       	pop	r28
    2e58:	df 91       	pop	r29
    2e5a:	08 95       	ret

00002e5c <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2e5c:	df 93       	push	r29
    2e5e:	cf 93       	push	r28
    2e60:	00 d0       	rcall	.+0      	; 0x2e62 <LCD_displayString+0x6>
    2e62:	0f 92       	push	r0
    2e64:	cd b7       	in	r28, 0x3d	; 61
    2e66:	de b7       	in	r29, 0x3e	; 62
    2e68:	9b 83       	std	Y+3, r25	; 0x03
    2e6a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2e6c:	19 82       	std	Y+1, r1	; 0x01
    2e6e:	0e c0       	rjmp	.+28     	; 0x2e8c <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2e70:	89 81       	ldd	r24, Y+1	; 0x01
    2e72:	28 2f       	mov	r18, r24
    2e74:	30 e0       	ldi	r19, 0x00	; 0
    2e76:	8a 81       	ldd	r24, Y+2	; 0x02
    2e78:	9b 81       	ldd	r25, Y+3	; 0x03
    2e7a:	fc 01       	movw	r30, r24
    2e7c:	e2 0f       	add	r30, r18
    2e7e:	f3 1f       	adc	r31, r19
    2e80:	80 81       	ld	r24, Z
    2e82:	0e 94 39 15 	call	0x2a72	; 0x2a72 <LCD_displayCharacter>
		i++;
    2e86:	89 81       	ldd	r24, Y+1	; 0x01
    2e88:	8f 5f       	subi	r24, 0xFF	; 255
    2e8a:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2e8c:	89 81       	ldd	r24, Y+1	; 0x01
    2e8e:	28 2f       	mov	r18, r24
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	8a 81       	ldd	r24, Y+2	; 0x02
    2e94:	9b 81       	ldd	r25, Y+3	; 0x03
    2e96:	fc 01       	movw	r30, r24
    2e98:	e2 0f       	add	r30, r18
    2e9a:	f3 1f       	adc	r31, r19
    2e9c:	80 81       	ld	r24, Z
    2e9e:	88 23       	and	r24, r24
    2ea0:	39 f7       	brne	.-50     	; 0x2e70 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2ea2:	0f 90       	pop	r0
    2ea4:	0f 90       	pop	r0
    2ea6:	0f 90       	pop	r0
    2ea8:	cf 91       	pop	r28
    2eaa:	df 91       	pop	r29
    2eac:	08 95       	ret

00002eae <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2eae:	df 93       	push	r29
    2eb0:	cf 93       	push	r28
    2eb2:	00 d0       	rcall	.+0      	; 0x2eb4 <LCD_moveCursor+0x6>
    2eb4:	00 d0       	rcall	.+0      	; 0x2eb6 <LCD_moveCursor+0x8>
    2eb6:	0f 92       	push	r0
    2eb8:	cd b7       	in	r28, 0x3d	; 61
    2eba:	de b7       	in	r29, 0x3e	; 62
    2ebc:	8a 83       	std	Y+2, r24	; 0x02
    2ebe:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec2:	28 2f       	mov	r18, r24
    2ec4:	30 e0       	ldi	r19, 0x00	; 0
    2ec6:	3d 83       	std	Y+5, r19	; 0x05
    2ec8:	2c 83       	std	Y+4, r18	; 0x04
    2eca:	8c 81       	ldd	r24, Y+4	; 0x04
    2ecc:	9d 81       	ldd	r25, Y+5	; 0x05
    2ece:	81 30       	cpi	r24, 0x01	; 1
    2ed0:	91 05       	cpc	r25, r1
    2ed2:	c1 f0       	breq	.+48     	; 0x2f04 <LCD_moveCursor+0x56>
    2ed4:	2c 81       	ldd	r18, Y+4	; 0x04
    2ed6:	3d 81       	ldd	r19, Y+5	; 0x05
    2ed8:	22 30       	cpi	r18, 0x02	; 2
    2eda:	31 05       	cpc	r19, r1
    2edc:	2c f4       	brge	.+10     	; 0x2ee8 <LCD_moveCursor+0x3a>
    2ede:	8c 81       	ldd	r24, Y+4	; 0x04
    2ee0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ee2:	00 97       	sbiw	r24, 0x00	; 0
    2ee4:	61 f0       	breq	.+24     	; 0x2efe <LCD_moveCursor+0x50>
    2ee6:	19 c0       	rjmp	.+50     	; 0x2f1a <LCD_moveCursor+0x6c>
    2ee8:	2c 81       	ldd	r18, Y+4	; 0x04
    2eea:	3d 81       	ldd	r19, Y+5	; 0x05
    2eec:	22 30       	cpi	r18, 0x02	; 2
    2eee:	31 05       	cpc	r19, r1
    2ef0:	69 f0       	breq	.+26     	; 0x2f0c <LCD_moveCursor+0x5e>
    2ef2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ef4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ef6:	83 30       	cpi	r24, 0x03	; 3
    2ef8:	91 05       	cpc	r25, r1
    2efa:	61 f0       	breq	.+24     	; 0x2f14 <LCD_moveCursor+0x66>
    2efc:	0e c0       	rjmp	.+28     	; 0x2f1a <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2efe:	8b 81       	ldd	r24, Y+3	; 0x03
    2f00:	89 83       	std	Y+1, r24	; 0x01
    2f02:	0b c0       	rjmp	.+22     	; 0x2f1a <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2f04:	8b 81       	ldd	r24, Y+3	; 0x03
    2f06:	80 5c       	subi	r24, 0xC0	; 192
    2f08:	89 83       	std	Y+1, r24	; 0x01
    2f0a:	07 c0       	rjmp	.+14     	; 0x2f1a <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0e:	80 5f       	subi	r24, 0xF0	; 240
    2f10:	89 83       	std	Y+1, r24	; 0x01
    2f12:	03 c0       	rjmp	.+6      	; 0x2f1a <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2f14:	8b 81       	ldd	r24, Y+3	; 0x03
    2f16:	80 5b       	subi	r24, 0xB0	; 176
    2f18:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2f1a:	89 81       	ldd	r24, Y+1	; 0x01
    2f1c:	80 68       	ori	r24, 0x80	; 128
    2f1e:	0e 94 44 13 	call	0x2688	; 0x2688 <LCD_sendCommand>
}
    2f22:	0f 90       	pop	r0
    2f24:	0f 90       	pop	r0
    2f26:	0f 90       	pop	r0
    2f28:	0f 90       	pop	r0
    2f2a:	0f 90       	pop	r0
    2f2c:	cf 91       	pop	r28
    2f2e:	df 91       	pop	r29
    2f30:	08 95       	ret

00002f32 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2f32:	df 93       	push	r29
    2f34:	cf 93       	push	r28
    2f36:	00 d0       	rcall	.+0      	; 0x2f38 <LCD_displayStringRowColumn+0x6>
    2f38:	00 d0       	rcall	.+0      	; 0x2f3a <LCD_displayStringRowColumn+0x8>
    2f3a:	cd b7       	in	r28, 0x3d	; 61
    2f3c:	de b7       	in	r29, 0x3e	; 62
    2f3e:	89 83       	std	Y+1, r24	; 0x01
    2f40:	6a 83       	std	Y+2, r22	; 0x02
    2f42:	5c 83       	std	Y+4, r21	; 0x04
    2f44:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2f46:	89 81       	ldd	r24, Y+1	; 0x01
    2f48:	6a 81       	ldd	r22, Y+2	; 0x02
    2f4a:	0e 94 57 17 	call	0x2eae	; 0x2eae <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f50:	9c 81       	ldd	r25, Y+4	; 0x04
    2f52:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <LCD_displayString>
}
    2f56:	0f 90       	pop	r0
    2f58:	0f 90       	pop	r0
    2f5a:	0f 90       	pop	r0
    2f5c:	0f 90       	pop	r0
    2f5e:	cf 91       	pop	r28
    2f60:	df 91       	pop	r29
    2f62:	08 95       	ret

00002f64 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2f64:	df 93       	push	r29
    2f66:	cf 93       	push	r28
    2f68:	cd b7       	in	r28, 0x3d	; 61
    2f6a:	de b7       	in	r29, 0x3e	; 62
    2f6c:	62 97       	sbiw	r28, 0x12	; 18
    2f6e:	0f b6       	in	r0, 0x3f	; 63
    2f70:	f8 94       	cli
    2f72:	de bf       	out	0x3e, r29	; 62
    2f74:	0f be       	out	0x3f, r0	; 63
    2f76:	cd bf       	out	0x3d, r28	; 61
    2f78:	9a 8b       	std	Y+18, r25	; 0x12
    2f7a:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2f7c:	89 89       	ldd	r24, Y+17	; 0x11
    2f7e:	9a 89       	ldd	r25, Y+18	; 0x12
    2f80:	9e 01       	movw	r18, r28
    2f82:	2f 5f       	subi	r18, 0xFF	; 255
    2f84:	3f 4f       	sbci	r19, 0xFF	; 255
    2f86:	b9 01       	movw	r22, r18
    2f88:	4a e0       	ldi	r20, 0x0A	; 10
    2f8a:	50 e0       	ldi	r21, 0x00	; 0
    2f8c:	0e 94 c5 19 	call	0x338a	; 0x338a <itoa>
   LCD_displayString(buff); /* Display the string */
    2f90:	ce 01       	movw	r24, r28
    2f92:	01 96       	adiw	r24, 0x01	; 1
    2f94:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <LCD_displayString>
}
    2f98:	62 96       	adiw	r28, 0x12	; 18
    2f9a:	0f b6       	in	r0, 0x3f	; 63
    2f9c:	f8 94       	cli
    2f9e:	de bf       	out	0x3e, r29	; 62
    2fa0:	0f be       	out	0x3f, r0	; 63
    2fa2:	cd bf       	out	0x3d, r28	; 61
    2fa4:	cf 91       	pop	r28
    2fa6:	df 91       	pop	r29
    2fa8:	08 95       	ret

00002faa <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2faa:	df 93       	push	r29
    2fac:	cf 93       	push	r28
    2fae:	cd b7       	in	r28, 0x3d	; 61
    2fb0:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2fb2:	81 e0       	ldi	r24, 0x01	; 1
    2fb4:	0e 94 44 13 	call	0x2688	; 0x2688 <LCD_sendCommand>
}
    2fb8:	cf 91       	pop	r28
    2fba:	df 91       	pop	r29
    2fbc:	08 95       	ret

00002fbe <main>:
#include "avr/interrupt.h"



int main (void)
{
    2fbe:	df 93       	push	r29
    2fc0:	cf 93       	push	r28
    2fc2:	cd b7       	in	r28, 0x3d	; 61
    2fc4:	de b7       	in	r29, 0x3e	; 62
			DataFrame_8Bits,
			BaudRate_9600
	};

	/*LCD init*/
	LCD_init();
    2fc6:	0e 94 21 13 	call	0x2642	; 0x2642 <LCD_init>

	/*UART_Init*/
    UART_Init(&UART_ConfigStruct);
    2fca:	83 ee       	ldi	r24, 0xE3	; 227
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	0e 94 2f 0c 	call	0x185e	; 0x185e <UART_Init>

    /*7seg to display number of wrong entries*/
    _7seg_Setup(PORTB_ID, PIN3_ID);
    2fd2:	81 e0       	ldi	r24, 0x01	; 1
    2fd4:	63 e0       	ldi	r22, 0x03	; 3
    2fd6:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <_7seg_Setup>





    OPERATION_EnterPassword();
    2fda:	0e 94 de 05 	call	0xbbc	; 0xbbc <OPERATION_EnterPassword>
    OPERATION_reEnterPassword();
    2fde:	0e 94 7f 06 	call	0xcfe	; 0xcfe <OPERATION_reEnterPassword>
    OPERATION_ReceivecheckPasswordMatch();
    2fe2:	0e 94 20 07 	call	0xe40	; 0xe40 <OPERATION_ReceivecheckPasswordMatch>
    2fe6:	ff cf       	rjmp	.-2      	; 0x2fe6 <main+0x28>

00002fe8 <_7seg_Setup>:
* Parameters (out):   None
* Return value:       None
* Description:        Setup 7seg port pins as output pins starting from PIN0 : PIN3
********************************************************************************/
void _7seg_Setup(uint8 port , uint8 first_pin)
{
    2fe8:	df 93       	push	r29
    2fea:	cf 93       	push	r28
    2fec:	00 d0       	rcall	.+0      	; 0x2fee <_7seg_Setup+0x6>
    2fee:	00 d0       	rcall	.+0      	; 0x2ff0 <_7seg_Setup+0x8>
    2ff0:	cd b7       	in	r28, 0x3d	; 61
    2ff2:	de b7       	in	r29, 0x3e	; 62
    2ff4:	89 83       	std	Y+1, r24	; 0x01
    2ff6:	6a 83       	std	Y+2, r22	; 0x02
	 g_7seg_port = port;
    2ff8:	89 81       	ldd	r24, Y+1	; 0x01
    2ffa:	80 93 fc 00 	sts	0x00FC, r24
	switch(port)
    2ffe:	89 81       	ldd	r24, Y+1	; 0x01
    3000:	28 2f       	mov	r18, r24
    3002:	30 e0       	ldi	r19, 0x00	; 0
    3004:	3c 83       	std	Y+4, r19	; 0x04
    3006:	2b 83       	std	Y+3, r18	; 0x03
    3008:	8b 81       	ldd	r24, Y+3	; 0x03
    300a:	9c 81       	ldd	r25, Y+4	; 0x04
    300c:	81 30       	cpi	r24, 0x01	; 1
    300e:	91 05       	cpc	r25, r1
    3010:	a9 f1       	breq	.+106    	; 0x307c <_7seg_Setup+0x94>
    3012:	2b 81       	ldd	r18, Y+3	; 0x03
    3014:	3c 81       	ldd	r19, Y+4	; 0x04
    3016:	22 30       	cpi	r18, 0x02	; 2
    3018:	31 05       	cpc	r19, r1
    301a:	2c f4       	brge	.+10     	; 0x3026 <_7seg_Setup+0x3e>
    301c:	8b 81       	ldd	r24, Y+3	; 0x03
    301e:	9c 81       	ldd	r25, Y+4	; 0x04
    3020:	00 97       	sbiw	r24, 0x00	; 0
    3022:	71 f0       	breq	.+28     	; 0x3040 <_7seg_Setup+0x58>
    3024:	84 c0       	rjmp	.+264    	; 0x312e <_7seg_Setup+0x146>
    3026:	2b 81       	ldd	r18, Y+3	; 0x03
    3028:	3c 81       	ldd	r19, Y+4	; 0x04
    302a:	22 30       	cpi	r18, 0x02	; 2
    302c:	31 05       	cpc	r19, r1
    302e:	09 f4       	brne	.+2      	; 0x3032 <_7seg_Setup+0x4a>
    3030:	43 c0       	rjmp	.+134    	; 0x30b8 <_7seg_Setup+0xd0>
    3032:	8b 81       	ldd	r24, Y+3	; 0x03
    3034:	9c 81       	ldd	r25, Y+4	; 0x04
    3036:	83 30       	cpi	r24, 0x03	; 3
    3038:	91 05       	cpc	r25, r1
    303a:	09 f4       	brne	.+2      	; 0x303e <_7seg_Setup+0x56>
    303c:	5b c0       	rjmp	.+182    	; 0x30f4 <_7seg_Setup+0x10c>
    303e:	77 c0       	rjmp	.+238    	; 0x312e <_7seg_Setup+0x146>
	{
	 /*Setting up the 7447 decoder 4 pins as output pins starting from PIN0:PIN3*/
 	 case PORTA_ID:
		           GPIO_setupPinDirection(PORTA_ID,first_pin,PIN_OUTPUT);
    3040:	80 e0       	ldi	r24, 0x00	; 0
    3042:	6a 81       	ldd	r22, Y+2	; 0x02
    3044:	41 e0       	ldi	r20, 0x01	; 1
    3046:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <GPIO_setupPinDirection>
		           GPIO_setupPinDirection(PORTA_ID,first_pin+1,PIN_OUTPUT);
    304a:	8a 81       	ldd	r24, Y+2	; 0x02
    304c:	98 2f       	mov	r25, r24
    304e:	9f 5f       	subi	r25, 0xFF	; 255
    3050:	80 e0       	ldi	r24, 0x00	; 0
    3052:	69 2f       	mov	r22, r25
    3054:	41 e0       	ldi	r20, 0x01	; 1
    3056:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <GPIO_setupPinDirection>
		           GPIO_setupPinDirection(PORTA_ID,first_pin+2,PIN_OUTPUT);
    305a:	8a 81       	ldd	r24, Y+2	; 0x02
    305c:	98 2f       	mov	r25, r24
    305e:	9e 5f       	subi	r25, 0xFE	; 254
    3060:	80 e0       	ldi	r24, 0x00	; 0
    3062:	69 2f       	mov	r22, r25
    3064:	41 e0       	ldi	r20, 0x01	; 1
    3066:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <GPIO_setupPinDirection>
		           GPIO_setupPinDirection(PORTA_ID,first_pin+3,PIN_OUTPUT);
    306a:	8a 81       	ldd	r24, Y+2	; 0x02
    306c:	98 2f       	mov	r25, r24
    306e:	9d 5f       	subi	r25, 0xFD	; 253
    3070:	80 e0       	ldi	r24, 0x00	; 0
    3072:	69 2f       	mov	r22, r25
    3074:	41 e0       	ldi	r20, 0x01	; 1
    3076:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <GPIO_setupPinDirection>
    307a:	59 c0       	rjmp	.+178    	; 0x312e <_7seg_Setup+0x146>
		           break;
 	 case PORTB_ID:
 			       GPIO_setupPinDirection(PORTB_ID,first_pin,PIN_OUTPUT);
    307c:	81 e0       	ldi	r24, 0x01	; 1
    307e:	6a 81       	ldd	r22, Y+2	; 0x02
    3080:	41 e0       	ldi	r20, 0x01	; 1
    3082:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <GPIO_setupPinDirection>
 			       GPIO_setupPinDirection(PORTB_ID,first_pin+1,PIN_OUTPUT);
    3086:	8a 81       	ldd	r24, Y+2	; 0x02
    3088:	98 2f       	mov	r25, r24
    308a:	9f 5f       	subi	r25, 0xFF	; 255
    308c:	81 e0       	ldi	r24, 0x01	; 1
    308e:	69 2f       	mov	r22, r25
    3090:	41 e0       	ldi	r20, 0x01	; 1
    3092:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <GPIO_setupPinDirection>
 			       GPIO_setupPinDirection(PORTB_ID,first_pin+2,PIN_OUTPUT);
    3096:	8a 81       	ldd	r24, Y+2	; 0x02
    3098:	98 2f       	mov	r25, r24
    309a:	9e 5f       	subi	r25, 0xFE	; 254
    309c:	81 e0       	ldi	r24, 0x01	; 1
    309e:	69 2f       	mov	r22, r25
    30a0:	41 e0       	ldi	r20, 0x01	; 1
    30a2:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <GPIO_setupPinDirection>
 			       GPIO_setupPinDirection(PORTB_ID,first_pin+3,PIN_OUTPUT);
    30a6:	8a 81       	ldd	r24, Y+2	; 0x02
    30a8:	98 2f       	mov	r25, r24
    30aa:	9d 5f       	subi	r25, 0xFD	; 253
    30ac:	81 e0       	ldi	r24, 0x01	; 1
    30ae:	69 2f       	mov	r22, r25
    30b0:	41 e0       	ldi	r20, 0x01	; 1
    30b2:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <GPIO_setupPinDirection>
    30b6:	3b c0       	rjmp	.+118    	; 0x312e <_7seg_Setup+0x146>
 			       break;
 	 case PORTC_ID:
 			       GPIO_setupPinDirection(PORTC_ID,first_pin,PIN_OUTPUT);
    30b8:	82 e0       	ldi	r24, 0x02	; 2
    30ba:	6a 81       	ldd	r22, Y+2	; 0x02
    30bc:	41 e0       	ldi	r20, 0x01	; 1
    30be:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <GPIO_setupPinDirection>
 			       GPIO_setupPinDirection(PORTC_ID,first_pin+1,PIN_OUTPUT);
    30c2:	8a 81       	ldd	r24, Y+2	; 0x02
    30c4:	98 2f       	mov	r25, r24
    30c6:	9f 5f       	subi	r25, 0xFF	; 255
    30c8:	82 e0       	ldi	r24, 0x02	; 2
    30ca:	69 2f       	mov	r22, r25
    30cc:	41 e0       	ldi	r20, 0x01	; 1
    30ce:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <GPIO_setupPinDirection>
 			       GPIO_setupPinDirection(PORTC_ID,first_pin+2,PIN_OUTPUT);
    30d2:	8a 81       	ldd	r24, Y+2	; 0x02
    30d4:	98 2f       	mov	r25, r24
    30d6:	9e 5f       	subi	r25, 0xFE	; 254
    30d8:	82 e0       	ldi	r24, 0x02	; 2
    30da:	69 2f       	mov	r22, r25
    30dc:	41 e0       	ldi	r20, 0x01	; 1
    30de:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <GPIO_setupPinDirection>
 			       GPIO_setupPinDirection(PORTC_ID,first_pin+3,PIN_OUTPUT);
    30e2:	8a 81       	ldd	r24, Y+2	; 0x02
    30e4:	98 2f       	mov	r25, r24
    30e6:	9d 5f       	subi	r25, 0xFD	; 253
    30e8:	82 e0       	ldi	r24, 0x02	; 2
    30ea:	69 2f       	mov	r22, r25
    30ec:	41 e0       	ldi	r20, 0x01	; 1
    30ee:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <GPIO_setupPinDirection>
    30f2:	1d c0       	rjmp	.+58     	; 0x312e <_7seg_Setup+0x146>
 			           break;
 	 case PORTD_ID:
 			       GPIO_setupPinDirection(PORTD_ID,first_pin,PIN_OUTPUT);
    30f4:	83 e0       	ldi	r24, 0x03	; 3
    30f6:	6a 81       	ldd	r22, Y+2	; 0x02
    30f8:	41 e0       	ldi	r20, 0x01	; 1
    30fa:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <GPIO_setupPinDirection>
 			       GPIO_setupPinDirection(PORTD_ID,first_pin+1,PIN_OUTPUT);
    30fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3100:	98 2f       	mov	r25, r24
    3102:	9f 5f       	subi	r25, 0xFF	; 255
    3104:	83 e0       	ldi	r24, 0x03	; 3
    3106:	69 2f       	mov	r22, r25
    3108:	41 e0       	ldi	r20, 0x01	; 1
    310a:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <GPIO_setupPinDirection>
 			       GPIO_setupPinDirection(PORTD_ID,first_pin+2,PIN_OUTPUT);
    310e:	8a 81       	ldd	r24, Y+2	; 0x02
    3110:	98 2f       	mov	r25, r24
    3112:	9e 5f       	subi	r25, 0xFE	; 254
    3114:	83 e0       	ldi	r24, 0x03	; 3
    3116:	69 2f       	mov	r22, r25
    3118:	41 e0       	ldi	r20, 0x01	; 1
    311a:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <GPIO_setupPinDirection>
 			       GPIO_setupPinDirection(PORTD_ID,first_pin+3,PIN_OUTPUT);
    311e:	8a 81       	ldd	r24, Y+2	; 0x02
    3120:	98 2f       	mov	r25, r24
    3122:	9d 5f       	subi	r25, 0xFD	; 253
    3124:	83 e0       	ldi	r24, 0x03	; 3
    3126:	69 2f       	mov	r22, r25
    3128:	41 e0       	ldi	r20, 0x01	; 1
    312a:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <GPIO_setupPinDirection>
 			           break;
 	/*For wrong port entry , do nothing*/
 	 default: break;
	}
}
    312e:	0f 90       	pop	r0
    3130:	0f 90       	pop	r0
    3132:	0f 90       	pop	r0
    3134:	0f 90       	pop	r0
    3136:	cf 91       	pop	r28
    3138:	df 91       	pop	r29
    313a:	08 95       	ret

0000313c <_7seg_Write>:
* Parameters (out):   None
* Return value:       None
* Description:        Display the required value on the 7segment
********************************************************************************/
void _7seg_Write(uint8 value)
{
    313c:	df 93       	push	r29
    313e:	cf 93       	push	r28
    3140:	00 d0       	rcall	.+0      	; 0x3142 <_7seg_Write+0x6>
    3142:	0f 92       	push	r0
    3144:	cd b7       	in	r28, 0x3d	; 61
    3146:	de b7       	in	r29, 0x3e	; 62
    3148:	89 83       	std	Y+1, r24	; 0x01
	 /*Check if the required value is from 0:9 , otherwise do nothing*/
	 if(value >=0 && value <= 9 )
    314a:	89 81       	ldd	r24, Y+1	; 0x01
    314c:	8a 30       	cpi	r24, 0x0A	; 10
    314e:	08 f0       	brcs	.+2      	; 0x3152 <_7seg_Write+0x16>
    3150:	83 c0       	rjmp	.+262    	; 0x3258 <_7seg_Write+0x11c>
	 {
         switch(value)
    3152:	89 81       	ldd	r24, Y+1	; 0x01
    3154:	28 2f       	mov	r18, r24
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	3b 83       	std	Y+3, r19	; 0x03
    315a:	2a 83       	std	Y+2, r18	; 0x02
    315c:	8a 81       	ldd	r24, Y+2	; 0x02
    315e:	9b 81       	ldd	r25, Y+3	; 0x03
    3160:	81 30       	cpi	r24, 0x01	; 1
    3162:	91 05       	cpc	r25, r1
    3164:	79 f1       	breq	.+94     	; 0x31c4 <_7seg_Write+0x88>
    3166:	2a 81       	ldd	r18, Y+2	; 0x02
    3168:	3b 81       	ldd	r19, Y+3	; 0x03
    316a:	22 30       	cpi	r18, 0x02	; 2
    316c:	31 05       	cpc	r19, r1
    316e:	2c f4       	brge	.+10     	; 0x317a <_7seg_Write+0x3e>
    3170:	8a 81       	ldd	r24, Y+2	; 0x02
    3172:	9b 81       	ldd	r25, Y+3	; 0x03
    3174:	00 97       	sbiw	r24, 0x00	; 0
    3176:	69 f0       	breq	.+26     	; 0x3192 <_7seg_Write+0x56>
    3178:	6f c0       	rjmp	.+222    	; 0x3258 <_7seg_Write+0x11c>
    317a:	2a 81       	ldd	r18, Y+2	; 0x02
    317c:	3b 81       	ldd	r19, Y+3	; 0x03
    317e:	22 30       	cpi	r18, 0x02	; 2
    3180:	31 05       	cpc	r19, r1
    3182:	c9 f1       	breq	.+114    	; 0x31f6 <_7seg_Write+0xba>
    3184:	8a 81       	ldd	r24, Y+2	; 0x02
    3186:	9b 81       	ldd	r25, Y+3	; 0x03
    3188:	83 30       	cpi	r24, 0x03	; 3
    318a:	91 05       	cpc	r25, r1
    318c:	09 f4       	brne	.+2      	; 0x3190 <_7seg_Write+0x54>
    318e:	4c c0       	rjmp	.+152    	; 0x3228 <_7seg_Write+0xec>
    3190:	63 c0       	rjmp	.+198    	; 0x3258 <_7seg_Write+0x11c>
         {
         case 0 :   		 GPIO_writePin( g_7seg_port, 3, LOGIC_LOW);
    3192:	80 91 fc 00 	lds	r24, 0x00FC
    3196:	63 e0       	ldi	r22, 0x03	; 3
    3198:	40 e0       	ldi	r20, 0x00	; 0
    319a:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <GPIO_writePin>
                             GPIO_writePin( g_7seg_port, 4, LOGIC_LOW);
    319e:	80 91 fc 00 	lds	r24, 0x00FC
    31a2:	64 e0       	ldi	r22, 0x04	; 4
    31a4:	40 e0       	ldi	r20, 0x00	; 0
    31a6:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <GPIO_writePin>
                             GPIO_writePin( g_7seg_port, 5, LOGIC_LOW);
    31aa:	80 91 fc 00 	lds	r24, 0x00FC
    31ae:	65 e0       	ldi	r22, 0x05	; 5
    31b0:	40 e0       	ldi	r20, 0x00	; 0
    31b2:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <GPIO_writePin>
                             GPIO_writePin( g_7seg_port, 6, LOGIC_LOW);
    31b6:	80 91 fc 00 	lds	r24, 0x00FC
    31ba:	66 e0       	ldi	r22, 0x06	; 6
    31bc:	40 e0       	ldi	r20, 0x00	; 0
    31be:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <GPIO_writePin>
    31c2:	4a c0       	rjmp	.+148    	; 0x3258 <_7seg_Write+0x11c>
        	        break;
         case 1 :   		 GPIO_writePin( g_7seg_port, 3, LOGIC_HIGH);
    31c4:	80 91 fc 00 	lds	r24, 0x00FC
    31c8:	63 e0       	ldi	r22, 0x03	; 3
    31ca:	41 e0       	ldi	r20, 0x01	; 1
    31cc:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <GPIO_writePin>
                             GPIO_writePin( g_7seg_port, 4, LOGIC_LOW);
    31d0:	80 91 fc 00 	lds	r24, 0x00FC
    31d4:	64 e0       	ldi	r22, 0x04	; 4
    31d6:	40 e0       	ldi	r20, 0x00	; 0
    31d8:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <GPIO_writePin>
                             GPIO_writePin( g_7seg_port, 5, LOGIC_LOW);
    31dc:	80 91 fc 00 	lds	r24, 0x00FC
    31e0:	65 e0       	ldi	r22, 0x05	; 5
    31e2:	40 e0       	ldi	r20, 0x00	; 0
    31e4:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <GPIO_writePin>
                             GPIO_writePin( g_7seg_port, 6, LOGIC_LOW);
    31e8:	80 91 fc 00 	lds	r24, 0x00FC
    31ec:	66 e0       	ldi	r22, 0x06	; 6
    31ee:	40 e0       	ldi	r20, 0x00	; 0
    31f0:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <GPIO_writePin>
    31f4:	31 c0       	rjmp	.+98     	; 0x3258 <_7seg_Write+0x11c>
        	        break;
         case 2 :   		 GPIO_writePin( g_7seg_port, 3, LOGIC_LOW);
    31f6:	80 91 fc 00 	lds	r24, 0x00FC
    31fa:	63 e0       	ldi	r22, 0x03	; 3
    31fc:	40 e0       	ldi	r20, 0x00	; 0
    31fe:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <GPIO_writePin>
                             GPIO_writePin( g_7seg_port, 4, LOGIC_HIGH);
    3202:	80 91 fc 00 	lds	r24, 0x00FC
    3206:	64 e0       	ldi	r22, 0x04	; 4
    3208:	41 e0       	ldi	r20, 0x01	; 1
    320a:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <GPIO_writePin>
                             GPIO_writePin( g_7seg_port, 5, LOGIC_LOW);
    320e:	80 91 fc 00 	lds	r24, 0x00FC
    3212:	65 e0       	ldi	r22, 0x05	; 5
    3214:	40 e0       	ldi	r20, 0x00	; 0
    3216:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <GPIO_writePin>
                             GPIO_writePin( g_7seg_port, 6, LOGIC_LOW);
    321a:	80 91 fc 00 	lds	r24, 0x00FC
    321e:	66 e0       	ldi	r22, 0x06	; 6
    3220:	40 e0       	ldi	r20, 0x00	; 0
    3222:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <GPIO_writePin>
    3226:	18 c0       	rjmp	.+48     	; 0x3258 <_7seg_Write+0x11c>
        	        break;
         case 3 :   		 GPIO_writePin( g_7seg_port, 3, LOGIC_HIGH);
    3228:	80 91 fc 00 	lds	r24, 0x00FC
    322c:	63 e0       	ldi	r22, 0x03	; 3
    322e:	41 e0       	ldi	r20, 0x01	; 1
    3230:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <GPIO_writePin>
                             GPIO_writePin( g_7seg_port, 4, LOGIC_HIGH);
    3234:	80 91 fc 00 	lds	r24, 0x00FC
    3238:	64 e0       	ldi	r22, 0x04	; 4
    323a:	41 e0       	ldi	r20, 0x01	; 1
    323c:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <GPIO_writePin>
                             GPIO_writePin( g_7seg_port, 5, LOGIC_LOW);
    3240:	80 91 fc 00 	lds	r24, 0x00FC
    3244:	65 e0       	ldi	r22, 0x05	; 5
    3246:	40 e0       	ldi	r20, 0x00	; 0
    3248:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <GPIO_writePin>
                             GPIO_writePin( g_7seg_port, 6, LOGIC_LOW);
    324c:	80 91 fc 00 	lds	r24, 0x00FC
    3250:	66 e0       	ldi	r22, 0x06	; 6
    3252:	40 e0       	ldi	r20, 0x00	; 0
    3254:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <GPIO_writePin>


	 }


}
    3258:	0f 90       	pop	r0
    325a:	0f 90       	pop	r0
    325c:	0f 90       	pop	r0
    325e:	cf 91       	pop	r28
    3260:	df 91       	pop	r29
    3262:	08 95       	ret

00003264 <__mulsi3>:
    3264:	62 9f       	mul	r22, r18
    3266:	d0 01       	movw	r26, r0
    3268:	73 9f       	mul	r23, r19
    326a:	f0 01       	movw	r30, r0
    326c:	82 9f       	mul	r24, r18
    326e:	e0 0d       	add	r30, r0
    3270:	f1 1d       	adc	r31, r1
    3272:	64 9f       	mul	r22, r20
    3274:	e0 0d       	add	r30, r0
    3276:	f1 1d       	adc	r31, r1
    3278:	92 9f       	mul	r25, r18
    327a:	f0 0d       	add	r31, r0
    327c:	83 9f       	mul	r24, r19
    327e:	f0 0d       	add	r31, r0
    3280:	74 9f       	mul	r23, r20
    3282:	f0 0d       	add	r31, r0
    3284:	65 9f       	mul	r22, r21
    3286:	f0 0d       	add	r31, r0
    3288:	99 27       	eor	r25, r25
    328a:	72 9f       	mul	r23, r18
    328c:	b0 0d       	add	r27, r0
    328e:	e1 1d       	adc	r30, r1
    3290:	f9 1f       	adc	r31, r25
    3292:	63 9f       	mul	r22, r19
    3294:	b0 0d       	add	r27, r0
    3296:	e1 1d       	adc	r30, r1
    3298:	f9 1f       	adc	r31, r25
    329a:	bd 01       	movw	r22, r26
    329c:	cf 01       	movw	r24, r30
    329e:	11 24       	eor	r1, r1
    32a0:	08 95       	ret

000032a2 <__divmodsi4>:
    32a2:	97 fb       	bst	r25, 7
    32a4:	09 2e       	mov	r0, r25
    32a6:	05 26       	eor	r0, r21
    32a8:	0e d0       	rcall	.+28     	; 0x32c6 <__divmodsi4_neg1>
    32aa:	57 fd       	sbrc	r21, 7
    32ac:	04 d0       	rcall	.+8      	; 0x32b6 <__divmodsi4_neg2>
    32ae:	14 d0       	rcall	.+40     	; 0x32d8 <__udivmodsi4>
    32b0:	0a d0       	rcall	.+20     	; 0x32c6 <__divmodsi4_neg1>
    32b2:	00 1c       	adc	r0, r0
    32b4:	38 f4       	brcc	.+14     	; 0x32c4 <__divmodsi4_exit>

000032b6 <__divmodsi4_neg2>:
    32b6:	50 95       	com	r21
    32b8:	40 95       	com	r20
    32ba:	30 95       	com	r19
    32bc:	21 95       	neg	r18
    32be:	3f 4f       	sbci	r19, 0xFF	; 255
    32c0:	4f 4f       	sbci	r20, 0xFF	; 255
    32c2:	5f 4f       	sbci	r21, 0xFF	; 255

000032c4 <__divmodsi4_exit>:
    32c4:	08 95       	ret

000032c6 <__divmodsi4_neg1>:
    32c6:	f6 f7       	brtc	.-4      	; 0x32c4 <__divmodsi4_exit>
    32c8:	90 95       	com	r25
    32ca:	80 95       	com	r24
    32cc:	70 95       	com	r23
    32ce:	61 95       	neg	r22
    32d0:	7f 4f       	sbci	r23, 0xFF	; 255
    32d2:	8f 4f       	sbci	r24, 0xFF	; 255
    32d4:	9f 4f       	sbci	r25, 0xFF	; 255
    32d6:	08 95       	ret

000032d8 <__udivmodsi4>:
    32d8:	a1 e2       	ldi	r26, 0x21	; 33
    32da:	1a 2e       	mov	r1, r26
    32dc:	aa 1b       	sub	r26, r26
    32de:	bb 1b       	sub	r27, r27
    32e0:	fd 01       	movw	r30, r26
    32e2:	0d c0       	rjmp	.+26     	; 0x32fe <__udivmodsi4_ep>

000032e4 <__udivmodsi4_loop>:
    32e4:	aa 1f       	adc	r26, r26
    32e6:	bb 1f       	adc	r27, r27
    32e8:	ee 1f       	adc	r30, r30
    32ea:	ff 1f       	adc	r31, r31
    32ec:	a2 17       	cp	r26, r18
    32ee:	b3 07       	cpc	r27, r19
    32f0:	e4 07       	cpc	r30, r20
    32f2:	f5 07       	cpc	r31, r21
    32f4:	20 f0       	brcs	.+8      	; 0x32fe <__udivmodsi4_ep>
    32f6:	a2 1b       	sub	r26, r18
    32f8:	b3 0b       	sbc	r27, r19
    32fa:	e4 0b       	sbc	r30, r20
    32fc:	f5 0b       	sbc	r31, r21

000032fe <__udivmodsi4_ep>:
    32fe:	66 1f       	adc	r22, r22
    3300:	77 1f       	adc	r23, r23
    3302:	88 1f       	adc	r24, r24
    3304:	99 1f       	adc	r25, r25
    3306:	1a 94       	dec	r1
    3308:	69 f7       	brne	.-38     	; 0x32e4 <__udivmodsi4_loop>
    330a:	60 95       	com	r22
    330c:	70 95       	com	r23
    330e:	80 95       	com	r24
    3310:	90 95       	com	r25
    3312:	9b 01       	movw	r18, r22
    3314:	ac 01       	movw	r20, r24
    3316:	bd 01       	movw	r22, r26
    3318:	cf 01       	movw	r24, r30
    331a:	08 95       	ret

0000331c <__prologue_saves__>:
    331c:	2f 92       	push	r2
    331e:	3f 92       	push	r3
    3320:	4f 92       	push	r4
    3322:	5f 92       	push	r5
    3324:	6f 92       	push	r6
    3326:	7f 92       	push	r7
    3328:	8f 92       	push	r8
    332a:	9f 92       	push	r9
    332c:	af 92       	push	r10
    332e:	bf 92       	push	r11
    3330:	cf 92       	push	r12
    3332:	df 92       	push	r13
    3334:	ef 92       	push	r14
    3336:	ff 92       	push	r15
    3338:	0f 93       	push	r16
    333a:	1f 93       	push	r17
    333c:	cf 93       	push	r28
    333e:	df 93       	push	r29
    3340:	cd b7       	in	r28, 0x3d	; 61
    3342:	de b7       	in	r29, 0x3e	; 62
    3344:	ca 1b       	sub	r28, r26
    3346:	db 0b       	sbc	r29, r27
    3348:	0f b6       	in	r0, 0x3f	; 63
    334a:	f8 94       	cli
    334c:	de bf       	out	0x3e, r29	; 62
    334e:	0f be       	out	0x3f, r0	; 63
    3350:	cd bf       	out	0x3d, r28	; 61
    3352:	09 94       	ijmp

00003354 <__epilogue_restores__>:
    3354:	2a 88       	ldd	r2, Y+18	; 0x12
    3356:	39 88       	ldd	r3, Y+17	; 0x11
    3358:	48 88       	ldd	r4, Y+16	; 0x10
    335a:	5f 84       	ldd	r5, Y+15	; 0x0f
    335c:	6e 84       	ldd	r6, Y+14	; 0x0e
    335e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3360:	8c 84       	ldd	r8, Y+12	; 0x0c
    3362:	9b 84       	ldd	r9, Y+11	; 0x0b
    3364:	aa 84       	ldd	r10, Y+10	; 0x0a
    3366:	b9 84       	ldd	r11, Y+9	; 0x09
    3368:	c8 84       	ldd	r12, Y+8	; 0x08
    336a:	df 80       	ldd	r13, Y+7	; 0x07
    336c:	ee 80       	ldd	r14, Y+6	; 0x06
    336e:	fd 80       	ldd	r15, Y+5	; 0x05
    3370:	0c 81       	ldd	r16, Y+4	; 0x04
    3372:	1b 81       	ldd	r17, Y+3	; 0x03
    3374:	aa 81       	ldd	r26, Y+2	; 0x02
    3376:	b9 81       	ldd	r27, Y+1	; 0x01
    3378:	ce 0f       	add	r28, r30
    337a:	d1 1d       	adc	r29, r1
    337c:	0f b6       	in	r0, 0x3f	; 63
    337e:	f8 94       	cli
    3380:	de bf       	out	0x3e, r29	; 62
    3382:	0f be       	out	0x3f, r0	; 63
    3384:	cd bf       	out	0x3d, r28	; 61
    3386:	ed 01       	movw	r28, r26
    3388:	08 95       	ret

0000338a <itoa>:
    338a:	fb 01       	movw	r30, r22
    338c:	9f 01       	movw	r18, r30
    338e:	e8 94       	clt
    3390:	42 30       	cpi	r20, 0x02	; 2
    3392:	c4 f0       	brlt	.+48     	; 0x33c4 <itoa+0x3a>
    3394:	45 32       	cpi	r20, 0x25	; 37
    3396:	b4 f4       	brge	.+44     	; 0x33c4 <itoa+0x3a>
    3398:	4a 30       	cpi	r20, 0x0A	; 10
    339a:	29 f4       	brne	.+10     	; 0x33a6 <itoa+0x1c>
    339c:	97 fb       	bst	r25, 7
    339e:	1e f4       	brtc	.+6      	; 0x33a6 <itoa+0x1c>
    33a0:	90 95       	com	r25
    33a2:	81 95       	neg	r24
    33a4:	9f 4f       	sbci	r25, 0xFF	; 255
    33a6:	64 2f       	mov	r22, r20
    33a8:	77 27       	eor	r23, r23
    33aa:	0e 94 f6 19 	call	0x33ec	; 0x33ec <__udivmodhi4>
    33ae:	80 5d       	subi	r24, 0xD0	; 208
    33b0:	8a 33       	cpi	r24, 0x3A	; 58
    33b2:	0c f0       	brlt	.+2      	; 0x33b6 <itoa+0x2c>
    33b4:	89 5d       	subi	r24, 0xD9	; 217
    33b6:	81 93       	st	Z+, r24
    33b8:	cb 01       	movw	r24, r22
    33ba:	00 97       	sbiw	r24, 0x00	; 0
    33bc:	a1 f7       	brne	.-24     	; 0x33a6 <itoa+0x1c>
    33be:	16 f4       	brtc	.+4      	; 0x33c4 <itoa+0x3a>
    33c0:	5d e2       	ldi	r21, 0x2D	; 45
    33c2:	51 93       	st	Z+, r21
    33c4:	10 82       	st	Z, r1
    33c6:	c9 01       	movw	r24, r18
    33c8:	0c 94 e6 19 	jmp	0x33cc	; 0x33cc <strrev>

000033cc <strrev>:
    33cc:	dc 01       	movw	r26, r24
    33ce:	fc 01       	movw	r30, r24
    33d0:	67 2f       	mov	r22, r23
    33d2:	71 91       	ld	r23, Z+
    33d4:	77 23       	and	r23, r23
    33d6:	e1 f7       	brne	.-8      	; 0x33d0 <strrev+0x4>
    33d8:	32 97       	sbiw	r30, 0x02	; 2
    33da:	04 c0       	rjmp	.+8      	; 0x33e4 <strrev+0x18>
    33dc:	7c 91       	ld	r23, X
    33de:	6d 93       	st	X+, r22
    33e0:	70 83       	st	Z, r23
    33e2:	62 91       	ld	r22, -Z
    33e4:	ae 17       	cp	r26, r30
    33e6:	bf 07       	cpc	r27, r31
    33e8:	c8 f3       	brcs	.-14     	; 0x33dc <strrev+0x10>
    33ea:	08 95       	ret

000033ec <__udivmodhi4>:
    33ec:	aa 1b       	sub	r26, r26
    33ee:	bb 1b       	sub	r27, r27
    33f0:	51 e1       	ldi	r21, 0x11	; 17
    33f2:	07 c0       	rjmp	.+14     	; 0x3402 <__udivmodhi4_ep>

000033f4 <__udivmodhi4_loop>:
    33f4:	aa 1f       	adc	r26, r26
    33f6:	bb 1f       	adc	r27, r27
    33f8:	a6 17       	cp	r26, r22
    33fa:	b7 07       	cpc	r27, r23
    33fc:	10 f0       	brcs	.+4      	; 0x3402 <__udivmodhi4_ep>
    33fe:	a6 1b       	sub	r26, r22
    3400:	b7 0b       	sbc	r27, r23

00003402 <__udivmodhi4_ep>:
    3402:	88 1f       	adc	r24, r24
    3404:	99 1f       	adc	r25, r25
    3406:	5a 95       	dec	r21
    3408:	a9 f7       	brne	.-22     	; 0x33f4 <__udivmodhi4_loop>
    340a:	80 95       	com	r24
    340c:	90 95       	com	r25
    340e:	bc 01       	movw	r22, r24
    3410:	cd 01       	movw	r24, r26
    3412:	08 95       	ret

00003414 <_exit>:
    3414:	f8 94       	cli

00003416 <__stop_program>:
    3416:	ff cf       	rjmp	.-2      	; 0x3416 <__stop_program>
