
Final_Projcet_II.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ce0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00002ce0  00002d74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  0080007a  0080007a  00002d8e  2**0
                  ALLOC
  3 .stab         000030c0  00000000  00000000  00002d90  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001b69  00000000  00000000  00005e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000079b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007af9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007c69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000098b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a79d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b54c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b6ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b939  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c107  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 1c 0c 	jmp	0x1838	; 0x1838 <__vector_3>
      10:	0c 94 e9 0b 	jmp	0x17d2	; 0x17d2 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 83 0b 	jmp	0x1706	; 0x1706 <__vector_6>
      1c:	0c 94 b6 0b 	jmp	0x176c	; 0x176c <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 76 0e 	jmp	0x1cec	; 0x1cec <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 86 0e 	jmp	0x1d0c	; 0x1d0c <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 50 0b 	jmp	0x16a0	; 0x16a0 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ee       	ldi	r30, 0xE0	; 224
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 39       	cpi	r26, 0x98	; 152
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <main>
      8a:	0c 94 6e 16 	jmp	0x2cdc	; 0x2cdc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 37 16 	jmp	0x2c6e	; 0x2c6e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 53 16 	jmp	0x2ca6	; 0x2ca6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 43 16 	jmp	0x2c86	; 0x2c86 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5f 16 	jmp	0x2cbe	; 0x2cbe <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 43 16 	jmp	0x2c86	; 0x2c86 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5f 16 	jmp	0x2cbe	; 0x2cbe <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 37 16 	jmp	0x2c6e	; 0x2c6e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 53 16 	jmp	0x2ca6	; 0x2ca6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 43 16 	jmp	0x2c86	; 0x2c86 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 5f 16 	jmp	0x2cbe	; 0x2cbe <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 43 16 	jmp	0x2c86	; 0x2c86 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 5f 16 	jmp	0x2cbe	; 0x2cbe <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 43 16 	jmp	0x2c86	; 0x2c86 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 5f 16 	jmp	0x2cbe	; 0x2cbe <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 63 16 	jmp	0x2cc6	; 0x2cc6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <BUZZER_init>:
* Return value:       None
* Description:        Define buzzer pin as output pin
*                     Saves port and pin in global variables defined above
********************************************************************************/
void BUZZER_init(uint8 port , uint8 pin)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <BUZZER_init+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	89 83       	std	Y+1, r24	; 0x01
     b52:	6a 83       	std	Y+2, r22	; 0x02
	/*User Error*/
    if( port > 3 || pin > 7 )
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	84 30       	cpi	r24, 0x04	; 4
     b58:	70 f4       	brcc	.+28     	; 0xb76 <BUZZER_init+0x30>
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	58 f4       	brcc	.+22     	; 0xb76 <BUZZER_init+0x30>

    }
    else
    {
       /*Setup Pin direction as output pin*/
       GPIO_setupPinDirection(port, pin, PIN_OUTPUT);
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	6a 81       	ldd	r22, Y+2	; 0x02
     b64:	41 e0       	ldi	r20, 0x01	; 1
     b66:	0e 94 48 12 	call	0x2490	; 0x2490 <GPIO_setupPinDirection>

       /*Saves the port and pin in global variables to be used in functions below*/
       g_buzzer_port = port;
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	80 93 7a 00 	sts	0x007A, r24
       g_buzzer_pin = pin;
     b70:	8a 81       	ldd	r24, Y+2	; 0x02
     b72:	80 93 7b 00 	sts	0x007B, r24
    }
}
     b76:	0f 90       	pop	r0
     b78:	0f 90       	pop	r0
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <BUZZER_ON>:
* Parameters (out):   None
* Return value:       None
* Description:        Make The Buzzer Beebs
********************************************************************************/
void BUZZER_ON(void)
{
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
   /*Make the Buzzer Beebs*/
   GPIO_writePin(g_buzzer_port, g_buzzer_pin, LOGIC_HIGH);
     b88:	80 91 7a 00 	lds	r24, 0x007A
     b8c:	90 91 7b 00 	lds	r25, 0x007B
     b90:	69 2f       	mov	r22, r25
     b92:	41 e0       	ldi	r20, 0x01	; 1
     b94:	0e 94 33 13 	call	0x2666	; 0x2666 <GPIO_writePin>
}
     b98:	cf 91       	pop	r28
     b9a:	df 91       	pop	r29
     b9c:	08 95       	ret

00000b9e <BUZZER_OFF>:
* Parameters (out):   None
* Return value:       None
* Description:        Make The Buzzer Stop
********************************************************************************/
void BUZZER_OFF(void)
{
     b9e:	df 93       	push	r29
     ba0:	cf 93       	push	r28
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
	/*Make the Buzzer Stops*/
	 GPIO_writePin(g_buzzer_port, g_buzzer_pin, LOGIC_LOW);
     ba6:	80 91 7a 00 	lds	r24, 0x007A
     baa:	90 91 7b 00 	lds	r25, 0x007B
     bae:	69 2f       	mov	r22, r25
     bb0:	40 e0       	ldi	r20, 0x00	; 0
     bb2:	0e 94 33 13 	call	0x2666	; 0x2666 <GPIO_writePin>
}
     bb6:	cf 91       	pop	r28
     bb8:	df 91       	pop	r29
     bba:	08 95       	ret

00000bbc <DC_MOTOR_Init>:
* Parameters (out):   None
* Return value:       None
* Description:        Initialize the DC Motor
********************************************************************************/
void DC_MOTOR_Init(void)
{
     bbc:	df 93       	push	r29
     bbe:	cf 93       	push	r28
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
	/*Set DC Motors Pins as Output PINS*/
	GPIO_setupPinDirection(DC_Motor_PORT, DC_Motor_PINA, PIN_OUTPUT);
     bc4:	83 e0       	ldi	r24, 0x03	; 3
     bc6:	62 e0       	ldi	r22, 0x02	; 2
     bc8:	41 e0       	ldi	r20, 0x01	; 1
     bca:	0e 94 48 12 	call	0x2490	; 0x2490 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_Motor_PORT, DC_Motor_PINB, PIN_OUTPUT);
     bce:	83 e0       	ldi	r24, 0x03	; 3
     bd0:	63 e0       	ldi	r22, 0x03	; 3
     bd2:	41 e0       	ldi	r20, 0x01	; 1
     bd4:	0e 94 48 12 	call	0x2490	; 0x2490 <GPIO_setupPinDirection>

	/*Stop DC Motor at the beginning*/
	GPIO_writePin(DC_Motor_PORT,DC_Motor_PINA,LOGIC_LOW);
     bd8:	83 e0       	ldi	r24, 0x03	; 3
     bda:	62 e0       	ldi	r22, 0x02	; 2
     bdc:	40 e0       	ldi	r20, 0x00	; 0
     bde:	0e 94 33 13 	call	0x2666	; 0x2666 <GPIO_writePin>
	GPIO_writePin(DC_Motor_PORT,DC_Motor_PINB,LOGIC_LOW);
     be2:	83 e0       	ldi	r24, 0x03	; 3
     be4:	63 e0       	ldi	r22, 0x03	; 3
     be6:	40 e0       	ldi	r20, 0x00	; 0
     be8:	0e 94 33 13 	call	0x2666	; 0x2666 <GPIO_writePin>
}
     bec:	cf 91       	pop	r28
     bee:	df 91       	pop	r29
     bf0:	08 95       	ret

00000bf2 <DC_MOTOR_Rotate>:
* Description:        Rotate the DC Depending on the Motor State
*                     Send the required PWM Duty Cycle based on the required
*                     speed precentage needed.
********************************************************************************/
void DC_MOTOR_Rotate(DC_Motor_State state , uint8 speed)
{
     bf2:	df 93       	push	r29
     bf4:	cf 93       	push	r28
     bf6:	00 d0       	rcall	.+0      	; 0xbf8 <DC_MOTOR_Rotate+0x6>
     bf8:	00 d0       	rcall	.+0      	; 0xbfa <DC_MOTOR_Rotate+0x8>
     bfa:	0f 92       	push	r0
     bfc:	cd b7       	in	r28, 0x3d	; 61
     bfe:	de b7       	in	r29, 0x3e	; 62
     c00:	8a 83       	std	Y+2, r24	; 0x02
     c02:	6b 83       	std	Y+3, r22	; 0x03
	/*Variable to convert the speed precentage into a duty cycle*/
	uint8 temp_duty_cycle;
    switch ( state )
     c04:	8a 81       	ldd	r24, Y+2	; 0x02
     c06:	28 2f       	mov	r18, r24
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	3d 83       	std	Y+5, r19	; 0x05
     c0c:	2c 83       	std	Y+4, r18	; 0x04
     c0e:	8c 81       	ldd	r24, Y+4	; 0x04
     c10:	9d 81       	ldd	r25, Y+5	; 0x05
     c12:	81 30       	cpi	r24, 0x01	; 1
     c14:	91 05       	cpc	r25, r1
     c16:	a1 f0       	breq	.+40     	; 0xc40 <DC_MOTOR_Rotate+0x4e>
     c18:	2c 81       	ldd	r18, Y+4	; 0x04
     c1a:	3d 81       	ldd	r19, Y+5	; 0x05
     c1c:	22 30       	cpi	r18, 0x02	; 2
     c1e:	31 05       	cpc	r19, r1
     c20:	d1 f0       	breq	.+52     	; 0xc56 <DC_MOTOR_Rotate+0x64>
     c22:	8c 81       	ldd	r24, Y+4	; 0x04
     c24:	9d 81       	ldd	r25, Y+5	; 0x05
     c26:	00 97       	sbiw	r24, 0x00	; 0
     c28:	01 f5       	brne	.+64     	; 0xc6a <DC_MOTOR_Rotate+0x78>
    {
       case Stop : GPIO_writePin(DC_Motor_PORT,DC_Motor_PINA,LOGIC_LOW);
     c2a:	83 e0       	ldi	r24, 0x03	; 3
     c2c:	62 e0       	ldi	r22, 0x02	; 2
     c2e:	40 e0       	ldi	r20, 0x00	; 0
     c30:	0e 94 33 13 	call	0x2666	; 0x2666 <GPIO_writePin>
                   GPIO_writePin(DC_Motor_PORT,DC_Motor_PINB,LOGIC_LOW);
     c34:	83 e0       	ldi	r24, 0x03	; 3
     c36:	63 e0       	ldi	r22, 0x03	; 3
     c38:	40 e0       	ldi	r20, 0x00	; 0
     c3a:	0e 94 33 13 	call	0x2666	; 0x2666 <GPIO_writePin>
     c3e:	15 c0       	rjmp	.+42     	; 0xc6a <DC_MOTOR_Rotate+0x78>
                   break;
       case CW:
    	           GPIO_writePin(DC_Motor_PORT,DC_Motor_PINA,LOGIC_HIGH);
     c40:	83 e0       	ldi	r24, 0x03	; 3
     c42:	62 e0       	ldi	r22, 0x02	; 2
     c44:	41 e0       	ldi	r20, 0x01	; 1
     c46:	0e 94 33 13 	call	0x2666	; 0x2666 <GPIO_writePin>
    	           GPIO_writePin(DC_Motor_PORT,DC_Motor_PINB,LOGIC_LOW);
     c4a:	83 e0       	ldi	r24, 0x03	; 3
     c4c:	63 e0       	ldi	r22, 0x03	; 3
     c4e:	40 e0       	ldi	r20, 0x00	; 0
     c50:	0e 94 33 13 	call	0x2666	; 0x2666 <GPIO_writePin>
     c54:	0a c0       	rjmp	.+20     	; 0xc6a <DC_MOTOR_Rotate+0x78>
    	           break;
       case CCW:
    	           GPIO_writePin(DC_Motor_PORT,DC_Motor_PINA,LOGIC_LOW);
     c56:	83 e0       	ldi	r24, 0x03	; 3
     c58:	62 e0       	ldi	r22, 0x02	; 2
     c5a:	40 e0       	ldi	r20, 0x00	; 0
     c5c:	0e 94 33 13 	call	0x2666	; 0x2666 <GPIO_writePin>
    	           GPIO_writePin(DC_Motor_PORT,DC_Motor_PINB,LOGIC_HIGH);
     c60:	83 e0       	ldi	r24, 0x03	; 3
     c62:	63 e0       	ldi	r22, 0x03	; 3
     c64:	41 e0       	ldi	r20, 0x01	; 1
     c66:	0e 94 33 13 	call	0x2666	; 0x2666 <GPIO_writePin>
    	           break;
    }
    temp_duty_cycle = (speed * 255) / 100 ;
     c6a:	8b 81       	ldd	r24, Y+3	; 0x03
     c6c:	48 2f       	mov	r20, r24
     c6e:	50 e0       	ldi	r21, 0x00	; 0
     c70:	ca 01       	movw	r24, r20
     c72:	9c 01       	movw	r18, r24
     c74:	22 0f       	add	r18, r18
     c76:	33 1f       	adc	r19, r19
     c78:	c9 01       	movw	r24, r18
     c7a:	96 95       	lsr	r25
     c7c:	98 2f       	mov	r25, r24
     c7e:	88 27       	eor	r24, r24
     c80:	97 95       	ror	r25
     c82:	87 95       	ror	r24
     c84:	82 1b       	sub	r24, r18
     c86:	93 0b       	sbc	r25, r19
     c88:	84 0f       	add	r24, r20
     c8a:	95 1f       	adc	r25, r21
     c8c:	24 e6       	ldi	r18, 0x64	; 100
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	b9 01       	movw	r22, r18
     c92:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <__divmodhi4>
     c96:	cb 01       	movw	r24, r22
     c98:	89 83       	std	Y+1, r24	; 0x01
    PWM_Timer0_Start(temp_duty_cycle);
     c9a:	89 81       	ldd	r24, Y+1	; 0x01
     c9c:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <PWM_Timer0_Start>
}
     ca0:	0f 90       	pop	r0
     ca2:	0f 90       	pop	r0
     ca4:	0f 90       	pop	r0
     ca6:	0f 90       	pop	r0
     ca8:	0f 90       	pop	r0
     caa:	cf 91       	pop	r28
     cac:	df 91       	pop	r29
     cae:	08 95       	ret

00000cb0 <TWI_init>:
* Parameters (out):   None
* Return value:       None
* Description:        Initialize the I2C module.
********************************************************************************/
void TWI_init(const TWI_ConfigType * Config_Ptr)
{
     cb0:	df 93       	push	r29
     cb2:	cf 93       	push	r28
     cb4:	cd b7       	in	r28, 0x3d	; 61
     cb6:	de b7       	in	r29, 0x3e	; 62
     cb8:	28 97       	sbiw	r28, 0x08	; 8
     cba:	0f b6       	in	r0, 0x3f	; 63
     cbc:	f8 94       	cli
     cbe:	de bf       	out	0x3e, r29	; 62
     cc0:	0f be       	out	0x3f, r0	; 63
     cc2:	cd bf       	out	0x3d, r28	; 61
     cc4:	9a 83       	std	Y+2, r25	; 0x02
     cc6:	89 83       	std	Y+1, r24	; 0x01
    /*Enable or Disable the TWI Module*/
   switch ( Config_Ptr -> mode )
     cc8:	e9 81       	ldd	r30, Y+1	; 0x01
     cca:	fa 81       	ldd	r31, Y+2	; 0x02
     ccc:	80 81       	ld	r24, Z
     cce:	28 2f       	mov	r18, r24
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	38 87       	std	Y+8, r19	; 0x08
     cd4:	2f 83       	std	Y+7, r18	; 0x07
     cd6:	8f 81       	ldd	r24, Y+7	; 0x07
     cd8:	98 85       	ldd	r25, Y+8	; 0x08
     cda:	00 97       	sbiw	r24, 0x00	; 0
     cdc:	31 f0       	breq	.+12     	; 0xcea <TWI_init+0x3a>
     cde:	2f 81       	ldd	r18, Y+7	; 0x07
     ce0:	38 85       	ldd	r19, Y+8	; 0x08
     ce2:	21 30       	cpi	r18, 0x01	; 1
     ce4:	31 05       	cpc	r19, r1
     ce6:	49 f0       	breq	.+18     	; 0xcfa <TWI_init+0x4a>
     ce8:	0f c0       	rjmp	.+30     	; 0xd08 <TWI_init+0x58>
   {
      case TWI_Disable: CLEAR_BIT(TWCR,TWEN);
     cea:	a6 e5       	ldi	r26, 0x56	; 86
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e6 e5       	ldi	r30, 0x56	; 86
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	8b 7f       	andi	r24, 0xFB	; 251
     cf6:	8c 93       	st	X, r24
     cf8:	07 c0       	rjmp	.+14     	; 0xd08 <TWI_init+0x58>
    	            break;
      case TWI_Enable:  SET_BIT(TWCR,TWEN);
     cfa:	a6 e5       	ldi	r26, 0x56	; 86
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e6 e5       	ldi	r30, 0x56	; 86
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	84 60       	ori	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
    	            break;
   }

   /*Enable or Disable Interrupt for I2C*/
   switch( Config_Ptr ->interrupt_mode)
     d08:	e9 81       	ldd	r30, Y+1	; 0x01
     d0a:	fa 81       	ldd	r31, Y+2	; 0x02
     d0c:	81 81       	ldd	r24, Z+1	; 0x01
     d0e:	28 2f       	mov	r18, r24
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	3e 83       	std	Y+6, r19	; 0x06
     d14:	2d 83       	std	Y+5, r18	; 0x05
     d16:	8d 81       	ldd	r24, Y+5	; 0x05
     d18:	9e 81       	ldd	r25, Y+6	; 0x06
     d1a:	00 97       	sbiw	r24, 0x00	; 0
     d1c:	31 f0       	breq	.+12     	; 0xd2a <TWI_init+0x7a>
     d1e:	2d 81       	ldd	r18, Y+5	; 0x05
     d20:	3e 81       	ldd	r19, Y+6	; 0x06
     d22:	21 30       	cpi	r18, 0x01	; 1
     d24:	31 05       	cpc	r19, r1
     d26:	49 f0       	breq	.+18     	; 0xd3a <TWI_init+0x8a>
     d28:	0f c0       	rjmp	.+30     	; 0xd48 <TWI_init+0x98>
   {
     case Interrupt_Disable:   CLEAR_BIT(TWCR,TWIE);
     d2a:	a6 e5       	ldi	r26, 0x56	; 86
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e6 e5       	ldi	r30, 0x56	; 86
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	8e 7f       	andi	r24, 0xFE	; 254
     d36:	8c 93       	st	X, r24
     d38:	07 c0       	rjmp	.+14     	; 0xd48 <TWI_init+0x98>
    	                       break;
     case Interrupt_Enable:    SET_BIT(TWCR,TWIE);
     d3a:	a6 e5       	ldi	r26, 0x56	; 86
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	e6 e5       	ldi	r30, 0x56	; 86
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	81 60       	ori	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
    	                       break;
   }

   /*Setting Prescaler*/
   TWSR = ( TWSR & 0xFC ) | Config_Ptr -> TWI_prescaler ;
     d48:	a1 e2       	ldi	r26, 0x21	; 33
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	e1 e2       	ldi	r30, 0x21	; 33
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	98 2f       	mov	r25, r24
     d54:	9c 7f       	andi	r25, 0xFC	; 252
     d56:	e9 81       	ldd	r30, Y+1	; 0x01
     d58:	fa 81       	ldd	r31, Y+2	; 0x02
     d5a:	82 81       	ldd	r24, Z+2	; 0x02
     d5c:	89 2b       	or	r24, r25
     d5e:	8c 93       	st	X, r24

   /*General Call Recognition Enable Bit*/
   switch ( Config_Ptr ->GCR)
     d60:	e9 81       	ldd	r30, Y+1	; 0x01
     d62:	fa 81       	ldd	r31, Y+2	; 0x02
     d64:	83 81       	ldd	r24, Z+3	; 0x03
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	3c 83       	std	Y+4, r19	; 0x04
     d6c:	2b 83       	std	Y+3, r18	; 0x03
     d6e:	8b 81       	ldd	r24, Y+3	; 0x03
     d70:	9c 81       	ldd	r25, Y+4	; 0x04
     d72:	00 97       	sbiw	r24, 0x00	; 0
     d74:	31 f0       	breq	.+12     	; 0xd82 <TWI_init+0xd2>
     d76:	2b 81       	ldd	r18, Y+3	; 0x03
     d78:	3c 81       	ldd	r19, Y+4	; 0x04
     d7a:	21 30       	cpi	r18, 0x01	; 1
     d7c:	31 05       	cpc	r19, r1
     d7e:	49 f0       	breq	.+18     	; 0xd92 <TWI_init+0xe2>
     d80:	0f c0       	rjmp	.+30     	; 0xda0 <TWI_init+0xf0>
   {
       case GCR_Disable : CLEAR_BIT(TWAR,TWGCE);
     d82:	a2 e2       	ldi	r26, 0x22	; 34
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	e2 e2       	ldi	r30, 0x22	; 34
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	8e 7f       	andi	r24, 0xFE	; 254
     d8e:	8c 93       	st	X, r24
     d90:	07 c0       	rjmp	.+14     	; 0xda0 <TWI_init+0xf0>
    	         break;
       case GCR_Enable :  SET_BIT(TWAR,TWGCE);
     d92:	a2 e2       	ldi	r26, 0x22	; 34
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	e2 e2       	ldi	r30, 0x22	; 34
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	81 60       	ori	r24, 0x01	; 1
     d9e:	8c 93       	st	X, r24
    	         break;
   }

   TWBR = 0x02;
     da0:	e0 e2       	ldi	r30, 0x20	; 32
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	82 e0       	ldi	r24, 0x02	; 2
     da6:	80 83       	st	Z, r24
   TWAR = 0b00000010; // my address = 0x01 :)
     da8:	e2 e2       	ldi	r30, 0x22	; 34
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	82 e0       	ldi	r24, 0x02	; 2
     dae:	80 83       	st	Z, r24
}
     db0:	28 96       	adiw	r28, 0x08	; 8
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	f8 94       	cli
     db6:	de bf       	out	0x3e, r29	; 62
     db8:	0f be       	out	0x3f, r0	; 63
     dba:	cd bf       	out	0x3d, r28	; 61
     dbc:	cf 91       	pop	r28
     dbe:	df 91       	pop	r29
     dc0:	08 95       	ret

00000dc2 <TWI_start>:
* Parameters (out):   None
* Return value:       None
* Description:        Send the start BIT
********************************************************************************/
void TWI_start(void)
{
     dc2:	df 93       	push	r29
     dc4:	cf 93       	push	r28
     dc6:	cd b7       	in	r28, 0x3d	; 61
     dc8:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     dca:	e6 e5       	ldi	r30, 0x56	; 86
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	84 ea       	ldi	r24, 0xA4	; 164
     dd0:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     dd2:	e6 e5       	ldi	r30, 0x56	; 86
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	88 23       	and	r24, r24
     dda:	dc f7       	brge	.-10     	; 0xdd2 <TWI_start+0x10>
}
     ddc:	cf 91       	pop	r28
     dde:	df 91       	pop	r29
     de0:	08 95       	ret

00000de2 <TWI_stop>:
* Parameters (out):   None
* Return value:       None
* Description:        Send the stop BIT
********************************************************************************/
void TWI_stop(void)
{
     de2:	df 93       	push	r29
     de4:	cf 93       	push	r28
     de6:	cd b7       	in	r28, 0x3d	; 61
     de8:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     dea:	e6 e5       	ldi	r30, 0x56	; 86
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	84 e9       	ldi	r24, 0x94	; 148
     df0:	80 83       	st	Z, r24
}
     df2:	cf 91       	pop	r28
     df4:	df 91       	pop	r29
     df6:	08 95       	ret

00000df8 <TWI_writeByte>:
* Parameters (out):   None
* Return value:       None
* Description:        write byte
********************************************************************************/
void TWI_writeByte(uint8 data)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	0f 92       	push	r0
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
     e04:	e3 e2       	ldi	r30, 0x23	; 35
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
     e0c:	e6 e5       	ldi	r30, 0x56	; 86
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	84 e8       	ldi	r24, 0x84	; 132
     e12:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     e14:	e6 e5       	ldi	r30, 0x56	; 86
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	88 23       	and	r24, r24
     e1c:	dc f7       	brge	.-10     	; 0xe14 <TWI_writeByte+0x1c>
}
     e1e:	0f 90       	pop	r0
     e20:	cf 91       	pop	r28
     e22:	df 91       	pop	r29
     e24:	08 95       	ret

00000e26 <TWI_readByteWithACK>:
* Parameters (out):   Byte read with ack
* Return value:       None
* Description:        write byte
********************************************************************************/
uint8 TWI_readByteWithACK(void)
{
     e26:	df 93       	push	r29
     e28:	cf 93       	push	r28
     e2a:	cd b7       	in	r28, 0x3d	; 61
     e2c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     e2e:	e6 e5       	ldi	r30, 0x56	; 86
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	84 ec       	ldi	r24, 0xC4	; 196
     e34:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     e36:	e6 e5       	ldi	r30, 0x56	; 86
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	88 23       	and	r24, r24
     e3e:	dc f7       	brge	.-10     	; 0xe36 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
     e40:	e3 e2       	ldi	r30, 0x23	; 35
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
}
     e46:	cf 91       	pop	r28
     e48:	df 91       	pop	r29
     e4a:	08 95       	ret

00000e4c <TWI_readByteWithNACK>:
* Parameters (out):   Byte read with NACK
* Return value:       uint8
* Description:        write byte with NACK
********************************************************************************/
uint8 TWI_readByteWithNACK(void)
{
     e4c:	df 93       	push	r29
     e4e:	cf 93       	push	r28
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
     e54:	e6 e5       	ldi	r30, 0x56	; 86
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	84 e8       	ldi	r24, 0x84	; 132
     e5a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     e5c:	e6 e5       	ldi	r30, 0x56	; 86
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	88 23       	and	r24, r24
     e64:	dc f7       	brge	.-10     	; 0xe5c <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
     e66:	e3 e2       	ldi	r30, 0x23	; 35
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
}
     e6c:	cf 91       	pop	r28
     e6e:	df 91       	pop	r29
     e70:	08 95       	ret

00000e72 <TWI_getStatus>:
* Parameters (out):   None
* Return value:       uint8
* Description:        get the status
********************************************************************************/
uint8 TWI_getStatus(void)
{
     e72:	df 93       	push	r29
     e74:	cf 93       	push	r28
     e76:	0f 92       	push	r0
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
     e7c:	e1 e2       	ldi	r30, 0x21	; 33
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	88 7f       	andi	r24, 0xF8	; 248
     e84:	89 83       	std	Y+1, r24	; 0x01
    return status;
     e86:	89 81       	ldd	r24, Y+1	; 0x01
}
     e88:	0f 90       	pop	r0
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <OPERATION_II_ReceivePassword>:
* Parameters (out):   None
* Return value:       None
* Description:        Receive First Password from First MCU
********************************************************************************/
void OPERATION_II_ReceivePassword(void)
{
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	00 d0       	rcall	.+0      	; 0xe96 <OPERATION_II_ReceivePassword+0x6>
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
   /*Variable to hold keypadd press*/
	uint8 key1;

   /*counter for while loop*/
    uint8 counter = 0;
     e9a:	19 82       	std	Y+1, r1	; 0x01
     e9c:	1b c0       	rjmp	.+54     	; 0xed4 <OPERATION_II_ReceivePassword+0x44>

   while ( counter < PASSWORD_DIGITS_NUMBER )
   {
       /*Receive Digit from first MCU*/
	   key1 = UART_receiveByte();
     e9e:	0e 94 2c 11 	call	0x2258	; 0x2258 <UART_receiveByte>
     ea2:	8a 83       	std	Y+2, r24	; 0x02

	   if(key1 != '*')
     ea4:	8a 81       	ldd	r24, Y+2	; 0x02
     ea6:	8a 32       	cpi	r24, 0x2A	; 42
     ea8:	61 f0       	breq	.+24     	; 0xec2 <OPERATION_II_ReceivePassword+0x32>
	   {
		   /*Store Digit in the array*/
		   g_Password_Entry1[counter]=key1;
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	88 2f       	mov	r24, r24
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	fc 01       	movw	r30, r24
     eb2:	ed 56       	subi	r30, 0x6D	; 109
     eb4:	ff 4f       	sbci	r31, 0xFF	; 255
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	80 83       	st	Z, r24

		   /*Increament counter*/
		   counter ++;
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	8f 5f       	subi	r24, 0xFF	; 255
     ebe:	89 83       	std	Y+1, r24	; 0x01
     ec0:	09 c0       	rjmp	.+18     	; 0xed4 <OPERATION_II_ReceivePassword+0x44>
	   }
	   else if ( key1 == '*' && counter !=0)
     ec2:	8a 81       	ldd	r24, Y+2	; 0x02
     ec4:	8a 32       	cpi	r24, 0x2A	; 42
     ec6:	31 f4       	brne	.+12     	; 0xed4 <OPERATION_II_ReceivePassword+0x44>
     ec8:	89 81       	ldd	r24, Y+1	; 0x01
     eca:	88 23       	and	r24, r24
     ecc:	19 f0       	breq	.+6      	; 0xed4 <OPERATION_II_ReceivePassword+0x44>
	   {
		   counter = counter-1;
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	81 50       	subi	r24, 0x01	; 1
     ed2:	89 83       	std	Y+1, r24	; 0x01
	uint8 key1;

   /*counter for while loop*/
    uint8 counter = 0;

   while ( counter < PASSWORD_DIGITS_NUMBER )
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	85 30       	cpi	r24, 0x05	; 5
     ed8:	10 f3       	brcs	.-60     	; 0xe9e <OPERATION_II_ReceivePassword+0xe>


   }


}
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	cf 91       	pop	r28
     ee0:	df 91       	pop	r29
     ee2:	08 95       	ret

00000ee4 <OPERATION_II_ReceiveSecondPassword>:
* Parameters (out):   None
* Return value:       None
* Description:        Receive First Password from First MCU
********************************************************************************/
void OPERATION_II_ReceiveSecondPassword(void)
{
     ee4:	df 93       	push	r29
     ee6:	cf 93       	push	r28
     ee8:	00 d0       	rcall	.+0      	; 0xeea <OPERATION_II_ReceiveSecondPassword+0x6>
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
	   /*Variable to hold keypadd press*/
		uint8 key1;

	   /*counter for while loop*/
	    uint8 counter = 0;
     eee:	19 82       	std	Y+1, r1	; 0x01
     ef0:	1b c0       	rjmp	.+54     	; 0xf28 <OPERATION_II_ReceiveSecondPassword+0x44>

	   while ( counter < PASSWORD_DIGITS_NUMBER )
	   {
	       /*Receive Digit from first MCU*/
		   key1 = UART_receiveByte();
     ef2:	0e 94 2c 11 	call	0x2258	; 0x2258 <UART_receiveByte>
     ef6:	8a 83       	std	Y+2, r24	; 0x02

		   if(key1 != '*')
     ef8:	8a 81       	ldd	r24, Y+2	; 0x02
     efa:	8a 32       	cpi	r24, 0x2A	; 42
     efc:	61 f0       	breq	.+24     	; 0xf16 <OPERATION_II_ReceiveSecondPassword+0x32>
		   {
			   /*Store Digit in the array*/
			   g_Password_Entry2[counter]=key1;
     efe:	89 81       	ldd	r24, Y+1	; 0x01
     f00:	88 2f       	mov	r24, r24
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	fc 01       	movw	r30, r24
     f06:	e2 57       	subi	r30, 0x72	; 114
     f08:	ff 4f       	sbci	r31, 0xFF	; 255
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	80 83       	st	Z, r24

			   /*Increament counter*/
			   counter ++;
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
     f10:	8f 5f       	subi	r24, 0xFF	; 255
     f12:	89 83       	std	Y+1, r24	; 0x01
     f14:	09 c0       	rjmp	.+18     	; 0xf28 <OPERATION_II_ReceiveSecondPassword+0x44>
		   }
		   else if ( key1 == '*' && counter !=0)
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	8a 32       	cpi	r24, 0x2A	; 42
     f1a:	31 f4       	brne	.+12     	; 0xf28 <OPERATION_II_ReceiveSecondPassword+0x44>
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	88 23       	and	r24, r24
     f20:	19 f0       	breq	.+6      	; 0xf28 <OPERATION_II_ReceiveSecondPassword+0x44>
		   {
			   counter = counter - 1;
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	81 50       	subi	r24, 0x01	; 1
     f26:	89 83       	std	Y+1, r24	; 0x01
		uint8 key1;

	   /*counter for while loop*/
	    uint8 counter = 0;

	   while ( counter < PASSWORD_DIGITS_NUMBER )
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	85 30       	cpi	r24, 0x05	; 5
     f2c:	10 f3       	brcs	.-60     	; 0xef2 <OPERATION_II_ReceiveSecondPassword+0xe>
			   counter = counter - 1;
		   }


	   }
}
     f2e:	0f 90       	pop	r0
     f30:	0f 90       	pop	r0
     f32:	cf 91       	pop	r28
     f34:	df 91       	pop	r29
     f36:	08 95       	ret

00000f38 <OPERATION_II_checkPasswordMatch>:
* Parameters (out):   None
* Return value:       None
* Description:        Check Password Match between different entries
********************************************************************************/
void OPERATION_II_checkPasswordMatch(void)
{
     f38:	df 93       	push	r29
     f3a:	cf 93       	push	r28
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
     f40:	62 97       	sbiw	r28, 0x12	; 18
     f42:	0f b6       	in	r0, 0x3f	; 63
     f44:	f8 94       	cli
     f46:	de bf       	out	0x3e, r29	; 62
     f48:	0f be       	out	0x3f, r0	; 63
     f4a:	cd bf       	out	0x3d, r28	; 61
	   /*Variable to be used in while loop*/
	   uint8 counter = 0;
     f4c:	18 8a       	std	Y+16, r1	; 0x10

	   /*flag for matching detection - if 0 missmatch - if 1 matched*/
	   uint8 flag = 1 ;
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	8f 87       	std	Y+15, r24	; 0x0f
     f52:	15 c0       	rjmp	.+42     	; 0xf7e <OPERATION_II_checkPasswordMatch+0x46>
	   static uint8 missmatch_counter = 0;

	   /*Check Each Element in the Array*/
	   while (counter < PASSWORD_DIGITS_NUMBER )
	   {
	       if ( g_Password_Entry1[counter] != g_Password_Entry2[counter])
     f54:	88 89       	ldd	r24, Y+16	; 0x10
     f56:	88 2f       	mov	r24, r24
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	fc 01       	movw	r30, r24
     f5c:	ed 56       	subi	r30, 0x6D	; 109
     f5e:	ff 4f       	sbci	r31, 0xFF	; 255
     f60:	20 81       	ld	r18, Z
     f62:	88 89       	ldd	r24, Y+16	; 0x10
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	fc 01       	movw	r30, r24
     f6a:	e2 57       	subi	r30, 0x72	; 114
     f6c:	ff 4f       	sbci	r31, 0xFF	; 255
     f6e:	80 81       	ld	r24, Z
     f70:	28 17       	cp	r18, r24
     f72:	11 f0       	breq	.+4      	; 0xf78 <OPERATION_II_checkPasswordMatch+0x40>
	       {
	   	    flag = 0 ;
     f74:	1f 86       	std	Y+15, r1	; 0x0f
     f76:	06 c0       	rjmp	.+12     	; 0xf84 <OPERATION_II_checkPasswordMatch+0x4c>
	   	    break;
	       }
	       counter ++ ;
     f78:	88 89       	ldd	r24, Y+16	; 0x10
     f7a:	8f 5f       	subi	r24, 0xFF	; 255
     f7c:	88 8b       	std	Y+16, r24	; 0x10

	   /*Variable to hold number of miss matches*/
	   static uint8 missmatch_counter = 0;

	   /*Check Each Element in the Array*/
	   while (counter < PASSWORD_DIGITS_NUMBER )
     f7e:	88 89       	ldd	r24, Y+16	; 0x10
     f80:	85 30       	cpi	r24, 0x05	; 5
     f82:	40 f3       	brcs	.-48     	; 0xf54 <OPERATION_II_checkPasswordMatch+0x1c>
	       }
	       counter ++ ;
	   }

	   /*Resetting Counter for EEPROM LOOP*/
	   counter = 0;
     f84:	18 8a       	std	Y+16, r1	; 0x10

     	/*Send to First MCU: 0 if dismatches , 1 if matches*/
     	UART_sendByte(flag);
     f86:	8f 85       	ldd	r24, Y+15	; 0x0f
     f88:	0e 94 15 11 	call	0x222a	; 0x222a <UART_sendByte>

	   switch (flag)
     f8c:	8f 85       	ldd	r24, Y+15	; 0x0f
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	3a 8b       	std	Y+18, r19	; 0x12
     f94:	29 8b       	std	Y+17, r18	; 0x11
     f96:	89 89       	ldd	r24, Y+17	; 0x11
     f98:	9a 89       	ldd	r25, Y+18	; 0x12
     f9a:	00 97       	sbiw	r24, 0x00	; 0
     f9c:	39 f0       	breq	.+14     	; 0xfac <OPERATION_II_checkPasswordMatch+0x74>
     f9e:	29 89       	ldd	r18, Y+17	; 0x11
     fa0:	3a 89       	ldd	r19, Y+18	; 0x12
     fa2:	21 30       	cpi	r18, 0x01	; 1
     fa4:	31 05       	cpc	r19, r1
     fa6:	09 f4       	brne	.+2      	; 0xfaa <OPERATION_II_checkPasswordMatch+0x72>
     fa8:	a7 c0       	rjmp	.+334    	; 0x10f8 <OPERATION_II_checkPasswordMatch+0x1c0>
     faa:	aa c0       	rjmp	.+340    	; 0x1100 <OPERATION_II_checkPasswordMatch+0x1c8>
	   {
	      /*Missmatched Case*/
	      /*Repeat Step 1 */
	      case 0 :  missmatch_counter++;
     fac:	80 91 7e 00 	lds	r24, 0x007E
     fb0:	8f 5f       	subi	r24, 0xFF	; 255
     fb2:	80 93 7e 00 	sts	0x007E, r24
	                if(missmatch_counter== MAX_WRONG_ENTRY_NUMBER)
     fb6:	80 91 7e 00 	lds	r24, 0x007E
     fba:	83 30       	cpi	r24, 0x03	; 3
     fbc:	99 f4       	brne	.+38     	; 0xfe4 <OPERATION_II_checkPasswordMatch+0xac>
	                {
	            		BUZZER_ON();
     fbe:	0e 94 c0 05 	call	0xb80	; 0xb80 <BUZZER_ON>
	            		Timer_init(&TIMER_Config_Struct);
     fc2:	88 e6       	ldi	r24, 0x68	; 104
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	0e 94 4f 0c 	call	0x189e	; 0x189e <Timer_init>
	            		Timer2_setCallBack(OPERATIONS_II_Buzzer);
     fca:	87 eb       	ldi	r24, 0xB7	; 183
     fcc:	99 e0       	ldi	r25, 0x09	; 9
     fce:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <Timer2_setCallBack>
	            		g_Interrupts_number= 215;
     fd2:	87 ed       	ldi	r24, 0xD7	; 215
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	90 93 7d 00 	sts	0x007D, r25
     fda:	80 93 7c 00 	sts	0x007C, r24
	                	missmatch_counter = 0;
     fde:	10 92 7e 00 	sts	0x007E, r1
     fe2:	8e c0       	rjmp	.+284    	; 0x1100 <OPERATION_II_checkPasswordMatch+0x1c8>
	                }
	                else
	                {
	                	OPERATION_II_ReceivePassword();
     fe4:	0e 94 48 07 	call	0xe90	; 0xe90 <OPERATION_II_ReceivePassword>
	                	OPERATION_II_ReceiveSecondPassword();
     fe8:	0e 94 72 07 	call	0xee4	; 0xee4 <OPERATION_II_ReceiveSecondPassword>
	                	OPERATION_II_checkPasswordMatch();
     fec:	0e 94 9c 07 	call	0xf38	; 0xf38 <OPERATION_II_checkPasswordMatch>
     ff0:	87 c0       	rjmp	.+270    	; 0x1100 <OPERATION_II_checkPasswordMatch+0x1c8>
	      /* Go to Main Options*/
	      case 1 :
	    	  while (counter < 5 )
	    	  {

	          	EEPROM_writeByte((uint16)(EEPROM_ADDRESS + counter), g_Password_Entry1[counter]);
     ff2:	88 89       	ldd	r24, Y+16	; 0x10
     ff4:	48 2f       	mov	r20, r24
     ff6:	50 e0       	ldi	r21, 0x00	; 0
     ff8:	88 89       	ldd	r24, Y+16	; 0x10
     ffa:	88 2f       	mov	r24, r24
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	fc 01       	movw	r30, r24
    1000:	ed 56       	subi	r30, 0x6D	; 109
    1002:	ff 4f       	sbci	r31, 0xFF	; 255
    1004:	20 81       	ld	r18, Z
    1006:	ca 01       	movw	r24, r20
    1008:	62 2f       	mov	r22, r18
    100a:	0e 94 a7 11 	call	0x234e	; 0x234e <EEPROM_writeByte>
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	a0 e2       	ldi	r26, 0x20	; 32
    1014:	b1 e4       	ldi	r27, 0x41	; 65
    1016:	8b 87       	std	Y+11, r24	; 0x0b
    1018:	9c 87       	std	Y+12, r25	; 0x0c
    101a:	ad 87       	std	Y+13, r26	; 0x0d
    101c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    101e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1020:	7c 85       	ldd	r23, Y+12	; 0x0c
    1022:	8d 85       	ldd	r24, Y+13	; 0x0d
    1024:	9e 85       	ldd	r25, Y+14	; 0x0e
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	4a ef       	ldi	r20, 0xFA	; 250
    102c:	54 e4       	ldi	r21, 0x44	; 68
    102e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1032:	dc 01       	movw	r26, r24
    1034:	cb 01       	movw	r24, r22
    1036:	8f 83       	std	Y+7, r24	; 0x07
    1038:	98 87       	std	Y+8, r25	; 0x08
    103a:	a9 87       	std	Y+9, r26	; 0x09
    103c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    103e:	6f 81       	ldd	r22, Y+7	; 0x07
    1040:	78 85       	ldd	r23, Y+8	; 0x08
    1042:	89 85       	ldd	r24, Y+9	; 0x09
    1044:	9a 85       	ldd	r25, Y+10	; 0x0a
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	40 e8       	ldi	r20, 0x80	; 128
    104c:	5f e3       	ldi	r21, 0x3F	; 63
    104e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1052:	88 23       	and	r24, r24
    1054:	2c f4       	brge	.+10     	; 0x1060 <OPERATION_II_checkPasswordMatch+0x128>
		__ticks = 1;
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	9e 83       	std	Y+6, r25	; 0x06
    105c:	8d 83       	std	Y+5, r24	; 0x05
    105e:	3f c0       	rjmp	.+126    	; 0x10de <OPERATION_II_checkPasswordMatch+0x1a6>
	else if (__tmp > 65535)
    1060:	6f 81       	ldd	r22, Y+7	; 0x07
    1062:	78 85       	ldd	r23, Y+8	; 0x08
    1064:	89 85       	ldd	r24, Y+9	; 0x09
    1066:	9a 85       	ldd	r25, Y+10	; 0x0a
    1068:	20 e0       	ldi	r18, 0x00	; 0
    106a:	3f ef       	ldi	r19, 0xFF	; 255
    106c:	4f e7       	ldi	r20, 0x7F	; 127
    106e:	57 e4       	ldi	r21, 0x47	; 71
    1070:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1074:	18 16       	cp	r1, r24
    1076:	4c f5       	brge	.+82     	; 0x10ca <OPERATION_II_checkPasswordMatch+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1078:	6b 85       	ldd	r22, Y+11	; 0x0b
    107a:	7c 85       	ldd	r23, Y+12	; 0x0c
    107c:	8d 85       	ldd	r24, Y+13	; 0x0d
    107e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	40 e2       	ldi	r20, 0x20	; 32
    1086:	51 e4       	ldi	r21, 0x41	; 65
    1088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    108c:	dc 01       	movw	r26, r24
    108e:	cb 01       	movw	r24, r22
    1090:	bc 01       	movw	r22, r24
    1092:	cd 01       	movw	r24, r26
    1094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	9e 83       	std	Y+6, r25	; 0x06
    109e:	8d 83       	std	Y+5, r24	; 0x05
    10a0:	0f c0       	rjmp	.+30     	; 0x10c0 <OPERATION_II_checkPasswordMatch+0x188>
    10a2:	88 ec       	ldi	r24, 0xC8	; 200
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	9c 83       	std	Y+4, r25	; 0x04
    10a8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	9c 81       	ldd	r25, Y+4	; 0x04
    10ae:	01 97       	sbiw	r24, 0x01	; 1
    10b0:	f1 f7       	brne	.-4      	; 0x10ae <OPERATION_II_checkPasswordMatch+0x176>
    10b2:	9c 83       	std	Y+4, r25	; 0x04
    10b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10b6:	8d 81       	ldd	r24, Y+5	; 0x05
    10b8:	9e 81       	ldd	r25, Y+6	; 0x06
    10ba:	01 97       	sbiw	r24, 0x01	; 1
    10bc:	9e 83       	std	Y+6, r25	; 0x06
    10be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10c0:	8d 81       	ldd	r24, Y+5	; 0x05
    10c2:	9e 81       	ldd	r25, Y+6	; 0x06
    10c4:	00 97       	sbiw	r24, 0x00	; 0
    10c6:	69 f7       	brne	.-38     	; 0x10a2 <OPERATION_II_checkPasswordMatch+0x16a>
    10c8:	14 c0       	rjmp	.+40     	; 0x10f2 <OPERATION_II_checkPasswordMatch+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ca:	6f 81       	ldd	r22, Y+7	; 0x07
    10cc:	78 85       	ldd	r23, Y+8	; 0x08
    10ce:	89 85       	ldd	r24, Y+9	; 0x09
    10d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10d6:	dc 01       	movw	r26, r24
    10d8:	cb 01       	movw	r24, r22
    10da:	9e 83       	std	Y+6, r25	; 0x06
    10dc:	8d 83       	std	Y+5, r24	; 0x05
    10de:	8d 81       	ldd	r24, Y+5	; 0x05
    10e0:	9e 81       	ldd	r25, Y+6	; 0x06
    10e2:	9a 83       	std	Y+2, r25	; 0x02
    10e4:	89 83       	std	Y+1, r24	; 0x01
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ea:	01 97       	sbiw	r24, 0x01	; 1
    10ec:	f1 f7       	brne	.-4      	; 0x10ea <OPERATION_II_checkPasswordMatch+0x1b2>
    10ee:	9a 83       	std	Y+2, r25	; 0x02
    10f0:	89 83       	std	Y+1, r24	; 0x01
	    		_delay_ms(10);

	    		  counter ++ ;
    10f2:	88 89       	ldd	r24, Y+16	; 0x10
    10f4:	8f 5f       	subi	r24, 0xFF	; 255
    10f6:	88 8b       	std	Y+16, r24	; 0x10

	      /*Matched Case*/

	      /* Go to Main Options*/
	      case 1 :
	    	  while (counter < 5 )
    10f8:	88 89       	ldd	r24, Y+16	; 0x10
    10fa:	85 30       	cpi	r24, 0x05	; 5
    10fc:	08 f4       	brcc	.+2      	; 0x1100 <OPERATION_II_checkPasswordMatch+0x1c8>
    10fe:	79 cf       	rjmp	.-270    	; 0xff2 <OPERATION_II_checkPasswordMatch+0xba>

	    	  /*Start Display Main Options*/
	   }


}
    1100:	62 96       	adiw	r28, 0x12	; 18
    1102:	0f b6       	in	r0, 0x3f	; 63
    1104:	f8 94       	cli
    1106:	de bf       	out	0x3e, r29	; 62
    1108:	0f be       	out	0x3f, r0	; 63
    110a:	cd bf       	out	0x3d, r28	; 61
    110c:	cf 91       	pop	r28
    110e:	df 91       	pop	r29
    1110:	08 95       	ret

00001112 <OPERATION_II_checkEEPROMMatch>:
* Parameters (out):   None
* Return value:       None
* Description:        Check Password Match EEPROM and Entry
********************************************************************************/
uint8 OPERATION_II_checkEEPROMMatch(void)
{
    1112:	df 93       	push	r29
    1114:	cf 93       	push	r28
    1116:	00 d0       	rcall	.+0      	; 0x1118 <OPERATION_II_checkEEPROMMatch+0x6>
    1118:	0f 92       	push	r0
    111a:	cd b7       	in	r28, 0x3d	; 61
    111c:	de b7       	in	r29, 0x3e	; 62
	   /*counter for while loop*/
	   uint8 counter = 0;
    111e:	1a 82       	std	Y+2, r1	; 0x02

	   /*flag for matching detection - initially matched*/
	   uint8 flag = 1 ;
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	89 83       	std	Y+1, r24	; 0x01

	   /*Variable to hold the value read from EEPROM*/
       uint8 value = 0;
    1124:	1b 82       	std	Y+3, r1	; 0x03
    1126:	18 c0       	rjmp	.+48     	; 0x1158 <OPERATION_II_checkEEPROMMatch+0x46>

	   while (counter < 5 )
	   {
		   /*read Byte from EEPROM*/
		   EEPROM_readByte( (uint16)(EEPROM_ADDRESS + counter), &value);
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	88 2f       	mov	r24, r24
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	9e 01       	movw	r18, r28
    1130:	2d 5f       	subi	r18, 0xFD	; 253
    1132:	3f 4f       	sbci	r19, 0xFF	; 255
    1134:	b9 01       	movw	r22, r18
    1136:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <EEPROM_readByte>


		   /*Check if any element is not matched*/
		   if(g_Password_Entry1[counter] != value)
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
    113c:	88 2f       	mov	r24, r24
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	fc 01       	movw	r30, r24
    1142:	ed 56       	subi	r30, 0x6D	; 109
    1144:	ff 4f       	sbci	r31, 0xFF	; 255
    1146:	90 81       	ld	r25, Z
    1148:	8b 81       	ldd	r24, Y+3	; 0x03
    114a:	98 17       	cp	r25, r24
    114c:	11 f0       	breq	.+4      	; 0x1152 <OPERATION_II_checkEEPROMMatch+0x40>
		   {
			   flag = 0;
    114e:	19 82       	std	Y+1, r1	; 0x01
    1150:	06 c0       	rjmp	.+12     	; 0x115e <OPERATION_II_checkEEPROMMatch+0x4c>
			   break;
		   }
		   counter ++ ;
    1152:	8a 81       	ldd	r24, Y+2	; 0x02
    1154:	8f 5f       	subi	r24, 0xFF	; 255
    1156:	8a 83       	std	Y+2, r24	; 0x02
	   uint8 flag = 1 ;

	   /*Variable to hold the value read from EEPROM*/
       uint8 value = 0;

	   while (counter < 5 )
    1158:	8a 81       	ldd	r24, Y+2	; 0x02
    115a:	85 30       	cpi	r24, 0x05	; 5
    115c:	28 f3       	brcs	.-54     	; 0x1128 <OPERATION_II_checkEEPROMMatch+0x16>
			   break;
		   }
		   counter ++ ;
	   }

	   return flag;
    115e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	cf 91       	pop	r28
    1168:	df 91       	pop	r29
    116a:	08 95       	ret

0000116c <OPERATIONS_II_Motor>:
* Parameters (out):   None
* Return value:       None
* Description:        Function to be called in the ISR
********************************************************************************/
void OPERATIONS_II_Motor (void)
{
    116c:	df 93       	push	r29
    116e:	cf 93       	push	r28
    1170:	cd b7       	in	r28, 0x3d	; 61
    1172:	de b7       	in	r29, 0x3e	; 62
    1174:	2e 97       	sbiw	r28, 0x0e	; 14
    1176:	0f b6       	in	r0, 0x3f	; 63
    1178:	f8 94       	cli
    117a:	de bf       	out	0x3e, r29	; 62
    117c:	0f be       	out	0x3f, r0	; 63
    117e:	cd bf       	out	0x3d, r28	; 61

	/*Variable to detect which direction the motor is rotating at*
	 * 0 CW - 1 CCW */
	static uint8 flag = 0;

	counter ++ ;
    1180:	80 91 80 00 	lds	r24, 0x0080
    1184:	90 91 81 00 	lds	r25, 0x0081
    1188:	01 96       	adiw	r24, 0x01	; 1
    118a:	90 93 81 00 	sts	0x0081, r25
    118e:	80 93 80 00 	sts	0x0080, r24

	/*for 5 seconds*/
	if(counter == g_Interrupts_number && g_Interrupts_number == DOOR_OPEN_TIMER_VALUE && flag ==0)
    1192:	20 91 80 00 	lds	r18, 0x0080
    1196:	30 91 81 00 	lds	r19, 0x0081
    119a:	80 91 7c 00 	lds	r24, 0x007C
    119e:	90 91 7d 00 	lds	r25, 0x007D
    11a2:	28 17       	cp	r18, r24
    11a4:	39 07       	cpc	r19, r25
    11a6:	09 f0       	breq	.+2      	; 0x11aa <OPERATIONS_II_Motor+0x3e>
    11a8:	92 c0       	rjmp	.+292    	; 0x12ce <OPERATIONS_II_Motor+0x162>
    11aa:	80 91 7c 00 	lds	r24, 0x007C
    11ae:	90 91 7d 00 	lds	r25, 0x007D
    11b2:	21 e0       	ldi	r18, 0x01	; 1
    11b4:	8d 3c       	cpi	r24, 0xCD	; 205
    11b6:	92 07       	cpc	r25, r18
    11b8:	09 f0       	breq	.+2      	; 0x11bc <OPERATIONS_II_Motor+0x50>
    11ba:	89 c0       	rjmp	.+274    	; 0x12ce <OPERATIONS_II_Motor+0x162>
    11bc:	80 91 7f 00 	lds	r24, 0x007F
    11c0:	88 23       	and	r24, r24
    11c2:	09 f0       	breq	.+2      	; 0x11c6 <OPERATIONS_II_Motor+0x5a>
    11c4:	84 c0       	rjmp	.+264    	; 0x12ce <OPERATIONS_II_Motor+0x162>
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	a8 e4       	ldi	r26, 0x48	; 72
    11cc:	b4 e4       	ldi	r27, 0x44	; 68
    11ce:	8b 87       	std	Y+11, r24	; 0x0b
    11d0:	9c 87       	std	Y+12, r25	; 0x0c
    11d2:	ad 87       	std	Y+13, r26	; 0x0d
    11d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    11d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    11da:	8d 85       	ldd	r24, Y+13	; 0x0d
    11dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	4a ef       	ldi	r20, 0xFA	; 250
    11e4:	54 e4       	ldi	r21, 0x44	; 68
    11e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ea:	dc 01       	movw	r26, r24
    11ec:	cb 01       	movw	r24, r22
    11ee:	8f 83       	std	Y+7, r24	; 0x07
    11f0:	98 87       	std	Y+8, r25	; 0x08
    11f2:	a9 87       	std	Y+9, r26	; 0x09
    11f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11f6:	6f 81       	ldd	r22, Y+7	; 0x07
    11f8:	78 85       	ldd	r23, Y+8	; 0x08
    11fa:	89 85       	ldd	r24, Y+9	; 0x09
    11fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	40 e8       	ldi	r20, 0x80	; 128
    1204:	5f e3       	ldi	r21, 0x3F	; 63
    1206:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    120a:	88 23       	and	r24, r24
    120c:	2c f4       	brge	.+10     	; 0x1218 <OPERATIONS_II_Motor+0xac>
		__ticks = 1;
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	9e 83       	std	Y+6, r25	; 0x06
    1214:	8d 83       	std	Y+5, r24	; 0x05
    1216:	3f c0       	rjmp	.+126    	; 0x1296 <OPERATIONS_II_Motor+0x12a>
	else if (__tmp > 65535)
    1218:	6f 81       	ldd	r22, Y+7	; 0x07
    121a:	78 85       	ldd	r23, Y+8	; 0x08
    121c:	89 85       	ldd	r24, Y+9	; 0x09
    121e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	3f ef       	ldi	r19, 0xFF	; 255
    1224:	4f e7       	ldi	r20, 0x7F	; 127
    1226:	57 e4       	ldi	r21, 0x47	; 71
    1228:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    122c:	18 16       	cp	r1, r24
    122e:	4c f5       	brge	.+82     	; 0x1282 <OPERATIONS_II_Motor+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1230:	6b 85       	ldd	r22, Y+11	; 0x0b
    1232:	7c 85       	ldd	r23, Y+12	; 0x0c
    1234:	8d 85       	ldd	r24, Y+13	; 0x0d
    1236:	9e 85       	ldd	r25, Y+14	; 0x0e
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	40 e2       	ldi	r20, 0x20	; 32
    123e:	51 e4       	ldi	r21, 0x41	; 65
    1240:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1244:	dc 01       	movw	r26, r24
    1246:	cb 01       	movw	r24, r22
    1248:	bc 01       	movw	r22, r24
    124a:	cd 01       	movw	r24, r26
    124c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1250:	dc 01       	movw	r26, r24
    1252:	cb 01       	movw	r24, r22
    1254:	9e 83       	std	Y+6, r25	; 0x06
    1256:	8d 83       	std	Y+5, r24	; 0x05
    1258:	0f c0       	rjmp	.+30     	; 0x1278 <OPERATIONS_II_Motor+0x10c>
    125a:	88 ec       	ldi	r24, 0xC8	; 200
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	9c 83       	std	Y+4, r25	; 0x04
    1260:	8b 83       	std	Y+3, r24	; 0x03
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	9c 81       	ldd	r25, Y+4	; 0x04
    1266:	01 97       	sbiw	r24, 0x01	; 1
    1268:	f1 f7       	brne	.-4      	; 0x1266 <OPERATIONS_II_Motor+0xfa>
    126a:	9c 83       	std	Y+4, r25	; 0x04
    126c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    126e:	8d 81       	ldd	r24, Y+5	; 0x05
    1270:	9e 81       	ldd	r25, Y+6	; 0x06
    1272:	01 97       	sbiw	r24, 0x01	; 1
    1274:	9e 83       	std	Y+6, r25	; 0x06
    1276:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1278:	8d 81       	ldd	r24, Y+5	; 0x05
    127a:	9e 81       	ldd	r25, Y+6	; 0x06
    127c:	00 97       	sbiw	r24, 0x00	; 0
    127e:	69 f7       	brne	.-38     	; 0x125a <OPERATIONS_II_Motor+0xee>
    1280:	14 c0       	rjmp	.+40     	; 0x12aa <OPERATIONS_II_Motor+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1282:	6f 81       	ldd	r22, Y+7	; 0x07
    1284:	78 85       	ldd	r23, Y+8	; 0x08
    1286:	89 85       	ldd	r24, Y+9	; 0x09
    1288:	9a 85       	ldd	r25, Y+10	; 0x0a
    128a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    128e:	dc 01       	movw	r26, r24
    1290:	cb 01       	movw	r24, r22
    1292:	9e 83       	std	Y+6, r25	; 0x06
    1294:	8d 83       	std	Y+5, r24	; 0x05
    1296:	8d 81       	ldd	r24, Y+5	; 0x05
    1298:	9e 81       	ldd	r25, Y+6	; 0x06
    129a:	9a 83       	std	Y+2, r25	; 0x02
    129c:	89 83       	std	Y+1, r24	; 0x01
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	9a 81       	ldd	r25, Y+2	; 0x02
    12a2:	01 97       	sbiw	r24, 0x01	; 1
    12a4:	f1 f7       	brne	.-4      	; 0x12a2 <OPERATIONS_II_Motor+0x136>
    12a6:	9a 83       	std	Y+2, r25	; 0x02
    12a8:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(800);
		DC_MOTOR_Rotate(Stop, 0);
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	60 e0       	ldi	r22, 0x00	; 0
    12ae:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DC_MOTOR_Rotate>
		counter = 0;
    12b2:	10 92 81 00 	sts	0x0081, r1
    12b6:	10 92 80 00 	sts	0x0080, r1
		/*Get ready for holding motor 3 seconds*/
		g_Interrupts_number = DOOR_HOLD_TIMER_VALUE;
    12ba:	8c e5       	ldi	r24, 0x5C	; 92
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	90 93 7d 00 	sts	0x007D, r25
    12c2:	80 93 7c 00 	sts	0x007C, r24
		flag = 1;
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	80 93 7f 00 	sts	0x007F, r24
    12cc:	47 c0       	rjmp	.+142    	; 0x135c <OPERATIONS_II_Motor+0x1f0>
	}
	else if (counter == g_Interrupts_number && g_Interrupts_number == DOOR_HOLD_TIMER_VALUE )
    12ce:	20 91 80 00 	lds	r18, 0x0080
    12d2:	30 91 81 00 	lds	r19, 0x0081
    12d6:	80 91 7c 00 	lds	r24, 0x007C
    12da:	90 91 7d 00 	lds	r25, 0x007D
    12de:	28 17       	cp	r18, r24
    12e0:	39 07       	cpc	r19, r25
    12e2:	b1 f4       	brne	.+44     	; 0x1310 <OPERATIONS_II_Motor+0x1a4>
    12e4:	80 91 7c 00 	lds	r24, 0x007C
    12e8:	90 91 7d 00 	lds	r25, 0x007D
    12ec:	8c 35       	cpi	r24, 0x5C	; 92
    12ee:	91 05       	cpc	r25, r1
    12f0:	79 f4       	brne	.+30     	; 0x1310 <OPERATIONS_II_Motor+0x1a4>
	{
		/*after holding motor for 3 seconds , rotate CCW for 15 seconds*/

		DC_MOTOR_Rotate(CCW, 75);
    12f2:	82 e0       	ldi	r24, 0x02	; 2
    12f4:	6b e4       	ldi	r22, 0x4B	; 75
    12f6:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DC_MOTOR_Rotate>
		g_Interrupts_number = DOOR_CLOSE_TIMER_VALUE;
    12fa:	8d ec       	ldi	r24, 0xCD	; 205
    12fc:	91 e0       	ldi	r25, 0x01	; 1
    12fe:	90 93 7d 00 	sts	0x007D, r25
    1302:	80 93 7c 00 	sts	0x007C, r24
		counter = 0;
    1306:	10 92 81 00 	sts	0x0081, r1
    130a:	10 92 80 00 	sts	0x0080, r1
    130e:	26 c0       	rjmp	.+76     	; 0x135c <OPERATIONS_II_Motor+0x1f0>
	}
	else if (counter == g_Interrupts_number && g_Interrupts_number == DOOR_CLOSE_TIMER_VALUE && flag == 1 )
    1310:	20 91 80 00 	lds	r18, 0x0080
    1314:	30 91 81 00 	lds	r19, 0x0081
    1318:	80 91 7c 00 	lds	r24, 0x007C
    131c:	90 91 7d 00 	lds	r25, 0x007D
    1320:	28 17       	cp	r18, r24
    1322:	39 07       	cpc	r19, r25
    1324:	d9 f4       	brne	.+54     	; 0x135c <OPERATIONS_II_Motor+0x1f0>
    1326:	80 91 7c 00 	lds	r24, 0x007C
    132a:	90 91 7d 00 	lds	r25, 0x007D
    132e:	21 e0       	ldi	r18, 0x01	; 1
    1330:	8d 3c       	cpi	r24, 0xCD	; 205
    1332:	92 07       	cpc	r25, r18
    1334:	99 f4       	brne	.+38     	; 0x135c <OPERATIONS_II_Motor+0x1f0>
    1336:	80 91 7f 00 	lds	r24, 0x007F
    133a:	81 30       	cpi	r24, 0x01	; 1
    133c:	79 f4       	brne	.+30     	; 0x135c <OPERATIONS_II_Motor+0x1f0>
	{
		/*after 15 seconds stop the motor and display finished*/
		DC_MOTOR_Rotate(Stop, 0);
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	60 e0       	ldi	r22, 0x00	; 0
    1342:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DC_MOTOR_Rotate>
		flag = 0 ;
    1346:	10 92 7f 00 	sts	0x007F, r1
		counter = 0;
    134a:	10 92 81 00 	sts	0x0081, r1
    134e:	10 92 80 00 	sts	0x0080, r1
		Timer_Deinit(2);
    1352:	82 e0       	ldi	r24, 0x02	; 2
    1354:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <Timer_Deinit>
		OPERATIONS_II_Main_Options();
    1358:	0e 94 df 09 	call	0x13be	; 0x13be <OPERATIONS_II_Main_Options>
	}
}
    135c:	2e 96       	adiw	r28, 0x0e	; 14
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	f8 94       	cli
    1362:	de bf       	out	0x3e, r29	; 62
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	cd bf       	out	0x3d, r28	; 61
    1368:	cf 91       	pop	r28
    136a:	df 91       	pop	r29
    136c:	08 95       	ret

0000136e <OPERATIONS_II_Buzzer>:
* Parameters (out):   None
* Return value:       None
* Description:        Function to be called in the ISR
********************************************************************************/
void OPERATIONS_II_Buzzer (void)
{
    136e:	df 93       	push	r29
    1370:	cf 93       	push	r28
    1372:	cd b7       	in	r28, 0x3d	; 61
    1374:	de b7       	in	r29, 0x3e	; 62
   static uint16 counter = 0 ;

   counter ++ ;
    1376:	80 91 82 00 	lds	r24, 0x0082
    137a:	90 91 83 00 	lds	r25, 0x0083
    137e:	01 96       	adiw	r24, 0x01	; 1
    1380:	90 93 83 00 	sts	0x0083, r25
    1384:	80 93 82 00 	sts	0x0082, r24

   if(counter == g_Interrupts_number && g_Interrupts_number == 215 )
    1388:	20 91 82 00 	lds	r18, 0x0082
    138c:	30 91 83 00 	lds	r19, 0x0083
    1390:	80 91 7c 00 	lds	r24, 0x007C
    1394:	90 91 7d 00 	lds	r25, 0x007D
    1398:	28 17       	cp	r18, r24
    139a:	39 07       	cpc	r19, r25
    139c:	69 f4       	brne	.+26     	; 0x13b8 <OPERATIONS_II_Buzzer+0x4a>
    139e:	80 91 7c 00 	lds	r24, 0x007C
    13a2:	90 91 7d 00 	lds	r25, 0x007D
    13a6:	87 3d       	cpi	r24, 0xD7	; 215
    13a8:	91 05       	cpc	r25, r1
    13aa:	31 f4       	brne	.+12     	; 0x13b8 <OPERATIONS_II_Buzzer+0x4a>
   {
       BUZZER_OFF();
    13ac:	0e 94 cf 05 	call	0xb9e	; 0xb9e <BUZZER_OFF>
       counter = 0 ;
    13b0:	10 92 83 00 	sts	0x0083, r1
    13b4:	10 92 82 00 	sts	0x0082, r1
   }
}
    13b8:	cf 91       	pop	r28
    13ba:	df 91       	pop	r29
    13bc:	08 95       	ret

000013be <OPERATIONS_II_Main_Options>:
* Parameters (out):   None
* Return value:       None
* Description:        Function to Handle User Main Option from First MCU
********************************************************************************/
void OPERATIONS_II_Main_Options(void)
{
    13be:	df 93       	push	r29
    13c0:	cf 93       	push	r28
    13c2:	cd b7       	in	r28, 0x3d	; 61
    13c4:	de b7       	in	r29, 0x3e	; 62
    13c6:	62 97       	sbiw	r28, 0x12	; 18
    13c8:	0f b6       	in	r0, 0x3f	; 63
    13ca:	f8 94       	cli
    13cc:	de bf       	out	0x3e, r29	; 62
    13ce:	0f be       	out	0x3f, r0	; 63
    13d0:	cd bf       	out	0x3d, r28	; 61
	/*Variable to Hold EEPROM Check*/
	uint8 Motor_Drive_Check = 0;
    13d2:	18 8a       	std	Y+16, r1	; 0x10

	/*Variable to hold number of miss matches*/
	 static uint8 missmatch_counter = 0;

	 /*Variable to Hold user input*/
	 uint8 user_input=0;
    13d4:	1f 86       	std	Y+15, r1	; 0x0f

	/*4- Take User option input from first MCU by UART*/
	user_input = UART_receiveByte();
    13d6:	0e 94 2c 11 	call	0x2258	; 0x2258 <UART_receiveByte>
    13da:	8f 87       	std	Y+15, r24	; 0x0f

	/* 5- Take Password for  '+' Entry and Compare with EEPROM and Send by UART Results */

	OPERATION_II_ReceivePassword();
    13dc:	0e 94 48 07 	call	0xe90	; 0xe90 <OPERATION_II_ReceivePassword>
	Motor_Drive_Check = OPERATION_II_checkEEPROMMatch();
    13e0:	0e 94 89 08 	call	0x1112	; 0x1112 <OPERATION_II_checkEEPROMMatch>
    13e4:	88 8b       	std	Y+16, r24	; 0x10
	UART_sendByte(Motor_Drive_Check);
    13e6:	88 89       	ldd	r24, Y+16	; 0x10
    13e8:	0e 94 15 11 	call	0x222a	; 0x222a <UART_sendByte>
    13ec:	24 c0       	rjmp	.+72     	; 0x1436 <OPERATIONS_II_Main_Options+0x78>


	while ( Motor_Drive_Check == 0)
	{
		missmatch_counter++;
    13ee:	80 91 84 00 	lds	r24, 0x0084
    13f2:	8f 5f       	subi	r24, 0xFF	; 255
    13f4:	80 93 84 00 	sts	0x0084, r24

		/*if Mismatches are 3 , Buzzer ON*/
		if(missmatch_counter == MAX_WRONG_ENTRY_NUMBER)
    13f8:	80 91 84 00 	lds	r24, 0x0084
    13fc:	83 30       	cpi	r24, 0x03	; 3
    13fe:	99 f4       	brne	.+38     	; 0x1426 <OPERATIONS_II_Main_Options+0x68>
		{
			BUZZER_ON();
    1400:	0e 94 c0 05 	call	0xb80	; 0xb80 <BUZZER_ON>
			Timer_init(&TIMER_Config_Struct);
    1404:	88 e6       	ldi	r24, 0x68	; 104
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	0e 94 4f 0c 	call	0x189e	; 0x189e <Timer_init>
			Timer2_setCallBack(OPERATIONS_II_Buzzer);
    140c:	87 eb       	ldi	r24, 0xB7	; 183
    140e:	99 e0       	ldi	r25, 0x09	; 9
    1410:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <Timer2_setCallBack>
			g_Interrupts_number= BUZZER_ON_TIMER_VALUE;
    1414:	85 e3       	ldi	r24, 0x35	; 53
    1416:	97 e0       	ldi	r25, 0x07	; 7
    1418:	90 93 7d 00 	sts	0x007D, r25
    141c:	80 93 7c 00 	sts	0x007C, r24
			missmatch_counter = 0;
    1420:	10 92 84 00 	sts	0x0084, r1
    1424:	0b c0       	rjmp	.+22     	; 0x143c <OPERATIONS_II_Main_Options+0x7e>
			break;
		}
		/*Re-Enter Password and Check Again until 3 tries are done*/
		OPERATION_II_ReceivePassword();
    1426:	0e 94 48 07 	call	0xe90	; 0xe90 <OPERATION_II_ReceivePassword>
		Motor_Drive_Check = OPERATION_II_checkEEPROMMatch();
    142a:	0e 94 89 08 	call	0x1112	; 0x1112 <OPERATION_II_checkEEPROMMatch>
    142e:	88 8b       	std	Y+16, r24	; 0x10
		UART_sendByte(Motor_Drive_Check);
    1430:	88 89       	ldd	r24, Y+16	; 0x10
    1432:	0e 94 15 11 	call	0x222a	; 0x222a <UART_sendByte>
	OPERATION_II_ReceivePassword();
	Motor_Drive_Check = OPERATION_II_checkEEPROMMatch();
	UART_sendByte(Motor_Drive_Check);


	while ( Motor_Drive_Check == 0)
    1436:	88 89       	ldd	r24, Y+16	; 0x10
    1438:	88 23       	and	r24, r24
    143a:	c9 f2       	breq	.-78     	; 0x13ee <OPERATIONS_II_Main_Options+0x30>
		Motor_Drive_Check = OPERATION_II_checkEEPROMMatch();
		UART_sendByte(Motor_Drive_Check);
    }

		/*Matches Case*/
	    if ( Motor_Drive_Check == 1)
    143c:	88 89       	ldd	r24, Y+16	; 0x10
    143e:	81 30       	cpi	r24, 0x01	; 1
    1440:	09 f0       	breq	.+2      	; 0x1444 <OPERATIONS_II_Main_Options+0x86>
    1442:	9e c0       	rjmp	.+316    	; 0x1580 <OPERATIONS_II_Main_Options+0x1c2>
		{
	    	switch( user_input)
    1444:	8f 85       	ldd	r24, Y+15	; 0x0f
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	3a 8b       	std	Y+18, r19	; 0x12
    144c:	29 8b       	std	Y+17, r18	; 0x11
    144e:	89 89       	ldd	r24, Y+17	; 0x11
    1450:	9a 89       	ldd	r25, Y+18	; 0x12
    1452:	8b 32       	cpi	r24, 0x2B	; 43
    1454:	91 05       	cpc	r25, r1
    1456:	39 f0       	breq	.+14     	; 0x1466 <OPERATIONS_II_Main_Options+0xa8>
    1458:	29 89       	ldd	r18, Y+17	; 0x11
    145a:	3a 89       	ldd	r19, Y+18	; 0x12
    145c:	2d 32       	cpi	r18, 0x2D	; 45
    145e:	31 05       	cpc	r19, r1
    1460:	09 f4       	brne	.+2      	; 0x1464 <OPERATIONS_II_Main_Options+0xa6>
    1462:	86 c0       	rjmp	.+268    	; 0x1570 <OPERATIONS_II_Main_Options+0x1b2>
    1464:	8d c0       	rjmp	.+282    	; 0x1580 <OPERATIONS_II_Main_Options+0x1c2>
	    	{
	    	case '+':
	    		Timer_init(&TIMER_Config_Struct);
    1466:	88 e6       	ldi	r24, 0x68	; 104
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	0e 94 4f 0c 	call	0x189e	; 0x189e <Timer_init>
	    		Timer2_setCallBack(OPERATIONS_II_Motor);
    146e:	86 eb       	ldi	r24, 0xB6	; 182
    1470:	98 e0       	ldi	r25, 0x08	; 8
    1472:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <Timer2_setCallBack>
	    		g_Interrupts_number= DOOR_OPEN_TIMER_VALUE;
    1476:	8d ec       	ldi	r24, 0xCD	; 205
    1478:	91 e0       	ldi	r25, 0x01	; 1
    147a:	90 93 7d 00 	sts	0x007D, r25
    147e:	80 93 7c 00 	sts	0x007C, r24
    1482:	80 e0       	ldi	r24, 0x00	; 0
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	a8 e4       	ldi	r26, 0x48	; 72
    1488:	b4 e4       	ldi	r27, 0x44	; 68
    148a:	8b 87       	std	Y+11, r24	; 0x0b
    148c:	9c 87       	std	Y+12, r25	; 0x0c
    148e:	ad 87       	std	Y+13, r26	; 0x0d
    1490:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1492:	6b 85       	ldd	r22, Y+11	; 0x0b
    1494:	7c 85       	ldd	r23, Y+12	; 0x0c
    1496:	8d 85       	ldd	r24, Y+13	; 0x0d
    1498:	9e 85       	ldd	r25, Y+14	; 0x0e
    149a:	20 e0       	ldi	r18, 0x00	; 0
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	4a ef       	ldi	r20, 0xFA	; 250
    14a0:	54 e4       	ldi	r21, 0x44	; 68
    14a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a6:	dc 01       	movw	r26, r24
    14a8:	cb 01       	movw	r24, r22
    14aa:	8f 83       	std	Y+7, r24	; 0x07
    14ac:	98 87       	std	Y+8, r25	; 0x08
    14ae:	a9 87       	std	Y+9, r26	; 0x09
    14b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14b2:	6f 81       	ldd	r22, Y+7	; 0x07
    14b4:	78 85       	ldd	r23, Y+8	; 0x08
    14b6:	89 85       	ldd	r24, Y+9	; 0x09
    14b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	40 e8       	ldi	r20, 0x80	; 128
    14c0:	5f e3       	ldi	r21, 0x3F	; 63
    14c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14c6:	88 23       	and	r24, r24
    14c8:	2c f4       	brge	.+10     	; 0x14d4 <OPERATIONS_II_Main_Options+0x116>
		__ticks = 1;
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	9e 83       	std	Y+6, r25	; 0x06
    14d0:	8d 83       	std	Y+5, r24	; 0x05
    14d2:	3f c0       	rjmp	.+126    	; 0x1552 <OPERATIONS_II_Main_Options+0x194>
	else if (__tmp > 65535)
    14d4:	6f 81       	ldd	r22, Y+7	; 0x07
    14d6:	78 85       	ldd	r23, Y+8	; 0x08
    14d8:	89 85       	ldd	r24, Y+9	; 0x09
    14da:	9a 85       	ldd	r25, Y+10	; 0x0a
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	3f ef       	ldi	r19, 0xFF	; 255
    14e0:	4f e7       	ldi	r20, 0x7F	; 127
    14e2:	57 e4       	ldi	r21, 0x47	; 71
    14e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14e8:	18 16       	cp	r1, r24
    14ea:	4c f5       	brge	.+82     	; 0x153e <OPERATIONS_II_Main_Options+0x180>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    14ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    14f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    14f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    14f4:	20 e0       	ldi	r18, 0x00	; 0
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	40 e2       	ldi	r20, 0x20	; 32
    14fa:	51 e4       	ldi	r21, 0x41	; 65
    14fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1500:	dc 01       	movw	r26, r24
    1502:	cb 01       	movw	r24, r22
    1504:	bc 01       	movw	r22, r24
    1506:	cd 01       	movw	r24, r26
    1508:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    150c:	dc 01       	movw	r26, r24
    150e:	cb 01       	movw	r24, r22
    1510:	9e 83       	std	Y+6, r25	; 0x06
    1512:	8d 83       	std	Y+5, r24	; 0x05
    1514:	0f c0       	rjmp	.+30     	; 0x1534 <OPERATIONS_II_Main_Options+0x176>
    1516:	88 ec       	ldi	r24, 0xC8	; 200
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	9c 83       	std	Y+4, r25	; 0x04
    151c:	8b 83       	std	Y+3, r24	; 0x03
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	9c 81       	ldd	r25, Y+4	; 0x04
    1522:	01 97       	sbiw	r24, 0x01	; 1
    1524:	f1 f7       	brne	.-4      	; 0x1522 <OPERATIONS_II_Main_Options+0x164>
    1526:	9c 83       	std	Y+4, r25	; 0x04
    1528:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    152a:	8d 81       	ldd	r24, Y+5	; 0x05
    152c:	9e 81       	ldd	r25, Y+6	; 0x06
    152e:	01 97       	sbiw	r24, 0x01	; 1
    1530:	9e 83       	std	Y+6, r25	; 0x06
    1532:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1534:	8d 81       	ldd	r24, Y+5	; 0x05
    1536:	9e 81       	ldd	r25, Y+6	; 0x06
    1538:	00 97       	sbiw	r24, 0x00	; 0
    153a:	69 f7       	brne	.-38     	; 0x1516 <OPERATIONS_II_Main_Options+0x158>
    153c:	14 c0       	rjmp	.+40     	; 0x1566 <OPERATIONS_II_Main_Options+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    153e:	6f 81       	ldd	r22, Y+7	; 0x07
    1540:	78 85       	ldd	r23, Y+8	; 0x08
    1542:	89 85       	ldd	r24, Y+9	; 0x09
    1544:	9a 85       	ldd	r25, Y+10	; 0x0a
    1546:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    154a:	dc 01       	movw	r26, r24
    154c:	cb 01       	movw	r24, r22
    154e:	9e 83       	std	Y+6, r25	; 0x06
    1550:	8d 83       	std	Y+5, r24	; 0x05
    1552:	8d 81       	ldd	r24, Y+5	; 0x05
    1554:	9e 81       	ldd	r25, Y+6	; 0x06
    1556:	9a 83       	std	Y+2, r25	; 0x02
    1558:	89 83       	std	Y+1, r24	; 0x01
    155a:	89 81       	ldd	r24, Y+1	; 0x01
    155c:	9a 81       	ldd	r25, Y+2	; 0x02
    155e:	01 97       	sbiw	r24, 0x01	; 1
    1560:	f1 f7       	brne	.-4      	; 0x155e <OPERATIONS_II_Main_Options+0x1a0>
    1562:	9a 83       	std	Y+2, r25	; 0x02
    1564:	89 83       	std	Y+1, r24	; 0x01
                _delay_ms(800);
	    		DC_MOTOR_Rotate(CW, 75);
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	6b e4       	ldi	r22, 0x4B	; 75
    156a:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DC_MOTOR_Rotate>
    156e:	08 c0       	rjmp	.+16     	; 0x1580 <OPERATIONS_II_Main_Options+0x1c2>
	    		       break;
	    	case '-':
	    		OPERATION_II_ReceivePassword();
    1570:	0e 94 48 07 	call	0xe90	; 0xe90 <OPERATION_II_ReceivePassword>
	    		OPERATION_II_ReceiveSecondPassword();
    1574:	0e 94 72 07 	call	0xee4	; 0xee4 <OPERATION_II_ReceiveSecondPassword>
	    		OPERATION_II_checkPasswordMatch();
    1578:	0e 94 9c 07 	call	0xf38	; 0xf38 <OPERATION_II_checkPasswordMatch>
	    		OPERATIONS_II_Main_Options();
    157c:	0e 94 df 09 	call	0x13be	; 0x13be <OPERATIONS_II_Main_Options>
	    		       break;
	    	}

		}
}
    1580:	62 96       	adiw	r28, 0x12	; 18
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	f8 94       	cli
    1586:	de bf       	out	0x3e, r29	; 62
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	cd bf       	out	0x3d, r28	; 61
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	08 95       	ret

00001592 <OPERATIONS_II_UART_HANDLE>:
* Return value:       None
* Description:        Function to be called in main function to handle UART
*                     input from first MCU.
********************************************************************************/
void OPERATIONS_II_UART_HANDLE(const TIMER_ConfigType * TIMER_Config_STRUCT)
{
    1592:	df 93       	push	r29
    1594:	cf 93       	push	r28
    1596:	00 d0       	rcall	.+0      	; 0x1598 <OPERATIONS_II_UART_HANDLE+0x6>
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    159c:	9a 83       	std	Y+2, r25	; 0x02
    159e:	89 83       	std	Y+1, r24	; 0x01
	 */



	/*  1-Take First Password from First MCU */
	OPERATION_II_ReceivePassword();
    15a0:	0e 94 48 07 	call	0xe90	; 0xe90 <OPERATION_II_ReceivePassword>

	/*  2- Take Second Password from second MCU */
	OPERATION_II_ReceiveSecondPassword();
    15a4:	0e 94 72 07 	call	0xee4	; 0xee4 <OPERATION_II_ReceiveSecondPassword>

	/*  3- Check Password */
	OPERATION_II_checkPasswordMatch();
    15a8:	0e 94 9c 07 	call	0xf38	; 0xf38 <OPERATION_II_checkPasswordMatch>

	/*  Handle Steps: 4 - 5 -6 */
	OPERATIONS_II_Main_Options();
    15ac:	0e 94 df 09 	call	0x13be	; 0x13be <OPERATIONS_II_Main_Options>


}
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	cf 91       	pop	r28
    15b6:	df 91       	pop	r29
    15b8:	08 95       	ret

000015ba <PWM_Timer0_Start>:
* Parameters (out):   None
* Return value:       None
* Description:        Initialize Timer0 and Rotating DC Motor with a defined speed
********************************************************************************/
void PWM_Timer0_Start(uint8 duty_cycle)
{
    15ba:	df 93       	push	r29
    15bc:	cf 93       	push	r28
    15be:	0f 92       	push	r0
    15c0:	cd b7       	in	r28, 0x3d	; 61
    15c2:	de b7       	in	r29, 0x3e	; 62
    15c4:	89 83       	std	Y+1, r24	; 0x01
    /*Fast PWM Mode*/
	SET_BIT(TCCR0,WGM00);
    15c6:	a3 e5       	ldi	r26, 0x53	; 83
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	e3 e5       	ldi	r30, 0x53	; 83
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	80 64       	ori	r24, 0x40	; 64
    15d2:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
    15d4:	a3 e5       	ldi	r26, 0x53	; 83
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	e3 e5       	ldi	r30, 0x53	; 83
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	88 60       	ori	r24, 0x08	; 8
    15e0:	8c 93       	st	X, r24

	/*Non Inverting*/
	SET_BIT(TCCR0,COM01);
    15e2:	a3 e5       	ldi	r26, 0x53	; 83
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	e3 e5       	ldi	r30, 0x53	; 83
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	80 62       	ori	r24, 0x20	; 32
    15ee:	8c 93       	st	X, r24

	/*Prescaler = 8*/
	CLEAR_BIT(TCCR0,CS00);
    15f0:	a3 e5       	ldi	r26, 0x53	; 83
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	e3 e5       	ldi	r30, 0x53	; 83
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	8e 7f       	andi	r24, 0xFE	; 254
    15fc:	8c 93       	st	X, r24
    SET_BIT(TCCR0,CS01);
    15fe:	a3 e5       	ldi	r26, 0x53	; 83
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e3 e5       	ldi	r30, 0x53	; 83
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	82 60       	ori	r24, 0x02	; 2
    160a:	8c 93       	st	X, r24
    CLEAR_BIT(TCCR0,CS02);
    160c:	a3 e5       	ldi	r26, 0x53	; 83
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	e3 e5       	ldi	r30, 0x53	; 83
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	8b 7f       	andi	r24, 0xFB	; 251
    1618:	8c 93       	st	X, r24

    /*Setting OC0 as Output PIN*/
    GPIO_setupPinDirection(PORTB_ID,PIN3_ID,PIN_OUTPUT);
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	63 e0       	ldi	r22, 0x03	; 3
    161e:	41 e0       	ldi	r20, 0x01	; 1
    1620:	0e 94 48 12 	call	0x2490	; 0x2490 <GPIO_setupPinDirection>

    /*Initialize TCNT*/
    TCNT0 = 0;
    1624:	e2 e5       	ldi	r30, 0x52	; 82
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	10 82       	st	Z, r1

    /*Setting  OCR0 Value*/
    OCR0 = duty_cycle;
    162a:	ec e5       	ldi	r30, 0x5C	; 92
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	89 81       	ldd	r24, Y+1	; 0x01
    1630:	80 83       	st	Z, r24

}
    1632:	0f 90       	pop	r0
    1634:	cf 91       	pop	r28
    1636:	df 91       	pop	r29
    1638:	08 95       	ret

0000163a <__vector_9>:
*                                                                              *
*                              Interrupt Service Routines                      *
*                                                                              *
********************************************************************************/
ISR(TIMER0_OVF_vect)
{
    163a:	1f 92       	push	r1
    163c:	0f 92       	push	r0
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	0f 92       	push	r0
    1642:	11 24       	eor	r1, r1
    1644:	2f 93       	push	r18
    1646:	3f 93       	push	r19
    1648:	4f 93       	push	r20
    164a:	5f 93       	push	r21
    164c:	6f 93       	push	r22
    164e:	7f 93       	push	r23
    1650:	8f 93       	push	r24
    1652:	9f 93       	push	r25
    1654:	af 93       	push	r26
    1656:	bf 93       	push	r27
    1658:	ef 93       	push	r30
    165a:	ff 93       	push	r31
    165c:	df 93       	push	r29
    165e:	cf 93       	push	r28
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
    if ( g_Timer0_callBackPtr != NULL_PTR)
    1664:	80 91 85 00 	lds	r24, 0x0085
    1668:	90 91 86 00 	lds	r25, 0x0086
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	29 f0       	breq	.+10     	; 0x167a <__vector_9+0x40>
    {
    	(*g_Timer0_callBackPtr)();
    1670:	e0 91 85 00 	lds	r30, 0x0085
    1674:	f0 91 86 00 	lds	r31, 0x0086
    1678:	09 95       	icall
    }
}
    167a:	cf 91       	pop	r28
    167c:	df 91       	pop	r29
    167e:	ff 91       	pop	r31
    1680:	ef 91       	pop	r30
    1682:	bf 91       	pop	r27
    1684:	af 91       	pop	r26
    1686:	9f 91       	pop	r25
    1688:	8f 91       	pop	r24
    168a:	7f 91       	pop	r23
    168c:	6f 91       	pop	r22
    168e:	5f 91       	pop	r21
    1690:	4f 91       	pop	r20
    1692:	3f 91       	pop	r19
    1694:	2f 91       	pop	r18
    1696:	0f 90       	pop	r0
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	0f 90       	pop	r0
    169c:	1f 90       	pop	r1
    169e:	18 95       	reti

000016a0 <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    16a0:	1f 92       	push	r1
    16a2:	0f 92       	push	r0
    16a4:	0f b6       	in	r0, 0x3f	; 63
    16a6:	0f 92       	push	r0
    16a8:	11 24       	eor	r1, r1
    16aa:	2f 93       	push	r18
    16ac:	3f 93       	push	r19
    16ae:	4f 93       	push	r20
    16b0:	5f 93       	push	r21
    16b2:	6f 93       	push	r22
    16b4:	7f 93       	push	r23
    16b6:	8f 93       	push	r24
    16b8:	9f 93       	push	r25
    16ba:	af 93       	push	r26
    16bc:	bf 93       	push	r27
    16be:	ef 93       	push	r30
    16c0:	ff 93       	push	r31
    16c2:	df 93       	push	r29
    16c4:	cf 93       	push	r28
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
    if ( g_Timer0_callBackPtr != NULL_PTR)
    16ca:	80 91 85 00 	lds	r24, 0x0085
    16ce:	90 91 86 00 	lds	r25, 0x0086
    16d2:	00 97       	sbiw	r24, 0x00	; 0
    16d4:	29 f0       	breq	.+10     	; 0x16e0 <__vector_19+0x40>
    {
    	(*g_Timer0_callBackPtr)();
    16d6:	e0 91 85 00 	lds	r30, 0x0085
    16da:	f0 91 86 00 	lds	r31, 0x0086
    16de:	09 95       	icall
    }
}
    16e0:	cf 91       	pop	r28
    16e2:	df 91       	pop	r29
    16e4:	ff 91       	pop	r31
    16e6:	ef 91       	pop	r30
    16e8:	bf 91       	pop	r27
    16ea:	af 91       	pop	r26
    16ec:	9f 91       	pop	r25
    16ee:	8f 91       	pop	r24
    16f0:	7f 91       	pop	r23
    16f2:	6f 91       	pop	r22
    16f4:	5f 91       	pop	r21
    16f6:	4f 91       	pop	r20
    16f8:	3f 91       	pop	r19
    16fa:	2f 91       	pop	r18
    16fc:	0f 90       	pop	r0
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	0f 90       	pop	r0
    1702:	1f 90       	pop	r1
    1704:	18 95       	reti

00001706 <__vector_6>:
ISR(TIMER1_COMPA_vect)
{
    1706:	1f 92       	push	r1
    1708:	0f 92       	push	r0
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	0f 92       	push	r0
    170e:	11 24       	eor	r1, r1
    1710:	2f 93       	push	r18
    1712:	3f 93       	push	r19
    1714:	4f 93       	push	r20
    1716:	5f 93       	push	r21
    1718:	6f 93       	push	r22
    171a:	7f 93       	push	r23
    171c:	8f 93       	push	r24
    171e:	9f 93       	push	r25
    1720:	af 93       	push	r26
    1722:	bf 93       	push	r27
    1724:	ef 93       	push	r30
    1726:	ff 93       	push	r31
    1728:	df 93       	push	r29
    172a:	cf 93       	push	r28
    172c:	cd b7       	in	r28, 0x3d	; 61
    172e:	de b7       	in	r29, 0x3e	; 62
    if ( g_Timer1_callBackPtr != NULL_PTR)
    1730:	80 91 87 00 	lds	r24, 0x0087
    1734:	90 91 88 00 	lds	r25, 0x0088
    1738:	00 97       	sbiw	r24, 0x00	; 0
    173a:	29 f0       	breq	.+10     	; 0x1746 <__vector_6+0x40>
    {
    	(*g_Timer1_callBackPtr)();
    173c:	e0 91 87 00 	lds	r30, 0x0087
    1740:	f0 91 88 00 	lds	r31, 0x0088
    1744:	09 95       	icall
    }
}
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	ff 91       	pop	r31
    174c:	ef 91       	pop	r30
    174e:	bf 91       	pop	r27
    1750:	af 91       	pop	r26
    1752:	9f 91       	pop	r25
    1754:	8f 91       	pop	r24
    1756:	7f 91       	pop	r23
    1758:	6f 91       	pop	r22
    175a:	5f 91       	pop	r21
    175c:	4f 91       	pop	r20
    175e:	3f 91       	pop	r19
    1760:	2f 91       	pop	r18
    1762:	0f 90       	pop	r0
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	0f 90       	pop	r0
    1768:	1f 90       	pop	r1
    176a:	18 95       	reti

0000176c <__vector_7>:
ISR(TIMER1_COMPB_vect)
{
    176c:	1f 92       	push	r1
    176e:	0f 92       	push	r0
    1770:	0f b6       	in	r0, 0x3f	; 63
    1772:	0f 92       	push	r0
    1774:	11 24       	eor	r1, r1
    1776:	2f 93       	push	r18
    1778:	3f 93       	push	r19
    177a:	4f 93       	push	r20
    177c:	5f 93       	push	r21
    177e:	6f 93       	push	r22
    1780:	7f 93       	push	r23
    1782:	8f 93       	push	r24
    1784:	9f 93       	push	r25
    1786:	af 93       	push	r26
    1788:	bf 93       	push	r27
    178a:	ef 93       	push	r30
    178c:	ff 93       	push	r31
    178e:	df 93       	push	r29
    1790:	cf 93       	push	r28
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
    if ( g_Timer1_callBackPtr != NULL_PTR)
    1796:	80 91 87 00 	lds	r24, 0x0087
    179a:	90 91 88 00 	lds	r25, 0x0088
    179e:	00 97       	sbiw	r24, 0x00	; 0
    17a0:	29 f0       	breq	.+10     	; 0x17ac <__vector_7+0x40>
    {
    	(*g_Timer1_callBackPtr)();
    17a2:	e0 91 87 00 	lds	r30, 0x0087
    17a6:	f0 91 88 00 	lds	r31, 0x0088
    17aa:	09 95       	icall
    }
}
    17ac:	cf 91       	pop	r28
    17ae:	df 91       	pop	r29
    17b0:	ff 91       	pop	r31
    17b2:	ef 91       	pop	r30
    17b4:	bf 91       	pop	r27
    17b6:	af 91       	pop	r26
    17b8:	9f 91       	pop	r25
    17ba:	8f 91       	pop	r24
    17bc:	7f 91       	pop	r23
    17be:	6f 91       	pop	r22
    17c0:	5f 91       	pop	r21
    17c2:	4f 91       	pop	r20
    17c4:	3f 91       	pop	r19
    17c6:	2f 91       	pop	r18
    17c8:	0f 90       	pop	r0
    17ca:	0f be       	out	0x3f, r0	; 63
    17cc:	0f 90       	pop	r0
    17ce:	1f 90       	pop	r1
    17d0:	18 95       	reti

000017d2 <__vector_4>:
ISR(TIMER2_OVF_vect)
{
    17d2:	1f 92       	push	r1
    17d4:	0f 92       	push	r0
    17d6:	0f b6       	in	r0, 0x3f	; 63
    17d8:	0f 92       	push	r0
    17da:	11 24       	eor	r1, r1
    17dc:	2f 93       	push	r18
    17de:	3f 93       	push	r19
    17e0:	4f 93       	push	r20
    17e2:	5f 93       	push	r21
    17e4:	6f 93       	push	r22
    17e6:	7f 93       	push	r23
    17e8:	8f 93       	push	r24
    17ea:	9f 93       	push	r25
    17ec:	af 93       	push	r26
    17ee:	bf 93       	push	r27
    17f0:	ef 93       	push	r30
    17f2:	ff 93       	push	r31
    17f4:	df 93       	push	r29
    17f6:	cf 93       	push	r28
    17f8:	cd b7       	in	r28, 0x3d	; 61
    17fa:	de b7       	in	r29, 0x3e	; 62
    if ( g_Timer2_callBackPtr != NULL_PTR)
    17fc:	80 91 89 00 	lds	r24, 0x0089
    1800:	90 91 8a 00 	lds	r25, 0x008A
    1804:	00 97       	sbiw	r24, 0x00	; 0
    1806:	29 f0       	breq	.+10     	; 0x1812 <__vector_4+0x40>
    {
    	(*g_Timer2_callBackPtr)();
    1808:	e0 91 89 00 	lds	r30, 0x0089
    180c:	f0 91 8a 00 	lds	r31, 0x008A
    1810:	09 95       	icall
    }
}
    1812:	cf 91       	pop	r28
    1814:	df 91       	pop	r29
    1816:	ff 91       	pop	r31
    1818:	ef 91       	pop	r30
    181a:	bf 91       	pop	r27
    181c:	af 91       	pop	r26
    181e:	9f 91       	pop	r25
    1820:	8f 91       	pop	r24
    1822:	7f 91       	pop	r23
    1824:	6f 91       	pop	r22
    1826:	5f 91       	pop	r21
    1828:	4f 91       	pop	r20
    182a:	3f 91       	pop	r19
    182c:	2f 91       	pop	r18
    182e:	0f 90       	pop	r0
    1830:	0f be       	out	0x3f, r0	; 63
    1832:	0f 90       	pop	r0
    1834:	1f 90       	pop	r1
    1836:	18 95       	reti

00001838 <__vector_3>:
ISR(TIMER2_COMP_vect)
{
    1838:	1f 92       	push	r1
    183a:	0f 92       	push	r0
    183c:	0f b6       	in	r0, 0x3f	; 63
    183e:	0f 92       	push	r0
    1840:	11 24       	eor	r1, r1
    1842:	2f 93       	push	r18
    1844:	3f 93       	push	r19
    1846:	4f 93       	push	r20
    1848:	5f 93       	push	r21
    184a:	6f 93       	push	r22
    184c:	7f 93       	push	r23
    184e:	8f 93       	push	r24
    1850:	9f 93       	push	r25
    1852:	af 93       	push	r26
    1854:	bf 93       	push	r27
    1856:	ef 93       	push	r30
    1858:	ff 93       	push	r31
    185a:	df 93       	push	r29
    185c:	cf 93       	push	r28
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62
    if ( g_Timer2_callBackPtr != NULL_PTR)
    1862:	80 91 89 00 	lds	r24, 0x0089
    1866:	90 91 8a 00 	lds	r25, 0x008A
    186a:	00 97       	sbiw	r24, 0x00	; 0
    186c:	29 f0       	breq	.+10     	; 0x1878 <__vector_3+0x40>
    {
    	(*g_Timer2_callBackPtr)();
    186e:	e0 91 89 00 	lds	r30, 0x0089
    1872:	f0 91 8a 00 	lds	r31, 0x008A
    1876:	09 95       	icall
    }
}
    1878:	cf 91       	pop	r28
    187a:	df 91       	pop	r29
    187c:	ff 91       	pop	r31
    187e:	ef 91       	pop	r30
    1880:	bf 91       	pop	r27
    1882:	af 91       	pop	r26
    1884:	9f 91       	pop	r25
    1886:	8f 91       	pop	r24
    1888:	7f 91       	pop	r23
    188a:	6f 91       	pop	r22
    188c:	5f 91       	pop	r21
    188e:	4f 91       	pop	r20
    1890:	3f 91       	pop	r19
    1892:	2f 91       	pop	r18
    1894:	0f 90       	pop	r0
    1896:	0f be       	out	0x3f, r0	; 63
    1898:	0f 90       	pop	r0
    189a:	1f 90       	pop	r1
    189c:	18 95       	reti

0000189e <Timer_init>:
* Parameters (out):   None
* Return value:       None
* Description:        Initialize the Selected Timer module.
********************************************************************************/
void Timer_init(const TIMER_ConfigType * Config_Ptr )
{
    189e:	df 93       	push	r29
    18a0:	cf 93       	push	r28
    18a2:	cd b7       	in	r28, 0x3d	; 61
    18a4:	de b7       	in	r29, 0x3e	; 62
    18a6:	28 97       	sbiw	r28, 0x08	; 8
    18a8:	0f b6       	in	r0, 0x3f	; 63
    18aa:	f8 94       	cli
    18ac:	de bf       	out	0x3e, r29	; 62
    18ae:	0f be       	out	0x3f, r0	; 63
    18b0:	cd bf       	out	0x3d, r28	; 61
    18b2:	9a 83       	std	Y+2, r25	; 0x02
    18b4:	89 83       	std	Y+1, r24	; 0x01
	/*Check Timer Number*/
    switch(Config_Ptr->timer_number)
    18b6:	e9 81       	ldd	r30, Y+1	; 0x01
    18b8:	fa 81       	ldd	r31, Y+2	; 0x02
    18ba:	80 81       	ld	r24, Z
    18bc:	28 2f       	mov	r18, r24
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	38 87       	std	Y+8, r19	; 0x08
    18c2:	2f 83       	std	Y+7, r18	; 0x07
    18c4:	8f 81       	ldd	r24, Y+7	; 0x07
    18c6:	98 85       	ldd	r25, Y+8	; 0x08
    18c8:	81 30       	cpi	r24, 0x01	; 1
    18ca:	91 05       	cpc	r25, r1
    18cc:	09 f4       	brne	.+2      	; 0x18d0 <Timer_init+0x32>
    18ce:	6d c1       	rjmp	.+730    	; 0x1baa <Timer_init+0x30c>
    18d0:	2f 81       	ldd	r18, Y+7	; 0x07
    18d2:	38 85       	ldd	r19, Y+8	; 0x08
    18d4:	22 30       	cpi	r18, 0x02	; 2
    18d6:	31 05       	cpc	r19, r1
    18d8:	09 f4       	brne	.+2      	; 0x18dc <Timer_init+0x3e>
    18da:	b5 c0       	rjmp	.+362    	; 0x1a46 <Timer_init+0x1a8>
    18dc:	8f 81       	ldd	r24, Y+7	; 0x07
    18de:	98 85       	ldd	r25, Y+8	; 0x08
    18e0:	00 97       	sbiw	r24, 0x00	; 0
    18e2:	09 f0       	breq	.+2      	; 0x18e6 <Timer_init+0x48>
    18e4:	62 c1       	rjmp	.+708    	; 0x1baa <Timer_init+0x30c>
    {
        case Timer_0:
        	           /*Check Timer Mode*/
        	          switch(Config_Ptr->timer_mode)
    18e6:	e9 81       	ldd	r30, Y+1	; 0x01
    18e8:	fa 81       	ldd	r31, Y+2	; 0x02
    18ea:	81 81       	ldd	r24, Z+1	; 0x01
    18ec:	28 2f       	mov	r18, r24
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	3e 83       	std	Y+6, r19	; 0x06
    18f2:	2d 83       	std	Y+5, r18	; 0x05
    18f4:	8d 81       	ldd	r24, Y+5	; 0x05
    18f6:	9e 81       	ldd	r25, Y+6	; 0x06
    18f8:	81 30       	cpi	r24, 0x01	; 1
    18fa:	91 05       	cpc	r25, r1
    18fc:	59 f1       	breq	.+86     	; 0x1954 <Timer_init+0xb6>
    18fe:	2d 81       	ldd	r18, Y+5	; 0x05
    1900:	3e 81       	ldd	r19, Y+6	; 0x06
    1902:	22 30       	cpi	r18, 0x02	; 2
    1904:	31 05       	cpc	r19, r1
    1906:	2c f4       	brge	.+10     	; 0x1912 <Timer_init+0x74>
    1908:	8d 81       	ldd	r24, Y+5	; 0x05
    190a:	9e 81       	ldd	r25, Y+6	; 0x06
    190c:	00 97       	sbiw	r24, 0x00	; 0
    190e:	61 f0       	breq	.+24     	; 0x1928 <Timer_init+0x8a>
    1910:	54 c0       	rjmp	.+168    	; 0x19ba <Timer_init+0x11c>
    1912:	2d 81       	ldd	r18, Y+5	; 0x05
    1914:	3e 81       	ldd	r19, Y+6	; 0x06
    1916:	22 30       	cpi	r18, 0x02	; 2
    1918:	31 05       	cpc	r19, r1
    191a:	59 f1       	breq	.+86     	; 0x1972 <Timer_init+0xd4>
    191c:	8d 81       	ldd	r24, Y+5	; 0x05
    191e:	9e 81       	ldd	r25, Y+6	; 0x06
    1920:	83 30       	cpi	r24, 0x03	; 3
    1922:	91 05       	cpc	r25, r1
    1924:	e1 f1       	breq	.+120    	; 0x199e <Timer_init+0x100>
    1926:	49 c0       	rjmp	.+146    	; 0x19ba <Timer_init+0x11c>
        	           {
        	                case Normal:           CLEAR_BIT(TCCR0,WGM00);
    1928:	a3 e5       	ldi	r26, 0x53	; 83
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	e3 e5       	ldi	r30, 0x53	; 83
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	8f 7b       	andi	r24, 0xBF	; 191
    1934:	8c 93       	st	X, r24
        	                                       CLEAR_BIT(TCCR0,WGM01);
    1936:	a3 e5       	ldi	r26, 0x53	; 83
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	e3 e5       	ldi	r30, 0x53	; 83
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	87 7f       	andi	r24, 0xF7	; 247
    1942:	8c 93       	st	X, r24
                                                   /*Non-PWM Mode*/
                                                   SET_BIT(TCCR0,FOC0);
    1944:	a3 e5       	ldi	r26, 0x53	; 83
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	e3 e5       	ldi	r30, 0x53	; 83
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	80 68       	ori	r24, 0x80	; 128
    1950:	8c 93       	st	X, r24
    1952:	33 c0       	rjmp	.+102    	; 0x19ba <Timer_init+0x11c>
        	                	                   break;

        	                case PWM_PhaseCorrect: SET_BIT(TCCR0,WGM00);
    1954:	a3 e5       	ldi	r26, 0x53	; 83
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	e3 e5       	ldi	r30, 0x53	; 83
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	80 64       	ori	r24, 0x40	; 64
    1960:	8c 93       	st	X, r24
                                                   CLEAR_BIT(TCCR0,WGM01);
    1962:	a3 e5       	ldi	r26, 0x53	; 83
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	e3 e5       	ldi	r30, 0x53	; 83
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	87 7f       	andi	r24, 0xF7	; 247
    196e:	8c 93       	st	X, r24
    1970:	24 c0       	rjmp	.+72     	; 0x19ba <Timer_init+0x11c>
        	                	                   break;

        	                case CTC:              CLEAR_BIT(TCCR0,WGM00);
    1972:	a3 e5       	ldi	r26, 0x53	; 83
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	e3 e5       	ldi	r30, 0x53	; 83
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	8f 7b       	andi	r24, 0xBF	; 191
    197e:	8c 93       	st	X, r24
                                                   SET_BIT(TCCR0,WGM01);
    1980:	a3 e5       	ldi	r26, 0x53	; 83
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	e3 e5       	ldi	r30, 0x53	; 83
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	88 60       	ori	r24, 0x08	; 8
    198c:	8c 93       	st	X, r24
                                                   /*Non-PWM Mode*/
                                                   SET_BIT(TCCR0,FOC0);
    198e:	a3 e5       	ldi	r26, 0x53	; 83
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	e3 e5       	ldi	r30, 0x53	; 83
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	80 68       	ori	r24, 0x80	; 128
    199a:	8c 93       	st	X, r24
    199c:	0e c0       	rjmp	.+28     	; 0x19ba <Timer_init+0x11c>
        	                	                   break;

        	                case PWM_Fast:         SET_BIT(TCCR0,WGM00);
    199e:	a3 e5       	ldi	r26, 0x53	; 83
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	e3 e5       	ldi	r30, 0x53	; 83
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	80 64       	ori	r24, 0x40	; 64
    19aa:	8c 93       	st	X, r24
                                                   SET_BIT(TCCR0,WGM01);
    19ac:	a3 e5       	ldi	r26, 0x53	; 83
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	e3 e5       	ldi	r30, 0x53	; 83
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	88 60       	ori	r24, 0x08	; 8
    19b8:	8c 93       	st	X, r24
        	                	                   break;
        	           }

        	           /*Check OC Pin Mode*/
        	           TCCR0 = (TCCR0 & 0xCF ) | (Config_Ptr->timer_OCPin_mode << 4 ) ;
    19ba:	a3 e5       	ldi	r26, 0x53	; 83
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	e3 e5       	ldi	r30, 0x53	; 83
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	28 2f       	mov	r18, r24
    19c6:	2f 7c       	andi	r18, 0xCF	; 207
    19c8:	e9 81       	ldd	r30, Y+1	; 0x01
    19ca:	fa 81       	ldd	r31, Y+2	; 0x02
    19cc:	85 81       	ldd	r24, Z+5	; 0x05
    19ce:	88 2f       	mov	r24, r24
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	82 95       	swap	r24
    19d4:	92 95       	swap	r25
    19d6:	90 7f       	andi	r25, 0xF0	; 240
    19d8:	98 27       	eor	r25, r24
    19da:	80 7f       	andi	r24, 0xF0	; 240
    19dc:	98 27       	eor	r25, r24
    19de:	82 2b       	or	r24, r18
    19e0:	8c 93       	st	X, r24

                       /*Check Prescaler*/
                       TCCR0 = (TCCR0 & 0xF8)  | (Config_Ptr->timer_prescaler );
    19e2:	a3 e5       	ldi	r26, 0x53	; 83
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	e3 e5       	ldi	r30, 0x53	; 83
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	98 2f       	mov	r25, r24
    19ee:	98 7f       	andi	r25, 0xF8	; 248
    19f0:	e9 81       	ldd	r30, Y+1	; 0x01
    19f2:	fa 81       	ldd	r31, Y+2	; 0x02
    19f4:	82 81       	ldd	r24, Z+2	; 0x02
    19f6:	89 2b       	or	r24, r25
    19f8:	8c 93       	st	X, r24

                       /*TCNT inital Value*/
                       TCNT0 = Config_Ptr->TCNT_value;
    19fa:	a2 e5       	ldi	r26, 0x52	; 82
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1a00:	fa 81       	ldd	r31, Y+2	; 0x02
    1a02:	86 81       	ldd	r24, Z+6	; 0x06
    1a04:	97 81       	ldd	r25, Z+7	; 0x07
    1a06:	8c 93       	st	X, r24

                       /*OCR Value*/
                       OCR0 = Config_Ptr->OCR_Value;
    1a08:	ac e5       	ldi	r26, 0x5C	; 92
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a0e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a10:	80 85       	ldd	r24, Z+8	; 0x08
    1a12:	8c 93       	st	X, r24

                       /*Over Flow interrupt*/
                       TIMSK = (TIMSK & 0xFE) | Config_Ptr->timer_overflowinterrupt;
    1a14:	a9 e5       	ldi	r26, 0x59	; 89
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	e9 e5       	ldi	r30, 0x59	; 89
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	98 2f       	mov	r25, r24
    1a20:	9e 7f       	andi	r25, 0xFE	; 254
    1a22:	e9 81       	ldd	r30, Y+1	; 0x01
    1a24:	fa 81       	ldd	r31, Y+2	; 0x02
    1a26:	83 81       	ldd	r24, Z+3	; 0x03
    1a28:	89 2b       	or	r24, r25
    1a2a:	8c 93       	st	X, r24

                       /*Output compare  interrupt*/
                       TIMSK = (TIMSK & 0xFD) | Config_Ptr->timer_OTCInterrupt;
    1a2c:	a9 e5       	ldi	r26, 0x59	; 89
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	e9 e5       	ldi	r30, 0x59	; 89
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	98 2f       	mov	r25, r24
    1a38:	9d 7f       	andi	r25, 0xFD	; 253
    1a3a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a3c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a3e:	84 81       	ldd	r24, Z+4	; 0x04
    1a40:	89 2b       	or	r24, r25
    1a42:	8c 93       	st	X, r24
    1a44:	b2 c0       	rjmp	.+356    	; 0x1baa <Timer_init+0x30c>
        	           break;


        case Timer_2:
        	          /*Check Timer Mode*/
	                  switch(Config_Ptr->timer_mode)
    1a46:	e9 81       	ldd	r30, Y+1	; 0x01
    1a48:	fa 81       	ldd	r31, Y+2	; 0x02
    1a4a:	81 81       	ldd	r24, Z+1	; 0x01
    1a4c:	28 2f       	mov	r18, r24
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	3c 83       	std	Y+4, r19	; 0x04
    1a52:	2b 83       	std	Y+3, r18	; 0x03
    1a54:	8b 81       	ldd	r24, Y+3	; 0x03
    1a56:	9c 81       	ldd	r25, Y+4	; 0x04
    1a58:	81 30       	cpi	r24, 0x01	; 1
    1a5a:	91 05       	cpc	r25, r1
    1a5c:	99 f1       	breq	.+102    	; 0x1ac4 <Timer_init+0x226>
    1a5e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a60:	3c 81       	ldd	r19, Y+4	; 0x04
    1a62:	22 30       	cpi	r18, 0x02	; 2
    1a64:	31 05       	cpc	r19, r1
    1a66:	2c f4       	brge	.+10     	; 0x1a72 <Timer_init+0x1d4>
    1a68:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6c:	00 97       	sbiw	r24, 0x00	; 0
    1a6e:	69 f0       	breq	.+26     	; 0x1a8a <Timer_init+0x1ec>
    1a70:	63 c0       	rjmp	.+198    	; 0x1b38 <Timer_init+0x29a>
    1a72:	2b 81       	ldd	r18, Y+3	; 0x03
    1a74:	3c 81       	ldd	r19, Y+4	; 0x04
    1a76:	22 30       	cpi	r18, 0x02	; 2
    1a78:	31 05       	cpc	r19, r1
    1a7a:	99 f1       	breq	.+102    	; 0x1ae2 <Timer_init+0x244>
    1a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a80:	83 30       	cpi	r24, 0x03	; 3
    1a82:	91 05       	cpc	r25, r1
    1a84:	09 f4       	brne	.+2      	; 0x1a88 <Timer_init+0x1ea>
    1a86:	4a c0       	rjmp	.+148    	; 0x1b1c <Timer_init+0x27e>
    1a88:	57 c0       	rjmp	.+174    	; 0x1b38 <Timer_init+0x29a>
	                  {
	                         case Normal:           CLEAR_BIT(TCCR2,WGM20);
    1a8a:	a5 e4       	ldi	r26, 0x45	; 69
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	e5 e4       	ldi	r30, 0x45	; 69
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	8f 7b       	andi	r24, 0xBF	; 191
    1a96:	8c 93       	st	X, r24
	                                                CLEAR_BIT(TCCR2,WGM21);
    1a98:	a5 e4       	ldi	r26, 0x45	; 69
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	e5 e4       	ldi	r30, 0x45	; 69
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	87 7f       	andi	r24, 0xF7	; 247
    1aa4:	8c 93       	st	X, r24
	                                                /*Non-PWM Mode*/
	                                                SET_BIT(TCCR2,FOC2);
    1aa6:	a5 e4       	ldi	r26, 0x45	; 69
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	e5 e4       	ldi	r30, 0x45	; 69
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	80 68       	ori	r24, 0x80	; 128
    1ab2:	8c 93       	st	X, r24
	                                                /*Interrupt Enable*/
	                                                CLEAR_BIT(TIMSK,OCIE2);
    1ab4:	a9 e5       	ldi	r26, 0x59	; 89
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	e9 e5       	ldi	r30, 0x59	; 89
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	8f 77       	andi	r24, 0x7F	; 127
    1ac0:	8c 93       	st	X, r24
    1ac2:	3a c0       	rjmp	.+116    	; 0x1b38 <Timer_init+0x29a>
	                	                            break;
	                         case PWM_PhaseCorrect: SET_BIT(TCCR2,WGM20);
    1ac4:	a5 e4       	ldi	r26, 0x45	; 69
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	e5 e4       	ldi	r30, 0x45	; 69
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	80 64       	ori	r24, 0x40	; 64
    1ad0:	8c 93       	st	X, r24
                                                    CLEAR_BIT(TCCR2,WGM21);
    1ad2:	a5 e4       	ldi	r26, 0x45	; 69
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	e5 e4       	ldi	r30, 0x45	; 69
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	87 7f       	andi	r24, 0xF7	; 247
    1ade:	8c 93       	st	X, r24
    1ae0:	2b c0       	rjmp	.+86     	; 0x1b38 <Timer_init+0x29a>
	                	                            break;
	                         case CTC:              CLEAR_BIT(TCCR2,WGM20);
    1ae2:	a5 e4       	ldi	r26, 0x45	; 69
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	e5 e4       	ldi	r30, 0x45	; 69
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	8f 7b       	andi	r24, 0xBF	; 191
    1aee:	8c 93       	st	X, r24
                                                    SET_BIT(TCCR2,WGM21);
    1af0:	a5 e4       	ldi	r26, 0x45	; 69
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	e5 e4       	ldi	r30, 0x45	; 69
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	88 60       	ori	r24, 0x08	; 8
    1afc:	8c 93       	st	X, r24
                                                    /*Non-PWM Mode*/
                                                    SET_BIT(TCCR2,FOC2);
    1afe:	a5 e4       	ldi	r26, 0x45	; 69
    1b00:	b0 e0       	ldi	r27, 0x00	; 0
    1b02:	e5 e4       	ldi	r30, 0x45	; 69
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	80 68       	ori	r24, 0x80	; 128
    1b0a:	8c 93       	st	X, r24
                                                    /*Interrupt Enable*/
                                                    SET_BIT(TIMSK,OCIE2);
    1b0c:	a9 e5       	ldi	r26, 0x59	; 89
    1b0e:	b0 e0       	ldi	r27, 0x00	; 0
    1b10:	e9 e5       	ldi	r30, 0x59	; 89
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	80 81       	ld	r24, Z
    1b16:	80 68       	ori	r24, 0x80	; 128
    1b18:	8c 93       	st	X, r24
    1b1a:	0e c0       	rjmp	.+28     	; 0x1b38 <Timer_init+0x29a>
	                	                            break;
	                         case PWM_Fast:         SET_BIT(TCCR2,WGM20);
    1b1c:	a5 e4       	ldi	r26, 0x45	; 69
    1b1e:	b0 e0       	ldi	r27, 0x00	; 0
    1b20:	e5 e4       	ldi	r30, 0x45	; 69
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	80 64       	ori	r24, 0x40	; 64
    1b28:	8c 93       	st	X, r24
                                                    SET_BIT(TCCR2,WGM21);
    1b2a:	a5 e4       	ldi	r26, 0x45	; 69
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	e5 e4       	ldi	r30, 0x45	; 69
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	88 60       	ori	r24, 0x08	; 8
    1b36:	8c 93       	st	X, r24
	                	                            break;
	                 }
       	              /*Check OC Pin Mode*/
       	              TCCR2 = (TCCR2 & 0xCF ) | (Config_Ptr->timer_OCPin_mode << 4 ) ;
    1b38:	a5 e4       	ldi	r26, 0x45	; 69
    1b3a:	b0 e0       	ldi	r27, 0x00	; 0
    1b3c:	e5 e4       	ldi	r30, 0x45	; 69
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	80 81       	ld	r24, Z
    1b42:	28 2f       	mov	r18, r24
    1b44:	2f 7c       	andi	r18, 0xCF	; 207
    1b46:	e9 81       	ldd	r30, Y+1	; 0x01
    1b48:	fa 81       	ldd	r31, Y+2	; 0x02
    1b4a:	85 81       	ldd	r24, Z+5	; 0x05
    1b4c:	88 2f       	mov	r24, r24
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	82 95       	swap	r24
    1b52:	92 95       	swap	r25
    1b54:	90 7f       	andi	r25, 0xF0	; 240
    1b56:	98 27       	eor	r25, r24
    1b58:	80 7f       	andi	r24, 0xF0	; 240
    1b5a:	98 27       	eor	r25, r24
    1b5c:	82 2b       	or	r24, r18
    1b5e:	8c 93       	st	X, r24

                      /*Check Prescaler*/
                      TCCR2 = (TCCR2 & 0xF8) | Config_Ptr->timer_prescaler ;
    1b60:	a5 e4       	ldi	r26, 0x45	; 69
    1b62:	b0 e0       	ldi	r27, 0x00	; 0
    1b64:	e5 e4       	ldi	r30, 0x45	; 69
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	98 2f       	mov	r25, r24
    1b6c:	98 7f       	andi	r25, 0xF8	; 248
    1b6e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b70:	fa 81       	ldd	r31, Y+2	; 0x02
    1b72:	82 81       	ldd	r24, Z+2	; 0x02
    1b74:	89 2b       	or	r24, r25
    1b76:	8c 93       	st	X, r24

                      /*TCNT inital Value*/
                      TCNT2 = Config_Ptr->TCNT_value;
    1b78:	a4 e4       	ldi	r26, 0x44	; 68
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b7e:	fa 81       	ldd	r31, Y+2	; 0x02
    1b80:	86 81       	ldd	r24, Z+6	; 0x06
    1b82:	97 81       	ldd	r25, Z+7	; 0x07
    1b84:	8c 93       	st	X, r24

                      /*OCR Value*/
                      OCR2 = Config_Ptr->OCR_Value;
    1b86:	a3 e4       	ldi	r26, 0x43	; 67
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b8c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b8e:	80 85       	ldd	r24, Z+8	; 0x08
    1b90:	8c 93       	st	X, r24

                      /*Over Flow interrupt*/
                      TIMSK = (TIMSK & 0xBF) | Config_Ptr->timer_overflowinterrupt;
    1b92:	a9 e5       	ldi	r26, 0x59	; 89
    1b94:	b0 e0       	ldi	r27, 0x00	; 0
    1b96:	e9 e5       	ldi	r30, 0x59	; 89
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	80 81       	ld	r24, Z
    1b9c:	98 2f       	mov	r25, r24
    1b9e:	9f 7b       	andi	r25, 0xBF	; 191
    1ba0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ba2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ba4:	83 81       	ldd	r24, Z+3	; 0x03
    1ba6:	89 2b       	or	r24, r25
    1ba8:	8c 93       	st	X, r24

    	             break;
    }
}
    1baa:	28 96       	adiw	r28, 0x08	; 8
    1bac:	0f b6       	in	r0, 0x3f	; 63
    1bae:	f8 94       	cli
    1bb0:	de bf       	out	0x3e, r29	; 62
    1bb2:	0f be       	out	0x3f, r0	; 63
    1bb4:	cd bf       	out	0x3d, r28	; 61
    1bb6:	cf 91       	pop	r28
    1bb8:	df 91       	pop	r29
    1bba:	08 95       	ret

00001bbc <Timer_Deinit>:
* Parameters (out):   None
* Return value:       None
* Description:        Disable the Selected Timer module.
********************************************************************************/
void Timer_Deinit(uint8 Timer_Number)
{
    1bbc:	df 93       	push	r29
    1bbe:	cf 93       	push	r28
    1bc0:	00 d0       	rcall	.+0      	; 0x1bc2 <Timer_Deinit+0x6>
    1bc2:	0f 92       	push	r0
    1bc4:	cd b7       	in	r28, 0x3d	; 61
    1bc6:	de b7       	in	r29, 0x3e	; 62
    1bc8:	89 83       	std	Y+1, r24	; 0x01
	/*Check Timer Number, Then we disable the clock of prescaler*/
	switch (Timer_Number)
    1bca:	89 81       	ldd	r24, Y+1	; 0x01
    1bcc:	28 2f       	mov	r18, r24
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	3b 83       	std	Y+3, r19	; 0x03
    1bd2:	2a 83       	std	Y+2, r18	; 0x02
    1bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1bd8:	81 30       	cpi	r24, 0x01	; 1
    1bda:	91 05       	cpc	r25, r1
    1bdc:	01 f1       	breq	.+64     	; 0x1c1e <Timer_Deinit+0x62>
    1bde:	2a 81       	ldd	r18, Y+2	; 0x02
    1be0:	3b 81       	ldd	r19, Y+3	; 0x03
    1be2:	22 30       	cpi	r18, 0x02	; 2
    1be4:	31 05       	cpc	r19, r1
    1be6:	89 f1       	breq	.+98     	; 0x1c4a <Timer_Deinit+0x8e>
    1be8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bea:	9b 81       	ldd	r25, Y+3	; 0x03
    1bec:	00 97       	sbiw	r24, 0x00	; 0
    1bee:	09 f0       	breq	.+2      	; 0x1bf2 <Timer_Deinit+0x36>
    1bf0:	41 c0       	rjmp	.+130    	; 0x1c74 <Timer_Deinit+0xb8>
	{
	   case Timer_0:   CLEAR_BIT(TCCR0,CS00);
    1bf2:	a3 e5       	ldi	r26, 0x53	; 83
    1bf4:	b0 e0       	ldi	r27, 0x00	; 0
    1bf6:	e3 e5       	ldi	r30, 0x53	; 83
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	80 81       	ld	r24, Z
    1bfc:	8e 7f       	andi	r24, 0xFE	; 254
    1bfe:	8c 93       	st	X, r24
	                   CLEAR_BIT(TCCR0,CS01);
    1c00:	a3 e5       	ldi	r26, 0x53	; 83
    1c02:	b0 e0       	ldi	r27, 0x00	; 0
    1c04:	e3 e5       	ldi	r30, 0x53	; 83
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	80 81       	ld	r24, Z
    1c0a:	8d 7f       	andi	r24, 0xFD	; 253
    1c0c:	8c 93       	st	X, r24
	                   CLEAR_BIT(TCCR0,CS02);
    1c0e:	a3 e5       	ldi	r26, 0x53	; 83
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	e3 e5       	ldi	r30, 0x53	; 83
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	8b 7f       	andi	r24, 0xFB	; 251
    1c1a:	8c 93       	st	X, r24
    1c1c:	2b c0       	rjmp	.+86     	; 0x1c74 <Timer_Deinit+0xb8>
		               break;
	   case Timer_1:   CLEAR_BIT(TCCR1B,CS10);
    1c1e:	ae e4       	ldi	r26, 0x4E	; 78
    1c20:	b0 e0       	ldi	r27, 0x00	; 0
    1c22:	ee e4       	ldi	r30, 0x4E	; 78
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	80 81       	ld	r24, Z
    1c28:	8e 7f       	andi	r24, 0xFE	; 254
    1c2a:	8c 93       	st	X, r24
                       CLEAR_BIT(TCCR1B,CS11);
    1c2c:	ae e4       	ldi	r26, 0x4E	; 78
    1c2e:	b0 e0       	ldi	r27, 0x00	; 0
    1c30:	ee e4       	ldi	r30, 0x4E	; 78
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	8d 7f       	andi	r24, 0xFD	; 253
    1c38:	8c 93       	st	X, r24
                       CLEAR_BIT(TCCR1B,CS12);
    1c3a:	ae e4       	ldi	r26, 0x4E	; 78
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	ee e4       	ldi	r30, 0x4E	; 78
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	8b 7f       	andi	r24, 0xFB	; 251
    1c46:	8c 93       	st	X, r24
    1c48:	15 c0       	rjmp	.+42     	; 0x1c74 <Timer_Deinit+0xb8>
		               break;
	   case Timer_2:   CLEAR_BIT(TCCR2,CS20);
    1c4a:	a5 e4       	ldi	r26, 0x45	; 69
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	e5 e4       	ldi	r30, 0x45	; 69
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	8e 7f       	andi	r24, 0xFE	; 254
    1c56:	8c 93       	st	X, r24
                       CLEAR_BIT(TCCR2,CS21);
    1c58:	a5 e4       	ldi	r26, 0x45	; 69
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	e5 e4       	ldi	r30, 0x45	; 69
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	8d 7f       	andi	r24, 0xFD	; 253
    1c64:	8c 93       	st	X, r24
                       CLEAR_BIT(TCCR2,CS22);
    1c66:	a5 e4       	ldi	r26, 0x45	; 69
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	e5 e4       	ldi	r30, 0x45	; 69
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	8b 7f       	andi	r24, 0xFB	; 251
    1c72:	8c 93       	st	X, r24
		               break;
	}
}
    1c74:	0f 90       	pop	r0
    1c76:	0f 90       	pop	r0
    1c78:	0f 90       	pop	r0
    1c7a:	cf 91       	pop	r28
    1c7c:	df 91       	pop	r29
    1c7e:	08 95       	ret

00001c80 <Timer0_setCallBack>:
* Parameters (out):   None
* Return value:       None
* Description:        Call Back TIMER0 Function.
********************************************************************************/
void Timer0_setCallBack(void(*a_ptr)(void))
{
    1c80:	df 93       	push	r29
    1c82:	cf 93       	push	r28
    1c84:	00 d0       	rcall	.+0      	; 0x1c86 <Timer0_setCallBack+0x6>
    1c86:	cd b7       	in	r28, 0x3d	; 61
    1c88:	de b7       	in	r29, 0x3e	; 62
    1c8a:	9a 83       	std	Y+2, r25	; 0x02
    1c8c:	89 83       	std	Y+1, r24	; 0x01
   g_Timer0_callBackPtr = a_ptr;
    1c8e:	89 81       	ldd	r24, Y+1	; 0x01
    1c90:	9a 81       	ldd	r25, Y+2	; 0x02
    1c92:	90 93 86 00 	sts	0x0086, r25
    1c96:	80 93 85 00 	sts	0x0085, r24
}
    1c9a:	0f 90       	pop	r0
    1c9c:	0f 90       	pop	r0
    1c9e:	cf 91       	pop	r28
    1ca0:	df 91       	pop	r29
    1ca2:	08 95       	ret

00001ca4 <Timer1_setCallBack>:
* Parameters (out):   None
* Return value:       None
* Description:        Call Back TIMER1 Function.
********************************************************************************/
void Timer1_setCallBack(void(*a_ptr)(void))
{
    1ca4:	df 93       	push	r29
    1ca6:	cf 93       	push	r28
    1ca8:	00 d0       	rcall	.+0      	; 0x1caa <Timer1_setCallBack+0x6>
    1caa:	cd b7       	in	r28, 0x3d	; 61
    1cac:	de b7       	in	r29, 0x3e	; 62
    1cae:	9a 83       	std	Y+2, r25	; 0x02
    1cb0:	89 83       	std	Y+1, r24	; 0x01
	g_Timer1_callBackPtr = a_ptr;
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb6:	90 93 88 00 	sts	0x0088, r25
    1cba:	80 93 87 00 	sts	0x0087, r24
}
    1cbe:	0f 90       	pop	r0
    1cc0:	0f 90       	pop	r0
    1cc2:	cf 91       	pop	r28
    1cc4:	df 91       	pop	r29
    1cc6:	08 95       	ret

00001cc8 <Timer2_setCallBack>:
* Parameters (out):   None
* Return value:       None
* Description:        Call Back TIMER2 Function.
********************************************************************************/
void Timer2_setCallBack(void(*a_ptr)(void))
{
    1cc8:	df 93       	push	r29
    1cca:	cf 93       	push	r28
    1ccc:	00 d0       	rcall	.+0      	; 0x1cce <Timer2_setCallBack+0x6>
    1cce:	cd b7       	in	r28, 0x3d	; 61
    1cd0:	de b7       	in	r29, 0x3e	; 62
    1cd2:	9a 83       	std	Y+2, r25	; 0x02
    1cd4:	89 83       	std	Y+1, r24	; 0x01
	g_Timer2_callBackPtr = a_ptr;
    1cd6:	89 81       	ldd	r24, Y+1	; 0x01
    1cd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cda:	90 93 8a 00 	sts	0x008A, r25
    1cde:	80 93 89 00 	sts	0x0089, r24
}
    1ce2:	0f 90       	pop	r0
    1ce4:	0f 90       	pop	r0
    1ce6:	cf 91       	pop	r28
    1ce8:	df 91       	pop	r29
    1cea:	08 95       	ret

00001cec <__vector_11>:
 *                                                                              *
 *                          Interrupt Service Routine                           *
 *                                                                              *
 ********************************************************************************/
ISR(USART_RXC_vect)
 {
    1cec:	1f 92       	push	r1
    1cee:	0f 92       	push	r0
    1cf0:	0f b6       	in	r0, 0x3f	; 63
    1cf2:	0f 92       	push	r0
    1cf4:	11 24       	eor	r1, r1
    1cf6:	df 93       	push	r29
    1cf8:	cf 93       	push	r28
    1cfa:	cd b7       	in	r28, 0x3d	; 61
    1cfc:	de b7       	in	r29, 0x3e	; 62

 }
    1cfe:	cf 91       	pop	r28
    1d00:	df 91       	pop	r29
    1d02:	0f 90       	pop	r0
    1d04:	0f be       	out	0x3f, r0	; 63
    1d06:	0f 90       	pop	r0
    1d08:	1f 90       	pop	r1
    1d0a:	18 95       	reti

00001d0c <__vector_13>:

ISR(USART_TXC_vect)
 {
    1d0c:	1f 92       	push	r1
    1d0e:	0f 92       	push	r0
    1d10:	0f b6       	in	r0, 0x3f	; 63
    1d12:	0f 92       	push	r0
    1d14:	11 24       	eor	r1, r1
    1d16:	df 93       	push	r29
    1d18:	cf 93       	push	r28
    1d1a:	cd b7       	in	r28, 0x3d	; 61
    1d1c:	de b7       	in	r29, 0x3e	; 62

 }
    1d1e:	cf 91       	pop	r28
    1d20:	df 91       	pop	r29
    1d22:	0f 90       	pop	r0
    1d24:	0f be       	out	0x3f, r0	; 63
    1d26:	0f 90       	pop	r0
    1d28:	1f 90       	pop	r1
    1d2a:	18 95       	reti

00001d2c <UART_Init>:
* Parameters (out):   None
* Return value:       None
* Description:        Initialize the UART module.
********************************************************************************/
void UART_Init(const UART_ConfigType * Config_Ptr)
{
    1d2c:	df 93       	push	r29
    1d2e:	cf 93       	push	r28
    1d30:	cd b7       	in	r28, 0x3d	; 61
    1d32:	de b7       	in	r29, 0x3e	; 62
    1d34:	64 97       	sbiw	r28, 0x14	; 20
    1d36:	0f b6       	in	r0, 0x3f	; 63
    1d38:	f8 94       	cli
    1d3a:	de bf       	out	0x3e, r29	; 62
    1d3c:	0f be       	out	0x3f, r0	; 63
    1d3e:	cd bf       	out	0x3d, r28	; 61
    1d40:	9a 83       	std	Y+2, r25	; 0x02
    1d42:	89 83       	std	Y+1, r24	; 0x01
	/*Config Operation Mode*/
    switch( Config_Ptr ->operation_mode)
    1d44:	e9 81       	ldd	r30, Y+1	; 0x01
    1d46:	fa 81       	ldd	r31, Y+2	; 0x02
    1d48:	80 81       	ld	r24, Z
    1d4a:	28 2f       	mov	r18, r24
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	3c 8b       	std	Y+20, r19	; 0x14
    1d50:	2b 8b       	std	Y+19, r18	; 0x13
    1d52:	4b 89       	ldd	r20, Y+19	; 0x13
    1d54:	5c 89       	ldd	r21, Y+20	; 0x14
    1d56:	41 30       	cpi	r20, 0x01	; 1
    1d58:	51 05       	cpc	r21, r1
    1d5a:	91 f0       	breq	.+36     	; 0x1d80 <UART_Init+0x54>
    1d5c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d5e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d60:	82 30       	cpi	r24, 0x02	; 2
    1d62:	91 05       	cpc	r25, r1
    1d64:	a9 f0       	breq	.+42     	; 0x1d90 <UART_Init+0x64>
    1d66:	2b 89       	ldd	r18, Y+19	; 0x13
    1d68:	3c 89       	ldd	r19, Y+20	; 0x14
    1d6a:	21 15       	cp	r18, r1
    1d6c:	31 05       	cpc	r19, r1
    1d6e:	f1 f4       	brne	.+60     	; 0x1dac <UART_Init+0x80>
    {
      case Receiver:                SET_BIT(UCSRB,RXEN);
    1d70:	aa e2       	ldi	r26, 0x2A	; 42
    1d72:	b0 e0       	ldi	r27, 0x00	; 0
    1d74:	ea e2       	ldi	r30, 0x2A	; 42
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
    1d7a:	80 61       	ori	r24, 0x10	; 16
    1d7c:	8c 93       	st	X, r24
    1d7e:	16 c0       	rjmp	.+44     	; 0x1dac <UART_Init+0x80>
    	                            break;
      case Transmitter:             SET_BIT(UCSRB,TXEN);
    1d80:	aa e2       	ldi	r26, 0x2A	; 42
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	ea e2       	ldi	r30, 0x2A	; 42
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	80 81       	ld	r24, Z
    1d8a:	88 60       	ori	r24, 0x08	; 8
    1d8c:	8c 93       	st	X, r24
    1d8e:	0e c0       	rjmp	.+28     	; 0x1dac <UART_Init+0x80>
    	                            break;
      case Transmitter_Receiver:    SET_BIT(UCSRB,RXEN);
    1d90:	aa e2       	ldi	r26, 0x2A	; 42
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	ea e2       	ldi	r30, 0x2A	; 42
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	80 61       	ori	r24, 0x10	; 16
    1d9c:	8c 93       	st	X, r24
                                    SET_BIT(UCSRB,TXEN);
    1d9e:	aa e2       	ldi	r26, 0x2A	; 42
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	ea e2       	ldi	r30, 0x2A	; 42
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	88 60       	ori	r24, 0x08	; 8
    1daa:	8c 93       	st	X, r24
    	                            break;
    }
	/*Config Transmission Speed*/
	switch( Config_Ptr ->speed)
    1dac:	e9 81       	ldd	r30, Y+1	; 0x01
    1dae:	fa 81       	ldd	r31, Y+2	; 0x02
    1db0:	81 81       	ldd	r24, Z+1	; 0x01
    1db2:	48 2f       	mov	r20, r24
    1db4:	50 e0       	ldi	r21, 0x00	; 0
    1db6:	5a 8b       	std	Y+18, r21	; 0x12
    1db8:	49 8b       	std	Y+17, r20	; 0x11
    1dba:	89 89       	ldd	r24, Y+17	; 0x11
    1dbc:	9a 89       	ldd	r25, Y+18	; 0x12
    1dbe:	00 97       	sbiw	r24, 0x00	; 0
    1dc0:	31 f0       	breq	.+12     	; 0x1dce <UART_Init+0xa2>
    1dc2:	29 89       	ldd	r18, Y+17	; 0x11
    1dc4:	3a 89       	ldd	r19, Y+18	; 0x12
    1dc6:	21 30       	cpi	r18, 0x01	; 1
    1dc8:	31 05       	cpc	r19, r1
    1dca:	61 f0       	breq	.+24     	; 0x1de4 <UART_Init+0xb8>
    1dcc:	15 c0       	rjmp	.+42     	; 0x1df8 <UART_Init+0xcc>
	{
	  case Normal_Speed:   CLEAR_BIT(UCSRA,U2X);
    1dce:	ab e2       	ldi	r26, 0x2B	; 43
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	eb e2       	ldi	r30, 0x2B	; 43
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	8d 7f       	andi	r24, 0xFD	; 253
    1dda:	8c 93       	st	X, r24
	                       g_speed_mode_division_factor = 16;
    1ddc:	80 e1       	ldi	r24, 0x10	; 16
    1dde:	80 93 8d 00 	sts	0x008D, r24
    1de2:	0a c0       	rjmp	.+20     	; 0x1df8 <UART_Init+0xcc>
	 	                   break;
	  case Double_Speed:   SET_BIT(UCSRA,U2X);
    1de4:	ab e2       	ldi	r26, 0x2B	; 43
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	eb e2       	ldi	r30, 0x2B	; 43
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	82 60       	ori	r24, 0x02	; 2
    1df0:	8c 93       	st	X, r24
                           g_speed_mode_division_factor = 8;
    1df2:	88 e0       	ldi	r24, 0x08	; 8
    1df4:	80 93 8d 00 	sts	0x008D, r24
	  		               break;
	}

	/*Config Synchronization of UART*/
	switch ( Config_Ptr->synchronization)
    1df8:	e9 81       	ldd	r30, Y+1	; 0x01
    1dfa:	fa 81       	ldd	r31, Y+2	; 0x02
    1dfc:	82 81       	ldd	r24, Z+2	; 0x02
    1dfe:	48 2f       	mov	r20, r24
    1e00:	50 e0       	ldi	r21, 0x00	; 0
    1e02:	58 8b       	std	Y+16, r21	; 0x10
    1e04:	4f 87       	std	Y+15, r20	; 0x0f
    1e06:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e08:	98 89       	ldd	r25, Y+16	; 0x10
    1e0a:	00 97       	sbiw	r24, 0x00	; 0
    1e0c:	31 f0       	breq	.+12     	; 0x1e1a <UART_Init+0xee>
    1e0e:	2f 85       	ldd	r18, Y+15	; 0x0f
    1e10:	38 89       	ldd	r19, Y+16	; 0x10
    1e12:	21 30       	cpi	r18, 0x01	; 1
    1e14:	31 05       	cpc	r19, r1
    1e16:	81 f0       	breq	.+32     	; 0x1e38 <UART_Init+0x10c>
    1e18:	1d c0       	rjmp	.+58     	; 0x1e54 <UART_Init+0x128>
	{
	 case Asynchronous: SET_BIT(UCSRC,URSEL);
    1e1a:	a0 e4       	ldi	r26, 0x40	; 64
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	e0 e4       	ldi	r30, 0x40	; 64
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	80 68       	ori	r24, 0x80	; 128
    1e26:	8c 93       	st	X, r24
	                    CLEAR_BIT(UCSRC,UMSEL);
    1e28:	a0 e4       	ldi	r26, 0x40	; 64
    1e2a:	b0 e0       	ldi	r27, 0x00	; 0
    1e2c:	e0 e4       	ldi	r30, 0x40	; 64
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	80 81       	ld	r24, Z
    1e32:	8f 7b       	andi	r24, 0xBF	; 191
    1e34:	8c 93       	st	X, r24
    1e36:	0e c0       	rjmp	.+28     	; 0x1e54 <UART_Init+0x128>
		                break;
	 case Synchronous:  SET_BIT(UCSRC,URSEL);
    1e38:	a0 e4       	ldi	r26, 0x40	; 64
    1e3a:	b0 e0       	ldi	r27, 0x00	; 0
    1e3c:	e0 e4       	ldi	r30, 0x40	; 64
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
    1e42:	80 68       	ori	r24, 0x80	; 128
    1e44:	8c 93       	st	X, r24
	                    SET_BIT(UCSRC,UMSEL);
    1e46:	a0 e4       	ldi	r26, 0x40	; 64
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	e0 e4       	ldi	r30, 0x40	; 64
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	80 64       	ori	r24, 0x40	; 64
    1e52:	8c 93       	st	X, r24
	 		            break;
	}

	/*Config Parity Bit of UART*/
	switch ( Config_Ptr ->parity)
    1e54:	e9 81       	ldd	r30, Y+1	; 0x01
    1e56:	fa 81       	ldd	r31, Y+2	; 0x02
    1e58:	83 81       	ldd	r24, Z+3	; 0x03
    1e5a:	48 2f       	mov	r20, r24
    1e5c:	50 e0       	ldi	r21, 0x00	; 0
    1e5e:	5e 87       	std	Y+14, r21	; 0x0e
    1e60:	4d 87       	std	Y+13, r20	; 0x0d
    1e62:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e64:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e66:	81 30       	cpi	r24, 0x01	; 1
    1e68:	91 05       	cpc	r25, r1
    1e6a:	09 f1       	breq	.+66     	; 0x1eae <UART_Init+0x182>
    1e6c:	2d 85       	ldd	r18, Y+13	; 0x0d
    1e6e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1e70:	22 30       	cpi	r18, 0x02	; 2
    1e72:	31 05       	cpc	r19, r1
    1e74:	91 f1       	breq	.+100    	; 0x1eda <UART_Init+0x1ae>
    1e76:	4d 85       	ldd	r20, Y+13	; 0x0d
    1e78:	5e 85       	ldd	r21, Y+14	; 0x0e
    1e7a:	41 15       	cp	r20, r1
    1e7c:	51 05       	cpc	r21, r1
    1e7e:	09 f0       	breq	.+2      	; 0x1e82 <UART_Init+0x156>
    1e80:	41 c0       	rjmp	.+130    	; 0x1f04 <UART_Init+0x1d8>
	{
	  case Parity_Disabled: SET_BIT(UCSRC,URSEL);
    1e82:	a0 e4       	ldi	r26, 0x40	; 64
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	e0 e4       	ldi	r30, 0x40	; 64
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	80 68       	ori	r24, 0x80	; 128
    1e8e:	8c 93       	st	X, r24
		                    CLEAR_BIT(UCSRC,UPM0);
    1e90:	a0 e4       	ldi	r26, 0x40	; 64
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	e0 e4       	ldi	r30, 0x40	; 64
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	8f 7e       	andi	r24, 0xEF	; 239
    1e9c:	8c 93       	st	X, r24
	                        CLEAR_BIT(UCSRC,UPM1);
    1e9e:	a0 e4       	ldi	r26, 0x40	; 64
    1ea0:	b0 e0       	ldi	r27, 0x00	; 0
    1ea2:	e0 e4       	ldi	r30, 0x40	; 64
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 81       	ld	r24, Z
    1ea8:	8f 7d       	andi	r24, 0xDF	; 223
    1eaa:	8c 93       	st	X, r24
    1eac:	2b c0       	rjmp	.+86     	; 0x1f04 <UART_Init+0x1d8>
	                        break;
	  case Parity_Odd:      SET_BIT(UCSRC,URSEL);
    1eae:	a0 e4       	ldi	r26, 0x40	; 64
    1eb0:	b0 e0       	ldi	r27, 0x00	; 0
    1eb2:	e0 e4       	ldi	r30, 0x40	; 64
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	80 81       	ld	r24, Z
    1eb8:	80 68       	ori	r24, 0x80	; 128
    1eba:	8c 93       	st	X, r24
		                    SET_BIT(UCSRC,UPM0);
    1ebc:	a0 e4       	ldi	r26, 0x40	; 64
    1ebe:	b0 e0       	ldi	r27, 0x00	; 0
    1ec0:	e0 e4       	ldi	r30, 0x40	; 64
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	80 81       	ld	r24, Z
    1ec6:	80 61       	ori	r24, 0x10	; 16
    1ec8:	8c 93       	st	X, r24
                            SET_BIT(UCSRC,UPM1);
    1eca:	a0 e4       	ldi	r26, 0x40	; 64
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	e0 e4       	ldi	r30, 0x40	; 64
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	80 81       	ld	r24, Z
    1ed4:	80 62       	ori	r24, 0x20	; 32
    1ed6:	8c 93       	st	X, r24
    1ed8:	15 c0       	rjmp	.+42     	; 0x1f04 <UART_Init+0x1d8>
                            break;
	  case Parity_Even:     SET_BIT(UCSRC,URSEL);
    1eda:	a0 e4       	ldi	r26, 0x40	; 64
    1edc:	b0 e0       	ldi	r27, 0x00	; 0
    1ede:	e0 e4       	ldi	r30, 0x40	; 64
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	80 81       	ld	r24, Z
    1ee4:	80 68       	ori	r24, 0x80	; 128
    1ee6:	8c 93       	st	X, r24
		                    CLEAR_BIT(UCSRC,UPM0);
    1ee8:	a0 e4       	ldi	r26, 0x40	; 64
    1eea:	b0 e0       	ldi	r27, 0x00	; 0
    1eec:	e0 e4       	ldi	r30, 0x40	; 64
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	80 81       	ld	r24, Z
    1ef2:	8f 7e       	andi	r24, 0xEF	; 239
    1ef4:	8c 93       	st	X, r24
                            SET_BIT(UCSRC,UPM1);
    1ef6:	a0 e4       	ldi	r26, 0x40	; 64
    1ef8:	b0 e0       	ldi	r27, 0x00	; 0
    1efa:	e0 e4       	ldi	r30, 0x40	; 64
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	80 81       	ld	r24, Z
    1f00:	80 62       	ori	r24, 0x20	; 32
    1f02:	8c 93       	st	X, r24
                            break;
	}

	/*Config Number of Stop Bits of UART*/
    switch( Config_Ptr ->stop_bit)
    1f04:	e9 81       	ldd	r30, Y+1	; 0x01
    1f06:	fa 81       	ldd	r31, Y+2	; 0x02
    1f08:	84 81       	ldd	r24, Z+4	; 0x04
    1f0a:	28 2f       	mov	r18, r24
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	3c 87       	std	Y+12, r19	; 0x0c
    1f10:	2b 87       	std	Y+11, r18	; 0x0b
    1f12:	4b 85       	ldd	r20, Y+11	; 0x0b
    1f14:	5c 85       	ldd	r21, Y+12	; 0x0c
    1f16:	41 15       	cp	r20, r1
    1f18:	51 05       	cpc	r21, r1
    1f1a:	31 f0       	breq	.+12     	; 0x1f28 <UART_Init+0x1fc>
    1f1c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f1e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f20:	81 30       	cpi	r24, 0x01	; 1
    1f22:	91 05       	cpc	r25, r1
    1f24:	49 f0       	breq	.+18     	; 0x1f38 <UART_Init+0x20c>
    1f26:	0f c0       	rjmp	.+30     	; 0x1f46 <UART_Init+0x21a>
    {
    case StopBit_1:  CLEAR_BIT(UCSRC,USBS);
    1f28:	a0 e4       	ldi	r26, 0x40	; 64
    1f2a:	b0 e0       	ldi	r27, 0x00	; 0
    1f2c:	e0 e4       	ldi	r30, 0x40	; 64
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	80 81       	ld	r24, Z
    1f32:	87 7f       	andi	r24, 0xF7	; 247
    1f34:	8c 93       	st	X, r24
    1f36:	07 c0       	rjmp	.+14     	; 0x1f46 <UART_Init+0x21a>
    	             break;
    case StopBit_2:  SET_BIT(UCSRC,USBS);
    1f38:	a0 e4       	ldi	r26, 0x40	; 64
    1f3a:	b0 e0       	ldi	r27, 0x00	; 0
    1f3c:	e0 e4       	ldi	r30, 0x40	; 64
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	80 81       	ld	r24, Z
    1f42:	88 60       	ori	r24, 0x08	; 8
    1f44:	8c 93       	st	X, r24
    	             break;
    }

    /*Config Number of Data Frame Bits*/
    switch ( Config_Ptr ->dataframe_bits )
    1f46:	e9 81       	ldd	r30, Y+1	; 0x01
    1f48:	fa 81       	ldd	r31, Y+2	; 0x02
    1f4a:	85 81       	ldd	r24, Z+5	; 0x05
    1f4c:	28 2f       	mov	r18, r24
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	3a 87       	std	Y+10, r19	; 0x0a
    1f52:	29 87       	std	Y+9, r18	; 0x09
    1f54:	49 85       	ldd	r20, Y+9	; 0x09
    1f56:	5a 85       	ldd	r21, Y+10	; 0x0a
    1f58:	42 30       	cpi	r20, 0x02	; 2
    1f5a:	51 05       	cpc	r21, r1
    1f5c:	09 f4       	brne	.+2      	; 0x1f60 <UART_Init+0x234>
    1f5e:	49 c0       	rjmp	.+146    	; 0x1ff2 <UART_Init+0x2c6>
    1f60:	89 85       	ldd	r24, Y+9	; 0x09
    1f62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f64:	83 30       	cpi	r24, 0x03	; 3
    1f66:	91 05       	cpc	r25, r1
    1f68:	5c f4       	brge	.+22     	; 0x1f80 <UART_Init+0x254>
    1f6a:	29 85       	ldd	r18, Y+9	; 0x09
    1f6c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f6e:	21 15       	cp	r18, r1
    1f70:	31 05       	cpc	r19, r1
    1f72:	99 f0       	breq	.+38     	; 0x1f9a <UART_Init+0x26e>
    1f74:	49 85       	ldd	r20, Y+9	; 0x09
    1f76:	5a 85       	ldd	r21, Y+10	; 0x0a
    1f78:	41 30       	cpi	r20, 0x01	; 1
    1f7a:	51 05       	cpc	r21, r1
    1f7c:	21 f1       	breq	.+72     	; 0x1fc6 <UART_Init+0x29a>
    1f7e:	7a c0       	rjmp	.+244    	; 0x2074 <UART_Init+0x348>
    1f80:	89 85       	ldd	r24, Y+9	; 0x09
    1f82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f84:	83 30       	cpi	r24, 0x03	; 3
    1f86:	91 05       	cpc	r25, r1
    1f88:	09 f4       	brne	.+2      	; 0x1f8c <UART_Init+0x260>
    1f8a:	49 c0       	rjmp	.+146    	; 0x201e <UART_Init+0x2f2>
    1f8c:	29 85       	ldd	r18, Y+9	; 0x09
    1f8e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f90:	27 30       	cpi	r18, 0x07	; 7
    1f92:	31 05       	cpc	r19, r1
    1f94:	09 f4       	brne	.+2      	; 0x1f98 <UART_Init+0x26c>
    1f96:	59 c0       	rjmp	.+178    	; 0x204a <UART_Init+0x31e>
    1f98:	6d c0       	rjmp	.+218    	; 0x2074 <UART_Init+0x348>
    {
    case DataFrame_5Bits:  CLEAR_BIT(UCSRC,UCSZ0);
    1f9a:	a0 e4       	ldi	r26, 0x40	; 64
    1f9c:	b0 e0       	ldi	r27, 0x00	; 0
    1f9e:	e0 e4       	ldi	r30, 0x40	; 64
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	80 81       	ld	r24, Z
    1fa4:	8d 7f       	andi	r24, 0xFD	; 253
    1fa6:	8c 93       	st	X, r24
                           CLEAR_BIT(UCSRC,UCSZ1);
    1fa8:	a0 e4       	ldi	r26, 0x40	; 64
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	e0 e4       	ldi	r30, 0x40	; 64
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	8b 7f       	andi	r24, 0xFB	; 251
    1fb4:	8c 93       	st	X, r24
                           CLEAR_BIT(UCSRB,UCSZ2);
    1fb6:	aa e2       	ldi	r26, 0x2A	; 42
    1fb8:	b0 e0       	ldi	r27, 0x00	; 0
    1fba:	ea e2       	ldi	r30, 0x2A	; 42
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	80 81       	ld	r24, Z
    1fc0:	8b 7f       	andi	r24, 0xFB	; 251
    1fc2:	8c 93       	st	X, r24
    1fc4:	57 c0       	rjmp	.+174    	; 0x2074 <UART_Init+0x348>
    	                   break;
    case DataFrame_6Bits:  SET_BIT(UCSRC,UCSZ0);
    1fc6:	a0 e4       	ldi	r26, 0x40	; 64
    1fc8:	b0 e0       	ldi	r27, 0x00	; 0
    1fca:	e0 e4       	ldi	r30, 0x40	; 64
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	80 81       	ld	r24, Z
    1fd0:	82 60       	ori	r24, 0x02	; 2
    1fd2:	8c 93       	st	X, r24
                           CLEAR_BIT(UCSRC,UCSZ1);
    1fd4:	a0 e4       	ldi	r26, 0x40	; 64
    1fd6:	b0 e0       	ldi	r27, 0x00	; 0
    1fd8:	e0 e4       	ldi	r30, 0x40	; 64
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	80 81       	ld	r24, Z
    1fde:	8b 7f       	andi	r24, 0xFB	; 251
    1fe0:	8c 93       	st	X, r24
                           CLEAR_BIT(UCSRB,UCSZ2);
    1fe2:	aa e2       	ldi	r26, 0x2A	; 42
    1fe4:	b0 e0       	ldi	r27, 0x00	; 0
    1fe6:	ea e2       	ldi	r30, 0x2A	; 42
    1fe8:	f0 e0       	ldi	r31, 0x00	; 0
    1fea:	80 81       	ld	r24, Z
    1fec:	8b 7f       	andi	r24, 0xFB	; 251
    1fee:	8c 93       	st	X, r24
    1ff0:	41 c0       	rjmp	.+130    	; 0x2074 <UART_Init+0x348>
    	                   break;
    case DataFrame_7Bits:  CLEAR_BIT(UCSRC,UCSZ0);
    1ff2:	a0 e4       	ldi	r26, 0x40	; 64
    1ff4:	b0 e0       	ldi	r27, 0x00	; 0
    1ff6:	e0 e4       	ldi	r30, 0x40	; 64
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	80 81       	ld	r24, Z
    1ffc:	8d 7f       	andi	r24, 0xFD	; 253
    1ffe:	8c 93       	st	X, r24
                           SET_BIT(UCSRC,UCSZ1);
    2000:	a0 e4       	ldi	r26, 0x40	; 64
    2002:	b0 e0       	ldi	r27, 0x00	; 0
    2004:	e0 e4       	ldi	r30, 0x40	; 64
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
    200a:	84 60       	ori	r24, 0x04	; 4
    200c:	8c 93       	st	X, r24
                           CLEAR_BIT(UCSRB,UCSZ2);
    200e:	aa e2       	ldi	r26, 0x2A	; 42
    2010:	b0 e0       	ldi	r27, 0x00	; 0
    2012:	ea e2       	ldi	r30, 0x2A	; 42
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	80 81       	ld	r24, Z
    2018:	8b 7f       	andi	r24, 0xFB	; 251
    201a:	8c 93       	st	X, r24
    201c:	2b c0       	rjmp	.+86     	; 0x2074 <UART_Init+0x348>
    	                   break;
    case DataFrame_8Bits:  SET_BIT(UCSRC,UCSZ0);
    201e:	a0 e4       	ldi	r26, 0x40	; 64
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	e0 e4       	ldi	r30, 0x40	; 64
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	82 60       	ori	r24, 0x02	; 2
    202a:	8c 93       	st	X, r24
                           SET_BIT(UCSRC,UCSZ1);
    202c:	a0 e4       	ldi	r26, 0x40	; 64
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	e0 e4       	ldi	r30, 0x40	; 64
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	80 81       	ld	r24, Z
    2036:	84 60       	ori	r24, 0x04	; 4
    2038:	8c 93       	st	X, r24
                           CLEAR_BIT(UCSRB,UCSZ2);
    203a:	aa e2       	ldi	r26, 0x2A	; 42
    203c:	b0 e0       	ldi	r27, 0x00	; 0
    203e:	ea e2       	ldi	r30, 0x2A	; 42
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	80 81       	ld	r24, Z
    2044:	8b 7f       	andi	r24, 0xFB	; 251
    2046:	8c 93       	st	X, r24
    2048:	15 c0       	rjmp	.+42     	; 0x2074 <UART_Init+0x348>
    	                   break;
    case DataFrame_9Bits:  SET_BIT(UCSRC,UCSZ0);
    204a:	a0 e4       	ldi	r26, 0x40	; 64
    204c:	b0 e0       	ldi	r27, 0x00	; 0
    204e:	e0 e4       	ldi	r30, 0x40	; 64
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	80 81       	ld	r24, Z
    2054:	82 60       	ori	r24, 0x02	; 2
    2056:	8c 93       	st	X, r24
                           SET_BIT(UCSRC,UCSZ1);
    2058:	a0 e4       	ldi	r26, 0x40	; 64
    205a:	b0 e0       	ldi	r27, 0x00	; 0
    205c:	e0 e4       	ldi	r30, 0x40	; 64
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	80 81       	ld	r24, Z
    2062:	84 60       	ori	r24, 0x04	; 4
    2064:	8c 93       	st	X, r24
                           SET_BIT(UCSRB,UCSZ2);
    2066:	aa e2       	ldi	r26, 0x2A	; 42
    2068:	b0 e0       	ldi	r27, 0x00	; 0
    206a:	ea e2       	ldi	r30, 0x2A	; 42
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	80 81       	ld	r24, Z
    2070:	84 60       	ori	r24, 0x04	; 4
    2072:	8c 93       	st	X, r24
    	                   break;
    }


    switch( Config_Ptr ->baud_rate)
    2074:	e9 81       	ldd	r30, Y+1	; 0x01
    2076:	fa 81       	ldd	r31, Y+2	; 0x02
    2078:	86 81       	ldd	r24, Z+6	; 0x06
    207a:	48 2f       	mov	r20, r24
    207c:	50 e0       	ldi	r21, 0x00	; 0
    207e:	58 87       	std	Y+8, r21	; 0x08
    2080:	4f 83       	std	Y+7, r20	; 0x07
    2082:	8f 81       	ldd	r24, Y+7	; 0x07
    2084:	98 85       	ldd	r25, Y+8	; 0x08
    2086:	81 30       	cpi	r24, 0x01	; 1
    2088:	91 05       	cpc	r25, r1
    208a:	f9 f0       	breq	.+62     	; 0x20ca <UART_Init+0x39e>
    208c:	2f 81       	ldd	r18, Y+7	; 0x07
    208e:	38 85       	ldd	r19, Y+8	; 0x08
    2090:	22 30       	cpi	r18, 0x02	; 2
    2092:	31 05       	cpc	r19, r1
    2094:	34 f4       	brge	.+12     	; 0x20a2 <UART_Init+0x376>
    2096:	4f 81       	ldd	r20, Y+7	; 0x07
    2098:	58 85       	ldd	r21, Y+8	; 0x08
    209a:	41 15       	cp	r20, r1
    209c:	51 05       	cpc	r21, r1
    209e:	69 f0       	breq	.+26     	; 0x20ba <UART_Init+0x38e>
    20a0:	79 c0       	rjmp	.+242    	; 0x2194 <UART_Init+0x468>
    20a2:	8f 81       	ldd	r24, Y+7	; 0x07
    20a4:	98 85       	ldd	r25, Y+8	; 0x08
    20a6:	82 30       	cpi	r24, 0x02	; 2
    20a8:	91 05       	cpc	r25, r1
    20aa:	91 f1       	breq	.+100    	; 0x2110 <UART_Init+0x3e4>
    20ac:	2f 81       	ldd	r18, Y+7	; 0x07
    20ae:	38 85       	ldd	r19, Y+8	; 0x08
    20b0:	23 30       	cpi	r18, 0x03	; 3
    20b2:	31 05       	cpc	r19, r1
    20b4:	09 f4       	brne	.+2      	; 0x20b8 <UART_Init+0x38c>
    20b6:	4f c0       	rjmp	.+158    	; 0x2156 <UART_Init+0x42a>
    20b8:	6d c0       	rjmp	.+218    	; 0x2194 <UART_Init+0x468>
    {
    case BaudRate_9600:   /*For 1 MHz  value = 12 , For 8MHz value = 103*/
    	                  UBRRH = 103>>8;
    20ba:	e0 e4       	ldi	r30, 0x40	; 64
    20bc:	f0 e0       	ldi	r31, 0x00	; 0
    20be:	10 82       	st	Z, r1
                           UBRRL = 103;
    20c0:	e9 e2       	ldi	r30, 0x29	; 41
    20c2:	f0 e0       	ldi	r31, 0x00	; 0
    20c4:	87 e6       	ldi	r24, 0x67	; 103
    20c6:	80 83       	st	Z, r24
    20c8:	65 c0       	rjmp	.+202    	; 0x2194 <UART_Init+0x468>
    	                  break;
    	                  /*There is a bug in the equation shown blow */
    case BaudRate_14400:  g_UBRR_value= (uint16)(((F_CPU / (g_speed_mode_division_factor * 14400 )))-1);
    20ca:	80 91 8d 00 	lds	r24, 0x008D
    20ce:	28 2f       	mov	r18, r24
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	80 e4       	ldi	r24, 0x40	; 64
    20d4:	98 e3       	ldi	r25, 0x38	; 56
    20d6:	ac 01       	movw	r20, r24
    20d8:	24 9f       	mul	r18, r20
    20da:	c0 01       	movw	r24, r0
    20dc:	25 9f       	mul	r18, r21
    20de:	90 0d       	add	r25, r0
    20e0:	34 9f       	mul	r19, r20
    20e2:	90 0d       	add	r25, r0
    20e4:	11 24       	eor	r1, r1
    20e6:	9c 01       	movw	r18, r24
    20e8:	44 27       	eor	r20, r20
    20ea:	37 fd       	sbrc	r19, 7
    20ec:	40 95       	com	r20
    20ee:	54 2f       	mov	r21, r20
    20f0:	80 e0       	ldi	r24, 0x00	; 0
    20f2:	92 e1       	ldi	r25, 0x12	; 18
    20f4:	aa e7       	ldi	r26, 0x7A	; 122
    20f6:	b0 e0       	ldi	r27, 0x00	; 0
    20f8:	bc 01       	movw	r22, r24
    20fa:	cd 01       	movw	r24, r26
    20fc:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <__divmodsi4>
    2100:	da 01       	movw	r26, r20
    2102:	c9 01       	movw	r24, r18
    2104:	01 97       	sbiw	r24, 0x01	; 1
    2106:	90 93 8c 00 	sts	0x008C, r25
    210a:	80 93 8b 00 	sts	0x008B, r24
    210e:	42 c0       	rjmp	.+132    	; 0x2194 <UART_Init+0x468>
    	                  break;
    case BaudRate_19200:  g_UBRR_value= (uint16)(((F_CPU / (g_speed_mode_division_factor * 19200 )))-1);
    2110:	80 91 8d 00 	lds	r24, 0x008D
    2114:	28 2f       	mov	r18, r24
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	9b e4       	ldi	r25, 0x4B	; 75
    211c:	ac 01       	movw	r20, r24
    211e:	24 9f       	mul	r18, r20
    2120:	c0 01       	movw	r24, r0
    2122:	25 9f       	mul	r18, r21
    2124:	90 0d       	add	r25, r0
    2126:	34 9f       	mul	r19, r20
    2128:	90 0d       	add	r25, r0
    212a:	11 24       	eor	r1, r1
    212c:	9c 01       	movw	r18, r24
    212e:	44 27       	eor	r20, r20
    2130:	37 fd       	sbrc	r19, 7
    2132:	40 95       	com	r20
    2134:	54 2f       	mov	r21, r20
    2136:	80 e0       	ldi	r24, 0x00	; 0
    2138:	92 e1       	ldi	r25, 0x12	; 18
    213a:	aa e7       	ldi	r26, 0x7A	; 122
    213c:	b0 e0       	ldi	r27, 0x00	; 0
    213e:	bc 01       	movw	r22, r24
    2140:	cd 01       	movw	r24, r26
    2142:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <__divmodsi4>
    2146:	da 01       	movw	r26, r20
    2148:	c9 01       	movw	r24, r18
    214a:	01 97       	sbiw	r24, 0x01	; 1
    214c:	90 93 8c 00 	sts	0x008C, r25
    2150:	80 93 8b 00 	sts	0x008B, r24
    2154:	1f c0       	rjmp	.+62     	; 0x2194 <UART_Init+0x468>
    	                  break;
    case BaudRate_115200: g_UBRR_value= (uint16)(((F_CPU / (g_speed_mode_division_factor * 115200)))-1);
    2156:	80 91 8d 00 	lds	r24, 0x008D
    215a:	88 2f       	mov	r24, r24
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	a0 e0       	ldi	r26, 0x00	; 0
    2160:	b0 e0       	ldi	r27, 0x00	; 0
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	32 ec       	ldi	r19, 0xC2	; 194
    2166:	41 e0       	ldi	r20, 0x01	; 1
    2168:	50 e0       	ldi	r21, 0x00	; 0
    216a:	bc 01       	movw	r22, r24
    216c:	cd 01       	movw	r24, r26
    216e:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <__mulsi3>
    2172:	9b 01       	movw	r18, r22
    2174:	ac 01       	movw	r20, r24
    2176:	80 e0       	ldi	r24, 0x00	; 0
    2178:	92 e1       	ldi	r25, 0x12	; 18
    217a:	aa e7       	ldi	r26, 0x7A	; 122
    217c:	b0 e0       	ldi	r27, 0x00	; 0
    217e:	bc 01       	movw	r22, r24
    2180:	cd 01       	movw	r24, r26
    2182:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <__divmodsi4>
    2186:	da 01       	movw	r26, r20
    2188:	c9 01       	movw	r24, r18
    218a:	01 97       	sbiw	r24, 0x01	; 1
    218c:	90 93 8c 00 	sts	0x008C, r25
    2190:	80 93 8b 00 	sts	0x008B, r24
    	                  break;
    }


    /*Config RX Interrupt*/
    switch(Config_Ptr ->rx_interrupt)
    2194:	e9 81       	ldd	r30, Y+1	; 0x01
    2196:	fa 81       	ldd	r31, Y+2	; 0x02
    2198:	87 81       	ldd	r24, Z+7	; 0x07
    219a:	28 2f       	mov	r18, r24
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	3e 83       	std	Y+6, r19	; 0x06
    21a0:	2d 83       	std	Y+5, r18	; 0x05
    21a2:	4d 81       	ldd	r20, Y+5	; 0x05
    21a4:	5e 81       	ldd	r21, Y+6	; 0x06
    21a6:	41 15       	cp	r20, r1
    21a8:	51 05       	cpc	r21, r1
    21aa:	31 f0       	breq	.+12     	; 0x21b8 <UART_Init+0x48c>
    21ac:	8d 81       	ldd	r24, Y+5	; 0x05
    21ae:	9e 81       	ldd	r25, Y+6	; 0x06
    21b0:	81 30       	cpi	r24, 0x01	; 1
    21b2:	91 05       	cpc	r25, r1
    21b4:	49 f0       	breq	.+18     	; 0x21c8 <UART_Init+0x49c>
    21b6:	0f c0       	rjmp	.+30     	; 0x21d6 <UART_Init+0x4aa>
    {
    case RX_InterruptDisable: CLEAR_BIT(UCSRB,RXCIE);
    21b8:	aa e2       	ldi	r26, 0x2A	; 42
    21ba:	b0 e0       	ldi	r27, 0x00	; 0
    21bc:	ea e2       	ldi	r30, 0x2A	; 42
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	80 81       	ld	r24, Z
    21c2:	8f 77       	andi	r24, 0x7F	; 127
    21c4:	8c 93       	st	X, r24
    21c6:	07 c0       	rjmp	.+14     	; 0x21d6 <UART_Init+0x4aa>
                              break;
    case RX_InterruptEnable:  SET_BIT(UCSRB,RXCIE);
    21c8:	aa e2       	ldi	r26, 0x2A	; 42
    21ca:	b0 e0       	ldi	r27, 0x00	; 0
    21cc:	ea e2       	ldi	r30, 0x2A	; 42
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	80 81       	ld	r24, Z
    21d2:	80 68       	ori	r24, 0x80	; 128
    21d4:	8c 93       	st	X, r24
                              break;

    }

    /*Config TX Interrupt*/
    switch(Config_Ptr ->tx_interrupt)
    21d6:	e9 81       	ldd	r30, Y+1	; 0x01
    21d8:	fa 81       	ldd	r31, Y+2	; 0x02
    21da:	80 85       	ldd	r24, Z+8	; 0x08
    21dc:	28 2f       	mov	r18, r24
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	3c 83       	std	Y+4, r19	; 0x04
    21e2:	2b 83       	std	Y+3, r18	; 0x03
    21e4:	4b 81       	ldd	r20, Y+3	; 0x03
    21e6:	5c 81       	ldd	r21, Y+4	; 0x04
    21e8:	41 15       	cp	r20, r1
    21ea:	51 05       	cpc	r21, r1
    21ec:	31 f0       	breq	.+12     	; 0x21fa <UART_Init+0x4ce>
    21ee:	8b 81       	ldd	r24, Y+3	; 0x03
    21f0:	9c 81       	ldd	r25, Y+4	; 0x04
    21f2:	81 30       	cpi	r24, 0x01	; 1
    21f4:	91 05       	cpc	r25, r1
    21f6:	49 f0       	breq	.+18     	; 0x220a <UART_Init+0x4de>
    21f8:	0f c0       	rjmp	.+30     	; 0x2218 <UART_Init+0x4ec>
    {
    case TX_InterruptDisable: CLEAR_BIT(UCSRB,TXCIE);
    21fa:	aa e2       	ldi	r26, 0x2A	; 42
    21fc:	b0 e0       	ldi	r27, 0x00	; 0
    21fe:	ea e2       	ldi	r30, 0x2A	; 42
    2200:	f0 e0       	ldi	r31, 0x00	; 0
    2202:	80 81       	ld	r24, Z
    2204:	8f 7b       	andi	r24, 0xBF	; 191
    2206:	8c 93       	st	X, r24
    2208:	07 c0       	rjmp	.+14     	; 0x2218 <UART_Init+0x4ec>
                              break;
    case TX_InterruptEnable:  SET_BIT(UCSRB,TXCIE);
    220a:	aa e2       	ldi	r26, 0x2A	; 42
    220c:	b0 e0       	ldi	r27, 0x00	; 0
    220e:	ea e2       	ldi	r30, 0x2A	; 42
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	80 81       	ld	r24, Z
    2214:	80 64       	ori	r24, 0x40	; 64
    2216:	8c 93       	st	X, r24
                              break;

    }

}
    2218:	64 96       	adiw	r28, 0x14	; 20
    221a:	0f b6       	in	r0, 0x3f	; 63
    221c:	f8 94       	cli
    221e:	de bf       	out	0x3e, r29	; 62
    2220:	0f be       	out	0x3f, r0	; 63
    2222:	cd bf       	out	0x3d, r28	; 61
    2224:	cf 91       	pop	r28
    2226:	df 91       	pop	r29
    2228:	08 95       	ret

0000222a <UART_sendByte>:
* Parameters (out):   None
* Return value:       None
* Description:        Send a Byte to other devices.
********************************************************************************/
void UART_sendByte( const uint8 data )
{
    222a:	df 93       	push	r29
    222c:	cf 93       	push	r28
    222e:	0f 92       	push	r0
    2230:	cd b7       	in	r28, 0x3d	; 61
    2232:	de b7       	in	r29, 0x3e	; 62
    2234:	89 83       	std	Y+1, r24	; 0x01
   /*Wait until Flag = 1 , etc: UDR is empty and ready to be loaded with data*/
   while (BIT_IS_CLEAR(UCSRA,UDRE));
    2236:	eb e2       	ldi	r30, 0x2B	; 43
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	80 81       	ld	r24, Z
    223c:	88 2f       	mov	r24, r24
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	80 72       	andi	r24, 0x20	; 32
    2242:	90 70       	andi	r25, 0x00	; 0
    2244:	00 97       	sbiw	r24, 0x00	; 0
    2246:	b9 f3       	breq	.-18     	; 0x2236 <UART_sendByte+0xc>
   UDR = data;
    2248:	ec e2       	ldi	r30, 0x2C	; 44
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	89 81       	ldd	r24, Y+1	; 0x01
    224e:	80 83       	st	Z, r24
}
    2250:	0f 90       	pop	r0
    2252:	cf 91       	pop	r28
    2254:	df 91       	pop	r29
    2256:	08 95       	ret

00002258 <UART_receiveByte>:
* Parameters (out):   None
* Return value:       uint8
* Description:        receive a Byte from other devices
********************************************************************************/
uint8 UART_receiveByte (void)
{
    2258:	df 93       	push	r29
    225a:	cf 93       	push	r28
    225c:	cd b7       	in	r28, 0x3d	; 61
    225e:	de b7       	in	r29, 0x3e	; 62
	 /*Wait until Flag = 1 , etc: UDR is Loaded with received Data then return UDR*/
	  while (BIT_IS_CLEAR(UCSRA,RXC));
    2260:	eb e2       	ldi	r30, 0x2B	; 43
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	88 23       	and	r24, r24
    2268:	dc f7       	brge	.-10     	; 0x2260 <UART_receiveByte+0x8>
      return UDR;
    226a:	ec e2       	ldi	r30, 0x2C	; 44
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	80 81       	ld	r24, Z
}
    2270:	cf 91       	pop	r28
    2272:	df 91       	pop	r29
    2274:	08 95       	ret

00002276 <UART_sendString>:
* Parameters (out):   None
* Return value:       None
* Description:        Send a String to other devices.
********************************************************************************/
void UART_sendString( const uint8 * Str)
{
    2276:	df 93       	push	r29
    2278:	cf 93       	push	r28
    227a:	00 d0       	rcall	.+0      	; 0x227c <UART_sendString+0x6>
    227c:	0f 92       	push	r0
    227e:	cd b7       	in	r28, 0x3d	; 61
    2280:	de b7       	in	r29, 0x3e	; 62
    2282:	9b 83       	std	Y+3, r25	; 0x03
    2284:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2286:	19 82       	std	Y+1, r1	; 0x01
    2288:	0e c0       	rjmp	.+28     	; 0x22a6 <UART_sendString+0x30>

		/* Send the whole string */
		while(Str[i] != '\0')
		{
			UART_sendByte(Str[i]);
    228a:	89 81       	ldd	r24, Y+1	; 0x01
    228c:	28 2f       	mov	r18, r24
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	8a 81       	ldd	r24, Y+2	; 0x02
    2292:	9b 81       	ldd	r25, Y+3	; 0x03
    2294:	fc 01       	movw	r30, r24
    2296:	e2 0f       	add	r30, r18
    2298:	f3 1f       	adc	r31, r19
    229a:	80 81       	ld	r24, Z
    229c:	0e 94 15 11 	call	0x222a	; 0x222a <UART_sendByte>
			i++;
    22a0:	89 81       	ldd	r24, Y+1	; 0x01
    22a2:	8f 5f       	subi	r24, 0xFF	; 255
    22a4:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString( const uint8 * Str)
{
	uint8 i = 0;

		/* Send the whole string */
		while(Str[i] != '\0')
    22a6:	89 81       	ldd	r24, Y+1	; 0x01
    22a8:	28 2f       	mov	r18, r24
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	8a 81       	ldd	r24, Y+2	; 0x02
    22ae:	9b 81       	ldd	r25, Y+3	; 0x03
    22b0:	fc 01       	movw	r30, r24
    22b2:	e2 0f       	add	r30, r18
    22b4:	f3 1f       	adc	r31, r19
    22b6:	80 81       	ld	r24, Z
    22b8:	88 23       	and	r24, r24
    22ba:	39 f7       	brne	.-50     	; 0x228a <UART_sendString+0x14>
		{
			UART_sendByte(Str[i]);
			i++;
		}
}
    22bc:	0f 90       	pop	r0
    22be:	0f 90       	pop	r0
    22c0:	0f 90       	pop	r0
    22c2:	cf 91       	pop	r28
    22c4:	df 91       	pop	r29
    22c6:	08 95       	ret

000022c8 <UART_receiveString>:
* Parameters (out):   None
* Return value:       uint8
* Description:        receive a stringfrom other devices
********************************************************************************/
void UART_receiveString (uint8 *Str)
{
    22c8:	0f 93       	push	r16
    22ca:	1f 93       	push	r17
    22cc:	df 93       	push	r29
    22ce:	cf 93       	push	r28
    22d0:	00 d0       	rcall	.+0      	; 0x22d2 <UART_receiveString+0xa>
    22d2:	0f 92       	push	r0
    22d4:	cd b7       	in	r28, 0x3d	; 61
    22d6:	de b7       	in	r29, 0x3e	; 62
    22d8:	9b 83       	std	Y+3, r25	; 0x03
    22da:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    22dc:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_receiveByte();
    22de:	89 81       	ldd	r24, Y+1	; 0x01
    22e0:	28 2f       	mov	r18, r24
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	8a 81       	ldd	r24, Y+2	; 0x02
    22e6:	9b 81       	ldd	r25, Y+3	; 0x03
    22e8:	8c 01       	movw	r16, r24
    22ea:	02 0f       	add	r16, r18
    22ec:	13 1f       	adc	r17, r19
    22ee:	0e 94 2c 11 	call	0x2258	; 0x2258 <UART_receiveByte>
    22f2:	f8 01       	movw	r30, r16
    22f4:	80 83       	st	Z, r24
    22f6:	0f c0       	rjmp	.+30     	; 0x2316 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    22f8:	89 81       	ldd	r24, Y+1	; 0x01
    22fa:	8f 5f       	subi	r24, 0xFF	; 255
    22fc:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    22fe:	89 81       	ldd	r24, Y+1	; 0x01
    2300:	28 2f       	mov	r18, r24
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	8a 81       	ldd	r24, Y+2	; 0x02
    2306:	9b 81       	ldd	r25, Y+3	; 0x03
    2308:	8c 01       	movw	r16, r24
    230a:	02 0f       	add	r16, r18
    230c:	13 1f       	adc	r17, r19
    230e:	0e 94 2c 11 	call	0x2258	; 0x2258 <UART_receiveByte>
    2312:	f8 01       	movw	r30, r16
    2314:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_receiveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2316:	89 81       	ldd	r24, Y+1	; 0x01
    2318:	28 2f       	mov	r18, r24
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	8a 81       	ldd	r24, Y+2	; 0x02
    231e:	9b 81       	ldd	r25, Y+3	; 0x03
    2320:	fc 01       	movw	r30, r24
    2322:	e2 0f       	add	r30, r18
    2324:	f3 1f       	adc	r31, r19
    2326:	80 81       	ld	r24, Z
    2328:	83 32       	cpi	r24, 0x23	; 35
    232a:	31 f7       	brne	.-52     	; 0x22f8 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    232c:	89 81       	ldd	r24, Y+1	; 0x01
    232e:	28 2f       	mov	r18, r24
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	8a 81       	ldd	r24, Y+2	; 0x02
    2334:	9b 81       	ldd	r25, Y+3	; 0x03
    2336:	fc 01       	movw	r30, r24
    2338:	e2 0f       	add	r30, r18
    233a:	f3 1f       	adc	r31, r19
    233c:	10 82       	st	Z, r1
}
    233e:	0f 90       	pop	r0
    2340:	0f 90       	pop	r0
    2342:	0f 90       	pop	r0
    2344:	cf 91       	pop	r28
    2346:	df 91       	pop	r29
    2348:	1f 91       	pop	r17
    234a:	0f 91       	pop	r16
    234c:	08 95       	ret

0000234e <EEPROM_writeByte>:
#include "external_eeprom.h"
//#include "twi.h"
#include "I2C.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    234e:	df 93       	push	r29
    2350:	cf 93       	push	r28
    2352:	00 d0       	rcall	.+0      	; 0x2354 <EEPROM_writeByte+0x6>
    2354:	00 d0       	rcall	.+0      	; 0x2356 <EEPROM_writeByte+0x8>
    2356:	cd b7       	in	r28, 0x3d	; 61
    2358:	de b7       	in	r29, 0x3e	; 62
    235a:	9a 83       	std	Y+2, r25	; 0x02
    235c:	89 83       	std	Y+1, r24	; 0x01
    235e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    2360:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    2364:	0e 94 39 07 	call	0xe72	; 0xe72 <TWI_getStatus>
    2368:	88 30       	cpi	r24, 0x08	; 8
    236a:	11 f0       	breq	.+4      	; 0x2370 <EEPROM_writeByte+0x22>
        return ERROR;
    236c:	1c 82       	std	Y+4, r1	; 0x04
    236e:	28 c0       	rjmp	.+80     	; 0x23c0 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    2370:	89 81       	ldd	r24, Y+1	; 0x01
    2372:	9a 81       	ldd	r25, Y+2	; 0x02
    2374:	80 70       	andi	r24, 0x00	; 0
    2376:	97 70       	andi	r25, 0x07	; 7
    2378:	88 0f       	add	r24, r24
    237a:	89 2f       	mov	r24, r25
    237c:	88 1f       	adc	r24, r24
    237e:	99 0b       	sbc	r25, r25
    2380:	91 95       	neg	r25
    2382:	80 6a       	ori	r24, 0xA0	; 160
    2384:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    2388:	0e 94 39 07 	call	0xe72	; 0xe72 <TWI_getStatus>
    238c:	88 31       	cpi	r24, 0x18	; 24
    238e:	11 f0       	breq	.+4      	; 0x2394 <EEPROM_writeByte+0x46>
        return ERROR; 
    2390:	1c 82       	std	Y+4, r1	; 0x04
    2392:	16 c0       	rjmp	.+44     	; 0x23c0 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    2394:	89 81       	ldd	r24, Y+1	; 0x01
    2396:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    239a:	0e 94 39 07 	call	0xe72	; 0xe72 <TWI_getStatus>
    239e:	88 32       	cpi	r24, 0x28	; 40
    23a0:	11 f0       	breq	.+4      	; 0x23a6 <EEPROM_writeByte+0x58>
        return ERROR;
    23a2:	1c 82       	std	Y+4, r1	; 0x04
    23a4:	0d c0       	rjmp	.+26     	; 0x23c0 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    23a6:	8b 81       	ldd	r24, Y+3	; 0x03
    23a8:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    23ac:	0e 94 39 07 	call	0xe72	; 0xe72 <TWI_getStatus>
    23b0:	88 32       	cpi	r24, 0x28	; 40
    23b2:	11 f0       	breq	.+4      	; 0x23b8 <EEPROM_writeByte+0x6a>
        return ERROR;
    23b4:	1c 82       	std	Y+4, r1	; 0x04
    23b6:	04 c0       	rjmp	.+8      	; 0x23c0 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    23b8:	0e 94 f1 06 	call	0xde2	; 0xde2 <TWI_stop>
	
    return SUCCESS;
    23bc:	81 e0       	ldi	r24, 0x01	; 1
    23be:	8c 83       	std	Y+4, r24	; 0x04
    23c0:	8c 81       	ldd	r24, Y+4	; 0x04
}
    23c2:	0f 90       	pop	r0
    23c4:	0f 90       	pop	r0
    23c6:	0f 90       	pop	r0
    23c8:	0f 90       	pop	r0
    23ca:	cf 91       	pop	r28
    23cc:	df 91       	pop	r29
    23ce:	08 95       	ret

000023d0 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    23d0:	df 93       	push	r29
    23d2:	cf 93       	push	r28
    23d4:	00 d0       	rcall	.+0      	; 0x23d6 <EEPROM_readByte+0x6>
    23d6:	00 d0       	rcall	.+0      	; 0x23d8 <EEPROM_readByte+0x8>
    23d8:	0f 92       	push	r0
    23da:	cd b7       	in	r28, 0x3d	; 61
    23dc:	de b7       	in	r29, 0x3e	; 62
    23de:	9a 83       	std	Y+2, r25	; 0x02
    23e0:	89 83       	std	Y+1, r24	; 0x01
    23e2:	7c 83       	std	Y+4, r23	; 0x04
    23e4:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    23e6:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    23ea:	0e 94 39 07 	call	0xe72	; 0xe72 <TWI_getStatus>
    23ee:	88 30       	cpi	r24, 0x08	; 8
    23f0:	11 f0       	breq	.+4      	; 0x23f6 <EEPROM_readByte+0x26>
        return ERROR;
    23f2:	1d 82       	std	Y+5, r1	; 0x05
    23f4:	44 c0       	rjmp	.+136    	; 0x247e <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    23f6:	89 81       	ldd	r24, Y+1	; 0x01
    23f8:	9a 81       	ldd	r25, Y+2	; 0x02
    23fa:	80 70       	andi	r24, 0x00	; 0
    23fc:	97 70       	andi	r25, 0x07	; 7
    23fe:	88 0f       	add	r24, r24
    2400:	89 2f       	mov	r24, r25
    2402:	88 1f       	adc	r24, r24
    2404:	99 0b       	sbc	r25, r25
    2406:	91 95       	neg	r25
    2408:	80 6a       	ori	r24, 0xA0	; 160
    240a:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    240e:	0e 94 39 07 	call	0xe72	; 0xe72 <TWI_getStatus>
    2412:	88 31       	cpi	r24, 0x18	; 24
    2414:	11 f0       	breq	.+4      	; 0x241a <EEPROM_readByte+0x4a>
        return ERROR;
    2416:	1d 82       	std	Y+5, r1	; 0x05
    2418:	32 c0       	rjmp	.+100    	; 0x247e <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    241a:	89 81       	ldd	r24, Y+1	; 0x01
    241c:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2420:	0e 94 39 07 	call	0xe72	; 0xe72 <TWI_getStatus>
    2424:	88 32       	cpi	r24, 0x28	; 40
    2426:	11 f0       	breq	.+4      	; 0x242c <EEPROM_readByte+0x5c>
        return ERROR;
    2428:	1d 82       	std	Y+5, r1	; 0x05
    242a:	29 c0       	rjmp	.+82     	; 0x247e <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    242c:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    2430:	0e 94 39 07 	call	0xe72	; 0xe72 <TWI_getStatus>
    2434:	80 31       	cpi	r24, 0x10	; 16
    2436:	11 f0       	breq	.+4      	; 0x243c <EEPROM_readByte+0x6c>
        return ERROR;
    2438:	1d 82       	std	Y+5, r1	; 0x05
    243a:	21 c0       	rjmp	.+66     	; 0x247e <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    243c:	89 81       	ldd	r24, Y+1	; 0x01
    243e:	9a 81       	ldd	r25, Y+2	; 0x02
    2440:	80 70       	andi	r24, 0x00	; 0
    2442:	97 70       	andi	r25, 0x07	; 7
    2444:	88 0f       	add	r24, r24
    2446:	89 2f       	mov	r24, r25
    2448:	88 1f       	adc	r24, r24
    244a:	99 0b       	sbc	r25, r25
    244c:	91 95       	neg	r25
    244e:	81 6a       	ori	r24, 0xA1	; 161
    2450:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    2454:	0e 94 39 07 	call	0xe72	; 0xe72 <TWI_getStatus>
    2458:	80 34       	cpi	r24, 0x40	; 64
    245a:	11 f0       	breq	.+4      	; 0x2460 <EEPROM_readByte+0x90>
        return ERROR;
    245c:	1d 82       	std	Y+5, r1	; 0x05
    245e:	0f c0       	rjmp	.+30     	; 0x247e <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    2460:	0e 94 26 07 	call	0xe4c	; 0xe4c <TWI_readByteWithNACK>
    2464:	eb 81       	ldd	r30, Y+3	; 0x03
    2466:	fc 81       	ldd	r31, Y+4	; 0x04
    2468:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    246a:	0e 94 39 07 	call	0xe72	; 0xe72 <TWI_getStatus>
    246e:	88 35       	cpi	r24, 0x58	; 88
    2470:	11 f0       	breq	.+4      	; 0x2476 <EEPROM_readByte+0xa6>
        return ERROR;
    2472:	1d 82       	std	Y+5, r1	; 0x05
    2474:	04 c0       	rjmp	.+8      	; 0x247e <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    2476:	0e 94 f1 06 	call	0xde2	; 0xde2 <TWI_stop>

    return SUCCESS;
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	8d 83       	std	Y+5, r24	; 0x05
    247e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2480:	0f 90       	pop	r0
    2482:	0f 90       	pop	r0
    2484:	0f 90       	pop	r0
    2486:	0f 90       	pop	r0
    2488:	0f 90       	pop	r0
    248a:	cf 91       	pop	r28
    248c:	df 91       	pop	r29
    248e:	08 95       	ret

00002490 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    2490:	df 93       	push	r29
    2492:	cf 93       	push	r28
    2494:	00 d0       	rcall	.+0      	; 0x2496 <GPIO_setupPinDirection+0x6>
    2496:	00 d0       	rcall	.+0      	; 0x2498 <GPIO_setupPinDirection+0x8>
    2498:	0f 92       	push	r0
    249a:	cd b7       	in	r28, 0x3d	; 61
    249c:	de b7       	in	r29, 0x3e	; 62
    249e:	89 83       	std	Y+1, r24	; 0x01
    24a0:	6a 83       	std	Y+2, r22	; 0x02
    24a2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    24a4:	8a 81       	ldd	r24, Y+2	; 0x02
    24a6:	88 30       	cpi	r24, 0x08	; 8
    24a8:	08 f0       	brcs	.+2      	; 0x24ac <GPIO_setupPinDirection+0x1c>
    24aa:	d5 c0       	rjmp	.+426    	; 0x2656 <GPIO_setupPinDirection+0x1c6>
    24ac:	89 81       	ldd	r24, Y+1	; 0x01
    24ae:	84 30       	cpi	r24, 0x04	; 4
    24b0:	08 f0       	brcs	.+2      	; 0x24b4 <GPIO_setupPinDirection+0x24>
    24b2:	d1 c0       	rjmp	.+418    	; 0x2656 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    24b4:	89 81       	ldd	r24, Y+1	; 0x01
    24b6:	28 2f       	mov	r18, r24
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	3d 83       	std	Y+5, r19	; 0x05
    24bc:	2c 83       	std	Y+4, r18	; 0x04
    24be:	8c 81       	ldd	r24, Y+4	; 0x04
    24c0:	9d 81       	ldd	r25, Y+5	; 0x05
    24c2:	81 30       	cpi	r24, 0x01	; 1
    24c4:	91 05       	cpc	r25, r1
    24c6:	09 f4       	brne	.+2      	; 0x24ca <GPIO_setupPinDirection+0x3a>
    24c8:	43 c0       	rjmp	.+134    	; 0x2550 <GPIO_setupPinDirection+0xc0>
    24ca:	2c 81       	ldd	r18, Y+4	; 0x04
    24cc:	3d 81       	ldd	r19, Y+5	; 0x05
    24ce:	22 30       	cpi	r18, 0x02	; 2
    24d0:	31 05       	cpc	r19, r1
    24d2:	2c f4       	brge	.+10     	; 0x24de <GPIO_setupPinDirection+0x4e>
    24d4:	8c 81       	ldd	r24, Y+4	; 0x04
    24d6:	9d 81       	ldd	r25, Y+5	; 0x05
    24d8:	00 97       	sbiw	r24, 0x00	; 0
    24da:	71 f0       	breq	.+28     	; 0x24f8 <GPIO_setupPinDirection+0x68>
    24dc:	bc c0       	rjmp	.+376    	; 0x2656 <GPIO_setupPinDirection+0x1c6>
    24de:	2c 81       	ldd	r18, Y+4	; 0x04
    24e0:	3d 81       	ldd	r19, Y+5	; 0x05
    24e2:	22 30       	cpi	r18, 0x02	; 2
    24e4:	31 05       	cpc	r19, r1
    24e6:	09 f4       	brne	.+2      	; 0x24ea <GPIO_setupPinDirection+0x5a>
    24e8:	5f c0       	rjmp	.+190    	; 0x25a8 <GPIO_setupPinDirection+0x118>
    24ea:	8c 81       	ldd	r24, Y+4	; 0x04
    24ec:	9d 81       	ldd	r25, Y+5	; 0x05
    24ee:	83 30       	cpi	r24, 0x03	; 3
    24f0:	91 05       	cpc	r25, r1
    24f2:	09 f4       	brne	.+2      	; 0x24f6 <GPIO_setupPinDirection+0x66>
    24f4:	85 c0       	rjmp	.+266    	; 0x2600 <GPIO_setupPinDirection+0x170>
    24f6:	af c0       	rjmp	.+350    	; 0x2656 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    24f8:	8b 81       	ldd	r24, Y+3	; 0x03
    24fa:	81 30       	cpi	r24, 0x01	; 1
    24fc:	a1 f4       	brne	.+40     	; 0x2526 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    24fe:	aa e3       	ldi	r26, 0x3A	; 58
    2500:	b0 e0       	ldi	r27, 0x00	; 0
    2502:	ea e3       	ldi	r30, 0x3A	; 58
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	80 81       	ld	r24, Z
    2508:	48 2f       	mov	r20, r24
    250a:	8a 81       	ldd	r24, Y+2	; 0x02
    250c:	28 2f       	mov	r18, r24
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	02 2e       	mov	r0, r18
    2516:	02 c0       	rjmp	.+4      	; 0x251c <GPIO_setupPinDirection+0x8c>
    2518:	88 0f       	add	r24, r24
    251a:	99 1f       	adc	r25, r25
    251c:	0a 94       	dec	r0
    251e:	e2 f7       	brpl	.-8      	; 0x2518 <GPIO_setupPinDirection+0x88>
    2520:	84 2b       	or	r24, r20
    2522:	8c 93       	st	X, r24
    2524:	98 c0       	rjmp	.+304    	; 0x2656 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    2526:	aa e3       	ldi	r26, 0x3A	; 58
    2528:	b0 e0       	ldi	r27, 0x00	; 0
    252a:	ea e3       	ldi	r30, 0x3A	; 58
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	80 81       	ld	r24, Z
    2530:	48 2f       	mov	r20, r24
    2532:	8a 81       	ldd	r24, Y+2	; 0x02
    2534:	28 2f       	mov	r18, r24
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	02 2e       	mov	r0, r18
    253e:	02 c0       	rjmp	.+4      	; 0x2544 <GPIO_setupPinDirection+0xb4>
    2540:	88 0f       	add	r24, r24
    2542:	99 1f       	adc	r25, r25
    2544:	0a 94       	dec	r0
    2546:	e2 f7       	brpl	.-8      	; 0x2540 <GPIO_setupPinDirection+0xb0>
    2548:	80 95       	com	r24
    254a:	84 23       	and	r24, r20
    254c:	8c 93       	st	X, r24
    254e:	83 c0       	rjmp	.+262    	; 0x2656 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    2550:	8b 81       	ldd	r24, Y+3	; 0x03
    2552:	81 30       	cpi	r24, 0x01	; 1
    2554:	a1 f4       	brne	.+40     	; 0x257e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    2556:	a7 e3       	ldi	r26, 0x37	; 55
    2558:	b0 e0       	ldi	r27, 0x00	; 0
    255a:	e7 e3       	ldi	r30, 0x37	; 55
    255c:	f0 e0       	ldi	r31, 0x00	; 0
    255e:	80 81       	ld	r24, Z
    2560:	48 2f       	mov	r20, r24
    2562:	8a 81       	ldd	r24, Y+2	; 0x02
    2564:	28 2f       	mov	r18, r24
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	02 2e       	mov	r0, r18
    256e:	02 c0       	rjmp	.+4      	; 0x2574 <GPIO_setupPinDirection+0xe4>
    2570:	88 0f       	add	r24, r24
    2572:	99 1f       	adc	r25, r25
    2574:	0a 94       	dec	r0
    2576:	e2 f7       	brpl	.-8      	; 0x2570 <GPIO_setupPinDirection+0xe0>
    2578:	84 2b       	or	r24, r20
    257a:	8c 93       	st	X, r24
    257c:	6c c0       	rjmp	.+216    	; 0x2656 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    257e:	a7 e3       	ldi	r26, 0x37	; 55
    2580:	b0 e0       	ldi	r27, 0x00	; 0
    2582:	e7 e3       	ldi	r30, 0x37	; 55
    2584:	f0 e0       	ldi	r31, 0x00	; 0
    2586:	80 81       	ld	r24, Z
    2588:	48 2f       	mov	r20, r24
    258a:	8a 81       	ldd	r24, Y+2	; 0x02
    258c:	28 2f       	mov	r18, r24
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	81 e0       	ldi	r24, 0x01	; 1
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	02 2e       	mov	r0, r18
    2596:	02 c0       	rjmp	.+4      	; 0x259c <GPIO_setupPinDirection+0x10c>
    2598:	88 0f       	add	r24, r24
    259a:	99 1f       	adc	r25, r25
    259c:	0a 94       	dec	r0
    259e:	e2 f7       	brpl	.-8      	; 0x2598 <GPIO_setupPinDirection+0x108>
    25a0:	80 95       	com	r24
    25a2:	84 23       	and	r24, r20
    25a4:	8c 93       	st	X, r24
    25a6:	57 c0       	rjmp	.+174    	; 0x2656 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    25a8:	8b 81       	ldd	r24, Y+3	; 0x03
    25aa:	81 30       	cpi	r24, 0x01	; 1
    25ac:	a1 f4       	brne	.+40     	; 0x25d6 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    25ae:	a4 e3       	ldi	r26, 0x34	; 52
    25b0:	b0 e0       	ldi	r27, 0x00	; 0
    25b2:	e4 e3       	ldi	r30, 0x34	; 52
    25b4:	f0 e0       	ldi	r31, 0x00	; 0
    25b6:	80 81       	ld	r24, Z
    25b8:	48 2f       	mov	r20, r24
    25ba:	8a 81       	ldd	r24, Y+2	; 0x02
    25bc:	28 2f       	mov	r18, r24
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	81 e0       	ldi	r24, 0x01	; 1
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	02 2e       	mov	r0, r18
    25c6:	02 c0       	rjmp	.+4      	; 0x25cc <GPIO_setupPinDirection+0x13c>
    25c8:	88 0f       	add	r24, r24
    25ca:	99 1f       	adc	r25, r25
    25cc:	0a 94       	dec	r0
    25ce:	e2 f7       	brpl	.-8      	; 0x25c8 <GPIO_setupPinDirection+0x138>
    25d0:	84 2b       	or	r24, r20
    25d2:	8c 93       	st	X, r24
    25d4:	40 c0       	rjmp	.+128    	; 0x2656 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    25d6:	a4 e3       	ldi	r26, 0x34	; 52
    25d8:	b0 e0       	ldi	r27, 0x00	; 0
    25da:	e4 e3       	ldi	r30, 0x34	; 52
    25dc:	f0 e0       	ldi	r31, 0x00	; 0
    25de:	80 81       	ld	r24, Z
    25e0:	48 2f       	mov	r20, r24
    25e2:	8a 81       	ldd	r24, Y+2	; 0x02
    25e4:	28 2f       	mov	r18, r24
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	02 2e       	mov	r0, r18
    25ee:	02 c0       	rjmp	.+4      	; 0x25f4 <GPIO_setupPinDirection+0x164>
    25f0:	88 0f       	add	r24, r24
    25f2:	99 1f       	adc	r25, r25
    25f4:	0a 94       	dec	r0
    25f6:	e2 f7       	brpl	.-8      	; 0x25f0 <GPIO_setupPinDirection+0x160>
    25f8:	80 95       	com	r24
    25fa:	84 23       	and	r24, r20
    25fc:	8c 93       	st	X, r24
    25fe:	2b c0       	rjmp	.+86     	; 0x2656 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    2600:	8b 81       	ldd	r24, Y+3	; 0x03
    2602:	81 30       	cpi	r24, 0x01	; 1
    2604:	a1 f4       	brne	.+40     	; 0x262e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    2606:	a1 e3       	ldi	r26, 0x31	; 49
    2608:	b0 e0       	ldi	r27, 0x00	; 0
    260a:	e1 e3       	ldi	r30, 0x31	; 49
    260c:	f0 e0       	ldi	r31, 0x00	; 0
    260e:	80 81       	ld	r24, Z
    2610:	48 2f       	mov	r20, r24
    2612:	8a 81       	ldd	r24, Y+2	; 0x02
    2614:	28 2f       	mov	r18, r24
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	02 2e       	mov	r0, r18
    261e:	02 c0       	rjmp	.+4      	; 0x2624 <GPIO_setupPinDirection+0x194>
    2620:	88 0f       	add	r24, r24
    2622:	99 1f       	adc	r25, r25
    2624:	0a 94       	dec	r0
    2626:	e2 f7       	brpl	.-8      	; 0x2620 <GPIO_setupPinDirection+0x190>
    2628:	84 2b       	or	r24, r20
    262a:	8c 93       	st	X, r24
    262c:	14 c0       	rjmp	.+40     	; 0x2656 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    262e:	a1 e3       	ldi	r26, 0x31	; 49
    2630:	b0 e0       	ldi	r27, 0x00	; 0
    2632:	e1 e3       	ldi	r30, 0x31	; 49
    2634:	f0 e0       	ldi	r31, 0x00	; 0
    2636:	80 81       	ld	r24, Z
    2638:	48 2f       	mov	r20, r24
    263a:	8a 81       	ldd	r24, Y+2	; 0x02
    263c:	28 2f       	mov	r18, r24
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	02 2e       	mov	r0, r18
    2646:	02 c0       	rjmp	.+4      	; 0x264c <GPIO_setupPinDirection+0x1bc>
    2648:	88 0f       	add	r24, r24
    264a:	99 1f       	adc	r25, r25
    264c:	0a 94       	dec	r0
    264e:	e2 f7       	brpl	.-8      	; 0x2648 <GPIO_setupPinDirection+0x1b8>
    2650:	80 95       	com	r24
    2652:	84 23       	and	r24, r20
    2654:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2656:	0f 90       	pop	r0
    2658:	0f 90       	pop	r0
    265a:	0f 90       	pop	r0
    265c:	0f 90       	pop	r0
    265e:	0f 90       	pop	r0
    2660:	cf 91       	pop	r28
    2662:	df 91       	pop	r29
    2664:	08 95       	ret

00002666 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    2666:	df 93       	push	r29
    2668:	cf 93       	push	r28
    266a:	00 d0       	rcall	.+0      	; 0x266c <GPIO_writePin+0x6>
    266c:	00 d0       	rcall	.+0      	; 0x266e <GPIO_writePin+0x8>
    266e:	0f 92       	push	r0
    2670:	cd b7       	in	r28, 0x3d	; 61
    2672:	de b7       	in	r29, 0x3e	; 62
    2674:	89 83       	std	Y+1, r24	; 0x01
    2676:	6a 83       	std	Y+2, r22	; 0x02
    2678:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    267a:	8a 81       	ldd	r24, Y+2	; 0x02
    267c:	88 30       	cpi	r24, 0x08	; 8
    267e:	08 f0       	brcs	.+2      	; 0x2682 <GPIO_writePin+0x1c>
    2680:	d5 c0       	rjmp	.+426    	; 0x282c <GPIO_writePin+0x1c6>
    2682:	89 81       	ldd	r24, Y+1	; 0x01
    2684:	84 30       	cpi	r24, 0x04	; 4
    2686:	08 f0       	brcs	.+2      	; 0x268a <GPIO_writePin+0x24>
    2688:	d1 c0       	rjmp	.+418    	; 0x282c <GPIO_writePin+0x1c6>
	{
		/* Do Nothing */
	}
	else
	{
      switch(port_num)
    268a:	89 81       	ldd	r24, Y+1	; 0x01
    268c:	28 2f       	mov	r18, r24
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	3d 83       	std	Y+5, r19	; 0x05
    2692:	2c 83       	std	Y+4, r18	; 0x04
    2694:	8c 81       	ldd	r24, Y+4	; 0x04
    2696:	9d 81       	ldd	r25, Y+5	; 0x05
    2698:	81 30       	cpi	r24, 0x01	; 1
    269a:	91 05       	cpc	r25, r1
    269c:	09 f4       	brne	.+2      	; 0x26a0 <GPIO_writePin+0x3a>
    269e:	43 c0       	rjmp	.+134    	; 0x2726 <GPIO_writePin+0xc0>
    26a0:	2c 81       	ldd	r18, Y+4	; 0x04
    26a2:	3d 81       	ldd	r19, Y+5	; 0x05
    26a4:	22 30       	cpi	r18, 0x02	; 2
    26a6:	31 05       	cpc	r19, r1
    26a8:	2c f4       	brge	.+10     	; 0x26b4 <GPIO_writePin+0x4e>
    26aa:	8c 81       	ldd	r24, Y+4	; 0x04
    26ac:	9d 81       	ldd	r25, Y+5	; 0x05
    26ae:	00 97       	sbiw	r24, 0x00	; 0
    26b0:	71 f0       	breq	.+28     	; 0x26ce <GPIO_writePin+0x68>
    26b2:	bc c0       	rjmp	.+376    	; 0x282c <GPIO_writePin+0x1c6>
    26b4:	2c 81       	ldd	r18, Y+4	; 0x04
    26b6:	3d 81       	ldd	r19, Y+5	; 0x05
    26b8:	22 30       	cpi	r18, 0x02	; 2
    26ba:	31 05       	cpc	r19, r1
    26bc:	09 f4       	brne	.+2      	; 0x26c0 <GPIO_writePin+0x5a>
    26be:	5f c0       	rjmp	.+190    	; 0x277e <GPIO_writePin+0x118>
    26c0:	8c 81       	ldd	r24, Y+4	; 0x04
    26c2:	9d 81       	ldd	r25, Y+5	; 0x05
    26c4:	83 30       	cpi	r24, 0x03	; 3
    26c6:	91 05       	cpc	r25, r1
    26c8:	09 f4       	brne	.+2      	; 0x26cc <GPIO_writePin+0x66>
    26ca:	85 c0       	rjmp	.+266    	; 0x27d6 <GPIO_writePin+0x170>
    26cc:	af c0       	rjmp	.+350    	; 0x282c <GPIO_writePin+0x1c6>
      {
         case PORTA_ID:
        	 if ( value == LOGIC_HIGH)
    26ce:	8b 81       	ldd	r24, Y+3	; 0x03
    26d0:	81 30       	cpi	r24, 0x01	; 1
    26d2:	a1 f4       	brne	.+40     	; 0x26fc <GPIO_writePin+0x96>
        	 {
        		 SET_BIT(PORTA, pin_num);
    26d4:	ab e3       	ldi	r26, 0x3B	; 59
    26d6:	b0 e0       	ldi	r27, 0x00	; 0
    26d8:	eb e3       	ldi	r30, 0x3B	; 59
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	80 81       	ld	r24, Z
    26de:	48 2f       	mov	r20, r24
    26e0:	8a 81       	ldd	r24, Y+2	; 0x02
    26e2:	28 2f       	mov	r18, r24
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	81 e0       	ldi	r24, 0x01	; 1
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	02 2e       	mov	r0, r18
    26ec:	02 c0       	rjmp	.+4      	; 0x26f2 <GPIO_writePin+0x8c>
    26ee:	88 0f       	add	r24, r24
    26f0:	99 1f       	adc	r25, r25
    26f2:	0a 94       	dec	r0
    26f4:	e2 f7       	brpl	.-8      	; 0x26ee <GPIO_writePin+0x88>
    26f6:	84 2b       	or	r24, r20
    26f8:	8c 93       	st	X, r24
    26fa:	98 c0       	rjmp	.+304    	; 0x282c <GPIO_writePin+0x1c6>
        	 }
        	 else
        	 {
        		 CLEAR_BIT(PORTA,pin_num);
    26fc:	ab e3       	ldi	r26, 0x3B	; 59
    26fe:	b0 e0       	ldi	r27, 0x00	; 0
    2700:	eb e3       	ldi	r30, 0x3B	; 59
    2702:	f0 e0       	ldi	r31, 0x00	; 0
    2704:	80 81       	ld	r24, Z
    2706:	48 2f       	mov	r20, r24
    2708:	8a 81       	ldd	r24, Y+2	; 0x02
    270a:	28 2f       	mov	r18, r24
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	02 2e       	mov	r0, r18
    2714:	02 c0       	rjmp	.+4      	; 0x271a <GPIO_writePin+0xb4>
    2716:	88 0f       	add	r24, r24
    2718:	99 1f       	adc	r25, r25
    271a:	0a 94       	dec	r0
    271c:	e2 f7       	brpl	.-8      	; 0x2716 <GPIO_writePin+0xb0>
    271e:	80 95       	com	r24
    2720:	84 23       	and	r24, r20
    2722:	8c 93       	st	X, r24
    2724:	83 c0       	rjmp	.+262    	; 0x282c <GPIO_writePin+0x1c6>
        	 }
        	 break;
         case PORTB_ID:
        	 if ( value == LOGIC_HIGH)
    2726:	8b 81       	ldd	r24, Y+3	; 0x03
    2728:	81 30       	cpi	r24, 0x01	; 1
    272a:	a1 f4       	brne	.+40     	; 0x2754 <GPIO_writePin+0xee>
        	 {
        		 SET_BIT(PORTB, pin_num);
    272c:	a8 e3       	ldi	r26, 0x38	; 56
    272e:	b0 e0       	ldi	r27, 0x00	; 0
    2730:	e8 e3       	ldi	r30, 0x38	; 56
    2732:	f0 e0       	ldi	r31, 0x00	; 0
    2734:	80 81       	ld	r24, Z
    2736:	48 2f       	mov	r20, r24
    2738:	8a 81       	ldd	r24, Y+2	; 0x02
    273a:	28 2f       	mov	r18, r24
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	02 2e       	mov	r0, r18
    2744:	02 c0       	rjmp	.+4      	; 0x274a <GPIO_writePin+0xe4>
    2746:	88 0f       	add	r24, r24
    2748:	99 1f       	adc	r25, r25
    274a:	0a 94       	dec	r0
    274c:	e2 f7       	brpl	.-8      	; 0x2746 <GPIO_writePin+0xe0>
    274e:	84 2b       	or	r24, r20
    2750:	8c 93       	st	X, r24
    2752:	6c c0       	rjmp	.+216    	; 0x282c <GPIO_writePin+0x1c6>
        	 }
        	 else
        	 {
        		 CLEAR_BIT(PORTB,pin_num);
    2754:	a8 e3       	ldi	r26, 0x38	; 56
    2756:	b0 e0       	ldi	r27, 0x00	; 0
    2758:	e8 e3       	ldi	r30, 0x38	; 56
    275a:	f0 e0       	ldi	r31, 0x00	; 0
    275c:	80 81       	ld	r24, Z
    275e:	48 2f       	mov	r20, r24
    2760:	8a 81       	ldd	r24, Y+2	; 0x02
    2762:	28 2f       	mov	r18, r24
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	81 e0       	ldi	r24, 0x01	; 1
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	02 2e       	mov	r0, r18
    276c:	02 c0       	rjmp	.+4      	; 0x2772 <GPIO_writePin+0x10c>
    276e:	88 0f       	add	r24, r24
    2770:	99 1f       	adc	r25, r25
    2772:	0a 94       	dec	r0
    2774:	e2 f7       	brpl	.-8      	; 0x276e <GPIO_writePin+0x108>
    2776:	80 95       	com	r24
    2778:	84 23       	and	r24, r20
    277a:	8c 93       	st	X, r24
    277c:	57 c0       	rjmp	.+174    	; 0x282c <GPIO_writePin+0x1c6>
        	 }
        	 break;
         case PORTC_ID:
        	 if ( value == LOGIC_HIGH)
    277e:	8b 81       	ldd	r24, Y+3	; 0x03
    2780:	81 30       	cpi	r24, 0x01	; 1
    2782:	a1 f4       	brne	.+40     	; 0x27ac <GPIO_writePin+0x146>
        	 {
        		 SET_BIT(PORTC, pin_num);
    2784:	a5 e3       	ldi	r26, 0x35	; 53
    2786:	b0 e0       	ldi	r27, 0x00	; 0
    2788:	e5 e3       	ldi	r30, 0x35	; 53
    278a:	f0 e0       	ldi	r31, 0x00	; 0
    278c:	80 81       	ld	r24, Z
    278e:	48 2f       	mov	r20, r24
    2790:	8a 81       	ldd	r24, Y+2	; 0x02
    2792:	28 2f       	mov	r18, r24
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	02 2e       	mov	r0, r18
    279c:	02 c0       	rjmp	.+4      	; 0x27a2 <GPIO_writePin+0x13c>
    279e:	88 0f       	add	r24, r24
    27a0:	99 1f       	adc	r25, r25
    27a2:	0a 94       	dec	r0
    27a4:	e2 f7       	brpl	.-8      	; 0x279e <GPIO_writePin+0x138>
    27a6:	84 2b       	or	r24, r20
    27a8:	8c 93       	st	X, r24
    27aa:	40 c0       	rjmp	.+128    	; 0x282c <GPIO_writePin+0x1c6>
        	 }
        	 else
        	 {
        		 CLEAR_BIT(PORTC,pin_num);
    27ac:	a5 e3       	ldi	r26, 0x35	; 53
    27ae:	b0 e0       	ldi	r27, 0x00	; 0
    27b0:	e5 e3       	ldi	r30, 0x35	; 53
    27b2:	f0 e0       	ldi	r31, 0x00	; 0
    27b4:	80 81       	ld	r24, Z
    27b6:	48 2f       	mov	r20, r24
    27b8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ba:	28 2f       	mov	r18, r24
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	81 e0       	ldi	r24, 0x01	; 1
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	02 2e       	mov	r0, r18
    27c4:	02 c0       	rjmp	.+4      	; 0x27ca <GPIO_writePin+0x164>
    27c6:	88 0f       	add	r24, r24
    27c8:	99 1f       	adc	r25, r25
    27ca:	0a 94       	dec	r0
    27cc:	e2 f7       	brpl	.-8      	; 0x27c6 <GPIO_writePin+0x160>
    27ce:	80 95       	com	r24
    27d0:	84 23       	and	r24, r20
    27d2:	8c 93       	st	X, r24
    27d4:	2b c0       	rjmp	.+86     	; 0x282c <GPIO_writePin+0x1c6>
        	 }
        	 break;
         case PORTD_ID:
        	 if ( value == LOGIC_HIGH)
    27d6:	8b 81       	ldd	r24, Y+3	; 0x03
    27d8:	81 30       	cpi	r24, 0x01	; 1
    27da:	a1 f4       	brne	.+40     	; 0x2804 <GPIO_writePin+0x19e>
        	 {
        		 SET_BIT(PORTD, pin_num);
    27dc:	a2 e3       	ldi	r26, 0x32	; 50
    27de:	b0 e0       	ldi	r27, 0x00	; 0
    27e0:	e2 e3       	ldi	r30, 0x32	; 50
    27e2:	f0 e0       	ldi	r31, 0x00	; 0
    27e4:	80 81       	ld	r24, Z
    27e6:	48 2f       	mov	r20, r24
    27e8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ea:	28 2f       	mov	r18, r24
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	02 2e       	mov	r0, r18
    27f4:	02 c0       	rjmp	.+4      	; 0x27fa <GPIO_writePin+0x194>
    27f6:	88 0f       	add	r24, r24
    27f8:	99 1f       	adc	r25, r25
    27fa:	0a 94       	dec	r0
    27fc:	e2 f7       	brpl	.-8      	; 0x27f6 <GPIO_writePin+0x190>
    27fe:	84 2b       	or	r24, r20
    2800:	8c 93       	st	X, r24
    2802:	14 c0       	rjmp	.+40     	; 0x282c <GPIO_writePin+0x1c6>
        	 }
        	 else
        	 {
        		 CLEAR_BIT(PORTD,pin_num);
    2804:	a2 e3       	ldi	r26, 0x32	; 50
    2806:	b0 e0       	ldi	r27, 0x00	; 0
    2808:	e2 e3       	ldi	r30, 0x32	; 50
    280a:	f0 e0       	ldi	r31, 0x00	; 0
    280c:	80 81       	ld	r24, Z
    280e:	48 2f       	mov	r20, r24
    2810:	8a 81       	ldd	r24, Y+2	; 0x02
    2812:	28 2f       	mov	r18, r24
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	81 e0       	ldi	r24, 0x01	; 1
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	02 2e       	mov	r0, r18
    281c:	02 c0       	rjmp	.+4      	; 0x2822 <GPIO_writePin+0x1bc>
    281e:	88 0f       	add	r24, r24
    2820:	99 1f       	adc	r25, r25
    2822:	0a 94       	dec	r0
    2824:	e2 f7       	brpl	.-8      	; 0x281e <GPIO_writePin+0x1b8>
    2826:	80 95       	com	r24
    2828:	84 23       	and	r24, r20
    282a:	8c 93       	st	X, r24
        	 }
        	 break;
      }
	}
}
    282c:	0f 90       	pop	r0
    282e:	0f 90       	pop	r0
    2830:	0f 90       	pop	r0
    2832:	0f 90       	pop	r0
    2834:	0f 90       	pop	r0
    2836:	cf 91       	pop	r28
    2838:	df 91       	pop	r29
    283a:	08 95       	ret

0000283c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    283c:	df 93       	push	r29
    283e:	cf 93       	push	r28
    2840:	00 d0       	rcall	.+0      	; 0x2842 <GPIO_readPin+0x6>
    2842:	00 d0       	rcall	.+0      	; 0x2844 <GPIO_readPin+0x8>
    2844:	0f 92       	push	r0
    2846:	cd b7       	in	r28, 0x3d	; 61
    2848:	de b7       	in	r29, 0x3e	; 62
    284a:	8a 83       	std	Y+2, r24	; 0x02
    284c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 temp=0;
    284e:	19 82       	std	Y+1, r1	; 0x01
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2850:	8b 81       	ldd	r24, Y+3	; 0x03
    2852:	88 30       	cpi	r24, 0x08	; 8
    2854:	18 f4       	brcc	.+6      	; 0x285c <GPIO_readPin+0x20>
    2856:	8a 81       	ldd	r24, Y+2	; 0x02
    2858:	84 30       	cpi	r24, 0x04	; 4
    285a:	10 f0       	brcs	.+4      	; 0x2860 <GPIO_readPin+0x24>
	{
		temp = 0 ;
    285c:	19 82       	std	Y+1, r1	; 0x01
    285e:	67 c0       	rjmp	.+206    	; 0x292e <GPIO_readPin+0xf2>
	}
	else
	{
		switch(port_num)
    2860:	8a 81       	ldd	r24, Y+2	; 0x02
    2862:	28 2f       	mov	r18, r24
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	3d 83       	std	Y+5, r19	; 0x05
    2868:	2c 83       	std	Y+4, r18	; 0x04
    286a:	4c 81       	ldd	r20, Y+4	; 0x04
    286c:	5d 81       	ldd	r21, Y+5	; 0x05
    286e:	41 30       	cpi	r20, 0x01	; 1
    2870:	51 05       	cpc	r21, r1
    2872:	41 f1       	breq	.+80     	; 0x28c4 <GPIO_readPin+0x88>
    2874:	8c 81       	ldd	r24, Y+4	; 0x04
    2876:	9d 81       	ldd	r25, Y+5	; 0x05
    2878:	82 30       	cpi	r24, 0x02	; 2
    287a:	91 05       	cpc	r25, r1
    287c:	34 f4       	brge	.+12     	; 0x288a <GPIO_readPin+0x4e>
    287e:	2c 81       	ldd	r18, Y+4	; 0x04
    2880:	3d 81       	ldd	r19, Y+5	; 0x05
    2882:	21 15       	cp	r18, r1
    2884:	31 05       	cpc	r19, r1
    2886:	61 f0       	breq	.+24     	; 0x28a0 <GPIO_readPin+0x64>
    2888:	52 c0       	rjmp	.+164    	; 0x292e <GPIO_readPin+0xf2>
    288a:	4c 81       	ldd	r20, Y+4	; 0x04
    288c:	5d 81       	ldd	r21, Y+5	; 0x05
    288e:	42 30       	cpi	r20, 0x02	; 2
    2890:	51 05       	cpc	r21, r1
    2892:	51 f1       	breq	.+84     	; 0x28e8 <GPIO_readPin+0xac>
    2894:	8c 81       	ldd	r24, Y+4	; 0x04
    2896:	9d 81       	ldd	r25, Y+5	; 0x05
    2898:	83 30       	cpi	r24, 0x03	; 3
    289a:	91 05       	cpc	r25, r1
    289c:	b9 f1       	breq	.+110    	; 0x290c <GPIO_readPin+0xd0>
    289e:	47 c0       	rjmp	.+142    	; 0x292e <GPIO_readPin+0xf2>
		{
		case PORTA_ID:
            temp = CHECK_BIT(PINA,pin_num);
    28a0:	e9 e3       	ldi	r30, 0x39	; 57
    28a2:	f0 e0       	ldi	r31, 0x00	; 0
    28a4:	80 81       	ld	r24, Z
    28a6:	28 2f       	mov	r18, r24
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	8b 81       	ldd	r24, Y+3	; 0x03
    28ac:	88 2f       	mov	r24, r24
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	a9 01       	movw	r20, r18
    28b2:	02 c0       	rjmp	.+4      	; 0x28b8 <GPIO_readPin+0x7c>
    28b4:	55 95       	asr	r21
    28b6:	47 95       	ror	r20
    28b8:	8a 95       	dec	r24
    28ba:	e2 f7       	brpl	.-8      	; 0x28b4 <GPIO_readPin+0x78>
    28bc:	ca 01       	movw	r24, r20
    28be:	81 70       	andi	r24, 0x01	; 1
    28c0:	89 83       	std	Y+1, r24	; 0x01
    28c2:	35 c0       	rjmp	.+106    	; 0x292e <GPIO_readPin+0xf2>
			break;
		case PORTB_ID:
			temp = CHECK_BIT(PINB,pin_num);
    28c4:	e6 e3       	ldi	r30, 0x36	; 54
    28c6:	f0 e0       	ldi	r31, 0x00	; 0
    28c8:	80 81       	ld	r24, Z
    28ca:	28 2f       	mov	r18, r24
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	8b 81       	ldd	r24, Y+3	; 0x03
    28d0:	88 2f       	mov	r24, r24
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	a9 01       	movw	r20, r18
    28d6:	02 c0       	rjmp	.+4      	; 0x28dc <GPIO_readPin+0xa0>
    28d8:	55 95       	asr	r21
    28da:	47 95       	ror	r20
    28dc:	8a 95       	dec	r24
    28de:	e2 f7       	brpl	.-8      	; 0x28d8 <GPIO_readPin+0x9c>
    28e0:	ca 01       	movw	r24, r20
    28e2:	81 70       	andi	r24, 0x01	; 1
    28e4:	89 83       	std	Y+1, r24	; 0x01
    28e6:	23 c0       	rjmp	.+70     	; 0x292e <GPIO_readPin+0xf2>
			break;
		case PORTC_ID:
			temp = CHECK_BIT(PINC,pin_num);
    28e8:	e3 e3       	ldi	r30, 0x33	; 51
    28ea:	f0 e0       	ldi	r31, 0x00	; 0
    28ec:	80 81       	ld	r24, Z
    28ee:	28 2f       	mov	r18, r24
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	8b 81       	ldd	r24, Y+3	; 0x03
    28f4:	88 2f       	mov	r24, r24
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	a9 01       	movw	r20, r18
    28fa:	02 c0       	rjmp	.+4      	; 0x2900 <GPIO_readPin+0xc4>
    28fc:	55 95       	asr	r21
    28fe:	47 95       	ror	r20
    2900:	8a 95       	dec	r24
    2902:	e2 f7       	brpl	.-8      	; 0x28fc <GPIO_readPin+0xc0>
    2904:	ca 01       	movw	r24, r20
    2906:	81 70       	andi	r24, 0x01	; 1
    2908:	89 83       	std	Y+1, r24	; 0x01
    290a:	11 c0       	rjmp	.+34     	; 0x292e <GPIO_readPin+0xf2>
			break;
		case PORTD_ID:
			temp = CHECK_BIT(PIND,pin_num);
    290c:	e0 e3       	ldi	r30, 0x30	; 48
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	80 81       	ld	r24, Z
    2912:	28 2f       	mov	r18, r24
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	8b 81       	ldd	r24, Y+3	; 0x03
    2918:	88 2f       	mov	r24, r24
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	a9 01       	movw	r20, r18
    291e:	02 c0       	rjmp	.+4      	; 0x2924 <GPIO_readPin+0xe8>
    2920:	55 95       	asr	r21
    2922:	47 95       	ror	r20
    2924:	8a 95       	dec	r24
    2926:	e2 f7       	brpl	.-8      	; 0x2920 <GPIO_readPin+0xe4>
    2928:	ca 01       	movw	r24, r20
    292a:	81 70       	andi	r24, 0x01	; 1
    292c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return temp;
    292e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2930:	0f 90       	pop	r0
    2932:	0f 90       	pop	r0
    2934:	0f 90       	pop	r0
    2936:	0f 90       	pop	r0
    2938:	0f 90       	pop	r0
    293a:	cf 91       	pop	r28
    293c:	df 91       	pop	r29
    293e:	08 95       	ret

00002940 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2940:	df 93       	push	r29
    2942:	cf 93       	push	r28
    2944:	00 d0       	rcall	.+0      	; 0x2946 <GPIO_setupPortDirection+0x6>
    2946:	00 d0       	rcall	.+0      	; 0x2948 <GPIO_setupPortDirection+0x8>
    2948:	cd b7       	in	r28, 0x3d	; 61
    294a:	de b7       	in	r29, 0x3e	; 62
    294c:	89 83       	std	Y+1, r24	; 0x01
    294e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2950:	89 81       	ldd	r24, Y+1	; 0x01
    2952:	84 30       	cpi	r24, 0x04	; 4
    2954:	90 f5       	brcc	.+100    	; 0x29ba <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2956:	89 81       	ldd	r24, Y+1	; 0x01
    2958:	28 2f       	mov	r18, r24
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	3c 83       	std	Y+4, r19	; 0x04
    295e:	2b 83       	std	Y+3, r18	; 0x03
    2960:	8b 81       	ldd	r24, Y+3	; 0x03
    2962:	9c 81       	ldd	r25, Y+4	; 0x04
    2964:	81 30       	cpi	r24, 0x01	; 1
    2966:	91 05       	cpc	r25, r1
    2968:	d1 f0       	breq	.+52     	; 0x299e <GPIO_setupPortDirection+0x5e>
    296a:	2b 81       	ldd	r18, Y+3	; 0x03
    296c:	3c 81       	ldd	r19, Y+4	; 0x04
    296e:	22 30       	cpi	r18, 0x02	; 2
    2970:	31 05       	cpc	r19, r1
    2972:	2c f4       	brge	.+10     	; 0x297e <GPIO_setupPortDirection+0x3e>
    2974:	8b 81       	ldd	r24, Y+3	; 0x03
    2976:	9c 81       	ldd	r25, Y+4	; 0x04
    2978:	00 97       	sbiw	r24, 0x00	; 0
    297a:	61 f0       	breq	.+24     	; 0x2994 <GPIO_setupPortDirection+0x54>
    297c:	1e c0       	rjmp	.+60     	; 0x29ba <GPIO_setupPortDirection+0x7a>
    297e:	2b 81       	ldd	r18, Y+3	; 0x03
    2980:	3c 81       	ldd	r19, Y+4	; 0x04
    2982:	22 30       	cpi	r18, 0x02	; 2
    2984:	31 05       	cpc	r19, r1
    2986:	81 f0       	breq	.+32     	; 0x29a8 <GPIO_setupPortDirection+0x68>
    2988:	8b 81       	ldd	r24, Y+3	; 0x03
    298a:	9c 81       	ldd	r25, Y+4	; 0x04
    298c:	83 30       	cpi	r24, 0x03	; 3
    298e:	91 05       	cpc	r25, r1
    2990:	81 f0       	breq	.+32     	; 0x29b2 <GPIO_setupPortDirection+0x72>
    2992:	13 c0       	rjmp	.+38     	; 0x29ba <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2994:	ea e3       	ldi	r30, 0x3A	; 58
    2996:	f0 e0       	ldi	r31, 0x00	; 0
    2998:	8a 81       	ldd	r24, Y+2	; 0x02
    299a:	80 83       	st	Z, r24
    299c:	0e c0       	rjmp	.+28     	; 0x29ba <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    299e:	e7 e3       	ldi	r30, 0x37	; 55
    29a0:	f0 e0       	ldi	r31, 0x00	; 0
    29a2:	8a 81       	ldd	r24, Y+2	; 0x02
    29a4:	80 83       	st	Z, r24
    29a6:	09 c0       	rjmp	.+18     	; 0x29ba <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    29a8:	e4 e3       	ldi	r30, 0x34	; 52
    29aa:	f0 e0       	ldi	r31, 0x00	; 0
    29ac:	8a 81       	ldd	r24, Y+2	; 0x02
    29ae:	80 83       	st	Z, r24
    29b0:	04 c0       	rjmp	.+8      	; 0x29ba <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    29b2:	e1 e3       	ldi	r30, 0x31	; 49
    29b4:	f0 e0       	ldi	r31, 0x00	; 0
    29b6:	8a 81       	ldd	r24, Y+2	; 0x02
    29b8:	80 83       	st	Z, r24
			break;
		}
	}
}
    29ba:	0f 90       	pop	r0
    29bc:	0f 90       	pop	r0
    29be:	0f 90       	pop	r0
    29c0:	0f 90       	pop	r0
    29c2:	cf 91       	pop	r28
    29c4:	df 91       	pop	r29
    29c6:	08 95       	ret

000029c8 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    29c8:	df 93       	push	r29
    29ca:	cf 93       	push	r28
    29cc:	00 d0       	rcall	.+0      	; 0x29ce <GPIO_writePort+0x6>
    29ce:	00 d0       	rcall	.+0      	; 0x29d0 <GPIO_writePort+0x8>
    29d0:	cd b7       	in	r28, 0x3d	; 61
    29d2:	de b7       	in	r29, 0x3e	; 62
    29d4:	89 83       	std	Y+1, r24	; 0x01
    29d6:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    29d8:	89 81       	ldd	r24, Y+1	; 0x01
    29da:	84 30       	cpi	r24, 0x04	; 4
    29dc:	90 f5       	brcc	.+100    	; 0x2a42 <GPIO_writePort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    29de:	89 81       	ldd	r24, Y+1	; 0x01
    29e0:	28 2f       	mov	r18, r24
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	3c 83       	std	Y+4, r19	; 0x04
    29e6:	2b 83       	std	Y+3, r18	; 0x03
    29e8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ea:	9c 81       	ldd	r25, Y+4	; 0x04
    29ec:	81 30       	cpi	r24, 0x01	; 1
    29ee:	91 05       	cpc	r25, r1
    29f0:	d1 f0       	breq	.+52     	; 0x2a26 <GPIO_writePort+0x5e>
    29f2:	2b 81       	ldd	r18, Y+3	; 0x03
    29f4:	3c 81       	ldd	r19, Y+4	; 0x04
    29f6:	22 30       	cpi	r18, 0x02	; 2
    29f8:	31 05       	cpc	r19, r1
    29fa:	2c f4       	brge	.+10     	; 0x2a06 <GPIO_writePort+0x3e>
    29fc:	8b 81       	ldd	r24, Y+3	; 0x03
    29fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2a00:	00 97       	sbiw	r24, 0x00	; 0
    2a02:	61 f0       	breq	.+24     	; 0x2a1c <GPIO_writePort+0x54>
    2a04:	1e c0       	rjmp	.+60     	; 0x2a42 <GPIO_writePort+0x7a>
    2a06:	2b 81       	ldd	r18, Y+3	; 0x03
    2a08:	3c 81       	ldd	r19, Y+4	; 0x04
    2a0a:	22 30       	cpi	r18, 0x02	; 2
    2a0c:	31 05       	cpc	r19, r1
    2a0e:	81 f0       	breq	.+32     	; 0x2a30 <GPIO_writePort+0x68>
    2a10:	8b 81       	ldd	r24, Y+3	; 0x03
    2a12:	9c 81       	ldd	r25, Y+4	; 0x04
    2a14:	83 30       	cpi	r24, 0x03	; 3
    2a16:	91 05       	cpc	r25, r1
    2a18:	81 f0       	breq	.+32     	; 0x2a3a <GPIO_writePort+0x72>
    2a1a:	13 c0       	rjmp	.+38     	; 0x2a42 <GPIO_writePort+0x7a>
		{

		case PORTA_ID:
			PORTA=value;
    2a1c:	eb e3       	ldi	r30, 0x3B	; 59
    2a1e:	f0 e0       	ldi	r31, 0x00	; 0
    2a20:	8a 81       	ldd	r24, Y+2	; 0x02
    2a22:	80 83       	st	Z, r24
    2a24:	0e c0       	rjmp	.+28     	; 0x2a42 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB=value;
    2a26:	e8 e3       	ldi	r30, 0x38	; 56
    2a28:	f0 e0       	ldi	r31, 0x00	; 0
    2a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2c:	80 83       	st	Z, r24
    2a2e:	09 c0       	rjmp	.+18     	; 0x2a42 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC=value;
    2a30:	e5 e3       	ldi	r30, 0x35	; 53
    2a32:	f0 e0       	ldi	r31, 0x00	; 0
    2a34:	8a 81       	ldd	r24, Y+2	; 0x02
    2a36:	80 83       	st	Z, r24
    2a38:	04 c0       	rjmp	.+8      	; 0x2a42 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD=value;
    2a3a:	e2 e3       	ldi	r30, 0x32	; 50
    2a3c:	f0 e0       	ldi	r31, 0x00	; 0
    2a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a40:	80 83       	st	Z, r24
			break;

		}
	}
}
    2a42:	0f 90       	pop	r0
    2a44:	0f 90       	pop	r0
    2a46:	0f 90       	pop	r0
    2a48:	0f 90       	pop	r0
    2a4a:	cf 91       	pop	r28
    2a4c:	df 91       	pop	r29
    2a4e:	08 95       	ret

00002a50 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2a50:	df 93       	push	r29
    2a52:	cf 93       	push	r28
    2a54:	00 d0       	rcall	.+0      	; 0x2a56 <GPIO_readPort+0x6>
    2a56:	00 d0       	rcall	.+0      	; 0x2a58 <GPIO_readPort+0x8>
    2a58:	0f 92       	push	r0
    2a5a:	cd b7       	in	r28, 0x3d	; 61
    2a5c:	de b7       	in	r29, 0x3e	; 62
    2a5e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 temp = 0;
    2a60:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
    2a62:	8a 81       	ldd	r24, Y+2	; 0x02
    2a64:	84 30       	cpi	r24, 0x04	; 4
    2a66:	18 f0       	brcs	.+6      	; 0x2a6e <GPIO_readPort+0x1e>
	{
		return temp;
    2a68:	29 81       	ldd	r18, Y+1	; 0x01
    2a6a:	2d 83       	std	Y+5, r18	; 0x05
    2a6c:	34 c0       	rjmp	.+104    	; 0x2ad6 <GPIO_readPort+0x86>
	}
	else
	{
		switch(port_num)
    2a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a70:	28 2f       	mov	r18, r24
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	3c 83       	std	Y+4, r19	; 0x04
    2a76:	2b 83       	std	Y+3, r18	; 0x03
    2a78:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a7c:	81 30       	cpi	r24, 0x01	; 1
    2a7e:	91 05       	cpc	r25, r1
    2a80:	d1 f0       	breq	.+52     	; 0x2ab6 <GPIO_readPort+0x66>
    2a82:	2b 81       	ldd	r18, Y+3	; 0x03
    2a84:	3c 81       	ldd	r19, Y+4	; 0x04
    2a86:	22 30       	cpi	r18, 0x02	; 2
    2a88:	31 05       	cpc	r19, r1
    2a8a:	2c f4       	brge	.+10     	; 0x2a96 <GPIO_readPort+0x46>
    2a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a90:	00 97       	sbiw	r24, 0x00	; 0
    2a92:	61 f0       	breq	.+24     	; 0x2aac <GPIO_readPort+0x5c>
    2a94:	1e c0       	rjmp	.+60     	; 0x2ad2 <GPIO_readPort+0x82>
    2a96:	2b 81       	ldd	r18, Y+3	; 0x03
    2a98:	3c 81       	ldd	r19, Y+4	; 0x04
    2a9a:	22 30       	cpi	r18, 0x02	; 2
    2a9c:	31 05       	cpc	r19, r1
    2a9e:	81 f0       	breq	.+32     	; 0x2ac0 <GPIO_readPort+0x70>
    2aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa2:	9c 81       	ldd	r25, Y+4	; 0x04
    2aa4:	83 30       	cpi	r24, 0x03	; 3
    2aa6:	91 05       	cpc	r25, r1
    2aa8:	81 f0       	breq	.+32     	; 0x2aca <GPIO_readPort+0x7a>
    2aaa:	13 c0       	rjmp	.+38     	; 0x2ad2 <GPIO_readPort+0x82>
		{

		case PORTA_ID:
            temp = PINA;
    2aac:	e9 e3       	ldi	r30, 0x39	; 57
    2aae:	f0 e0       	ldi	r31, 0x00	; 0
    2ab0:	80 81       	ld	r24, Z
    2ab2:	89 83       	std	Y+1, r24	; 0x01
    2ab4:	0e c0       	rjmp	.+28     	; 0x2ad2 <GPIO_readPort+0x82>
			break;
		case PORTB_ID:
			temp = PINB;
    2ab6:	e6 e3       	ldi	r30, 0x36	; 54
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	80 81       	ld	r24, Z
    2abc:	89 83       	std	Y+1, r24	; 0x01
    2abe:	09 c0       	rjmp	.+18     	; 0x2ad2 <GPIO_readPort+0x82>
			break;
		case PORTC_ID:
			temp = PINC;
    2ac0:	e3 e3       	ldi	r30, 0x33	; 51
    2ac2:	f0 e0       	ldi	r31, 0x00	; 0
    2ac4:	80 81       	ld	r24, Z
    2ac6:	89 83       	std	Y+1, r24	; 0x01
    2ac8:	04 c0       	rjmp	.+8      	; 0x2ad2 <GPIO_readPort+0x82>
			break;
		case PORTD_ID:
			temp = PIND;
    2aca:	e0 e3       	ldi	r30, 0x30	; 48
    2acc:	f0 e0       	ldi	r31, 0x00	; 0
    2ace:	80 81       	ld	r24, Z
    2ad0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return temp;
    2ad2:	99 81       	ldd	r25, Y+1	; 0x01
    2ad4:	9d 83       	std	Y+5, r25	; 0x05
    2ad6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2ad8:	0f 90       	pop	r0
    2ada:	0f 90       	pop	r0
    2adc:	0f 90       	pop	r0
    2ade:	0f 90       	pop	r0
    2ae0:	0f 90       	pop	r0
    2ae2:	cf 91       	pop	r28
    2ae4:	df 91       	pop	r29
    2ae6:	08 95       	ret

00002ae8 <main>:

extern uint16 g_Interrupts_number;


int main (void)
{
    2ae8:	df 93       	push	r29
    2aea:	cf 93       	push	r28
    2aec:	cd b7       	in	r28, 0x3d	; 61
    2aee:	de b7       	in	r29, 0x3e	; 62
    2af0:	2e 97       	sbiw	r28, 0x0e	; 14
    2af2:	0f b6       	in	r0, 0x3f	; 63
    2af4:	f8 94       	cli
    2af6:	de bf       	out	0x3e, r29	; 62
    2af8:	0f be       	out	0x3f, r0	; 63
    2afa:	cd bf       	out	0x3d, r28	; 61
			 StopBit_1,
			 DataFrame_8Bits,
			 BaudRate_9600,
			 RX_InterruptDisable,
			 TX_InterruptDisable
	 };
    2afc:	ce 01       	movw	r24, r28
    2afe:	01 96       	adiw	r24, 0x01	; 1
    2b00:	9b 87       	std	Y+11, r25	; 0x0b
    2b02:	8a 87       	std	Y+10, r24	; 0x0a
    2b04:	e1 e7       	ldi	r30, 0x71	; 113
    2b06:	f0 e0       	ldi	r31, 0x00	; 0
    2b08:	fd 87       	std	Y+13, r31	; 0x0d
    2b0a:	ec 87       	std	Y+12, r30	; 0x0c
    2b0c:	f9 e0       	ldi	r31, 0x09	; 9
    2b0e:	fe 87       	std	Y+14, r31	; 0x0e
    2b10:	ec 85       	ldd	r30, Y+12	; 0x0c
    2b12:	fd 85       	ldd	r31, Y+13	; 0x0d
    2b14:	00 80       	ld	r0, Z
    2b16:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b18:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b1a:	01 96       	adiw	r24, 0x01	; 1
    2b1c:	9d 87       	std	Y+13, r25	; 0x0d
    2b1e:	8c 87       	std	Y+12, r24	; 0x0c
    2b20:	ea 85       	ldd	r30, Y+10	; 0x0a
    2b22:	fb 85       	ldd	r31, Y+11	; 0x0b
    2b24:	00 82       	st	Z, r0
    2b26:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b28:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b2a:	01 96       	adiw	r24, 0x01	; 1
    2b2c:	9b 87       	std	Y+11, r25	; 0x0b
    2b2e:	8a 87       	std	Y+10, r24	; 0x0a
    2b30:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b32:	91 50       	subi	r25, 0x01	; 1
    2b34:	9e 87       	std	Y+14, r25	; 0x0e
    2b36:	ee 85       	ldd	r30, Y+14	; 0x0e
    2b38:	ee 23       	and	r30, r30
    2b3a:	51 f7       	brne	.-44     	; 0x2b10 <main+0x28>

	    /*Init Buzzer*/
	    BUZZER_init(PORTC_ID, PIN2_ID);
    2b3c:	82 e0       	ldi	r24, 0x02	; 2
    2b3e:	62 e0       	ldi	r22, 0x02	; 2
    2b40:	0e 94 a3 05 	call	0xb46	; 0xb46 <BUZZER_init>

	    /*DC - Motor Init*/
	    DC_MOTOR_Init();
    2b44:	0e 94 de 05 	call	0xbbc	; 0xbbc <DC_MOTOR_Init>

	    /*UART Init*/
	    UART_Init(&UART_Config_Struct);
    2b48:	ce 01       	movw	r24, r28
    2b4a:	01 96       	adiw	r24, 0x01	; 1
    2b4c:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <UART_Init>


	    /*Enable I-Bit*/
	    SET_BIT(SREG,7);
    2b50:	af e5       	ldi	r26, 0x5F	; 95
    2b52:	b0 e0       	ldi	r27, 0x00	; 0
    2b54:	ef e5       	ldi	r30, 0x5F	; 95
    2b56:	f0 e0       	ldi	r31, 0x00	; 0
    2b58:	80 81       	ld	r24, Z
    2b5a:	80 68       	ori	r24, 0x80	; 128
    2b5c:	8c 93       	st	X, r24


	while (1)
	{

		OPERATIONS_II_UART_HANDLE(&TIMER_Config_Struct);
    2b5e:	88 e6       	ldi	r24, 0x68	; 104
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	0e 94 c9 0a 	call	0x1592	; 0x1592 <OPERATIONS_II_UART_HANDLE>
    2b66:	fb cf       	rjmp	.-10     	; 0x2b5e <main+0x76>

00002b68 <__mulsi3>:
    2b68:	62 9f       	mul	r22, r18
    2b6a:	d0 01       	movw	r26, r0
    2b6c:	73 9f       	mul	r23, r19
    2b6e:	f0 01       	movw	r30, r0
    2b70:	82 9f       	mul	r24, r18
    2b72:	e0 0d       	add	r30, r0
    2b74:	f1 1d       	adc	r31, r1
    2b76:	64 9f       	mul	r22, r20
    2b78:	e0 0d       	add	r30, r0
    2b7a:	f1 1d       	adc	r31, r1
    2b7c:	92 9f       	mul	r25, r18
    2b7e:	f0 0d       	add	r31, r0
    2b80:	83 9f       	mul	r24, r19
    2b82:	f0 0d       	add	r31, r0
    2b84:	74 9f       	mul	r23, r20
    2b86:	f0 0d       	add	r31, r0
    2b88:	65 9f       	mul	r22, r21
    2b8a:	f0 0d       	add	r31, r0
    2b8c:	99 27       	eor	r25, r25
    2b8e:	72 9f       	mul	r23, r18
    2b90:	b0 0d       	add	r27, r0
    2b92:	e1 1d       	adc	r30, r1
    2b94:	f9 1f       	adc	r31, r25
    2b96:	63 9f       	mul	r22, r19
    2b98:	b0 0d       	add	r27, r0
    2b9a:	e1 1d       	adc	r30, r1
    2b9c:	f9 1f       	adc	r31, r25
    2b9e:	bd 01       	movw	r22, r26
    2ba0:	cf 01       	movw	r24, r30
    2ba2:	11 24       	eor	r1, r1
    2ba4:	08 95       	ret

00002ba6 <__divmodhi4>:
    2ba6:	97 fb       	bst	r25, 7
    2ba8:	09 2e       	mov	r0, r25
    2baa:	07 26       	eor	r0, r23
    2bac:	0a d0       	rcall	.+20     	; 0x2bc2 <__divmodhi4_neg1>
    2bae:	77 fd       	sbrc	r23, 7
    2bb0:	04 d0       	rcall	.+8      	; 0x2bba <__divmodhi4_neg2>
    2bb2:	27 d0       	rcall	.+78     	; 0x2c02 <__udivmodhi4>
    2bb4:	06 d0       	rcall	.+12     	; 0x2bc2 <__divmodhi4_neg1>
    2bb6:	00 20       	and	r0, r0
    2bb8:	1a f4       	brpl	.+6      	; 0x2bc0 <__divmodhi4_exit>

00002bba <__divmodhi4_neg2>:
    2bba:	70 95       	com	r23
    2bbc:	61 95       	neg	r22
    2bbe:	7f 4f       	sbci	r23, 0xFF	; 255

00002bc0 <__divmodhi4_exit>:
    2bc0:	08 95       	ret

00002bc2 <__divmodhi4_neg1>:
    2bc2:	f6 f7       	brtc	.-4      	; 0x2bc0 <__divmodhi4_exit>
    2bc4:	90 95       	com	r25
    2bc6:	81 95       	neg	r24
    2bc8:	9f 4f       	sbci	r25, 0xFF	; 255
    2bca:	08 95       	ret

00002bcc <__divmodsi4>:
    2bcc:	97 fb       	bst	r25, 7
    2bce:	09 2e       	mov	r0, r25
    2bd0:	05 26       	eor	r0, r21
    2bd2:	0e d0       	rcall	.+28     	; 0x2bf0 <__divmodsi4_neg1>
    2bd4:	57 fd       	sbrc	r21, 7
    2bd6:	04 d0       	rcall	.+8      	; 0x2be0 <__divmodsi4_neg2>
    2bd8:	28 d0       	rcall	.+80     	; 0x2c2a <__udivmodsi4>
    2bda:	0a d0       	rcall	.+20     	; 0x2bf0 <__divmodsi4_neg1>
    2bdc:	00 1c       	adc	r0, r0
    2bde:	38 f4       	brcc	.+14     	; 0x2bee <__divmodsi4_exit>

00002be0 <__divmodsi4_neg2>:
    2be0:	50 95       	com	r21
    2be2:	40 95       	com	r20
    2be4:	30 95       	com	r19
    2be6:	21 95       	neg	r18
    2be8:	3f 4f       	sbci	r19, 0xFF	; 255
    2bea:	4f 4f       	sbci	r20, 0xFF	; 255
    2bec:	5f 4f       	sbci	r21, 0xFF	; 255

00002bee <__divmodsi4_exit>:
    2bee:	08 95       	ret

00002bf0 <__divmodsi4_neg1>:
    2bf0:	f6 f7       	brtc	.-4      	; 0x2bee <__divmodsi4_exit>
    2bf2:	90 95       	com	r25
    2bf4:	80 95       	com	r24
    2bf6:	70 95       	com	r23
    2bf8:	61 95       	neg	r22
    2bfa:	7f 4f       	sbci	r23, 0xFF	; 255
    2bfc:	8f 4f       	sbci	r24, 0xFF	; 255
    2bfe:	9f 4f       	sbci	r25, 0xFF	; 255
    2c00:	08 95       	ret

00002c02 <__udivmodhi4>:
    2c02:	aa 1b       	sub	r26, r26
    2c04:	bb 1b       	sub	r27, r27
    2c06:	51 e1       	ldi	r21, 0x11	; 17
    2c08:	07 c0       	rjmp	.+14     	; 0x2c18 <__udivmodhi4_ep>

00002c0a <__udivmodhi4_loop>:
    2c0a:	aa 1f       	adc	r26, r26
    2c0c:	bb 1f       	adc	r27, r27
    2c0e:	a6 17       	cp	r26, r22
    2c10:	b7 07       	cpc	r27, r23
    2c12:	10 f0       	brcs	.+4      	; 0x2c18 <__udivmodhi4_ep>
    2c14:	a6 1b       	sub	r26, r22
    2c16:	b7 0b       	sbc	r27, r23

00002c18 <__udivmodhi4_ep>:
    2c18:	88 1f       	adc	r24, r24
    2c1a:	99 1f       	adc	r25, r25
    2c1c:	5a 95       	dec	r21
    2c1e:	a9 f7       	brne	.-22     	; 0x2c0a <__udivmodhi4_loop>
    2c20:	80 95       	com	r24
    2c22:	90 95       	com	r25
    2c24:	bc 01       	movw	r22, r24
    2c26:	cd 01       	movw	r24, r26
    2c28:	08 95       	ret

00002c2a <__udivmodsi4>:
    2c2a:	a1 e2       	ldi	r26, 0x21	; 33
    2c2c:	1a 2e       	mov	r1, r26
    2c2e:	aa 1b       	sub	r26, r26
    2c30:	bb 1b       	sub	r27, r27
    2c32:	fd 01       	movw	r30, r26
    2c34:	0d c0       	rjmp	.+26     	; 0x2c50 <__udivmodsi4_ep>

00002c36 <__udivmodsi4_loop>:
    2c36:	aa 1f       	adc	r26, r26
    2c38:	bb 1f       	adc	r27, r27
    2c3a:	ee 1f       	adc	r30, r30
    2c3c:	ff 1f       	adc	r31, r31
    2c3e:	a2 17       	cp	r26, r18
    2c40:	b3 07       	cpc	r27, r19
    2c42:	e4 07       	cpc	r30, r20
    2c44:	f5 07       	cpc	r31, r21
    2c46:	20 f0       	brcs	.+8      	; 0x2c50 <__udivmodsi4_ep>
    2c48:	a2 1b       	sub	r26, r18
    2c4a:	b3 0b       	sbc	r27, r19
    2c4c:	e4 0b       	sbc	r30, r20
    2c4e:	f5 0b       	sbc	r31, r21

00002c50 <__udivmodsi4_ep>:
    2c50:	66 1f       	adc	r22, r22
    2c52:	77 1f       	adc	r23, r23
    2c54:	88 1f       	adc	r24, r24
    2c56:	99 1f       	adc	r25, r25
    2c58:	1a 94       	dec	r1
    2c5a:	69 f7       	brne	.-38     	; 0x2c36 <__udivmodsi4_loop>
    2c5c:	60 95       	com	r22
    2c5e:	70 95       	com	r23
    2c60:	80 95       	com	r24
    2c62:	90 95       	com	r25
    2c64:	9b 01       	movw	r18, r22
    2c66:	ac 01       	movw	r20, r24
    2c68:	bd 01       	movw	r22, r26
    2c6a:	cf 01       	movw	r24, r30
    2c6c:	08 95       	ret

00002c6e <__prologue_saves__>:
    2c6e:	2f 92       	push	r2
    2c70:	3f 92       	push	r3
    2c72:	4f 92       	push	r4
    2c74:	5f 92       	push	r5
    2c76:	6f 92       	push	r6
    2c78:	7f 92       	push	r7
    2c7a:	8f 92       	push	r8
    2c7c:	9f 92       	push	r9
    2c7e:	af 92       	push	r10
    2c80:	bf 92       	push	r11
    2c82:	cf 92       	push	r12
    2c84:	df 92       	push	r13
    2c86:	ef 92       	push	r14
    2c88:	ff 92       	push	r15
    2c8a:	0f 93       	push	r16
    2c8c:	1f 93       	push	r17
    2c8e:	cf 93       	push	r28
    2c90:	df 93       	push	r29
    2c92:	cd b7       	in	r28, 0x3d	; 61
    2c94:	de b7       	in	r29, 0x3e	; 62
    2c96:	ca 1b       	sub	r28, r26
    2c98:	db 0b       	sbc	r29, r27
    2c9a:	0f b6       	in	r0, 0x3f	; 63
    2c9c:	f8 94       	cli
    2c9e:	de bf       	out	0x3e, r29	; 62
    2ca0:	0f be       	out	0x3f, r0	; 63
    2ca2:	cd bf       	out	0x3d, r28	; 61
    2ca4:	09 94       	ijmp

00002ca6 <__epilogue_restores__>:
    2ca6:	2a 88       	ldd	r2, Y+18	; 0x12
    2ca8:	39 88       	ldd	r3, Y+17	; 0x11
    2caa:	48 88       	ldd	r4, Y+16	; 0x10
    2cac:	5f 84       	ldd	r5, Y+15	; 0x0f
    2cae:	6e 84       	ldd	r6, Y+14	; 0x0e
    2cb0:	7d 84       	ldd	r7, Y+13	; 0x0d
    2cb2:	8c 84       	ldd	r8, Y+12	; 0x0c
    2cb4:	9b 84       	ldd	r9, Y+11	; 0x0b
    2cb6:	aa 84       	ldd	r10, Y+10	; 0x0a
    2cb8:	b9 84       	ldd	r11, Y+9	; 0x09
    2cba:	c8 84       	ldd	r12, Y+8	; 0x08
    2cbc:	df 80       	ldd	r13, Y+7	; 0x07
    2cbe:	ee 80       	ldd	r14, Y+6	; 0x06
    2cc0:	fd 80       	ldd	r15, Y+5	; 0x05
    2cc2:	0c 81       	ldd	r16, Y+4	; 0x04
    2cc4:	1b 81       	ldd	r17, Y+3	; 0x03
    2cc6:	aa 81       	ldd	r26, Y+2	; 0x02
    2cc8:	b9 81       	ldd	r27, Y+1	; 0x01
    2cca:	ce 0f       	add	r28, r30
    2ccc:	d1 1d       	adc	r29, r1
    2cce:	0f b6       	in	r0, 0x3f	; 63
    2cd0:	f8 94       	cli
    2cd2:	de bf       	out	0x3e, r29	; 62
    2cd4:	0f be       	out	0x3f, r0	; 63
    2cd6:	cd bf       	out	0x3d, r28	; 61
    2cd8:	ed 01       	movw	r28, r26
    2cda:	08 95       	ret

00002cdc <_exit>:
    2cdc:	f8 94       	cli

00002cde <__stop_program>:
    2cde:	ff cf       	rjmp	.-2      	; 0x2cde <__stop_program>
